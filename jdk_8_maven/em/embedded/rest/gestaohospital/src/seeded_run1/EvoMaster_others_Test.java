import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-01T00:06:07.307+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 44 tests
 * <br>
 * Covered targets: 720
 * <br>
 * Used time: 1h 0m 23s
 * <br>
 * Needed budget for current results: 92%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.br.com.codenation.hospital.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_hospitais = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Vgf\", " + 
                    " \"beds\": 133, " + 
                    " \"name\": \"M8mfMLSCUg\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("M8mfMLSCUg"))
                .body("'address'", containsString("Vgf"))
                .body("'beds'", numberMatches(133.0))
                .body("'availableBeds'", numberMatches(0.0))
                .body("'longitude'", containsString("8.6884161"))
                .body("'latitude'", containsString("50.1110494"));
        location_hospitais = "/v1/hospitais/" + "/" + res_0.extract().body().path("id").toString();
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": \"lvuz9x0At25T6MEn\", " + 
                    " \"productName\": \"_EM_30299_XYZ_\", " + 
                    " \"productType\": \"COMMON\" " + 
                    " } ")
                .post(resolveLocation(location_hospitais, baseUrlOfSut + "/v1/hospitais/Wsg8OSTjY8Jn/estoque"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'POST' not supported"))
                .body("'path'", containsString("/v1/hospitais//665a49c0747054491886a0a2"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"xrS\", " + 
                    " \"id\": \"_EM_30300_XYZ_\" " + 
                    " } ")
                .post(resolveLocation(location_hospitais, baseUrlOfSut + "/v1/hospitais/Wsg8OSTjY8Jn/estoque"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'POST' not supported"))
                .body("'path'", containsString("/v1/hospitais//665a49c0747054491886a0a2"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"availableBeds\": 33, " + 
                    " \"longitude\": \"_EM_30304_XYZ_\", " + 
                    " \"name\": \"_EM_30305_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_hospitais = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"xAe\", " + 
                    " \"availableBeds\": 319, " + 
                    " \"longitude\": \"_EM_24348_XYZ_\", " + 
                    " \"name\": \"_EM_24349_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_24349_XYZ_"))
                .body("'address'", containsString("xAe"))
                .body("'beds'", numberMatches(0.0))
                .body("'availableBeds'", numberMatches(319.0))
                .body("'longitude'", containsString("105.6509587"))
                .body("'latitude'", containsString("14.6156423"));
        location_hospitais = "/v1/hospitais/" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_hospitais, baseUrlOfSut + "/v1/hospitais/KqSQMxYJ"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Hospital apagado id: 665a49bb747054491886a09c"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"availableBeds\": 831, " + 
                    " \"beds\": 457 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_hospitais = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/v1/hospitais/GMKg")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"J\", " + 
                    " \"quantity\": 454 " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/GE5dWj/estoque/W15v?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"a\", " + 
                    " \"availableBeds\": 791, " + 
                    " \"name\": \"yZlyE79rPgWTI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("yZlyE79rPgWTI"))
                .body("'address'", containsString("a"))
                .body("'beds'", numberMatches(0.0))
                .body("'availableBeds'", numberMatches(791.0))
                .body("'longitude'", containsString("17.7578122"))
                .body("'latitude'", containsString("11.5024338"));
        location_hospitais = "/v1/hospitais/" + "/" + res_2.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" 902 ")
                .post(resolveLocation(location_hospitais, baseUrlOfSut + "/v1/hospitais/GYE9WUAl6v/transferencia/TNWWdN7?EMextraParam123=42"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/v1/hospitais//665a49c5747054491886a0a4/TNWWdN7"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2165_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/%5C9KBz/estoque/bW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/Y1%5Clv5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"7jbzHH3OfCNsec\" ")
                .post(baseUrlOfSut + "/v1/hospitais/_EM_4G_%5CNZF/pacientes/checkout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/hfrwyEO/pacientes/IsLi7qtTY3TF%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/QIMeCUBun%5CRHttl/pacientes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_7368_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"entryDate\": \"2043-12-10T03:33:-1\", " + 
                    " \"gender\": \"_EM_7363_XYZ_\", " + 
                    " \"id\": \"_EM_7364_XYZ_\", " + 
                    " \"location\": { " + 
                    " \"locationCategory\": \"PATIENT\" " + 
                    " }, " + 
                    " \"name\": \"Ysb2Qa\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/xfFwRJrjt7K/pacientes/checkin")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2043-12-10T03:33:-1\": not a valid representation (error: Failed to parse Date value '2043-12-10T03:33:-1': Cannot parse date \"2043-12-10T03:33:-1\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2043-12-10T03:33:-1\": not a valid representation (error: Failed to parse Date value '2043-12-10T03:33:-1': Cannot parse date \"2043-12-10T03:33:-1\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: br.com.codenation.hospital.domain.Patient[\"entryDate\"])"))
                .body("'path'", containsString("/v1/hospitais/xfFwRJrjt7K/pacientes/checkin"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/1/leitos?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Hospital não encontrado! ID:1"))
                .body("'path'", containsString("/v1/hospitais/1/leitos"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" 0 ")
                .post(baseUrlOfSut + "/v1/hospitais/null/transferencia/null?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Hospital não encontrado! ID:null"))
                .body("'path'", containsString("/v1/hospitais/null/transferencia/null"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/v1/hospitais/664fc6b65c7d2553809c67b1?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/v1/hospitais/1/estoque/664fc6af5c7d2553809c67a6?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/1/estoque?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_15_XYZ_/hospitaisProximos?raio=0.9840225882921698")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_21_XYZ_/proximidades")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": true, " + 
                    " \"birthDate\": \"2016-03-12T00:00:00\", " + 
                    " \"cpf\": \"foo\", " + 
                    " \"entryDate\": \"2016-03-12T00:00:00\", " + 
                    " \"exitDate\": \"2016-03-12T00:00:00\", " + 
                    " \"gender\": \"foo\", " + 
                    " \"id\": \"2\", " + 
                    " \"location\": { " + 
                    " \"id\": \"foo\", " + 
                    " \"location\": { " + 
                    " \"coordinates\": [], " + 
                    " \"type\": \"foo\", " + 
                    " \"x\": 0.0, " + 
                    " \"y\": 0.0 " + 
                    " }, " + 
                    " \"locationCategory\": \"EVOMASTER\", " + 
                    " \"name\": \"foo\", " + 
                    " \"position\": { " + 
                    " \"coordinates\": [], " + 
                    " \"type\": \"foo\", " + 
                    " \"x\": 0.0, " + 
                    " \"y\": 0.0 " + 
                    " }, " + 
                    " \"referenceId\": \"foo\" " + 
                    " }, " + 
                    " \"name\": \"foo\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/1/pacientes/2?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: (was java.lang.NullPointerException); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: br.com.codenation.hospital.domain.Patient[\"location\"]->br.com.codenation.hospital.domain.Location[\"location\"])"))
                .body("'path'", containsString("/v1/hospitais/1/pacientes/2"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_67_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"k3T9Yl\", " + 
                    " \"beds\": 372, " + 
                    " \"id\": \"_EM_62_XYZ_\", " + 
                    " \"name\": \"_EM_65_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/?EMextraParam123=_EM_66_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"foo\", " + 
                    " \"id\": \"664fc6af5c7d2553809c67a7\", " + 
                    " \"name\": \"foo\", " + 
                    " \"productName\": \"foo\", " + 
                    " \"productType\": \"BLOOD\", " + 
                    " \"quantity\": 0 " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/1/estoque/664fc6af5c7d2553809c67a7?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_1319_XYZ_\", " + 
                    " \"availableBeds\": 355, " + 
                    " \"beds\": 675, " + 
                    " \"latitude\": \"_EM_1321_XYZ_\", " + 
                    " \"longitude\": \"_EM_1820_XYZ_\", " + 
                    " \"name\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"foo\", " + 
                    " \"id\": \"1\", " + 
                    " \"name\": \"foo\", " + 
                    " \"productName\": \"foo\", " + 
                    " \"productType\": \"BLOOD\", " + 
                    " \"quantity\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/1/estoque?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Rua dos Novos, 1000\", " + 
                    " \"availableBeds\": 1077936133, " + 
                    " \"beds\": 0, " + 
                    " \"latitude\": \"foo\", " + 
                    " \"longitude\": \"_EM_3157_XYZ_\", " + 
                    " \"name\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/664fc6be5c7d2553809c67bd")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"5weUDF6\", " + 
                    " \"availableBeds\": 526, " + 
                    " \"beds\": -1838323886, " + 
                    " \"name\": \"_EM_3040_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"\", " + 
                    " \"availableBeds\": 1131, " + 
                    " \"beds\": 163, " + 
                    " \"latitude\": \"_EM_1716_XYZ_\", " + 
                    " \"longitude\": \"_EM_1717_XYZ_\", " + 
                    " \"name\": \"_EM_1718_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"\", " + 
                    " \"availableBeds\": 0, " + 
                    " \"beds\": 1054, " + 
                    " \"longitude\": \"_EM_4275_XYZ_\", " + 
                    " \"name\": \"q\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/a1yHKJ")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_679_XYZ_\", " + 
                    " \"availableBeds\": -16776893, " + 
                    " \"beds\": 524303, " + 
                    " \"latitude\": \"bcumV\", " + 
                    " \"name\": \"_EM_487_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_3158_XYZ_\", " + 
                    " \"availableBeds\": -16777206, " + 
                    " \"beds\": -128, " + 
                    " \"latitude\": \"foo\", " + 
                    " \"longitude\": \"foo\", " + 
                    " \"name\": \"_EM_1867_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/_EM_2634_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Rua dos Novos, 1000\", " + 
                    " \"availableBeds\": -16777206, " + 
                    " \"beds\": 0, " + 
                    " \"latitude\": \"foo\", " + 
                    " \"longitude\": \"foo\", " + 
                    " \"name\": \"_EM_1867_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/664fc6be5c7d2553809c67bd?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Rua dos Novos, 1000\", " + 
                    " \"availableBeds\": 10, " + 
                    " \"beds\": 10, " + 
                    " \"name\": \"Hospital Novo\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/664fc6be5c7d2553809c67bd?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_361_XYZ_\", " + 
                    " \"longitude\": \"_EM_363_XYZ_\", " + 
                    " \"name\": \"_EM_364_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/1/pacientes/2?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/1/pacientes?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/664fc6c05c7d2553809c67bf?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"1\" ")
                .post(baseUrlOfSut + "/v1/hospitais/1/pacientes/checkout?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4875_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/;/leitos?EMextraParam123=_EM_4874_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/;UT_mZz/hospitaisProximos?raio=-223.47460733431254")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/1/estoque/0?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_484_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"birthDate\": \"1922-00-01T11:49:35\", " + 
                    " \"entryDate\": \"2074-04-11T18:44:16\", " + 
                    " \"exitDate\": \"2100-05-07T13:21:51\", " + 
                    " \"gender\": \"_EM_477_XYZ_\", " + 
                    " \"name\": \"FdBlh_HggI\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/_EM_475_XYZ_/pacientes/_EM_678_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": false, " + 
                    " \"birthDate\": \"1954-03-03T01:27:22\", " + 
                    " \"id\": \"_EM_368_XYZ_\", " + 
                    " \"name\": \"_EM_374_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/_EM_365_XYZ_/pacientes/checkin")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": false, " + 
                    " \"birthDate\": \"2016-03-12T00:00:00\", " + 
                    " \"cpf\": \"cpf\", " + 
                    " \"gender\": \"sexo\", " + 
                    " \"name\": \"nome\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/1/pacientes/checkin?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/hospitais/maisProximo?" + 
                    "lat=50.0&" + 
                    "lon=50.0&" + 
                    "raioMaximo=50000.0&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Nenhum hospital próximo com vagas encontrado!"))
                .body("'path'", containsString("/v1/hospitais/maisProximo"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": true, " + 
                    " \"birthDate\": \"1954-09-26T13:01:37\", " + 
                    " \"cpf\": \"_EM_36_XYZ_\", " + 
                    " \"exitDate\": \"2097-07-32T24:60:51\", " + 
                    " \"gender\": \"_EM_528_XYZ_\", " + 
                    " \"location\": { " + 
                    " \"id\": \"_EM_529_XYZ_\", " + 
                    " \"location\": { " + 
                    " \"x\": 0.9995001432032969, " + 
                    " \"y\": 0.9855007915148916 " + 
                    " }, " + 
                    " \"locationCategory\": \"HOSPITAL\", " + 
                    " \"name\": \"_EM_41_XYZ_\", " + 
                    " \"position\": { " + 
                    " \"type\": \"_EM_42_XYZ_\", " + 
                    " \"x\": 0.19110959146837614, " + 
                    " \"y\": 1.3979918906524007 " + 
                    " }, " + 
                    " \"referenceId\": \"UT8Y1dZ4j\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/hospitais/BGTn2G7X0Eabkh/pacientes/checkin?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"_EM_14210_XYZ_\", " + 
                    " \"id\": \"_EM_7255_XYZ_\", " + 
                    " \"name\": \"L1_kml\", " + 
                    " \"productName\": \"_EM_14893_XYZ_\", " + 
                    " \"productType\": \"COMMON\", " + 
                    " \"quantity\": -1814610365 " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/aVcGwToE5AODiyp/estoque/;KWHZF8Y")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/v1/hospitais/aVcGwToE5AODiyp/estoque/;KWHZF8Y"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/v1/hospitais/y2ZwYa3udxDkQ/estoque/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'DELETE' not supported"))
                .body("'path'", containsString("/v1/hospitais/y2ZwYa3udxDkQ/estoque/;"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }


}
