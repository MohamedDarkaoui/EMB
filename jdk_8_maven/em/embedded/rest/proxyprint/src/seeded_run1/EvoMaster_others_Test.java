import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-31T18:57:15.590+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 115 tests
 * <br>
 * Covered targets: 352
 * <br>
 * Used time: 0h 10m 24s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"integerPart\": 477, " + 
                    " \"moneyAsDouble\": 0.8184317079468713 " + 
                    " }, " + 
                    " \"id\": 956, " + 
                    " \"roles\": { " + 
                    " \"_EM_422_XYZ_\": \"_EM_423_XYZ_\", " + 
                    " \"_EM_424_XYZ_\": \"RxMuD3\" " + 
                    " }, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_425_XYZ_\", " + 
                    " \"_EM_426_XYZ_\", " + 
                    " \"_EM_427_XYZ_\", " + 
                    " \"_EM_428_XYZ_\", " + 
                    " \"_EM_429_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@48542b33; line: 1, column: 87] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@48542b33; line: 1, column: 87] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"managerName\": \"_EM_443_XYZ_\", " + 
                    " \"managerPassword\": \"Y9UgwBNChczxLSg9\", " + 
                    " \"managerUsername\": \"jWy2S9qu3RHy1J\", " + 
                    " \"pShopDateRequest\": \"_EM_445_XYZ_\", " + 
                    " \"pShopDateRequestAccepted\": \"_EM_446_XYZ_\", " + 
                    " \"pShopNIF\": \"_EM_447_XYZ_\", " + 
                    " \"pShopName\": \"_EM_448_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_446_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_446_XYZ_': Can not parse date \"_EM_446_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@55d05d3d; line: 1, column: 168] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"]); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_446_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_446_XYZ_': Can not parse date \"_EM_446_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@55d05d3d; line: 1, column: 168] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"])"))
                .body("'path'", containsString("/request/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_1307_XYZ_\", " + 
                    " \"fractionalPart\": 977, " + 
                    " \"integerPart\": 825, " + 
                    " \"moneyAsDouble\": 0.6184116665694505 " + 
                    " }, " + 
                    " \"roles\": { " + 
                    " \"_EM_1308_XYZ_\": \"_EM_1309_XYZ_\", " + 
                    " \"yZeOPKgjkMk8xXG\": \"_EM_1310_XYZ_\", " + 
                    " \"_EM_1311_XYZ_\": \"q5tSekhId\" " + 
                    " }, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_1312_XYZ_\", " + 
                    " \"_EM_1313_XYZ_\", " + 
                    " \"_EM_1314_XYZ_\", " + 
                    " \"_EM_1315_XYZ_\" " + 
                    " ], " + 
                    " \"username\": \"ZmvkRLi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@419c9082; line: 1, column: 127] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@419c9082; line: 1, column: 127] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/request/accept/3?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/accept/3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/requests/pending?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/requests/pending"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/8/employees?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/8/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/389?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests/cancel/389"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/-1418100099845219172/printingschemas/416?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/-1418100099845219172/printingschemas/416"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .delete(baseUrlOfSut + "/printshops/-1324330098/employees/635")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-1324330098/employees/635"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/430/reviews/588?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/430/reviews/588"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/consumer/134/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/134/printingschemas"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_8_XYZ_/notifications?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/_EM_8_XYZ_/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/printshops/requests/694?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/694"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/271/pricetable")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/271/pricetable"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/562323144/reviews?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/562323144/reviews"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/admin/printshops"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/api/secured"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/balance"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=_EM_24_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/satisfied"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_41_XYZ_")
                .get(baseUrlOfSut + "/documents/500")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/documents/500"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/notifications/239?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/239"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/history"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests?EMextraParam123=_EM_49_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=_EM_51_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/satisfied"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_54_XYZ_")
                .get(baseUrlOfSut + "/printshops/stats?EMextraParam123=_EM_53_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/stats"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshop"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_67_XYZ_")
                .post(baseUrlOfSut + "/consumer/printrequest/526/submit?EMextraParam123=_EM_66_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/printrequest/526/submit"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_70_XYZ_\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/-349670474")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/cancel/-349670474"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/612/budget?EMextraParam123=_EM_111_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printdocument/612/budget"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_114_XYZ_")
                .post(baseUrlOfSut + "/printshops/requests/1232020017?EMextraParam123=_EM_113_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/1232020017"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_EM_115_XYZ_\": \"_EM_116_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/475/reviews?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/475/reviews"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_119_XYZ_")
                .post(baseUrlOfSut + "/printshops/178/employees?EMextraParam123=_EM_118_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/178/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_122_XYZ_\" ")
                .post(baseUrlOfSut + "/request/reject/-234483019453770627")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/reject/-234483019453770627"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_184_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/-1053502743/pricetable/editstapling")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-1053502743/pricetable/editstapling"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_187_XYZ_")
                .put(baseUrlOfSut + "/printshops/157/reviews/174?EMextraParam123=_EM_186_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/157/reviews/174"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info/update"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/w/notifications?EMextraParam123=_EM_190_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/w/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_192_XYZ_")
                .put(baseUrlOfSut + "/printshops/602/employees")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/602/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/913")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/913"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_106_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"paperSpecs\": \"_EM_104_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/558/printingschemas")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/558/printingschemas"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_164_XYZ_\", " + 
                    " \"paperSpecs\": \"_EM_167_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/831/printingschemas/276")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/831/printingschemas/276"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_75_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_73_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/803/pricetable/covers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/803/pricetable/covers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_76_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1251029200/pricetable/deletecover")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-1251029200/pricetable/deletecover"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_170_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/348/pricetable/covers?EMextraParam123=_EM_173_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/348/pricetable/covers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_180_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 293, " + 
                    " \"priceA4DUPLEX\": \"_EM_177_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/510/pricetable/papers?EMextraParam123=_EM_179_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/510/pricetable/papers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 555, " + 
                    " \"ringType\": \"f75\", " + 
                    " \"supLim\": 755 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/331/pricetable/rings?EMextraParam123=_EM_182_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/331/pricetable/rings"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 800, " + 
                    " \"priceA3DUPLEX\": \"_EM_81_XYZ_\", " + 
                    " \"priceA3SIMPLEX\": \"_EM_82_XYZ_\", " + 
                    " \"supLim\": -923200664 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/170/pricetable/deletepaper")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/170/pricetable/deletepaper"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_90_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 72, " + 
                    " \"price\": \"_EM_87_XYZ_\", " + 
                    " \"ringType\": \"_EM_88_XYZ_\", " + 
                    " \"supLim\": 968 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/519/pricetable/deletering")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/519/pricetable/deletering"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_96_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3SIMPLEX\": \"_EM_93_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_94_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_95_XYZ_\", " + 
                    " \"supLim\": 945 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-8999867822403835627/pricetable/papers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-8999867822403835627/pricetable/papers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 890, " + 
                    " \"price\": \"_EM_97_XYZ_\", " + 
                    " \"ringType\": \"_EM_98_XYZ_\", " + 
                    " \"supLim\": 813 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/31/pricetable/rings?EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/31/pricetable/rings"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/511?EMextraParam123=_EM_307_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/511"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/282/printingschemas/402")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/282/printingschemas/402"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/-1558609035/employees/496")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1558609035/employees/496"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_313_XYZ_")
                .delete(baseUrlOfSut + "/printshops/362/reviews/492?EMextraParam123=_EM_312_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/362/reviews/492"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_315_XYZ_")
                .get(baseUrlOfSut + "/consumer/689/printingschemas?EMextraParam123=_EM_314_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/689/printingschemas"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/r3X0FuG/notifications?EMextraParam123=_EM_316_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/r3X0FuG/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/981")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/981"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_321_XYZ_")
                .get(baseUrlOfSut + "/printshops/205/pricetable")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/205/pricetable"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/983/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/983/reviews"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_325_XYZ_")
                .get(baseUrlOfSut + "/printshops/-1490186605806933629/employees?EMextraParam123=_EM_324_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1490186605806933629/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_328_XYZ_")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=_EM_327_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=_EM_331_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/notifications/361")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/361"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop?EMextraParam123=_EM_364_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/602/submit?EMextraParam123=_EM_369_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/602/submit"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"3\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/3")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_410_XYZ_")
                .post(baseUrlOfSut + "/printshops/requests/291")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/291"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_415_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"aXsXryihxd5\": \"_EM_411_XYZ_\", " + 
                    " \"_EM_412_XYZ_\": \"flOkrtNdFKv1FMu\", " + 
                    " \"_EM_413_XYZ_\": \"9cjAc0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-2083719854172016193/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-2083719854172016193/reviews"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_416_XYZ_")
                .post(baseUrlOfSut + "/printshops/464/employees?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/464/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_474_XYZ_")
                .contentType("application/json")
                .body(" \"750\" ")
                .put(baseUrlOfSut + "/printshops/750/pricetable/editstapling")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/750/pricetable/editstapling"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_479_XYZ_")
                .put(baseUrlOfSut + "/consumer/_EM_477_XYZ_/notifications?EMextraParam123=_EM_478_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/_EM_477_XYZ_/notifications"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_481_XYZ_")
                .put(baseUrlOfSut + "/printshops/453/employees?EMextraParam123=_EM_480_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/453/employees"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/-2584033279564288200")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-2584033279564288200"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "ra55oRGaZePNW2eo")
                .get(baseUrlOfSut + "/printshops/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/satisfied"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_400_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/840/printingschemas?EMextraParam123=_EM_403_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/840/printingschemas"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=_EM_610_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/902?EMextraParam123=_EM_700_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/902"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"_EM_453_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"id\": 89, " + 
                    " \"name\": \"_EM_454_XYZ_\", " + 
                    " \"paperSpecs\": \"_EM_455_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/714/printingschemas/89?EMextraParam123=_EM_456_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/714/printingschemas/89"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_399_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 38, " + 
                    " \"ringType\": \"_EM_397_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/759/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/759/pricetable/rings"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_461_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_458_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/652603324389790677/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/652603324389790677/pricetable/covers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"_EM_469_XYZ_\", " + 
                    " \"supLim\": 638 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-113922071/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-113922071/pricetable/rings"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_379_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_375_XYZ_\", " + 
                    " \"priceA3\": \"_EM_376_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/212/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/212/pricetable/covers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_462_XYZ_\", " + 
                    " \"infLim\": 209, " + 
                    " \"priceA3DUPLEX\": \"_EM_463_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_466_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/611/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/611/pricetable/papers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 318, " + 
                    " \"priceA3DUPLEX\": \"2opnGa9SRrhRQaf\", " + 
                    " \"priceA4DUPLEX\": \"_EM_1449_XYZ_\", " + 
                    " \"supLim\": 532284627 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/119/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/119/pricetable/papers"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_392_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 260, " + 
                    " \"price\": \"_EM_389_XYZ_\", " + 
                    " \"ringType\": \"_EM_390_XYZ_\", " + 
                    " \"supLim\": 887 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/4650206903983496066/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/4650206903983496066/pricetable/deletering"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_384_XYZ_\", " + 
                    " \"infLim\": 951, " + 
                    " \"priceA3SIMPLEX\": \"_EM_386_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"1x1R1mRv8CN\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_387_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/991/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/991/pricetable/deletepaper"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "qh")
                .put(baseUrlOfSut + "/printshops/280/reviews/277?" + 
                    "latitude=&" + 
                    "longitude=PfmRsuIY")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/280/reviews/277"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "qh")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"90\" ")
                .post(baseUrlOfSut + "/request/reject/90")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/90"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/5307635797378170844")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/5307635797378170844"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printdocument/908/budget?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/908/budget"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_EM_1412_XYZ_\", " + 
                    " \"priceA4\": \"_EM_1413_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1581885833/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1581885833/pricetable/deletecover"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_32_XYZ_")
                .get(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_193_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_608_XYZ_")
                .get(baseUrlOfSut + "/printshops/726/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_110() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/246/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_111() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_748_XYZ_")
                .put(baseUrlOfSut + "/printshops/105/reviews/980?EMextraParam123=_EM_747_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_112() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_600_XYZ_")
                .delete(baseUrlOfSut + "/printshops/982/reviews/747?EMextraParam123=_EM_599_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_113() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-1581885833")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_114() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/8260448587460787506")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
