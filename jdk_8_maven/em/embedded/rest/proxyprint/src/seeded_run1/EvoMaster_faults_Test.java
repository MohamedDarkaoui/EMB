import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-31T18:57:15.499+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 37 tests
 * <br>
 * Covered targets: 835
 * <br>
 * Used time: 0h 10m 24s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"_EM_144_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500) // framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/758/notify")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/758/notify"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/104?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/104"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_161_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1099764411, " + 
                    " \"managerPassword\": \"_EM_153_XYZ_\", " + 
                    " \"managerUsername\": \"_EM_154_XYZ_\", " + 
                    " \"pShopAddress\": \"_EM_155_XYZ_\", " + 
                    " \"pShopLatitude\": 0.7330712919355352, " + 
                    " \"pShopLongitude\": 0.6230407525870482 " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"fractionalPart\": 454, " + 
                    " \"integerPart\": 438, " + 
                    " \"valid\": false " + 
                    " }, " + 
                    " \"email\": \"o\", " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_294_XYZ_\", " + 
                    " \"_EM_295_XYZ_\", " + 
                    " \"_EM_296_XYZ_\" " + 
                    " ], " + 
                    " \"username\": \"_EM_297_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_437_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"_EM_435_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/578/printingschemas?EMextraParam123=_EM_601_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/578/printingschemas"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/_EM_602_XYZ_/notifications?EMextraParam123=_EM_603_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_602_XYZ_/notifications"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_751_XYZ_/notifications?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_751_XYZ_/notifications"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_597_XYZ_")
                .delete(baseUrlOfSut + "/consumer/966/printingschemas/491?EMextraParam123=_EM_596_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/966/printingschemas/491"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_633_XYZ_")
                .delete(baseUrlOfSut + "/notifications/628")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/utils/NotificationManager_82_removeNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.EmptyResultDataAccessException"))
                .body("'message'", containsString("No class io.github.proxyprint.kitchen.models.notifications.Notification entity with id 628 exists!"))
                .body("'path'", containsString("/notifications/628"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 204, 403).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/66")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/utils/NotificationManager_87_readNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/notifications/66"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/475/budget?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_328_calcBudgetForPrintRecipe
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printdocument/475/budget"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/register?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_732_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"j2To0hKBOG9\", " + 
                    " \"coverSpecs\": \"_EM_729_XYZ_\", " + 
                    " \"id\": 273 " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/594/printingschemas/273")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/594/printingschemas/273"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_684_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_685_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"id\": 393, " + 
                    " \"name\": \"_EM_686_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/393/printingschemas")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/393/printingschemas"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_811_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_812_XYZ_\", " + 
                    " \"id\": 428, " + 
                    " \"name\": \"_EM_813_XYZ_\", " + 
                    " \"paperSpecs\": \"_EM_814_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/387/printingschemas")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/387/printingschemas"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/requests/464")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_252_getPrintShopRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/464"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_882_XYZ_")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_311_getPrintShopHistoryRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/history"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_283_getPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=_EM_885_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_338_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/satisfied"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_900_XYZ_\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/377?EMextraParam123=_EM_901_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_365_cancelPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/cancel/377"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_22_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/258")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/258"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_23_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/1538327504/submit")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/1538327504/submit"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_24_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_24_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/149?" + 
                    "charset=_EM_1453_XYZ_&" + 
                    "txn_type=_EM_1455_XYZ_&" + 
                    "transaction_type=H3MXJN&" + 
                    "mc_gross=wPb")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"wPb\""))
                .body("'path'", containsString("/paypal/ipn/149"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_25_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_25_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"ZmvkRLi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_26_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_26_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_27_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_27_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?" + 
                    "latitude=_EM_1409_XYZ_&" + 
                    "longitude=nKZ5AqhyhNK")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_97_getNearestPrintShops
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"_EM_1409_XYZ_\""))
                .body("'path'", containsString("/printshops/nearest"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_28_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_28_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/346?" + 
                    "charset=T&" + 
                    "payer_email=vkEvu9Og&" + 
                    "txn_type=zgsiyH&" + 
                    "transaction_type=UdYlH&" + 
                    "mc_gross=8SI")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"8SI\""))
                .body("'path'", containsString("/paypal/ipn/consumer/346"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_29_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_29_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1365L)
                .d("ADDRESS", "\"Q9VT5LhDZmu\"")
                .d("AVG_RATING", "0.2406622283498585")
                .d("BALANCE_CURRENCY", "\"cpBtnlPtGHp\"")
                .d("BALANCE_FRACTIONAL_PART", "244")
                .d("BALANCE_INTEGER_PART", "793")
                .d("LATITUDE", "0.5418001275846236")
                .d("LOGO", "\"CB_fA_6E0VR8\"")
                .d("LONGITUDE", "0.27627388810849995")
                .d("NAME", "\"Wg8e99EiN8Q1rRo\"")
                .d("NIF", "\"D2yj\"")
            .and().insertInto("PRINTSHOPS", 1366L)
                .d("ADDRESS", "\"olkutVZwkA\"")
                .d("AVG_RATING", "0.06227425253051455")
                .d("BALANCE_CURRENCY", "\"_G5o0Rt7C8\"")
                .d("BALANCE_FRACTIONAL_PART", "836")
                .d("BALANCE_INTEGER_PART", "848")
                .d("LATITUDE", "0.5807376927813637")
                .d("LOGO", "\"Oai6cB\"")
                .d("LONGITUDE", "0.870247934759093")
                .d("NAME", "\"u0\"")
                .d("NIF", "\"44KzaoucI4x\"")
            .and().insertInto("PRINTSHOPS", 1367L)
                .d("ADDRESS", "\"G9iHXvbaA\"")
                .d("AVG_RATING", "0.499124111363361")
                .d("BALANCE_CURRENCY", "\"ReNCWWkw\"")
                .d("BALANCE_FRACTIONAL_PART", "440")
                .d("BALANCE_INTEGER_PART", "230")
                .d("LATITUDE", "0.2391324864136809")
                .d("LOGO", "\"CoQH81BGs9Kg8\"")
                .d("LONGITUDE", "0.46883474463245367")
                .d("NAME", "\"E\"")
                .d("NIF", "\"ogOSC6gqbQ8uqn1\"")
            .and().insertInto("PRINTSHOPS", 1368L)
                .d("ADDRESS", "\"OEFxnh_KkFyuB3\"")
                .d("AVG_RATING", "0.9496091838763075")
                .d("BALANCE_CURRENCY", "\"JAqKYc4cMQ6\"")
                .d("BALANCE_FRACTIONAL_PART", "792")
                .d("BALANCE_INTEGER_PART", "13")
                .d("LATITUDE", "0.8812810336968855")
                .d("LOGO", "\"2N1I3JyJKsb\"")
                .d("LONGITUDE", "0.3809420152568771")
                .d("NAME", "\"tDO8kv4fVek_e\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 1936L)
                .d("PASSWORD", "\"6jpqRwzC2_0o\"")
                .d("USERNAME", "\"JSikWo5a4e\"")
            .and().insertInto("CONSUMERS", 1935L)
                .d("BALANCE_CURRENCY", "\"W4rc\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "560")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"hUxG65xZRbQD2lLW\"")
                .d("NAME", "\"WTel\"")
                .d("ID", "12")
            .and().insertInto("USERS", 1938L)
                .d("PASSWORD", "\"CiKSYKDFq\"")
                .d("USERNAME", "\"37aS4p0Q88W\"")
            .and().insertInto("CONSUMERS", 1937L)
                .d("BALANCE_CURRENCY", "\"_kwhHBE\"")
                .d("BALANCE_FRACTIONAL_PART", "337")
                .d("BALANCE_INTEGER_PART", "796")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"yTgovQ\"")
                .d("LONGITUDE", "\"IZV8scG1Y\"")
                .d("NAME", "\"8d6HTXbYi4Chf\"")
                .d("ID", "10")
            .and().insertInto("USERS", 1940L)
                .d("PASSWORD", "\"rp9gp\"")
                .d("USERNAME", "\"_\"")
            .and().insertInto("CONSUMERS", 1939L)
                .d("BALANCE_CURRENCY", "\"mi4Ys\"")
                .d("BALANCE_FRACTIONAL_PART", "683")
                .d("BALANCE_INTEGER_PART", "566")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"BWTzxlA_QY\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YkxuAcE\"")
                .d("ID", "15")
            .and().insertInto("USERS", 1942L)
                .d("PASSWORD", "\"5iAiWkh8YkPgZ\"")
                .d("USERNAME", "\"XG8Kg\"")
            .and().insertInto("CONSUMERS", 1941L)
                .d("BALANCE_CURRENCY", "\"wVlAwBvtOn1iz\"")
                .d("BALANCE_FRACTIONAL_PART", "36")
                .d("BALANCE_INTEGER_PART", "49")
                .d("EMAIL", "\"6RbJNK5XCDMcQ\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"mHSTLvoYGNdHDU\"")
                .d("NAME", "\"obx0MXh\"")
                .d("ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_30_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_30_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/useed"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_31_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_31_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?" + 
                    "password=meiMXETks9WEV&" + 
                    "username=_EM_1381_XYZ_")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/DefaultController_101_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/login"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_32_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_32_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_EM_831_XYZ_\": \"_EM_832_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/5/reviews?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/ReviewController_93_addPrintShopReview
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("null"))
                .body("'path'", containsString("/printshops/5/reviews"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_33_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_33_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/90")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/90"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_34_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_34_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_110_XYZ_")
                .post(baseUrlOfSut + "/paypal/ipn/90?" + 
                    "EMextraParam123=_EM_109_XYZ_&" + 
                    "charset=ultV&" + 
                    "payer_email=&" + 
                    "txn_type=48rZWtN&" + 
                    "transaction_type=uFEZn")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/90"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_35_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_35_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_36_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_36_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/seed?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
