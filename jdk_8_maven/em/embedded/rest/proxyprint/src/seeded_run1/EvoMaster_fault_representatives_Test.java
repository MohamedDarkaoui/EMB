import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-31T18:57:15.645+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 392
 * <br>
 * Used time: 0h 10m 24s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_161_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1099764411, " + 
                    " \"managerPassword\": \"_EM_153_XYZ_\", " + 
                    " \"managerUsername\": \"_EM_154_XYZ_\", " + 
                    " \"pShopAddress\": \"_EM_155_XYZ_\", " + 
                    " \"pShopLatitude\": 0.7330712919355352, " + 
                    " \"pShopLongitude\": 0.6230407525870482 " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/346?" + 
                    "charset=T&" + 
                    "payer_email=vkEvu9Og&" + 
                    "txn_type=zgsiyH&" + 
                    "transaction_type=UdYlH&" + 
                    "mc_gross=8SI")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"8SI\""))
                .body("'path'", containsString("/paypal/ipn/consumer/346"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/seed?EMextraParam123=42")
                .then()
                .statusCode(500) // io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"managerName\": \"_EM_443_XYZ_\", " + 
                    " \"managerPassword\": \"Y9UgwBNChczxLSg9\", " + 
                    " \"managerUsername\": \"jWy2S9qu3RHy1J\", " + 
                    " \"pShopDateRequest\": \"_EM_445_XYZ_\", " + 
                    " \"pShopDateRequestAccepted\": \"_EM_446_XYZ_\", " + 
                    " \"pShopNIF\": \"_EM_447_XYZ_\", " + 
                    " \"pShopName\": \"_EM_448_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_446_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_446_XYZ_': Can not parse date \"_EM_446_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@55d05d3d; line: 1, column: 168] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"]); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_446_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_446_XYZ_': Can not parse date \"_EM_446_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@55d05d3d; line: 1, column: 168] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"])"))
                .body("'path'", containsString("/request/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
