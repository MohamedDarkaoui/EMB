import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-31T18:57:15.545+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 49 tests
 * <br>
 * Covered targets: 1192
 * <br>
 * Used time: 0h 10m 24s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_36_XYZ_")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_48_XYZ_")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/login?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"managerEmail\": \"proxyprint.pt.printshop@gmail.com\", " + 
                    " \"managerName\": \"manager\", " + 
                    " \"managerPassword\": \"1234\", " + 
                    " \"managerUsername\": \"manager\", " + 
                    " \"pShopAddress\": \"address\", " + 
                    " \"pShopDateRequest\": \"31/05/2024 05:54\", " + 
                    " \"pShopLatitude\": 45.0, " + 
                    " \"pShopLongitude\": 32.0, " + 
                    " \"pShopNIF\": \"NIF\", " + 
                    " \"pShopName\": \"name\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'managerName'", containsString("manager"))
                .body("'managerUsername'", containsString("manager"))
                .body("'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("'managerPassword'", containsString("1234"))
                .body("'pShopAddress'", containsString("address"))
                .body("'pShopLatitude'", numberMatches(45.0))
                .body("'pShopLongitude'", numberMatches(32.0))
                .body("'pShopNIF'", containsString("NIF"))
                .body("'pShopName'", containsString("name"))
                .body("'pShopDateRequest'", containsString("31/05/2024 05:54"))
                .body("'pShopDateRequestAccepted'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=_EM_611_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Se estiveres autenticado, podes ver isto!\"}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=_EM_616_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_418_XYZ_")
                .post(baseUrlOfSut + "/request/accept/443?EMextraParam123=_EM_417_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-7604776827511609825\" ")
                .post(baseUrlOfSut + "/request/reject/-7604776827511609825")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_595_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/120?EMextraParam123=_EM_594_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1365L)
                .d("ADDRESS", "\"Q9VT5LhDZmu\"")
                .d("AVG_RATING", "0.2406622283498585")
                .d("BALANCE_CURRENCY", "\"cpBtnlPtGHp\"")
                .d("BALANCE_FRACTIONAL_PART", "244")
                .d("BALANCE_INTEGER_PART", "793")
                .d("LATITUDE", "0.5418001275846236")
                .d("LOGO", "\"CB_fA_6E0VR8\"")
                .d("LONGITUDE", "0.27627388810849995")
                .d("NAME", "\"Wg8e99EiN8Q1rRo\"")
                .d("NIF", "\"D2yj\"")
            .and().insertInto("PRINTSHOPS", 1366L)
                .d("ADDRESS", "\"olkutVZwkA\"")
                .d("AVG_RATING", "0.06227425253051455")
                .d("BALANCE_CURRENCY", "\"_G5o0Rt7C8\"")
                .d("BALANCE_FRACTIONAL_PART", "836")
                .d("BALANCE_INTEGER_PART", "848")
                .d("LATITUDE", "0.5807376927813637")
                .d("LOGO", "\"Oai6cB\"")
                .d("LONGITUDE", "0.870247934759093")
                .d("NAME", "\"u0\"")
                .d("NIF", "\"44KzaoucI4x\"")
            .and().insertInto("PRINTSHOPS", 1367L)
                .d("ADDRESS", "\"G9iHXvbaA\"")
                .d("AVG_RATING", "0.499124111363361")
                .d("BALANCE_CURRENCY", "\"ReNCWWkw\"")
                .d("BALANCE_FRACTIONAL_PART", "440")
                .d("BALANCE_INTEGER_PART", "230")
                .d("LATITUDE", "0.2391324864136809")
                .d("LOGO", "\"CoQH81BGs9Kg8\"")
                .d("LONGITUDE", "0.46883474463245367")
                .d("NAME", "\"E\"")
                .d("NIF", "\"ogOSC6gqbQ8uqn1\"")
            .and().insertInto("PRINTSHOPS", 1368L)
                .d("ADDRESS", "\"OEFxnh_KkFyuB3\"")
                .d("AVG_RATING", "0.9496091838763075")
                .d("BALANCE_CURRENCY", "\"JAqKYc4cMQ6\"")
                .d("BALANCE_FRACTIONAL_PART", "792")
                .d("BALANCE_INTEGER_PART", "13")
                .d("LATITUDE", "0.8812810336968855")
                .d("LOGO", "\"2N1I3JyJKsb\"")
                .d("LONGITUDE", "0.3809420152568771")
                .d("NAME", "\"tDO8kv4fVek_e\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 1936L)
                .d("PASSWORD", "\"6jpqRwzC2_0o\"")
                .d("USERNAME", "\"JSikWo5a4e\"")
            .and().insertInto("CONSUMERS", 1935L)
                .d("BALANCE_CURRENCY", "\"W4rc\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "560")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"hUxG65xZRbQD2lLW\"")
                .d("NAME", "\"WTel\"")
                .d("ID", "12")
            .and().insertInto("USERS", 1938L)
                .d("PASSWORD", "\"CiKSYKDFq\"")
                .d("USERNAME", "\"37aS4p0Q88W\"")
            .and().insertInto("CONSUMERS", 1937L)
                .d("BALANCE_CURRENCY", "\"_kwhHBE\"")
                .d("BALANCE_FRACTIONAL_PART", "337")
                .d("BALANCE_INTEGER_PART", "796")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"yTgovQ\"")
                .d("LONGITUDE", "\"IZV8scG1Y\"")
                .d("NAME", "\"8d6HTXbYi4Chf\"")
                .d("ID", "10")
            .and().insertInto("USERS", 1940L)
                .d("PASSWORD", "\"rp9gp\"")
                .d("USERNAME", "\"_\"")
            .and().insertInto("CONSUMERS", 1939L)
                .d("BALANCE_CURRENCY", "\"mi4Ys\"")
                .d("BALANCE_FRACTIONAL_PART", "683")
                .d("BALANCE_INTEGER_PART", "566")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"BWTzxlA_QY\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YkxuAcE\"")
                .d("ID", "15")
            .and().insertInto("USERS", 1942L)
                .d("PASSWORD", "\"5iAiWkh8YkPgZ\"")
                .d("USERNAME", "\"XG8Kg\"")
            .and().insertInto("CONSUMERS", 1941L)
                .d("BALANCE_CURRENCY", "\"wVlAwBvtOn1iz\"")
                .d("BALANCE_FRACTIONAL_PART", "36")
                .d("BALANCE_INTEGER_PART", "49")
                .d("EMAIL", "\"6RbJNK5XCDMcQ\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"mHSTLvoYGNdHDU\"")
                .d("NAME", "\"obx0MXh\"")
                .d("ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"Wg8e99EiN8Q1rRo\",\"address\":\"Q9VT5LhDZmu\",\"latitude\":0.5418001275846236,\"longitude\":0.27627388810849995,\"nif\":\"D2yj\",\"logo\":\"CB_fA_6E0VR8\",\"avgRating\":0.24066223,\"balance\":{\"currency\":\"cpBtnlPtGHp\",\"integerPart\":793,\"fractionalPart\":244}},{\"id\":11,\"name\":\"u0\",\"address\":\"olkutVZwkA\",\"latitude\":0.5807376927813637,\"longitude\":0.870247934759093,\"nif\":\"44KzaoucI4x\",\"logo\":\"Oai6cB\",\"avgRating\":0.06227425,\"balance\":{\"currency\":\"_G5o0Rt7C8\",\"integerPart\":848,\"fractionalPart\":836}},{\"id\":12,\"name\":\"E\",\"address\":\"G9iHXvbaA\",\"latitude\":0.2391324864136809,\"longitude\":0.46883474463245367,\"nif\":\"ogOSC6gqbQ8uqn1\",\"logo\":\"CoQH81BGs9Kg8\",\"avgRating\":0.4991241,\"balance\":{\"currency\":\"ReNCWWkw\",\"integerPart\":230,\"fractionalPart\":440}},{\"id\":13,\"name\":\"tDO8kv4fVek_e\",\"address\":\"OEFxnh_KkFyuB3\",\"latitude\":0.8812810336968855,\"longitude\":0.3809420152568771,\"nif\":\"\",\"logo\":\"2N1I3JyJKsb\",\"avgRating\":0.94960916,\"balance\":{\"currency\":\"JAqKYc4cMQ6\",\"integerPart\":13,\"fractionalPart\":792}}]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?EMextraParam123=_EM_613_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/-1443953129/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/398/employees/918")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1264L)
                .d("ADDRESS", "\"6mX71msomvPzcFw\"")
                .d("AVG_RATING", "-58.50443873488821")
                .d("BALANCE_CURRENCY", "\"HrHqZnD\"")
                .d("BALANCE_FRACTIONAL_PART", "322")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.8331637049218027")
                .d("LOGO", "\"Xd\"")
                .d("LONGITUDE", "0.47433061539579835")
                .d("NAME", "\"iWhE1JAY9k3Up8Z5\"")
                .d("NIF", "\"V\"")
            .and().insertInto("PRINTSHOPS", 280L)
                .d("ADDRESS", "\"_EM_1402_XYZ_\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"_EM_1403_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "994")
                .d("BALANCE_INTEGER_PART", "800")
                .d("LATITUDE", "0.5348898705364173")
                .d("LOGO", "\"_EM_1404_XYZ_\"")
                .d("LONGITUDE", "0.6391456799107209")
                .d("NAME", "\"2828232\"")
                .d("NIF", "\"_EM_1406_XYZ_\"")
            .and().insertInto("USERS", 279L)
                .d("PASSWORD", "\"_EM_1407_XYZ_\"")
                .d("USERNAME", "\"_EM_1408_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/55?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-512555416\" ")
                .put(baseUrlOfSut + "/printshops/-512555416/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=_EM_142_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'managerName'", containsString("Jorge Caldas"))
                .body("[0].'managerUsername'", containsString("jcaldas"))
                .body("[0].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[0].'managerPassword'", containsString("1234"))
                .body("[0].'pShopAddress'", containsString("Rua das Cruzes n31"))
                .body("[0].'pShopLatitude'", numberMatches(43.221))
                .body("[0].'pShopLongitude'", numberMatches(41.121))
                .body("[0].'pShopNIF'", containsString("124555321"))
                .body("[0].'pShopName'", containsString("Printer Style"))
                .body("[0].'pShopDateRequest'", containsString("31/05/2024 06:56"))
                .body("[0].'pShopDateRequestAccepted'", nullValue())
                .body("[1].'managerName'", containsString("Martim da Silva"))
                .body("[1].'managerUsername'", containsString("msilva"))
                .body("[1].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[1].'managerPassword'", containsString("1234"))
                .body("[1].'pShopAddress'", containsString("Rua das Cruzes n32"))
                .body("[1].'pShopLatitude'", numberMatches(43.221))
                .body("[1].'pShopLongitude'", numberMatches(41.121))
                .body("[1].'pShopNIF'", containsString("124555321"))
                .body("[1].'pShopName'", containsString("Print More"))
                .body("[1].'pShopDateRequest'", containsString("31/05/2024 06:56"))
                .body("[1].'pShopDateRequestAccepted'", nullValue())
                .body("[2].'managerName'", containsString("Carlos Pinto"))
                .body("[2].'managerUsername'", containsString("cpin"))
                .body("[2].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[2].'managerPassword'", containsString("1234"))
                .body("[2].'pShopAddress'", containsString("Rua n33"))
                .body("[2].'pShopLatitude'", numberMatches(43.221))
                .body("[2].'pShopLongitude'", numberMatches(41.121))
                .body("[2].'pShopNIF'", containsString("124555321"))
                .body("[2].'pShopName'", containsString("Papelaria Pinto"))
                .body("[2].'pShopDateRequest'", containsString("31/05/2024 06:56"))
                .body("[2].'pShopDateRequestAccepted'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printshop\":{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/1569680157")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"654\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/654")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"324zddC\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/477/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_916_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_911_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_913_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/973/pricetable/deletepaper?EMextraParam123=_EM_915_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_906_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_903_XYZ_\", " + 
                    " \"priceA3\": \"3OswIRb\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/52/pricetable/covers?EMextraParam123=_EM_905_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_978_XYZ_\", " + 
                    " \"priceA3\": \"_EM_979_XYZ_\", " + 
                    " \"priceA4\": \"_EM_980_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/433/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_926_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 210, " + 
                    " \"priceA3SIMPLEX\": \"_EM_922_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_923_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/128277470611501682/pricetable/papers?EMextraParam123=_EM_925_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2539L)
                .d("ADDRESS", "\"XNHLr2GKpnal\"")
                .d("AVG_RATING", "0.7467731952354235")
                .d("BALANCE_CURRENCY", "\"xL;\"")
                .d("BALANCE_FRACTIONAL_PART", "207")
                .d("BALANCE_INTEGER_PART", "207")
                .d("LATITUDE", "0.26988876787350347")
                .d("LOGO", "\"8J7y7wijjEz2iwP\"")
                .d("LONGITUDE", "0.7304562796111336")
                .d("NAME", "\"\"")
                .d("NIF", "\"lUCyPiHYG8zf\"")
            .and().insertInto("PRINTSHOPS", 2540L)
                .d("ADDRESS", "\"qwP\"")
                .d("AVG_RATING", "0.3317464677447124")
                .d("BALANCE_CURRENCY", "\"J2BU6lYtEy6\"")
                .d("BALANCE_FRACTIONAL_PART", "945")
                .d("BALANCE_INTEGER_PART", "949")
                .d("LATITUDE", "0.43659330855068346")
                .d("LOGO", "\"aUGwyrsgb44REh\"")
                .d("LONGITUDE", "0.16125642137001628")
                .d("NAME", "\"dV3jGzjbD\"")
                .d("NIF", "\"yF4npiw5RMeAZvwv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"636\", " + 
                    " \"ringType\": \"Fy6yCN\", " + 
                    " \"supLim\": 917 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/636/pricetable/deletering?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1365L)
                .d("ADDRESS", "\"Q9VT5LhDZmu\"")
                .d("AVG_RATING", "0.2406622283498585")
                .d("BALANCE_CURRENCY", "\"cpBtnlPtGHp\"")
                .d("BALANCE_FRACTIONAL_PART", "244")
                .d("BALANCE_INTEGER_PART", "793")
                .d("LATITUDE", "0.5418001275846236")
                .d("LOGO", "\"CB_fA_6E0VR8\"")
                .d("LONGITUDE", "0.27627388810849995")
                .d("NAME", "\"Wg8e99EiN8Q1rRo\"")
                .d("NIF", "\"D2yj\"")
            .and().insertInto("PRINTSHOPS", 1366L)
                .d("ADDRESS", "\"olkutVZwkA\"")
                .d("AVG_RATING", "0.06227425253051455")
                .d("BALANCE_CURRENCY", "\"_G5o0Rt7C8\"")
                .d("BALANCE_FRACTIONAL_PART", "836")
                .d("BALANCE_INTEGER_PART", "848")
                .d("LATITUDE", "0.5807376927813637")
                .d("LOGO", "\"Oai6cB\"")
                .d("LONGITUDE", "0.870247934759093")
                .d("NAME", "\"u0\"")
                .d("NIF", "\"44KzaoucI4x\"")
            .and().insertInto("PRINTSHOPS", 1367L)
                .d("ADDRESS", "\"G9iHXvbaA\"")
                .d("AVG_RATING", "0.499124111363361")
                .d("BALANCE_CURRENCY", "\"ReNCWWkw\"")
                .d("BALANCE_FRACTIONAL_PART", "440")
                .d("BALANCE_INTEGER_PART", "230")
                .d("LATITUDE", "0.2391324864136809")
                .d("LOGO", "\"CoQH81BGs9Kg8\"")
                .d("LONGITUDE", "0.46883474463245367")
                .d("NAME", "\"E\"")
                .d("NIF", "\"ogOSC6gqbQ8uqn1\"")
            .and().insertInto("PRINTSHOPS", 1368L)
                .d("ADDRESS", "\"OEFxnh_KkFyuB3\"")
                .d("AVG_RATING", "0.9496091838763075")
                .d("BALANCE_CURRENCY", "\"JAqKYc4cMQ6\"")
                .d("BALANCE_FRACTIONAL_PART", "792")
                .d("BALANCE_INTEGER_PART", "13")
                .d("LATITUDE", "0.8812810336968855")
                .d("LOGO", "\"2N1I3JyJKsb\"")
                .d("LONGITUDE", "0.3809420152568771")
                .d("NAME", "\"tDO8kv4fVek_e\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 1936L)
                .d("PASSWORD", "\"6jpqRwzC2_0o\"")
                .d("USERNAME", "\"JSikWo5a4e\"")
            .and().insertInto("CONSUMERS", 1935L)
                .d("BALANCE_CURRENCY", "\"W4rc\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "560")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"hUxG65xZRbQD2lLW\"")
                .d("NAME", "\"WTel\"")
                .d("ID", "12")
            .and().insertInto("USERS", 1938L)
                .d("PASSWORD", "\"CiKSYKDFq\"")
                .d("USERNAME", "\"37aS4p0Q88W\"")
            .and().insertInto("CONSUMERS", 1937L)
                .d("BALANCE_CURRENCY", "\"_kwhHBE\"")
                .d("BALANCE_FRACTIONAL_PART", "337")
                .d("BALANCE_INTEGER_PART", "796")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"yTgovQ\"")
                .d("LONGITUDE", "\"IZV8scG1Y\"")
                .d("NAME", "\"8d6HTXbYi4Chf\"")
                .d("ID", "10")
            .and().insertInto("USERS", 1940L)
                .d("PASSWORD", "\"rp9gp\"")
                .d("USERNAME", "\"_\"")
            .and().insertInto("CONSUMERS", 1939L)
                .d("BALANCE_CURRENCY", "\"mi4Ys\"")
                .d("BALANCE_FRACTIONAL_PART", "683")
                .d("BALANCE_INTEGER_PART", "566")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"BWTzxlA_QY\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YkxuAcE\"")
                .d("ID", "15")
            .and().insertInto("USERS", 1942L)
                .d("PASSWORD", "\"5iAiWkh8YkPgZ\"")
                .d("USERNAME", "\"XG8Kg\"")
            .and().insertInto("CONSUMERS", 1941L)
                .d("BALANCE_CURRENCY", "\"wVlAwBvtOn1iz\"")
                .d("BALANCE_FRACTIONAL_PART", "36")
                .d("BALANCE_INTEGER_PART", "49")
                .d("EMAIL", "\"6RbJNK5XCDMcQ\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"mHSTLvoYGNdHDU\"")
                .d("NAME", "\"obx0MXh\"")
                .d("ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "W")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 215, " + 
                    " \"priceA4SIMPLEX\": \"\", " + 
                    " \"supLim\": 221 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/607/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 948, " + 
                    " \"ringType\": \"_EM_928_XYZ_\", " + 
                    " \"supLim\": 147 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/911/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_944_XYZ_")
                .post(baseUrlOfSut + "/printshops/294/employees?EMextraParam123=_EM_943_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/196/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1365L)
                .d("ADDRESS", "\"Q9VT5LhDZmu\"")
                .d("AVG_RATING", "0.2406622283498585")
                .d("BALANCE_CURRENCY", "\"cpBtnlPtGHp\"")
                .d("BALANCE_FRACTIONAL_PART", "244")
                .d("BALANCE_INTEGER_PART", "793")
                .d("LATITUDE", "0.5418001275846236")
                .d("LOGO", "\"CB_fA_6E0VR8\"")
                .d("LONGITUDE", "0.27627388810849995")
                .d("NAME", "\"Wg8e99EiN8Q1rRo\"")
                .d("NIF", "\"D2yj\"")
            .and().insertInto("PRINTSHOPS", 1366L)
                .d("ADDRESS", "\"olkutVZwkA\"")
                .d("AVG_RATING", "0.06227425253051455")
                .d("BALANCE_CURRENCY", "\"_G5o0Rt7C8\"")
                .d("BALANCE_FRACTIONAL_PART", "836")
                .d("BALANCE_INTEGER_PART", "848")
                .d("LATITUDE", "0.5807376927813637")
                .d("LOGO", "\"Oai6cB\"")
                .d("LONGITUDE", "0.870247934759093")
                .d("NAME", "\"u0\"")
                .d("NIF", "\"44KzaoucI4x\"")
            .and().insertInto("PRINTSHOPS", 1367L)
                .d("ADDRESS", "\"G9iHXvbaA\"")
                .d("AVG_RATING", "0.499124111363361")
                .d("BALANCE_CURRENCY", "\"ReNCWWkw\"")
                .d("BALANCE_FRACTIONAL_PART", "440")
                .d("BALANCE_INTEGER_PART", "230")
                .d("LATITUDE", "0.2391324864136809")
                .d("LOGO", "\"CoQH81BGs9Kg8\"")
                .d("LONGITUDE", "0.46883474463245367")
                .d("NAME", "\"E\"")
                .d("NIF", "\"ogOSC6gqbQ8uqn1\"")
            .and().insertInto("PRINTSHOPS", 1368L)
                .d("ADDRESS", "\"OEFxnh_KkFyuB3\"")
                .d("AVG_RATING", "0.9496091838763075")
                .d("BALANCE_CURRENCY", "\"JAqKYc4cMQ6\"")
                .d("BALANCE_FRACTIONAL_PART", "792")
                .d("BALANCE_INTEGER_PART", "13")
                .d("LATITUDE", "0.8812810336968855")
                .d("LOGO", "\"2N1I3JyJKsb\"")
                .d("LONGITUDE", "0.3809420152568771")
                .d("NAME", "\"tDO8kv4fVek_e\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 1936L)
                .d("PASSWORD", "\"6jpqRwzC2_0o\"")
                .d("USERNAME", "\"JSikWo5a4e\"")
            .and().insertInto("CONSUMERS", 1935L)
                .d("BALANCE_CURRENCY", "\"W4rc\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "560")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"hUxG65xZRbQD2lLW\"")
                .d("NAME", "\"WTel\"")
                .d("ID", "12")
            .and().insertInto("USERS", 1938L)
                .d("PASSWORD", "\"CiKSYKDFq\"")
                .d("USERNAME", "\"37aS4p0Q88W\"")
            .and().insertInto("CONSUMERS", 1937L)
                .d("BALANCE_CURRENCY", "\"_kwhHBE\"")
                .d("BALANCE_FRACTIONAL_PART", "337")
                .d("BALANCE_INTEGER_PART", "796")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"yTgovQ\"")
                .d("LONGITUDE", "\"IZV8scG1Y\"")
                .d("NAME", "\"8d6HTXbYi4Chf\"")
                .d("ID", "10")
            .and().insertInto("USERS", 1940L)
                .d("PASSWORD", "\"rp9gp\"")
                .d("USERNAME", "\"_\"")
            .and().insertInto("CONSUMERS", 1939L)
                .d("BALANCE_CURRENCY", "\"mi4Ys\"")
                .d("BALANCE_FRACTIONAL_PART", "683")
                .d("BALANCE_INTEGER_PART", "566")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"BWTzxlA_QY\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YkxuAcE\"")
                .d("ID", "15")
            .and().insertInto("USERS", 1942L)
                .d("PASSWORD", "\"5iAiWkh8YkPgZ\"")
                .d("USERNAME", "\"XG8Kg\"")
            .and().insertInto("CONSUMERS", 1941L)
                .d("BALANCE_CURRENCY", "\"wVlAwBvtOn1iz\"")
                .d("BALANCE_FRACTIONAL_PART", "36")
                .d("BALANCE_INTEGER_PART", "49")
                .d("EMAIL", "\"6RbJNK5XCDMcQ\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"mHSTLvoYGNdHDU\"")
                .d("NAME", "\"obx0MXh\"")
                .d("ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"XvTH9bpM\", " + 
                    " \"infLim\": 189, " + 
                    " \"priceA4DUPLEX\": \"\", " + 
                    " \"supLim\": 436 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/607/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2539L)
                .d("ADDRESS", "\"XNHLr2GKpnal\"")
                .d("AVG_RATING", "0.7467731952354235")
                .d("BALANCE_CURRENCY", "\"xL;\"")
                .d("BALANCE_FRACTIONAL_PART", "207")
                .d("BALANCE_INTEGER_PART", "207")
                .d("LATITUDE", "0.26988876787350347")
                .d("LOGO", "\"8J7y7wijjEz2iwP\"")
                .d("LONGITUDE", "0.7304562796111336")
                .d("NAME", "\"\"")
                .d("NIF", "\"lUCyPiHYG8zf\"")
            .and().insertInto("PRINTSHOPS", 2540L)
                .d("ADDRESS", "\"qwP\"")
                .d("AVG_RATING", "0.3317464677447124")
                .d("BALANCE_CURRENCY", "\"J2BU6lYtEy6\"")
                .d("BALANCE_FRACTIONAL_PART", "945")
                .d("BALANCE_INTEGER_PART", "949")
                .d("LATITUDE", "0.43659330855068346")
                .d("LOGO", "\"aUGwyrsgb44REh\"")
                .d("LONGITUDE", "0.16125642137001628")
                .d("NAME", "\"dV3jGzjbD\"")
                .d("NIF", "\"yF4npiw5RMeAZvwv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/10/employees?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/5/reviews?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 179, " + 
                    " \"price\": \"321\", " + 
                    " \"ringType\": \"_EM_986_XYZ_\", " + 
                    " \"supLim\": 945 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/321/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_606_XYZ_")
                .get(baseUrlOfSut + "/printshops/552/pricetable?EMextraParam123=_EM_605_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"prinshops\":\"[{\\\"id\\\":1,\\\"name\\\":\\\"Copy Scan\\\",\\\"address\\\":\\\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_1\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":2,\\\"name\\\":\\\"Flash Vidius - Gomes \\\\u0026 Santana, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.379392,\\\"longitude\\\":-8.761458,\\\"nif\\\":\\\"199111333\\\",\\\"logo\\\":\\\"logo_3\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":3,\\\"name\\\":\\\"CopyGraphe\\\",\\\"address\\\":\\\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.383314,\\\"longitude\\\":-8.761942,\\\"nif\\\":\\\"123098333\\\",\\\"logo\\\":\\\"logo_4\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":4,\\\"name\\\":\\\"Nelson Costa Santos\\\",\\\"address\\\":\\\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.38207,\\\"longitude\\\":-8.763069,\\\"nif\\\":\\\"153655378\\\",\\\"logo\\\":\\\"logo_5\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":5,\\\"name\\\":\\\"Gráfica Editora Poveira, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.379605,\\\"longitude\\\":-8.761047,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_6\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":6,\\\"name\\\":\\\"Staples Vila do Conde\\\",\\\"address\\\":\\\"Avenida General Humberto Delgado 2, Vila do Conde\\\",\\\"latitude\\\":41.370674,\\\"longitude\\\":-8.744176,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":7,\\\"name\\\":\\\"Staples Vila da Maia\\\",\\\"address\\\":\\\"Rua Comendador Valentim dos Santos Dinis 570, Maia\\\",\\\"latitude\\\":41.246159,\\\"longitude\\\":-8.625225,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":8,\\\"name\\\":\\\"Video Norte\\\",\\\"address\\\":\\\"Rua Nova de Santa Cruz\\\",\\\"latitude\\\":41.5594,\\\"longitude\\\":-8.3972,\\\"nif\\\":\\\"123444378\\\",\\\"logo\\\":\\\"logo_8\\\",\\\"avgRating\\\":4.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":9,\\\"name\\\":\\\"SmartPrint\\\",\\\"address\\\":\\\"Rua dos Peões, Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_2\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}}]\",\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequest\":[],\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=_EM_615_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 248L)
                .d("PASSWORD", "\"s2qMXmmxd6Sn\"")
                .d("USERNAME", "\"i9vz8y0k\"")
            .and().insertInto("USERS", 249L)
                .d("PASSWORD", "\"_EM_1371_XYZ_\"")
                .d("USERNAME", "\"FmYO3o6vAYtgIiOF\"")
            .and().insertInto("USERS", 250L)
                .d("PASSWORD", "\"2i91\"")
                .d("USERNAME", "\"SxTK1gmzOvDES35P\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=_EM_1368_XYZ_&" + 
                    "latitude=_EM_1369_XYZ_&" + 
                    "name=_EM_1370_XYZ_&" + 
                    "email=1iQOdyzpjXgwR4z&" + 
                    "username=VmzqkqTpNLHZ&" + 
                    "longitude=T4mnC4NEMdhg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"_EM_1370_XYZ_\",\"email\":\"1iQOdyzpjXgwR4z\",\"latitude\":\"_EM_1369_XYZ_\",\"longitude\":\"T4mnC4NEMdhg\",\"printingSchemas\":[],\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0},\"id\":23,\"username\":\"VmzqkqTpNLHZ\",\"password\":\"_EM_1368_XYZ_\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1365L)
                .d("ADDRESS", "\"Q9VT5LhDZmu\"")
                .d("AVG_RATING", "0.2406622283498585")
                .d("BALANCE_CURRENCY", "\"cpBtnlPtGHp\"")
                .d("BALANCE_FRACTIONAL_PART", "244")
                .d("BALANCE_INTEGER_PART", "793")
                .d("LATITUDE", "0.5418001275846236")
                .d("LOGO", "\"CB_fA_6E0VR8\"")
                .d("LONGITUDE", "0.27627388810849995")
                .d("NAME", "\"Wg8e99EiN8Q1rRo\"")
                .d("NIF", "\"D2yj\"")
            .and().insertInto("PRINTSHOPS", 1366L)
                .d("ADDRESS", "\"olkutVZwkA\"")
                .d("AVG_RATING", "0.06227425253051455")
                .d("BALANCE_CURRENCY", "\"_G5o0Rt7C8\"")
                .d("BALANCE_FRACTIONAL_PART", "836")
                .d("BALANCE_INTEGER_PART", "848")
                .d("LATITUDE", "0.5807376927813637")
                .d("LOGO", "\"Oai6cB\"")
                .d("LONGITUDE", "0.870247934759093")
                .d("NAME", "\"u0\"")
                .d("NIF", "\"44KzaoucI4x\"")
            .and().insertInto("PRINTSHOPS", 1367L)
                .d("ADDRESS", "\"G9iHXvbaA\"")
                .d("AVG_RATING", "0.499124111363361")
                .d("BALANCE_CURRENCY", "\"ReNCWWkw\"")
                .d("BALANCE_FRACTIONAL_PART", "440")
                .d("BALANCE_INTEGER_PART", "230")
                .d("LATITUDE", "0.2391324864136809")
                .d("LOGO", "\"CoQH81BGs9Kg8\"")
                .d("LONGITUDE", "0.46883474463245367")
                .d("NAME", "\"E\"")
                .d("NIF", "\"ogOSC6gqbQ8uqn1\"")
            .and().insertInto("PRINTSHOPS", 1368L)
                .d("ADDRESS", "\"OEFxnh_KkFyuB3\"")
                .d("AVG_RATING", "0.9496091838763075")
                .d("BALANCE_CURRENCY", "\"JAqKYc4cMQ6\"")
                .d("BALANCE_FRACTIONAL_PART", "792")
                .d("BALANCE_INTEGER_PART", "13")
                .d("LATITUDE", "0.8812810336968855")
                .d("LOGO", "\"2N1I3JyJKsb\"")
                .d("LONGITUDE", "0.3809420152568771")
                .d("NAME", "\"tDO8kv4fVek_e\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 1936L)
                .d("PASSWORD", "\"6jpqRwzC2_0o\"")
                .d("USERNAME", "\"JSikWo5a4e\"")
            .and().insertInto("CONSUMERS", 1935L)
                .d("BALANCE_CURRENCY", "\"W4rc\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "560")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"hUxG65xZRbQD2lLW\"")
                .d("NAME", "\"WTel\"")
                .d("ID", "12")
            .and().insertInto("USERS", 1938L)
                .d("PASSWORD", "\"CiKSYKDFq\"")
                .d("USERNAME", "\"37aS4p0Q88W\"")
            .and().insertInto("CONSUMERS", 1937L)
                .d("BALANCE_CURRENCY", "\"_kwhHBE\"")
                .d("BALANCE_FRACTIONAL_PART", "337")
                .d("BALANCE_INTEGER_PART", "796")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"yTgovQ\"")
                .d("LONGITUDE", "\"IZV8scG1Y\"")
                .d("NAME", "\"8d6HTXbYi4Chf\"")
                .d("ID", "10")
            .and().insertInto("USERS", 1940L)
                .d("PASSWORD", "\"rp9gp\"")
                .d("USERNAME", "\"_\"")
            .and().insertInto("CONSUMERS", 1939L)
                .d("BALANCE_CURRENCY", "\"mi4Ys\"")
                .d("BALANCE_FRACTIONAL_PART", "683")
                .d("BALANCE_INTEGER_PART", "566")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "\"BWTzxlA_QY\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YkxuAcE\"")
                .d("ID", "15")
            .and().insertInto("USERS", 1942L)
                .d("PASSWORD", "\"5iAiWkh8YkPgZ\"")
                .d("USERNAME", "\"XG8Kg\"")
            .and().insertInto("CONSUMERS", 1941L)
                .d("BALANCE_CURRENCY", "\"wVlAwBvtOn1iz\"")
                .d("BALANCE_FRACTIONAL_PART", "36")
                .d("BALANCE_INTEGER_PART", "49")
                .d("EMAIL", "\"6RbJNK5XCDMcQ\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"mHSTLvoYGNdHDU\"")
                .d("NAME", "\"obx0MXh\"")
                .d("ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/15/notify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequests\":[{\"id\":4,\"cost\":1.4,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":5,\"cost\":2.5,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":7,\"cost\":1.4,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":8,\"cost\":1.2,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":15,\"cost\":2.5,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":16,\"cost\":1.2,\"arrivalTimestamp\":\"May 31, 2024 6:56:54 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"}],\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_888_XYZ_")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"nPendingRequests\":0,\"nInProgressRequests\":0,\"nFinished\":0,\"nEmployees\":6,\"pshopProfit\":\"12,96\",\"success\":true}"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*?EMextraParam123=_EM_59_XYZ_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
