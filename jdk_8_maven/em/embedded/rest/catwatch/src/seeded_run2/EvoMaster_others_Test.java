import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T11:37:05.148+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 39 tests
 * <br>
 * Covered targets: 482
 * <br>
 * Used time: 1h 2m 36s
 * <br>
 * Needed budget for current results: 94%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch?EMextraParam123=_EM_24_XYZ_");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=8389243&" + 
                    "offset=-64923&" + 
                    "start_date=1900-12-27T00%3A39%3A55&" + 
                    "end_date=2057-00-32T01%3A60%3A20&" + 
                    "sortBy=H85&" + 
                    "q=4Mz_A&" + 
                    "language=_EM_847_XYZ_&" + 
                    "access_token=o")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?access_token=0VSnOmK_HM")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch?EMextraParam123=_");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=868&" + 
                    "start_date=2023-05-07T13%3A21%3A39&" + 
                    "end_date=1968-06-00T09%3A55%3A01&" + 
                    "sortBy=_EM_33_XYZ_&" + 
                    "language=_EM_35_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1968-06-00T09:55:01'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1968-06-00T09:55:01]"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=ohItWO7cZF&" + 
                    "access_token=&" + 
                    "q=l&" + 
                    "offset=Jlfg8ORwHU5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=+IBM%2CSun&" + 
                    "limit=0&" + 
                    "offset=0&" + 
                    "start_date=2024-05-29T16%3A04%3A11Z&" + 
                    "end_date=_EM_310_XYZ_&" + 
                    "sortBy=foo&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_22_XYZ_")
                .get(baseUrlOfSut + "/delete?" + 
                    "EMextraParam123=_EM_21_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 839, " + 
                    " \"name\": \"_EM_215_XYZ_\", " + 
                    " \"organizationName\": \"_EM_216_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 49, " + 
                    " \"personalCommitsCount\": 509, " + 
                    " \"personalProjectsCount\": 213, " + 
                    " \"snapshotDate\": \"2068-11-25T10:40:39\", " + 
                    " \"url\": \"_EM_217_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 780, " + 
                    " \"organizationId\": 464, " + 
                    " \"organizationalProjectsCount\": 677, " + 
                    " \"personalCommitsCount\": 653, " + 
                    " \"url\": \"_EM_221_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 962, " + 
                    " \"personalCommitsCount\": 939, " + 
                    " \"personalProjectsCount\": 269, " + 
                    " \"snapshotDate\": \"2057-11-01T12:55:34\", " + 
                    " \"url\": \"_EM_224_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -2344390068137884436, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2098-03-29T13:16:43\" " + 
                    " }, " + 
                    " \"loginId\": \"_EM_225_XYZ_\", " + 
                    " \"name\": \"_EM_226_XYZ_\", " + 
                    " \"snapshotDate\": \"1905-10-24T20:44:-1\" " + 
                    " }, " + 
                    " { " + 
                    " \"loginId\": \"_EM_228_XYZ_\", " + 
                    " \"name\": \"_EM_229_XYZ_\", " + 
                    " \"organizationId\": -263878348, " + 
                    " \"snapshotDate\": \"1984-09-02T05:49:05\", " + 
                    " \"url\": \"_EM_231_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 464, " + 
                    " \"contributorsCount\": 616, " + 
                    " \"forksCount\": 457, " + 
                    " \"image\": \"_EM_233_XYZ_\", " + 
                    " \"lastPushed\": \"_EM_236_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"TDuLs77VIp\", " + 
                    " \"_EM_237_XYZ_\", " + 
                    " \"_EM_238_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_239_XYZ_\", " + 
                    " \"title\": \"_EM_242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": -554925248, " + 
                    " \"contributorsCount\": 638, " + 
                    " \"externalContributorsCount\": 681, " + 
                    " \"forksCount\": 975, " + 
                    " \"gitHubProjectId\": 667, " + 
                    " \"image\": \"mJgq[01fO4PEn\", " + 
                    " \"name\": \"_EM_248_XYZ_\", " + 
                    " \"primaryLanguage\": \"Jrv4VJZ\", " + 
                    " \"score\": 131807, " + 
                    " \"snapshotDate\": \"2044-08-23T12:10:24\", " + 
                    " \"starsCount\": 1000, " + 
                    " \"title\": \"_EM_250_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 409, " + 
                    " \"allForksCount\": 110, " + 
                    " \"id\": 337231226, " + 
                    " \"membersCount\": 111, " + 
                    " \"organizationName\": \"_EM_251_XYZ_\", " + 
                    " \"programLanguagesCount\": 654, " + 
                    " \"teamsCount\": 169 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 614, " + 
                    " \"allSizeCount\": 941, " + 
                    " \"allStarsCount\": 488, " + 
                    " \"externalContributorsCount\": 639975397, " + 
                    " \"membersCount\": 814, " + 
                    " \"programLanguagesCount\": 125 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 192, " + 
                    " \"allStarsCount\": 267, " + 
                    " \"id\": 53, " + 
                    " \"organizationName\": \"_EM_253_XYZ_\", " + 
                    " \"privateProjectCount\": 671, " + 
                    " \"snapshotDate\": \"1937-03-23T08:19:57\", " + 
                    " \"tagsCount\": 966, " + 
                    " \"teamsCount\": 439 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "ALsPSAn86s1y")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "PdSNuPHnP")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=QM3g2eHIV&" + 
                    "limit=952&" + 
                    "q=l4JT1G&" + 
                    "access_token=&" + 
                    "end_date=CDeI51VWV&" + 
                    "sortBy=g0AWKeMZShP&" + 
                    "language=a9X5GXroS&" + 
                    "start_date=ASG5XkRZWq2cFGu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "b6gRgXx")
                .get(baseUrlOfSut + "/export?" + 
                    "access_token=&" + 
                    "end_date=Nu9osQ&" + 
                    "organizations=mtgKxcti66iqNy4b&" + 
                    "start_date=foj4iqQdT2F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 41L)
                .d("ID", "526")
                .d("ORGANIZATION_ID", "919")
                .d("SNAPSHOT_DATE", "\"2074-06-20 22:01:38\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"_EM_1036_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "30")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "734")
                .d("PERSONAL_PROJECTS_COUNT", "-1031003885")
                .d("URL", "NULL")
            .and().insertInto("PROJECT", 42L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"Us\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "-7330083136983397033")
                .d("LAST_PUSHED", "\"_EM_1038_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"919\"")
                .d("PRIMARY_LANGUAGE", "\"iX7bZ5\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "648")
                .d("URL", "\"_EM_1040_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "576")
            .and().insertInto("STATISTICS", 43L)
                .d("ID", "22")
                .d("SNAPSHOT_DATE", "\"1944-03-06 14:48:49\"")
                .d("ALL_CONTRIBUTORS_COUNT", "643")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "113")
                .d("ALL_STARS_COUNT", "930")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"919\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "754")
                .d("TAGS_COUNT", "363")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "247")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=919&" + 
                    "start_date=1922-02-10T14%3A22%3A12")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 1922-02-10T14:22:12."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?end_date=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_1_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_7_XYZ_&" + 
                    "end_date=_EM_9_XYZ_&" + 
                    "EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_9_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=2BC0F3i&" + 
                    "end_date=_EM_38_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=BLfRyTa&" + 
                    "end_date=sMQSGd6Qpqlr6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/init?EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_41_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 6L)
                .d("ID", "858")
                .d("ORGANIZATION_ID", "678")
                .d("SNAPSHOT_DATE", "\"1912-07-22 08:18:24\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "981")
                .d("PERSONAL_PROJECTS_COUNT", "1000")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=_EM_205_XYZ_&" + 
                    "end_date=_EM_206_XYZ_&" + 
                    "access_token=_EM_209_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_504_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=nv&" + 
                    "end_date=_EM_503_XYZ_&" + 
                    "EMextraParam123=5d_Q&" + 
                    "access_token=_EM_505_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=_EM_264_XYZ_&" + 
                    "limit=0&" + 
                    "start_date=2016-03-12T00%3A00%3A00&" + 
                    "q=foo&" + 
                    "language=foo&" + 
                    "EMextraParam123=42&" + 
                    "access_token=NqXXXk8vJ2TcSc")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=I8Ww9e&" + 
                    "limit=588&" + 
                    "offset=346&" + 
                    "q=_EM_212_XYZ_&" + 
                    "access_token=_EM_213_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/fetch?access_token=_EM_719_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "EMextraParam123=_EM_631_XYZ_&" + 
                    "access_token=_EM_633_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?access_token=_EM_715_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 33L)
                .d("ID", "639")
                .d("SNAPSHOT_DATE", "\"1979-10-08 04:29:15\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "443")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"Ei1rVYVILhh\"")
                .d("PRIVATE_PROJECT_COUNT", "565")
                .d("PROGRAM_LANGUAGES_COUNT", "996")
                .d("PUBLIC_PROJECT_COUNT", "81")
                .d("TAGS_COUNT", "948")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 34L)
                .d("ID", "607")
                .d("ORGANIZATION_ID", "982")
                .d("SNAPSHOT_DATE", "\"1940-12-30 16:40:54\"")
                .d("NAME", "\"0QL0SXNXJ\"")
                .d("ORGANIZATION_NAME", "\"_EM_962_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "959")
                .d("URL", "NULL")
            .and().insertInto("PROJECT", 35L)
                .d("COMMITS_COUNT", "390")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"_EM_964_XYZ_\"")
                .d("FORKS_COUNT", "-2036744492")
                .d("GIT_HUB_PROJECT_ID", "444")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"9f7pXwr9S\"")
                .d("SCORE", "293")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "490")
                .d("URL", "NULL")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_968_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=iDmfA")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?" + 
                    "EMextraParam123=_EM_12_XYZ_&" + 
                    "access_token=_EM_201_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_211_XYZ_&" + 
                    "start_date=2024-05-29T04%3A05%3A12Z&" + 
                    "end_date=2024-05-31T04%3A04%3A12j&" + 
                    "EMextraParam123=42&" + 
                    "access_token=YyDnynIu")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=IBM%2CSun&" + 
                    "offset=0&" + 
                    "end_date=foo&" + 
                    "sortBy=personalProjectsCount&" + 
                    "q=foo&" + 
                    "EMextraParam123=42&" + 
                    "access_token=YZuEAmWQ")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?" + 
                    "EMextraParam123=_EM_21_XYZ_&" + 
                    "access_token=_EM_306_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_314_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=_EM_313_XYZ_&" + 
                    "EMextraParam123=_EM_5_XYZ_&" + 
                    "access_token=_EM_315_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 663, " + 
                    " \"key\": {}, " + 
                    " \"personalProjectsCount\": 540, " + 
                    " \"url\": \"_EM_436_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 857, " + 
                    " \"name\": \"_EM_438_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 399, " + 
                    " \"organizationalProjectsCount\": 243, " + 
                    " \"personalCommitsCount\": 920, " + 
                    " \"personalProjectsCount\": 370 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 9, " + 
                    " \"loginId\": \"_EM_441_XYZ_\", " + 
                    " \"name\": \"_EM_442_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 74, " + 
                    " \"organizationalProjectsCount\": 2068266545, " + 
                    " \"snapshotDate\": \"1966-04-21T00:17:59\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": 1719981963, " + 
                    " \"snapshotDate\": \"2095-10-19T05:12:14\" " + 
                    " }, " + 
                    " \"organizationId\": 546, " + 
                    " \"organizationalCommitsCount\": 319, " + 
                    " \"organizationalProjectsCount\": 623, " + 
                    " \"personalCommitsCount\": 964, " + 
                    " \"personalProjectsCount\": 663, " + 
                    " \"snapshotDate\": \"1973-13-03T15:46:20\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": {}, " + 
                    " \"loginId\": \"_EM_142_XYZ_\", " + 
                    " \"organizationId\": 359, " + 
                    " \"organizationName\": \"_EM_144_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 766, " + 
                    " \"organizationalProjectsCount\": 789, " + 
                    " \"personalProjectsCount\": 322 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 953, " + 
                    " \"key\": { " + 
                    " \"id\": 523, " + 
                    " \"organizationId\": -5601482950227615316, " + 
                    " \"snapshotDate\": \"2019-05-24T07:18:40\" " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_147_XYZ_\", " + 
                    " \"personalProjectsCount\": 683, " + 
                    " \"snapshotDate\": \"1995-11-18T18:29:40\", " + 
                    " \"url\": \"_EM_148_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 616, " + 
                    " \"forksCount\": 457, " + 
                    " \"image\": \"_EM_233_XYZ_\", " + 
                    " \"lastPushed\": \"_EM_236_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"TDuLs77VIp\", " + 
                    " \"_EM_237_XYZ_\", " + 
                    " \"_EM_238_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_239_XYZ_\", " + 
                    " \"title\": \"_EM_242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": -554925248, " + 
                    " \"contributorsCount\": 638, " + 
                    " \"externalContributorsCount\": 681, " + 
                    " \"forksCount\": 975, " + 
                    " \"gitHubProjectId\": 667, " + 
                    " \"image\": \"_EM_244_XYZ_\", " + 
                    " \"primaryLanguage\": \"Jrv4VJZ\", " + 
                    " \"score\": 735, " + 
                    " \"snapshotDate\": \"2044-08-21T12:10:24\", " + 
                    " \"starsCount\": 1000, " + 
                    " \"title\": \"_EM_250_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"gitHubProjectId\": 714, " + 
                    " \"image\": \"BeqZV3Anq\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_533_XYZ_\", " + 
                    " \"_EM_534_XYZ_\", " + 
                    " \"_EM_535_XYZ_\", " + 
                    " \"_EM_536_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_538_XYZ_\", " + 
                    " \"_EM_539_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_540_XYZ_\", " + 
                    " \"organizationName\": \"_EM_541_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_542_XYZ_\", " + 
                    " \"title\": \"_EM_543_XYZ_\", " + 
                    " \"url\": \"o5VhHPM_D\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 12, " + 
                    " \"description\": \"_EM_544_XYZ_\", " + 
                    " \"externalContributorsCount\": 550, " + 
                    " \"lastPushed\": \"_EM_547_XYZ_\", " + 
                    " \"name\": \"_EM_548_XYZ_\", " + 
                    " \"organizationName\": \"zAkLjY6BIo\", " + 
                    " \"primaryLanguage\": \"_EM_549_XYZ_\", " + 
                    " \"snapshotDate\": \"2023-11-26T01:37:11\", " + 
                    " \"starsCount\": -1876348867, " + 
                    " \"url\": \"_EM_551_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 28, " + 
                    " \"description\": \"_EM_552_XYZ_\", " + 
                    " \"forksCount\": 675, " + 
                    " \"gitHubProjectId\": 1413297555, " + 
                    " \"image\": \"_EM_553_XYZ_\", " + 
                    " \"lastPushed\": \"_EM_557_XYZ_\", " + 
                    " \"score\": 691, " + 
                    " \"snapshotDate\": \"1958-07-23T11:42:21\", " + 
                    " \"url\": \"Vy\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 801, " + 
                    " \"description\": \"_EM_565_XYZ_\", " + 
                    " \"externalContributorsCount\": 1844089906, " + 
                    " \"forksCount\": 397, " + 
                    " \"image\": \"8hJM4OM\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_566_XYZ_\", " + 
                    " \"_EM_567_XYZ_\", " + 
                    " \"_EM_568_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_570_XYZ_\", " + 
                    " \"_EM_571_XYZ_\", " + 
                    " \"Uy\", " + 
                    " \"_EM_572_XYZ_\", " + 
                    " \"_EM_573_XYZ_\" " + 
                    " ], " + 
                    " \"organizationName\": \"_EM_575_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_576_XYZ_\", " + 
                    " \"starsCount\": 788, " + 
                    " \"title\": \"_EM_577_XYZ_\", " + 
                    " \"url\": \"_EM_578_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 783, " + 
                    " \"forksCount\": 981, " + 
                    " \"gitHubProjectId\": 127, " + 
                    " \"image\": \"tRbuptHa6c\", " + 
                    " \"organizationName\": \"_EM_586_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_587_XYZ_\", " + 
                    " \"score\": 560, " + 
                    " \"snapshotDate\": \"2097-04-29T19:56:13\", " + 
                    " \"starsCount\": 383, " + 
                    " \"title\": \"_EM_588_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_70_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 711, " + 
                    " \"description\": \"_EM_362_XYZ_\", " + 
                    " \"externalContributorsCount\": 555, " + 
                    " \"lastPushed\": \"_EM_368_XYZ_\", " + 
                    " \"organizationName\": \"PXU1IrUTAoM7OHrH\" " + 
                    " }, " + 
                    " { " + 
                    " \"description\": \"t\", " + 
                    " \"externalContributorsCount\": 605, " + 
                    " \"forksCount\": 881, " + 
                    " \"gitHubProjectId\": 751, " + 
                    " \"name\": \"H\", " + 
                    " \"score\": 449, " + 
                    " \"snapshotDate\": \"1907-11-03T25:21:16\", " + 
                    " \"starsCount\": 422, " + 
                    " \"url\": \"_EM_385_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 307, " + 
                    " \"allStarsCount\": -3698876, " + 
                    " \"key\": {}, " + 
                    " \"teamsCount\": 671 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 442, " + 
                    " \"allForksCount\": 538, " + 
                    " \"allSizeCount\": 297, " + 
                    " \"allStarsCount\": 178, " + 
                    " \"externalContributorsCount\": 584, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2059-01-24T18:20:26\" " + 
                    " }, " + 
                    " \"membersCount\": 1387284506, " + 
                    " \"organizationName\": \"_EM_387_XYZ_\", " + 
                    " \"privateProjectCount\": 986, " + 
                    " \"programLanguagesCount\": 531, " + 
                    " \"publicProjectCount\": 700, " + 
                    " \"snapshotDate\": \"2039-00-02T20:40:58\", " + 
                    " \"tagsCount\": 34 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 680, " + 
                    " \"allSizeCount\": 413, " + 
                    " \"allStarsCount\": 85, " + 
                    " \"externalContributorsCount\": 100, " + 
                    " \"id\": -2000257523, " + 
                    " \"membersCount\": 355, " + 
                    " \"organizationName\": \"_EM_388_XYZ_\", " + 
                    " \"programLanguagesCount\": 665, " + 
                    " \"publicProjectCount\": 570, " + 
                    " \"snapshotDate\": \"2000-08-04T09:33:16\", " + 
                    " \"teamsCount\": 492961983 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 941, " + 
                    " \"allForksCount\": 656, " + 
                    " \"allSizeCount\": 61, " + 
                    " \"id\": 519, " + 
                    " \"key\": { " + 
                    " \"id\": 550, " + 
                    " \"snapshotDate\": \"1954-08-02T-1:47:41\" " + 
                    " }, " + 
                    " \"membersCount\": 787, " + 
                    " \"publicProjectCount\": 925, " + 
                    " \"snapshotDate\": \"1900-06-11T15:29:46\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_390_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
