import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T21:56:35.880+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 21 tests
 * <br>
 * Covered targets: 1346
 * <br>
 * Used time: 1h 3m 38s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PROJECT","LANGUAGE_LIST","MAINTAINERS","CONTRIBUTOR","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "zzG80BpsPspw4wZj")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=49xVs&" + 
                    "offset=-1242958562&" + 
                    "end_date=KD19kKS5D4lC&" + 
                    "EMextraParam123=_EM_545_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_215_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("offset must be greater than zero but was -1242958562"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_546_XYZ_")
                .header("X-Organizations", "pj")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=w1pKqYMx1lAJ&" + 
                    "limit=-1849584886&" + 
                    "offset=395&" + 
                    "start_date=vO&" + 
                    "end_date=P9sZumwWUk99S5u&" + 
                    "sortBy=R2Qtf7kBdhFe&" + 
                    "q=AT")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_217_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("limit must be greater than zero but was -1849584886"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_26_XYZ_&" + 
                    "offset=547&" + 
                    "q=_EM_27_XYZ_&" + 
                    "EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/service/LanguageService_49_getMainLanguages
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/languages"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=zalando&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/service/ProjectServiceImpl_62_findProjects
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_3
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=_EM_138_XYZ_&" + 
                    "start_date=1945-08-18T12%3A03%3A26&" + 
                    "end_date=1993-09-09T21%3A01%3A19&" + 
                    "sortBy=MDuFSQT&" + 
                    "q=_EM_139_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/service/ProjectServiceImpl_113_convertProjectsToMap
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 6L)
                .d("COMMITS_COUNT", "230")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "890")
                .d("GIT_HUB_PROJECT_ID", "7177073178684056537")
                .d("LAST_PUSHED", "\"_EM_117_XYZ_\"")
                .d("NAME", "\"_EM_118_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"f\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "264")
                .d("URL", "\"l\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=692&" + 
                    "end_date=1946-02-21T13%3A06%3A19&" + 
                    "q=NW2TcGCYTMLU")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/service/ProjectServiceImpl_59_findProjects
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_3
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_225_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?organizations=")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_3
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_114_XYZ_&" + 
                    "EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=381&" + 
                    "offset=450&" + 
                    "start_date=1939-06-28T00%3A54%3A15&" + 
                    "EMextraParam123=_EM_33_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/service/ProjectServiceImpl_113_convertProjectsToMap
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 6L)
                .d("COMMITS_COUNT", "230")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "890")
                .d("GIT_HUB_PROJECT_ID", "7177073178684056537")
                .d("LAST_PUSHED", "\"_EM_117_XYZ_\"")
                .d("NAME", "\"_EM_118_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"f\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "264")
                .d("URL", "\"l\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=692&" + 
                    "end_date=1946-02-21T13%3A06%3A19&" + 
                    "q=NW2TcGCYTMLU")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/github/RepositoryWrapper_134_getFileContent
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_3
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 14L)
                .d("ID", "548")
                .d("ORGANIZATION_ID", "298")
                .d("SNAPSHOT_DATE", "\"2018-07-10 20:30:45\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "265")
                .d("PERSONAL_PROJECTS_COUNT", "404")
                .d("URL", "\"_EM_325_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_329_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=l2A&" + 
                    "limit=957&" + 
                    "offset=386&" + 
                    "end_date=_EM_16_XYZ_&" + 
                    "sortBy=kGKY9DOr&" + 
                    "q=_EM_17_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was kGKY9DOr. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 49L)
                .d("ID", "949")
                .d("ORGANIZATION_ID", "907")
                .d("SNAPSHOT_DATE", "\"1940-09-24 12:48:22\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"2Vse\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "146")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "1203")
                .d("PERSONAL_COMMITS_COUNT", "146")
                .d("PERSONAL_PROJECTS_COUNT", "415")
                .d("URL", "\"1lu4c3\"")
            .and().insertInto("PROJECT", 50L)
                .d("COMMITS_COUNT", "70")
                .d("CONTRIBUTORS_COUNT", "92")
                .d("DESCRIPTION", "\"FcK13VwdKWT95Fy\"")
                .d("FORKS_COUNT", "928")
                .d("GIT_HUB_PROJECT_ID", "511")
                .d("LAST_PUSHED", "\"_EM_961_XYZ_\"")
                .d("NAME", "\"6XIIBX\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "269")
                .d("SNAPSHOT_DATE", "\"2037-02-08 02:28:00\"")
                .d("STARS_COUNT", "-1816")
                .d("URL", "\"oyBVznCax\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"8S49q\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=&" + 
                    "offset=276&" + 
                    "start_date=2100-08-18T03%3A45%3A32&" + 
                    "sortBy=sDxu&" + 
                    "q=vWcbXq")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was sDxu. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 22L)
                .d("ID", "667")
                .d("ORGANIZATION_ID", "234")
                .d("SNAPSHOT_DATE", "\"2027-01-28 01:04:18\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "1020790228")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "653")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "100")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=234&" + 
                    "offset=1808388423&" + 
                    "start_date=_EM_541_XYZ_&" + 
                    "EMextraParam123=_EM_545_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"_EM_541_XYZ_\""))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=+IBM%2CSun&" + 
                    "start_date=2024-05-29T16%3A04%3A11Z&" + 
                    "end_date=2024-06-02T04%3A04%3A11Z&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_224_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("endDate is set to 2024-06-02T04:04:11Zbut there is no snapshot data before that date"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=IBM%2CSun&" + 
                    "sortBy=personalProjectsCount&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_128_contributorsGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=IBM%2CSun&" + 
                    "sortBy=-organizationalCommitsCount&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/web/ContributorsApi_128_contributorsGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=381&" + 
                    "offset=450&" + 
                    "start_date=1939-06-28T00%3A54%3A15&" + 
                    "EMextraParam123=_EM_33_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/github/RepositoryWrapper_124_listTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_2
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 40L)
                .d("ID", "219")
                .d("ORGANIZATION_ID", "302")
                .d("SNAPSHOT_DATE", "\"1973-10-17 16:42:10\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "141")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .and().insertInto("STATISTICS", 41L)
                .d("ID", "45")
                .d("SNAPSHOT_DATE", "\"1962-07-14 16:29:35\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "677")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "800")
                .d("ORGANIZATION_NAME", "\"302\"")
                .d("PRIVATE_PROJECT_COUNT", "1495727345")
                .d("PROGRAM_LANGUAGES_COUNT", "977")
                .d("PUBLIC_PROJECT_COUNT", "105")
                .d("TAGS_COUNT", "163")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=302&" + 
                    "limit=177&" + 
                    "start_date=jrnN83quJ&" + 
                    "end_date=j51XXwA&" + 
                    "q=lP&" + 
                    "access_token=E")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=302&" + 
                    "access_token=E")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=302&" + 
                    "start_date=jrnN83quJ&" + 
                    "access_token=E")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(302.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1973-10-17T16:42:10"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(141.0))
                .body("'contributors'[0].'personalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'organizationId'", numberMatches(302.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(1.1972053E11))
                .body("'projects'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1962-07-14T16:29:35"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(1.495727345E9))
                .body("'statistics'[0].'publicProjectCount'", numberMatches(105.0))
                .body("'statistics'[0].'membersCount'", numberMatches(800.0))
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", nullValue())
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", numberMatches(677.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(977.0))
                .body("'statistics'[0].'tagsCount'", numberMatches(163.0))
                .body("'statistics'[0].'organizationName'", containsString("302"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(-2.35643425E11));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "offset=305&" + 
                    "organizations=302&" + 
                    "limit=177")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 215, " + 
                    " \"contributorsCount\": 970, " + 
                    " \"description\": \"_EM_856_XYZ_\", " + 
                    " \"gitHubProjectId\": 3202052207446252845, " + 
                    " \"lastPushed\": \"4hV45cMo_TQtme\", " + 
                    " \"name\": \"_EM_858_XYZ_\", " + 
                    " \"score\": 707, " + 
                    " \"snapshotDate\": \"2002-04-23T24:10:50\", " + 
                    " \"starsCount\": 741 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 941, " + 
                    " \"description\": \"_EM_860_XYZ_\", " + 
                    " \"forksCount\": 424, " + 
                    " \"gitHubProjectId\": 421, " + 
                    " \"languageList\": [ " + 
                    " \"ipuh5EBB\", " + 
                    " \"_EM_862_XYZ_\", " + 
                    " \"H84C\" " + 
                    " ], " + 
                    " \"lastPushed\": \"tDmxueZ2mrdixNeG\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_863_XYZ_\", " + 
                    " \"_EM_864_XYZ_\", " + 
                    " \"_EM_865_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"oSaToWDUp03wC\", " + 
                    " \"primaryLanguage\": \"IOV9\", " + 
                    " \"score\": 595, " + 
                    " \"snapshotDate\": \"2098-10-13T24:01:44\", " + 
                    " \"title\": \"_EM_867_XYZ_\", " + 
                    " \"url\": \"_EM_868_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 584, " + 
                    " \"contributorsCount\": 466, " + 
                    " \"forksCount\": 951, " + 
                    " \"gitHubProjectId\": 80, " + 
                    " \"image\": \"_EM_870_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"JXmg89Uq63b0U\", " + 
                    " \"PEwNPSjwV\", " + 
                    " \"_EM_871_XYZ_\", " + 
                    " \"fSb1Ze3WytPC\" " + 
                    " ], " + 
                    " \"organizationName\": \"_EM_873_XYZ_\", " + 
                    " \"starsCount\": 441, " + 
                    " \"title\": \"02gWRe0qR\" " + 
                    " }, " + 
                    " { " + 
                    " \"description\": \"_EM_875_XYZ_\", " + 
                    " \"externalContributorsCount\": 460, " + 
                    " \"gitHubProjectId\": 1814353997, " + 
                    " \"organizationName\": \"_EM_882_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_883_XYZ_\", " + 
                    " \"title\": \"P7EeoNDcU\", " + 
                    " \"url\": \"_EM_884_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 697, " + 
                    " \"forksCount\": 861, " + 
                    " \"gitHubProjectId\": 569, " + 
                    " \"organizationName\": \"_EM_888_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_889_XYZ_\", " + 
                    " \"score\": 794033663, " + 
                    " \"snapshotDate\": \"1946-11-23T01:22:18\", " + 
                    " \"title\": \"7N0S9ZxXLDnt\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        ValidatableResponse res_6 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/mail/MailSender_30_send
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.mail.MailSendException"))
                .body("'message'", containsString("Mail server connection failed; nested exception is javax.mail.MessagingException: Could not connect to SMTP host: mailtrap.io, port: 25;\n  nested exception is:\n\tjava.net.ConnectException: Connection timed out: connect. Failed messages: javax.mail.MessagingException: Could not connect to SMTP host: mailtrap.io, port: 25;\n  nested exception is:\n\tjava.net.ConnectException: Connection timed out: connect"))
                .body("'path'", containsString("/fetch"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_6.extract().statusCode()));
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=302&" + 
                    "access_token=E&" + 
                    "start_date=jrnN83quJ")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        ValidatableResponse res_9 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=302&" + 
                    "start_date=jrnN83quJ&" + 
                    "end_date=j51XXwA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_9.extract().statusCode()));
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "limit=-558&" + 
                    "offset=-31945&" + 
                    "q=&" + 
                    "access_token=_EM_90_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_42_XYZ_")
                .contentType("application/json")
                .body(" \"o0zD50\" ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_41_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_42_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=o0zD50")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=Jh6FFGVzvtomG36&" + 
                    "end_date=_EM_91_XYZ_&" + 
                    "access_token=o0zD50")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_93_XYZ_&" + 
                    "end_date=_EM_95_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "offset=450&" + 
                    "q=_EM_100_XYZ_")
                .then()
                .statusCode(500) // org/zalando/catwatch/backend/util/JavaScriptExecutor_48_execute
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/languages"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_5.extract().statusCode()));
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=loOHUk_OP4RCT_8&" + 
                    "limit=-130437&" + 
                    "offset=477&" + 
                    "sortBy=_EM_106_XYZ_&" + 
                    "q=1&" + 
                    "access_token=_EM_111_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }


}
