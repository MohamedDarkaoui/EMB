import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T21:56:35.931+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 37 tests
 * <br>
 * Covered targets: 936
 * <br>
 * Used time: 1h 3m 38s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "_EM_23_XYZ_")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 16L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"pCH8Bt\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "755")
                .d("LAST_PUSHED", "\"6D4eN5\"")
                .d("NAME", "\"qcU_qJnRmrCLSR\"")
                .d("ORGANIZATION_NAME", "\"MGonyXa\"")
                .d("PRIMARY_LANGUAGE", "\"7ZiIybLh\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "NULL")
                .d("TITLE", "\"QxML1AUukAKumuX\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "346")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=MGonyXa&" + 
                    "limit=277&" + 
                    "start_date=2057-11-24T14%3A60%3A16&" + 
                    "sortBy=_EM_367_XYZ_&" + 
                    "q=_EM_368_XYZ_&" + 
                    "language=7ZiIybLh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2057-11-24T14:60:16'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2057-11-24T14:60:16]"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "eV7")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 524, " + 
                    " \"key\": { " + 
                    " \"id\": 89, " + 
                    " \"organizationId\": 637 " + 
                    " }, " + 
                    " \"name\": \"ygvfDQ\", " + 
                    " \"organizationId\": 319, " + 
                    " \"organizationalCommitsCount\": 998, " + 
                    " \"personalProjectsCount\": 1589747407, " + 
                    " \"snapshotDate\": \"1946-01-07T22:42:52\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 521, " + 
                    " \"loginId\": \"KEyEmHf\", " + 
                    " \"name\": \"zesxCAkgZuS\", " + 
                    " \"organizationName\": \"\", " + 
                    " \"organizationalProjectsCount\": 358, " + 
                    " \"personalCommitsCount\": 114, " + 
                    " \"personalProjectsCount\": 668, " + 
                    " \"snapshotDate\": \"1912-08-31T00:08:25\", " + 
                    " \"url\": \"bbGfPbBXx\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 707, " + 
                    " \"key\": { " + 
                    " \"id\": -1302983822, " + 
                    " \"snapshotDate\": \"2094-04-13T14:36:19\" " + 
                    " }, " + 
                    " \"loginId\": \"J8oGppkQVn3DX9\", " + 
                    " \"organizationId\": 6211616450496150924, " + 
                    " \"personalProjectsCount\": -3187, " + 
                    " \"url\": \"LS4AHliikrytDjz4\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 523, " + 
                    " \"contributorsCount\": 49, " + 
                    " \"description\": \"ylncZ31y\", " + 
                    " \"image\": \"mJ\", " + 
                    " \"maintainers\": [ " + 
                    " \"w8iOlW6ChXEL\", " + 
                    " \"8BRqT\", " + 
                    " \"7H7scyi5v\" " + 
                    " ], " + 
                    " \"organizationName\": \"IGjY2b5TOjIfkT15\", " + 
                    " \"snapshotDate\": \"1905-10-16T-1:58:56\", " + 
                    " \"url\": \"NtMAKEr89\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 647, " + 
                    " \"allForksCount\": 516, " + 
                    " \"allSizeCount\": 304, " + 
                    " \"allStarsCount\": 761, " + 
                    " \"id\": -1308521031876188714, " + 
                    " \"key\": { " + 
                    " \"id\": 230, " + 
                    " \"snapshotDate\": \"1989-02-20T02:56:33\" " + 
                    " }, " + 
                    " \"membersCount\": 727, " + 
                    " \"organizationName\": \"2QxZ\", " + 
                    " \"publicProjectCount\": 337, " + 
                    " \"snapshotDate\": \"2035-11-12T04:55:-1\", " + 
                    " \"tagsCount\": -65237 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 985, " + 
                    " \"allForksCount\": 829, " + 
                    " \"allSizeCount\": 246, " + 
                    " \"externalContributorsCount\": 723, " + 
                    " \"id\": 971, " + 
                    " \"membersCount\": 965, " + 
                    " \"privateProjectCount\": 259, " + 
                    " \"teamsCount\": 177 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 72, " + 
                    " \"allForksCount\": 823, " + 
                    " \"allSizeCount\": 504, " + 
                    " \"externalContributorsCount\": 400, " + 
                    " \"id\": 718, " + 
                    " \"key\": {}, " + 
                    " \"membersCount\": 92, " + 
                    " \"organizationName\": \"unMY\", " + 
                    " \"publicProjectCount\": 324, " + 
                    " \"snapshotDate\": \"2054-10-00T04:36:09\", " + 
                    " \"tagsCount\": 969, " + 
                    " \"teamsCount\": 1049555 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 136, " + 
                    " \"allSizeCount\": -261625, " + 
                    " \"allStarsCount\": 0, " + 
                    " \"externalContributorsCount\": 630, " + 
                    " \"id\": 406, " + 
                    " \"key\": {}, " + 
                    " \"membersCount\": 653, " + 
                    " \"programLanguagesCount\": 676, " + 
                    " \"snapshotDate\": \"1996-00-31T04:57:11\", " + 
                    " \"tagsCount\": 569 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 104, " + 
                    " \"externalContributorsCount\": 742, " + 
                    " \"id\": -117524834, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2012-00-28T12:57:11\" " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_990_XYZ_\", " + 
                    " \"privateProjectCount\": 679, " + 
                    " \"programLanguagesCount\": 180, " + 
                    " \"publicProjectCount\": 522684674, " + 
                    " \"snapshotDate\": \"1996-02-06T12:36:43\", " + 
                    " \"tagsCount\": 702 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "r")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=LwkLB7verN&" + 
                    "end_date=08lmn0yxpMS&" + 
                    "EMextraParam123=_EM_545_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "ozpPZiB")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "offset=2887&" + 
                    "q=e9mQMXuo3IsQXh&" + 
                    "access_token=&" + 
                    "end_date=Y3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "mp77Kmxmn")
                .header("X-Organizations", "6Jlu")
                .get(baseUrlOfSut + "/config?" + 
                    "access_token=&" + 
                    "end_date=IgLR&" + 
                    "organizations=WPTH&" + 
                    "start_date=W&" + 
                    "q=G&" + 
                    "offset=ZBrn&" + 
                    "limit=Ed&" + 
                    "sortBy=hp4FNX3BnQ6L")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "access_token=&" + 
                    "organizations=UiEz&" + 
                    "limit=PajnkJslK4Lb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_0_XYZ_&" + 
                    "end_date=_EM_2_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_2_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=dHCTOA_NpzY4qA&" + 
                    "end_date=_EM_230_XYZ_&" + 
                    "EMextraParam123=_EM_6_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_230_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=mCDVtSMA&" + 
                    "end_date=ZFvUnSTfkBu9AEnJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string ZFvUnSTfkBu9AEnJ."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_93_XYZ_&" + 
                    "end_date=_EM_95_XYZ_&" + 
                    "EMextraParam123=_EM_96_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 54L)
                .d("ID", "228")
                .d("SNAPSHOT_DATE", "\"1970-09-01 02:09:24\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "764")
                .d("ALL_STARS_COUNT", "576")
                .d("MEMBERS_COUNT", "44")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "187")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "975")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?start_date=KL5bu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_20_XYZ_")
                .get(baseUrlOfSut + "/delete?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_39_XYZ_")
                .header("x-EMextraHeader123", "_EM_42_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_40_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_41_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 7L)
                .d("ID", "430")
                .d("SNAPSHOT_DATE", "\"1953-09-03 13:49:25\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "729")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "54")
                .d("PROGRAM_LANGUAGES_COUNT", "213")
                .d("PUBLIC_PROJECT_COUNT", "439")
                .d("TAGS_COUNT", "91")
                .d("TEAMS_COUNT", "859")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "2109494912")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "EMextraParam123=_EM_127_XYZ_&" + 
                    "access_token=_EM_129_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_42_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=o0zD50")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=_EM_4_XYZ_&" + 
                    "start_date=_EM_5_XYZ_&" + 
                    "end_date=m4v_3LiYw4CFRiR&" + 
                    "EMextraParam123=_EM_6_XYZ_&" + 
                    "access_token=_EM_299_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 9L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"_EM_265_XYZ_\"")
                .d("FORKS_COUNT", "987")
                .d("GIT_HUB_PROJECT_ID", "248")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_267_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"wIXr8uZ\"")
                .d("PRIMARY_LANGUAGE", "\"_EM_268_XYZ_\"")
                .d("SCORE", "618")
                .d("SNAPSHOT_DATE", "\"2064-12-16 05:04:15\"")
                .d("STARS_COUNT", "792")
                .d("URL", "\"_EM_269_XYZ_\"")
                .d("TITLE", "\"_EM_270_XYZ_\"")
                .d("IMAGE", "\"_EM_271_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "43")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=wIXr8uZ&" + 
                    "end_date=ArH1MIQjGS&" + 
                    "access_token=_EM_274_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=_EM_1124_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_261_XYZ_")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_256_XYZ_&" + 
                    "end_date=7b&" + 
                    "sortBy=_EM_258_XYZ_&" + 
                    "EMextraParam123=_EM_260_XYZ_&" + 
                    "access_token=_nXaoqQScswwpp")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 655, " + 
                    " \"key\": { " + 
                    " \"id\": 503, " + 
                    " \"snapshotDate\": \"1988-03-10T06:00:07\" " + 
                    " }, " + 
                    " \"name\": \"6lBqZ9\", " + 
                    " \"organizationId\": 551, " + 
                    " \"personalCommitsCount\": 369, " + 
                    " \"snapshotDate\": \"1989-12-26T03:42:57\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 984, " + 
                    " \"contributorsCount\": 590121580, " + 
                    " \"externalContributorsCount\": 816, " + 
                    " \"maintainers\": [ " + 
                    " \"6vbVWxJD\", " + 
                    " \"reZ8V\" " + 
                    " ], " + 
                    " \"name\": \"lP\", " + 
                    " \"organizationName\": \"1MlClREYkfgyfscG\", " + 
                    " \"snapshotDate\": \"1904-05-02T05:27:09\", " + 
                    " \"starsCount\": 343, " + 
                    " \"title\": \"1oZxKEc\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 13L)
                .d("COMMITS_COUNT", "39")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "21")
                .d("GIT_HUB_PROJECT_ID", "860")
                .d("LAST_PUSHED", "\"_EM_313_XYZ_\"")
                .d("NAME", "\"4c\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"iOfzfZGj5Xz24\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "269")
                .d("URL", "\"_EM_314_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_316_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 375, " + 
                    " \"name\": \"eOvn3\", " + 
                    " \"organizationId\": 339, " + 
                    " \"organizationName\": \"3t7JE\", " + 
                    " \"personalCommitsCount\": 662, " + 
                    " \"personalProjectsCount\": 24 " + 
                    " }, " + 
                    " { " + 
                    " \"loginId\": \"W8E\", " + 
                    " \"organizationalCommitsCount\": 480, " + 
                    " \"personalProjectsCount\": 2031871898, " + 
                    " \"snapshotDate\": \"2016-10-00T00:34:00\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 692, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 482 " + 
                    " }, " + 
                    " \"name\": \"\", " + 
                    " \"organizationId\": 651, " + 
                    " \"organizationalCommitsCount\": 912, " + 
                    " \"personalCommitsCount\": 970 " + 
                    " }, " + 
                    " { " + 
                    " \"organizationName\": \"ieWL4ERcCoFXj_v\", " + 
                    " \"organizationalProjectsCount\": 343, " + 
                    " \"personalCommitsCount\": 678, " + 
                    " \"url\": \"A1W9tbolXn0\" " + 
                    " }, " + 
                    " { " + 
                    " \"organizationName\": \"cVK7xLD\", " + 
                    " \"organizationalCommitsCount\": 8, " + 
                    " \"personalProjectsCount\": 582 " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 205, " + 
                    " \"description\": \"NYeNl0bSMER9ra1J\", " + 
                    " \"externalContributorsCount\": 450, " + 
                    " \"gitHubProjectId\": -2016785056057834564, " + 
                    " \"organizationName\": \"\", " + 
                    " \"primaryLanguage\": \"gwK2PQdI\", " + 
                    " \"score\": 566, " + 
                    " \"starsCount\": 21, " + 
                    " \"title\": \"Q2xOkATK9DgG1\", " + 
                    " \"url\": \"eUw\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "TsABjKWh5JQtzToR")
                .get(baseUrlOfSut + "/fetch?access_token=td4Sg")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=_EM_311_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 921, " + 
                    " \"loginId\": \"_EM_55_XYZ_\", " + 
                    " \"organizationId\": 4350247198149072267, " + 
                    " \"organizationName\": \"_EM_57_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 785, " + 
                    " \"organizationalProjectsCount\": 330, " + 
                    " \"personalCommitsCount\": -207774907, " + 
                    " \"url\": \"_EM_58_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 3097450397912900673, " + 
                    " \"organizationName\": \"_EM_61_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 1148518297, " + 
                    " \"organizationalProjectsCount\": 510, " + 
                    " \"snapshotDate\": \"1995-09-22T04:35:22\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": {}, " + 
                    " \"name\": \"_EM_64_XYZ_\", " + 
                    " \"organizationName\": \"_EM_65_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 492776589, " + 
                    " \"organizationalProjectsCount\": -1121185535, " + 
                    " \"personalProjectsCount\": 17, " + 
                    " \"url\": \"_EM_66_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"id\": 967, " + 
                    " \"key\": { " + 
                    " \"id\": 40 " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_67_XYZ_\", " + 
                    " \"programLanguagesCount\": 893, " + 
                    " \"tagsCount\": 759, " + 
                    " \"teamsCount\": 287 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 273, " + 
                    " \"allStarsCount\": 594, " + 
                    " \"key\": { " + 
                    " \"id\": 458, " + 
                    " \"snapshotDate\": \"1958-13-17T21:07:31\" " + 
                    " }, " + 
                    " \"programLanguagesCount\": 655, " + 
                    " \"snapshotDate\": \"1908-01-00T11:06:02\", " + 
                    " \"tagsCount\": 244, " + 
                    " \"teamsCount\": 649 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 451, " + 
                    " \"externalContributorsCount\": 591, " + 
                    " \"key\": { " + 
                    " \"id\": 624, " + 
                    " \"snapshotDate\": \"2099-11-30T16:08:34\" " + 
                    " }, " + 
                    " \"membersCount\": 926, " + 
                    " \"privateProjectCount\": 955, " + 
                    " \"programLanguagesCount\": 515, " + 
                    " \"tagsCount\": 772 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_239_XYZ_")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=_EM_234_XYZ_&" + 
                    "limit=536&" + 
                    "start_date=1982-09-21T-1%3A37%3A28&" + 
                    "sortBy=_EM_235_XYZ_&" + 
                    "q=_EM_236_XYZ_&" + 
                    "language=_EM_237_XYZ_&" + 
                    "EMextraParam123=_EM_238_XYZ_&" + 
                    "access_token=_EM_240_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .get(baseUrlOfSut + "/export?access_token=_EM_356_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 379658527, " + 
                    " \"description\": \"_EM_440_XYZ_\", " + 
                    " \"externalContributorsCount\": 682, " + 
                    " \"gitHubProjectId\": 407, " + 
                    " \"lastPushed\": \"RDXv8ZrTviOa5f\", " + 
                    " \"organizationName\": \"_EM_444_XYZ_\", " + 
                    " \"snapshotDate\": \"1936-04-13T19:17:38\", " + 
                    " \"url\": \"xpBr_MJ\" " + 
                    " }, " + 
                    " { " + 
                    " \"externalContributorsCount\": 820, " + 
                    " \"image\": \"_EM_448_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_449_XYZ_\", " + 
                    " \"_EM_450_XYZ_\", " + 
                    " \"_EM_451_XYZ_\", " + 
                    " \"_EM_452_XYZ_\", " + 
                    " \"Dqg\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_453_XYZ_\", " + 
                    " \"name\": \"_EM_458_XYZ_\", " + 
                    " \"score\": 833, " + 
                    " \"starsCount\": 185, " + 
                    " \"title\": \"9rXqvU\", " + 
                    " \"url\": \"_EM_460_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 911, " + 
                    " \"allForksCount\": 52, " + 
                    " \"allSizeCount\": 428, " + 
                    " \"allStarsCount\": 525, " + 
                    " \"externalContributorsCount\": 270, " + 
                    " \"id\": -191787951, " + 
                    " \"membersCount\": 282, " + 
                    " \"organizationName\": \"_EM_461_XYZ_\", " + 
                    " \"privateProjectCount\": 294, " + 
                    " \"publicProjectCount\": 523, " + 
                    " \"tagsCount\": 191 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 426, " + 
                    " \"key\": { " + 
                    " \"id\": 399 " + 
                    " }, " + 
                    " \"membersCount\": 510, " + 
                    " \"privateProjectCount\": 847, " + 
                    " \"programLanguagesCount\": 254, " + 
                    " \"teamsCount\": 815 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 750955109, " + 
                    " \"allForksCount\": 469, " + 
                    " \"externalContributorsCount\": 184, " + 
                    " \"organizationName\": \"_EM_463_XYZ_\", " + 
                    " \"privateProjectCount\": 574, " + 
                    " \"programLanguagesCount\": 463, " + 
                    " \"publicProjectCount\": 935, " + 
                    " \"snapshotDate\": \"1974-11-00T06:02:54\" " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 398, " + 
                    " \"allStarsCount\": 188, " + 
                    " \"id\": 251, " + 
                    " \"key\": { " + 
                    " \"id\": 449, " + 
                    " \"snapshotDate\": \"1965-04-00T16:34:25\" " + 
                    " }, " + 
                    " \"membersCount\": 794, " + 
                    " \"programLanguagesCount\": 395, " + 
                    " \"snapshotDate\": \"2044-13-30T22:33:27\", " + 
                    " \"tagsCount\": 691 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_134_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=yE14dIQF&" + 
                    "end_date=_EM_132_XYZ_&" + 
                    "EMextraParam123=_EM_133_XYZ_&" + 
                    "access_token=_EM_135_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"gitHubProjectId\": 947, " + 
                    " \"image\": \"_EM_151_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_152_XYZ_\", " + 
                    " \"_EM_153_XYZ_\", " + 
                    " \"3UxDE\", " + 
                    " \"_EM_154_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_155_XYZ_\", " + 
                    " \"primaryLanguage\": \"w\", " + 
                    " \"score\": 37, " + 
                    " \"snapshotDate\": \"1949-11-14T06:39:54\", " + 
                    " \"starsCount\": 288 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 904, " + 
                    " \"image\": \"_EM_165_XYZ_\", " + 
                    " \"name\": \"_EM_172_XYZ_\", " + 
                    " \"organizationName\": \"_EM_173_XYZ_\", " + 
                    " \"score\": 35, " + 
                    " \"snapshotDate\": \"2054-12-21T14:47:00\", " + 
                    " \"starsCount\": 315 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 581, " + 
                    " \"contributorsCount\": 159, " + 
                    " \"image\": \"\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_182_XYZ_\", " + 
                    " \"_EM_183_XYZ_\", " + 
                    " \"_EM_184_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_185_XYZ_\", " + 
                    " \"organizationName\": \"1\", " + 
                    " \"snapshotDate\": \"2063-06-21T11:26:17\", " + 
                    " \"starsCount\": 951, " + 
                    " \"url\": \"_EM_187_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 207, " + 
                    " \"description\": \"_EM_188_XYZ_\", " + 
                    " \"externalContributorsCount\": 813, " + 
                    " \"forksCount\": 142, " + 
                    " \"image\": \"_EM_189_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_192_XYZ_\", " + 
                    " \"_EM_193_XYZ_\", " + 
                    " \"_EM_194_XYZ_\", " + 
                    " \"_EM_195_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_197_XYZ_\", " + 
                    " \"starsCount\": 14 " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 284, " + 
                    " \"externalContributorsCount\": 209, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_201_XYZ_\", " + 
                    " \"_EM_202_XYZ_\", " + 
                    " \"_EM_203_XYZ_\", " + 
                    " \"_EM_204_XYZ_\", " + 
                    " \"_EM_205_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [], " + 
                    " \"snapshotDate\": \"2074-03-06T08:02:09\", " + 
                    " \"starsCount\": 911, " + 
                    " \"title\": \"G_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"id\": 2946733417311041635, " + 
                    " \"key\": {}, " + 
                    " \"organizationName\": \"_EM_211_XYZ_\", " + 
                    " \"programLanguagesCount\": 1737657686, " + 
                    " \"snapshotDate\": \"2059-02-15T16:37:06\", " + 
                    " \"teamsCount\": 359 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 582, " + 
                    " \"id\": 134, " + 
                    " \"key\": { " + 
                    " \"id\": -771078120 " + 
                    " }, " + 
                    " \"programLanguagesCount\": 733, " + 
                    " \"publicProjectCount\": 290, " + 
                    " \"snapshotDate\": \"1948-04-01T17:38:34\", " + 
                    " \"tagsCount\": 931, " + 
                    " \"teamsCount\": 152 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 839, " + 
                    " \"allSizeCount\": 686691052, " + 
                    " \"allStarsCount\": 811, " + 
                    " \"externalContributorsCount\": 432, " + 
                    " \"id\": 1388204030, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1993-09-17T22:40:22\" " + 
                    " }, " + 
                    " \"membersCount\": 986, " + 
                    " \"privateProjectCount\": 218, " + 
                    " \"teamsCount\": 354 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 105, " + 
                    " \"key\": {}, " + 
                    " \"organizationName\": \"_EM_214_XYZ_\", " + 
                    " \"privateProjectCount\": 196, " + 
                    " \"programLanguagesCount\": 705, " + 
                    " \"publicProjectCount\": 8, " + 
                    " \"tagsCount\": 246, " + 
                    " \"teamsCount\": 690 " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 200, " + 
                    " \"snapshotDate\": \"2040-06-10T07:59:08\" " + 
                    " }, " + 
                    " \"membersCount\": 276, " + 
                    " \"organizationName\": \"_EM_215_XYZ_\", " + 
                    " \"privateProjectCount\": 768, " + 
                    " \"programLanguagesCount\": 96, " + 
                    " \"publicProjectCount\": 531, " + 
                    " \"snapshotDate\": \"2044-09-25T24:14:35\", " + 
                    " \"tagsCount\": -1686560931 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_216_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/config?access_token=_EM_136_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=Bt&" + 
                    "access_token=_EM_594_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }


}
