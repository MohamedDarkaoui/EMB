import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T21:56:35.920+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 8 tests
 * <br>
 * Covered targets: 365
 * <br>
 * Used time: 1h 3m 38s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/config?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", containsString("jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;"))
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=organization1%2Corganization2&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?organizations=d40SzQmIu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 28L)
                .d("ID", "986")
                .d("SNAPSHOT_DATE", "\"2095-07-21 15:15:06\"")
                .d("ALL_CONTRIBUTORS_COUNT", "677")
                .d("ALL_FORKS_COUNT", "398")
                .d("ALL_SIZE_COUNT", "760")
                .d("ALL_STARS_COUNT", "544")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "411")
                .d("TEAMS_COUNT", "532")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "711")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=organization1&" + 
                    "start_date=2024-05-29T04%3A05%3A12Z&" + 
                    "end_date=2024-05-31T04%3A04%3A12Z&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 49L)
                .d("ID", "949")
                .d("ORGANIZATION_ID", "907")
                .d("SNAPSHOT_DATE", "\"1940-09-24 12:48:22\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"2Vse\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "146")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "1203")
                .d("PERSONAL_COMMITS_COUNT", "146")
                .d("PERSONAL_PROJECTS_COUNT", "415")
                .d("URL", "\"1lu4c3\"")
            .and().insertInto("PROJECT", 50L)
                .d("COMMITS_COUNT", "70")
                .d("CONTRIBUTORS_COUNT", "92")
                .d("DESCRIPTION", "\"FcK13VwdKWT95Fy\"")
                .d("FORKS_COUNT", "928")
                .d("GIT_HUB_PROJECT_ID", "511")
                .d("LAST_PUSHED", "\"_EM_961_XYZ_\"")
                .d("NAME", "\"6XIIBX\"")
                .d("ORGANIZATION_NAME", "\"_EM_994_XYZ_\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "269")
                .d("SNAPSHOT_DATE", "\"2037-02-08 02:28:00\"")
                .d("STARS_COUNT", "232")
                .d("URL", "\"oyBVznCax\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"8S49q\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(907.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1940-09-24T12:48:22"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", containsString("1lu4c3"))
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(146.0))
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(146.0))
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(415.0))
                .body("'contributors'[0].'organizationalProjectsCount'", numberMatches(1203.0))
                .body("'contributors'[0].'organizationName'", containsString("2Vse"))
                .body("'contributors'[0].'organizationId'", numberMatches(907.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(-9.23663498E11))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(511.0))
                .body("'projects'[0].'snapshotDate'", containsString("2037-02-08T02:28:00"))
                .body("'projects'[0].'name'", containsString("6XIIBX"))
                .body("'projects'[0].'title'", nullValue())
                .body("'projects'[0].'image'", containsString("8S49q"))
                .body("'projects'[0].'organizationName'", containsString("_EM_994_XYZ_"))
                .body("'projects'[0].'url'", containsString("oyBVznCax"))
                .body("'projects'[0].'description'", containsString("FcK13VwdKWT95Fy"))
                .body("'projects'[0].'starsCount'", numberMatches(232.0))
                .body("'projects'[0].'commitsCount'", numberMatches(70.0))
                .body("'projects'[0].'forksCount'", numberMatches(928.0))
                .body("'projects'[0].'contributorsCount'", numberMatches(92.0))
                .body("'projects'[0].'externalContributorsCount'", nullValue())
                .body("'projects'[0].'score'", numberMatches(269.0))
                .body("'projects'[0].'lastPushed'", containsString("_EM_961_XYZ_"))
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 40L)
                .d("ID", "219")
                .d("ORGANIZATION_ID", "302")
                .d("SNAPSHOT_DATE", "\"1973-10-17 16:42:10\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "141")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .and().insertInto("STATISTICS", 41L)
                .d("ID", "45")
                .d("SNAPSHOT_DATE", "\"1962-07-14 16:29:35\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "677")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "800")
                .d("ORGANIZATION_NAME", "\"302\"")
                .d("PRIVATE_PROJECT_COUNT", "1495727345")
                .d("PROGRAM_LANGUAGES_COUNT", "977")
                .d("PUBLIC_PROJECT_COUNT", "105")
                .d("TAGS_COUNT", "163")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(302.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1973-10-17T16:42:10"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(141.0))
                .body("'contributors'[0].'personalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'organizationId'", numberMatches(302.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(1.1972053E11))
                .body("'projects'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1962-07-14T16:29:35"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(1.495727345E9))
                .body("'statistics'[0].'publicProjectCount'", numberMatches(105.0))
                .body("'statistics'[0].'membersCount'", numberMatches(800.0))
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", nullValue())
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", numberMatches(677.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(977.0))
                .body("'statistics'[0].'tagsCount'", numberMatches(163.0))
                .body("'statistics'[0].'organizationName'", containsString("302"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(-2.35643425E11));
        
    }


}
