import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-03T01:45:30.719+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 35 tests
 * <br>
 * Covered targets: 336
 * <br>
 * Used time: 1h 3m 35s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=121&" + 
                    "sortBy=&" + 
                    "q=_EM_33_XYZ_&" + 
                    "language=_EM_1452_XYZ_&" + 
                    "EMextraParam123=_EM_35_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "ciR")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_715_XYZ_")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "limit=-523926&" + 
                    "offset=732112833&" + 
                    "q=&" + 
                    "EMextraParam123=_EM_29_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/export?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 235, " + 
                    " \"externalContributorsCount\": 180, " + 
                    " \"image\": \"lbpSn7Yu\", " + 
                    " \"lastPushed\": \"rwEnN7Q5\", " + 
                    " \"name\": \"4O\", " + 
                    " \"organizationName\": \"Y_WzhZeCkhzUq\", " + 
                    " \"primaryLanguage\": \"b\", " + 
                    " \"score\": 708, " + 
                    " \"snapshotDate\": \"2029-06-14T22:49:37\", " + 
                    " \"starsCount\": 531 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 582, " + 
                    " \"contributorsCount\": 198, " + 
                    " \"description\": \"DntRZUXdKgfxXa\", " + 
                    " \"gitHubProjectId\": 59, " + 
                    " \"image\": \"dvbTAge7QJC_n_dc\", " + 
                    " \"lastPushed\": \"euiGclPj1C5\", " + 
                    " \"name\": \"XaqnKE\", " + 
                    " \"organizationName\": \"Wl4B821JbNnBqtf\", " + 
                    " \"primaryLanguage\": \"H2_IyX\", " + 
                    " \"snapshotDate\": \"1926-13-25T06:19:14\", " + 
                    " \"starsCount\": 930, " + 
                    " \"url\": \"Ge5\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 347, " + 
                    " \"description\": \"x\", " + 
                    " \"externalContributorsCount\": 32, " + 
                    " \"forksCount\": 442, " + 
                    " \"image\": \"\", " + 
                    " \"languageList\": [], " + 
                    " \"maintainers\": [ " + 
                    " \"Be\", " + 
                    " \"442a\", " + 
                    " \"lY2ADAeheQtbeSI\" " + 
                    " ], " + 
                    " \"organizationName\": \"3u\", " + 
                    " \"score\": 662 " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 400 " + 
                    " }, " + 
                    " \"organizationName\": \"InOUcdJR0eG9wk\", " + 
                    " \"privateProjectCount\": 985, " + 
                    " \"tagsCount\": 128, " + 
                    " \"teamsCount\": 869 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 757, " + 
                    " \"allStarsCount\": 299, " + 
                    " \"programLanguagesCount\": 32, " + 
                    " \"publicProjectCount\": 860, " + 
                    " \"tagsCount\": 450 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 543, " + 
                    " \"allForksCount\": 808, " + 
                    " \"allSizeCount\": 649, " + 
                    " \"membersCount\": 89, " + 
                    " \"organizationName\": \"IinUj3AgxGKwY\", " + 
                    " \"privateProjectCount\": 966, " + 
                    " \"programLanguagesCount\": 368, " + 
                    " \"snapshotDate\": \"2011-05-11T06:47:36\", " + 
                    " \"teamsCount\": 937 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 892, " + 
                    " \"allForksCount\": 912, " + 
                    " \"allStarsCount\": 666, " + 
                    " \"externalContributorsCount\": 512, " + 
                    " \"id\": 636, " + 
                    " \"key\": {}, " + 
                    " \"privateProjectCount\": 595, " + 
                    " \"publicProjectCount\": 910, " + 
                    " \"snapshotDate\": \"2027-03-14T06:20:16\", " + 
                    " \"teamsCount\": 698 " + 
                    " }, " + 
                    " { " + 
                    " \"allStarsCount\": 148, " + 
                    " \"externalContributorsCount\": 402, " + 
                    " \"key\": { " + 
                    " \"id\": -2950088378764045609 " + 
                    " }, " + 
                    " \"organizationName\": \"bJGY\", " + 
                    " \"privateProjectCount\": 542, " + 
                    " \"programLanguagesCount\": 31, " + 
                    " \"tagsCount\": 748, " + 
                    " \"teamsCount\": 383 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "s21s7rqMdUgDcxh")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=k0ysU1SbXEG9G&" + 
                    "end_date=&" + 
                    "q=d9&" + 
                    "access_token=&" + 
                    "language=Vb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "gZxoGZxkucaa")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_10_XYZ_&" + 
                    "start_date=_EM_11_XYZ_&" + 
                    "end_date=_EM_12_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_11_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_0_XYZ_&" + 
                    "end_date=_EM_2_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_2_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=_EM_7_XYZ_&" + 
                    "EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_7_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_37_XYZ_&" + 
                    "end_date=_EM_39_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 14L)
                .d("ID", "180")
                .d("SNAPSHOT_DATE", "\"1990-03-18 07:16:03\"")
                .d("ALL_CONTRIBUTORS_COUNT", "-626144055")
                .d("ALL_FORKS_COUNT", "920")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "436")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "961")
                .d("PROGRAM_LANGUAGES_COUNT", "19")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "826")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=aazJuQXaqVHP_E&" + 
                    "EMextraParam123=_EM_459_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_22_XYZ_")
                .get(baseUrlOfSut + "/delete?EMextraParam123=_EM_21_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_42_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 8L)
                .d("ID", "868")
                .d("ORGANIZATION_ID", "-1589692433")
                .d("SNAPSHOT_DATE", "\"1991-06-12 09:55:27\"")
                .d("NAME", "\"Ihb8\"")
                .d("ORGANIZATION_NAME", "\"_EM_323_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "987")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_324_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_326_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "end_date=_EM_325_XYZ_&" + 
                    "access_token=_EM_327_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=&" + 
                    "start_date=_EM_11_XYZ_&" + 
                    "end_date=_EM_12_XYZ_&" + 
                    "EMextraParam123=_EM_13_XYZ_&" + 
                    "access_token=_EM_226_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 38L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "656")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_1233_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"_vWVVr2FY6Q\"")
                .d("SCORE", "652")
                .d("SNAPSHOT_DATE", "\"2029-06-04 06:03:10\"")
                .d("STARS_COUNT", "842")
                .d("URL", "\"_EM_1234_XYZ_\"")
                .d("TITLE", "\"_EM_1235_XYZ_\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "627")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "83XKuOtzm")
                .header("x-EMextraHeader123", "_EM_506_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?" + 
                    "EMextraParam123=TUS&" + 
                    "access_token=83XKuOtzm")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_231_XYZ_")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_229_XYZ_&" + 
                    "limit=969&" + 
                    "offset=6&" + 
                    "EMextraParam123=HQHc&" + 
                    "access_token=_EM_232_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=vVM7qdoeiD&" + 
                    "EMextraParam123=_EM_8_XYZ_&" + 
                    "access_token=vXxU")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_228_XYZ_")
                .get(baseUrlOfSut + "/fetch?access_token=o")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=Bx8R6u5jlbyvAhd&" + 
                    "EMextraParam123=42&" + 
                    "access_token=gwjK0EDTf4iG57j2")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 13L)
                .d("ID", "6664185811341328506")
                .d("ORGANIZATION_ID", "852")
                .d("SNAPSHOT_DATE", "\"1973-01-06 20:09:09\"")
                .d("NAME", "\"_EM_450_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "937")
                .d("PERSONAL_COMMITS_COUNT", "377")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=852&" + 
                    "offset=57&" + 
                    "q=T1kAf&" + 
                    "EMextraParam123=_EM_455_XYZ_&" + 
                    "access_token=QHkVn")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .get(baseUrlOfSut + "/config?access_token=_EM_468_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=_EM_463_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "FUa57RDi")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=161&" + 
                    "start_date=2002-05-09T04%3A28%3A01&" + 
                    "end_date=2028-11-06T17%3A44%3A56&" + 
                    "sortBy=aXiae8TqaJ&" + 
                    "q=QK43&" + 
                    "language=yG8qYiA&" + 
                    "access_token=_EM_1052_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=_EM_761_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/export?access_token=Oex_cr7MX")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_99_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"name\": \"_EM_45_XYZ_\", " + 
                    " \"organizationId\": 247, " + 
                    " \"organizationalCommitsCount\": 842, " + 
                    " \"personalCommitsCount\": 337, " + 
                    " \"url\": \"_EM_47_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 398, " + 
                    " \"organizationalProjectsCount\": 26, " + 
                    " \"personalProjectsCount\": 249, " + 
                    " \"snapshotDate\": \"1965-05-32T13:09:-1\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"gitHubProjectId\": 353, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_53_XYZ_\", " + 
                    " \"_EM_54_XYZ_\", " + 
                    " \"rZIa_nqnquVT2\", " + 
                    " \"_EM_55_XYZ_\", " + 
                    " \"_EM_56_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_58_XYZ_\", " + 
                    " \"_EM_59_XYZ_\", " + 
                    " \"4keV\", " + 
                    " \"_EM_60_XYZ_\", " + 
                    " \"_EM_61_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_64_XYZ_\", " + 
                    " \"snapshotDate\": \"1980-11-09T18:21:58\", " + 
                    " \"starsCount\": 849, " + 
                    " \"url\": \"_EM_66_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 685, " + 
                    " \"name\": \"_EM_75_XYZ_\", " + 
                    " \"starsCount\": 1364204742 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 756, " + 
                    " \"contributorsCount\": 852, " + 
                    " \"description\": \"_EM_80_XYZ_\", " + 
                    " \"forksCount\": 549, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_82_XYZ_\", " + 
                    " \"_EM_83_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"I7oBE\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_84_XYZ_\", " + 
                    " \"\", " + 
                    " \"_EM_85_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_86_XYZ_\", " + 
                    " \"organizationName\": \"_EM_87_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_88_XYZ_\", " + 
                    " \"starsCount\": 314, " + 
                    " \"title\": \"_EM_89_XYZ_\", " + 
                    " \"url\": \"_EM_90_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"forksCount\": 932, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_92_XYZ_\" " + 
                    " ], " + 
                    " \"organizationName\": \"_EM_95_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_96_XYZ_\", " + 
                    " \"score\": 289, " + 
                    " \"snapshotDate\": \"2016-11-27T25:23:11\", " + 
                    " \"starsCount\": 345, " + 
                    " \"title\": \"_EM_97_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_99_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 17, " + 
                    " \"description\": \"_EM_956_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_957_XYZ_\", " + 
                    " \"_EM_958_XYZ_\", " + 
                    " \"u2ezP91\", " + 
                    " \"_EM_959_XYZ_\", " + 
                    " \"_EM_960_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_962_XYZ_\", " + 
                    " \"_EM_963_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_964_XYZ_\", " + 
                    " \"organizationName\": \"_EM_965_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_966_XYZ_\", " + 
                    " \"score\": 416, " + 
                    " \"snapshotDate\": \"2100-02-15T25:56:27\", " + 
                    " \"starsCount\": 816, " + 
                    " \"url\": \"_EM_968_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 664, " + 
                    " \"description\": \"g9M2udT\", " + 
                    " \"externalContributorsCount\": 903, " + 
                    " \"image\": \"_bBpymbqNnbl7lu\", " + 
                    " \"name\": \"_EM_973_XYZ_\", " + 
                    " \"organizationName\": \"_EM_974_XYZ_\", " + 
                    " \"score\": 639, " + 
                    " \"starsCount\": 354, " + 
                    " \"title\": \"_EM_976_XYZ_\", " + 
                    " \"url\": \"_EM_977_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 498, " + 
                    " \"allSizeCount\": 101, " + 
                    " \"allStarsCount\": 958, " + 
                    " \"organizationName\": \"_EM_978_XYZ_\", " + 
                    " \"privateProjectCount\": 751, " + 
                    " \"programLanguagesCount\": 832, " + 
                    " \"publicProjectCount\": 180, " + 
                    " \"tagsCount\": 375 " + 
                    " }, " + 
                    " { " + 
                    " \"allStarsCount\": 528, " + 
                    " \"id\": 428, " + 
                    " \"key\": { " + 
                    " \"id\": 176 " + 
                    " }, " + 
                    " \"privateProjectCount\": 827, " + 
                    " \"publicProjectCount\": 357, " + 
                    " \"snapshotDate\": \"2022-01-13T06:10:33\", " + 
                    " \"tagsCount\": 233, " + 
                    " \"teamsCount\": 853 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": -4945774266537784343 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_245_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 171, " + 
                    " \"personalCommitsCount\": 373, " + 
                    " \"personalProjectsCount\": 118, " + 
                    " \"snapshotDate\": \"1908-05-32T06:47:33\", " + 
                    " \"url\": \"_EM_248_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 951, " + 
                    " \"loginId\": \"_EM_249_XYZ_\", " + 
                    " \"name\": \"_EM_250_XYZ_\", " + 
                    " \"organizationId\": 61, " + 
                    " \"organizationName\": \"_EM_251_XYZ_\", " + 
                    " \"personalCommitsCount\": 96, " + 
                    " \"snapshotDate\": \"1954-06-03T09:56:22\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 488, " + 
                    " \"snapshotDate\": \"2010-11-16T07:57:59\" " + 
                    " }, " + 
                    " \"name\": \"Z3iHJz\", " + 
                    " \"organizationName\": \"_EM_253_XYZ_\", " + 
                    " \"personalCommitsCount\": 287, " + 
                    " \"url\": \"_EM_254_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 762031528, " + 
                    " \"key\": {}, " + 
                    " \"loginId\": \"_EM_255_XYZ_\", " + 
                    " \"name\": \"_EM_256_XYZ_\", " + 
                    " \"organizationId\": 346, " + 
                    " \"organizationName\": \"_EM_257_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 451, " + 
                    " \"organizationalProjectsCount\": 407, " + 
                    " \"snapshotDate\": \"1986-08-07T01:04:36\", " + 
                    " \"url\": \"_EM_258_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 911, " + 
                    " \"forksCount\": 917, " + 
                    " \"image\": \"nAEIBknct\", " + 
                    " \"lastPushed\": \"k1\", " + 
                    " \"name\": \"_EM_260_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_262_XYZ_\", " + 
                    " \"score\": 94, " + 
                    " \"snapshotDate\": \"1921-09-13T01:37:05\", " + 
                    " \"starsCount\": 890, " + 
                    " \"title\": \"_EM_263_XYZ_\", " + 
                    " \"url\": \"_EM_264_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allStarsCount\": 589, " + 
                    " \"externalContributorsCount\": 331, " + 
                    " \"key\": { " + 
                    " \"id\": 2112006804 " + 
                    " }, " + 
                    " \"privateProjectCount\": 668, " + 
                    " \"publicProjectCount\": 989, " + 
                    " \"snapshotDate\": \"1954-00-04T14:17:11\" " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 485, " + 
                    " \"id\": 949, " + 
                    " \"membersCount\": 391, " + 
                    " \"organizationName\": \"729rcd\", " + 
                    " \"privateProjectCount\": 282, " + 
                    " \"snapshotDate\": \"1916-08-28T05:07:57\", " + 
                    " \"tagsCount\": 838 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 222, " + 
                    " \"id\": 75, " + 
                    " \"organizationName\": \"_EM_266_XYZ_\", " + 
                    " \"privateProjectCount\": 837, " + 
                    " \"publicProjectCount\": 634 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 403, " + 
                    " \"allForksCount\": 522, " + 
                    " \"allSizeCount\": 37, " + 
                    " \"allStarsCount\": 623, " + 
                    " \"externalContributorsCount\": 927, " + 
                    " \"key\": { " + 
                    " \"id\": 338, " + 
                    " \"snapshotDate\": \"2062-07-19T-1:33:43\" " + 
                    " }, " + 
                    " \"membersCount\": 350, " + 
                    " \"privateProjectCount\": 940, " + 
                    " \"programLanguagesCount\": 500, " + 
                    " \"publicProjectCount\": 100, " + 
                    " \"snapshotDate\": \"2045-05-14T05:07:38\", " + 
                    " \"tagsCount\": 570 " + 
                    " }, " + 
                    " { " + 
                    " \"allStarsCount\": 532, " + 
                    " \"key\": { " + 
                    " \"id\": -769056399 " + 
                    " }, " + 
                    " \"publicProjectCount\": 404, " + 
                    " \"snapshotDate\": \"1968-00-12T25:17:39\", " + 
                    " \"tagsCount\": 14, " + 
                    " \"teamsCount\": 536 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_99_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 547, " + 
                    " \"key\": {}, " + 
                    " \"organizationId\": 483, " + 
                    " \"organizationName\": \"YIUkHExqW9J9Xl3y\", " + 
                    " \"organizationalProjectsCount\": 888, " + 
                    " \"personalCommitsCount\": 873, " + 
                    " \"personalProjectsCount\": 461 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -5978051315153095192, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 91 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_365_XYZ_\", " + 
                    " \"organizationId\": 21, " + 
                    " \"organizationName\": \"_EM_366_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 243, " + 
                    " \"personalCommitsCount\": 349 " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 497 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_368_XYZ_\", " + 
                    " \"name\": \"_EM_369_XYZ_\", " + 
                    " \"organizationName\": \"_EM_370_XYZ_\", " + 
                    " \"snapshotDate\": \"1996-07-28T05:18:00\", " + 
                    " \"url\": \"_EM_371_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 578, " + 
                    " \"organizationName\": \"_EM_373_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 214, " + 
                    " \"snapshotDate\": \"1988-02-24T23:03:28\", " + 
                    " \"url\": \"_EM_374_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 886, " + 
                    " \"contributorsCount\": 923, " + 
                    " \"description\": \"QZihw9z_4NcCdlU\", " + 
                    " \"externalContributorsCount\": 351, " + 
                    " \"forksCount\": 418, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_375_XYZ_\", " + 
                    " \"_EM_376_XYZ_\", " + 
                    " \"_EM_377_XYZ_\", " + 
                    " \"_EM_378_XYZ_\", " + 
                    " \"UZOH\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_379_XYZ_\", " + 
                    " \"name\": \"_EM_383_XYZ_\", " + 
                    " \"score\": 480, " + 
                    " \"snapshotDate\": \"2071-13-32T05:60:48\", " + 
                    " \"starsCount\": 99, " + 
                    " \"title\": \"_EM_386_XYZ_\", " + 
                    " \"url\": \"_EM_387_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allForksCount\": 305, " + 
                    " \"allStarsCount\": 213, " + 
                    " \"externalContributorsCount\": 637, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1914-10-21T09:39:53\" " + 
                    " }, " + 
                    " \"membersCount\": 363, " + 
                    " \"programLanguagesCount\": 594, " + 
                    " \"snapshotDate\": \"2030-11-25T22:59:29\", " + 
                    " \"tagsCount\": 562, " + 
                    " \"teamsCount\": 575 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 724, " + 
                    " \"allSizeCount\": -1799641423, " + 
                    " \"externalContributorsCount\": 818, " + 
                    " \"id\": -5746721051624096473, " + 
                    " \"key\": { " + 
                    " \"id\": -834864921, " + 
                    " \"snapshotDate\": \"2006-02-19T08:41:57\" " + 
                    " }, " + 
                    " \"membersCount\": 876, " + 
                    " \"organizationName\": \"_EM_389_XYZ_\", " + 
                    " \"privateProjectCount\": 555 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 385, " + 
                    " \"allSizeCount\": 69, " + 
                    " \"allStarsCount\": 698, " + 
                    " \"id\": 5096978572768195119, " + 
                    " \"key\": { " + 
                    " \"id\": 709, " + 
                    " \"snapshotDate\": \"1938-02-14T25:41:19\" " + 
                    " }, " + 
                    " \"membersCount\": 0, " + 
                    " \"privateProjectCount\": 391, " + 
                    " \"programLanguagesCount\": 229, " + 
                    " \"snapshotDate\": \"2024-05-21T22:20:55\", " + 
                    " \"tagsCount\": 612 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 198, " + 
                    " \"allSizeCount\": 442, " + 
                    " \"externalContributorsCount\": 546, " + 
                    " \"publicProjectCount\": 885 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 955, " + 
                    " \"membersCount\": 826, " + 
                    " \"privateProjectCount\": 812, " + 
                    " \"snapshotDate\": \"2016-05-05T01:48:16\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
