import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-03T01:45:30.702+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 8 tests
 * <br>
 * Covered targets: 343
 * <br>
 * Used time: 1h 3m 35s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","PROJECT","LANGUAGE_LIST","MAINTAINERS","CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", containsString("jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;"))
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 65L)
                .d("ID", "947723328")
                .d("SNAPSHOT_DATE", "\"2073-12-16 17:51:00\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "46")
                .d("ALL_STARS_COUNT", "429")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"vIDM4hlO\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "790")
                .d("PUBLIC_PROJECT_COUNT", "162")
                .d("TAGS_COUNT", "950")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .get(baseUrlOfSut + "/statistics")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_741_XYZ_")
                .header("X-Organizations", "_EM_742_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?organizations=_tC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 38L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "656")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_1233_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"_vWVVr2FY6Q\"")
                .d("SCORE", "652")
                .d("SNAPSHOT_DATE", "\"2029-06-04 06:03:10\"")
                .d("STARS_COUNT", "842")
                .d("URL", "\"_EM_1234_XYZ_\"")
                .d("TITLE", "\"_EM_1235_XYZ_\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "627")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=&" + 
                    "limit=393&" + 
                    "offset=548&" + 
                    "start_date=1979-12-14T23%3A53%3A59&" + 
                    "end_date=2092-11-13T08%3A09%3A13&" + 
                    "sortBy=_EM_1237_XYZ_&" + 
                    "q=JBnEGX27QjbQ5e")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 76L)
                .d("ID", "482")
                .d("SNAPSHOT_DATE", "\"1925-10-17 17:29:10\"")
                .d("ALL_CONTRIBUTORS_COUNT", "194")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "171")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "929")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "242")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("PROJECT", 77L)
                .d("COMMITS_COUNT", "998")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "724")
                .d("GIT_HUB_PROJECT_ID", "461")
                .d("LAST_PUSHED", "\"pvXK0iqQ4t\"")
                .d("NAME", "\"\"")
                .d("ORGANIZATION_NAME", "\"2GmTKI\"")
                .d("PRIMARY_LANGUAGE", "\"WHdaRsZ\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"2010-02-12 06:05:33\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_2217_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_2218_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "531")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "2GmTKI")
                .header("X-Organizations", "UUFoVhoVjYv")
                .get(baseUrlOfSut + "/statistics/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 67L)
                .d("ID", "879")
                .d("ORGANIZATION_ID", "493")
                .d("SNAPSHOT_DATE", "\"1932-08-30 00:59:35\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "516")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "658")
                .d("URL", "NULL")
            .and().insertInto("PROJECT", 68L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "181")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "1875412975")
                .d("LAST_PUSHED", "\"_EM_2005_XYZ_\"")
                .d("NAME", "\"_EM_2006_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_2008_XYZ_\"")
                .d("TITLE", "\"b6Xsxmr1FlSd1\"")
                .d("IMAGE", "\"1pQzmxx6Ys1fbC_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "499")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(493.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1932-08-30T00:59:35"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(516.0))
                .body("'contributors'[0].'personalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(658.0))
                .body("'contributors'[0].'organizationalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'snapshotDate'", numberMatches(-1.178323225E12))
                .body("'contributors'[0].'organizationId'", numberMatches(493.0))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(1.875412975E9))
                .body("'projects'[0].'snapshotDate'", nullValue())
                .body("'projects'[0].'name'", containsString("_EM_2006_XYZ_"))
                .body("'projects'[0].'title'", containsString("b6Xsxmr1FlSd1"))
                .body("'projects'[0].'image'", containsString("1pQzmxx6Ys1fbC_"))
                .body("'projects'[0].'organizationName'", nullValue())
                .body("'projects'[0].'url'", containsString("_EM_2008_XYZ_"))
                .body("'projects'[0].'description'", nullValue())
                .body("'projects'[0].'starsCount'", nullValue())
                .body("'projects'[0].'commitsCount'", nullValue())
                .body("'projects'[0].'forksCount'", nullValue())
                .body("'projects'[0].'contributorsCount'", numberMatches(181.0))
                .body("'projects'[0].'externalContributorsCount'", numberMatches(499.0))
                .body("'projects'[0].'score'", nullValue())
                .body("'projects'[0].'lastPushed'", containsString("_EM_2005_XYZ_"))
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 67L)
                .d("ID", "879")
                .d("ORGANIZATION_ID", "493")
                .d("SNAPSHOT_DATE", "\"1932-08-30 00:59:35\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"_EM_2050_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "516")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "231")
                .d("PERSONAL_COMMITS_COUNT", "1072693332")
                .d("PERSONAL_PROJECTS_COUNT", "-1047918")
                .d("URL", "\"PERSONAL_COMMITS_COUNT\"")
            .and().insertInto("PROJECT", 68L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "181")
                .d("DESCRIPTION", "\"_EM_2029_XYZ_\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "1876461551")
                .d("LAST_PUSHED", "\"2cbxGnk7\"")
                .d("NAME", "\"_EM_2026_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"_EM_2007_XYZ_\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1928-10-06 00:13:00\"")
                .d("STARS_COUNT", "717")
                .d("URL", "NULL")
                .d("TITLE", "\"b6Xsxmr1FlSd1\"")
                .d("IMAGE", "\"1pQzmxx6Ys1fbC_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "2483")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(493.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1932-08-30T00:59:35"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", containsString("PERSONAL_COMMITS_COUNT"))
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(516.0))
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(1.072693332E9))
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(-1047918.0))
                .body("'contributors'[0].'organizationalProjectsCount'", numberMatches(231.0))
                .body("'contributors'[0].'organizationName'", containsString("_EM_2050_XYZ_"))
                .body("'contributors'[0].'snapshotDate'", numberMatches(-1.178323225E12))
                .body("'contributors'[0].'organizationId'", numberMatches(493.0))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(1.876461551E9))
                .body("'projects'[0].'snapshotDate'", containsString("1928-10-06T00:13:00"))
                .body("'projects'[0].'name'", containsString("_EM_2026_XYZ_"))
                .body("'projects'[0].'title'", containsString("b6Xsxmr1FlSd1"))
                .body("'projects'[0].'image'", containsString("1pQzmxx6Ys1fbC_"))
                .body("'projects'[0].'organizationName'", nullValue())
                .body("'projects'[0].'url'", nullValue())
                .body("'projects'[0].'description'", containsString("_EM_2029_XYZ_"))
                .body("'projects'[0].'starsCount'", numberMatches(717.0))
                .body("'projects'[0].'commitsCount'", nullValue())
                .body("'projects'[0].'forksCount'", nullValue())
                .body("'projects'[0].'contributorsCount'", numberMatches(181.0))
                .body("'projects'[0].'externalContributorsCount'", numberMatches(2483.0))
                .body("'projects'[0].'score'", nullValue())
                .body("'projects'[0].'lastPushed'", containsString("2cbxGnk7"))
                .body("'projects'[0].'primaryLanguage'", containsString("_EM_2007_XYZ_"))
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(0));
        
    }


}
