import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T09:17:13.315+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 9 tests
 * <br>
 * Covered targets: 416
 * <br>
 * Used time: 1h 4m 3s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", containsString("jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;"))
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 6L)
                .d("ID", "465")
                .d("SNAPSHOT_DATE", "\"2079-10-22 15:33:42\"")
                .d("ALL_CONTRIBUTORS_COUNT", "74")
                .d("ALL_FORKS_COUNT", "171")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "725")
                .d("PROGRAM_LANGUAGES_COUNT", "705")
                .d("PUBLIC_PROJECT_COUNT", "92")
                .d("TAGS_COUNT", "798")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_174_XYZ_")
                .get(baseUrlOfSut + "/statistics?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 79L)
                .d("COMMITS_COUNT", "31455974")
                .d("CONTRIBUTORS_COUNT", "2402")
                .d("DESCRIPTION", "\"\"")
                .d("FORKS_COUNT", "300")
                .d("GIT_HUB_PROJECT_ID", "0")
                .d("LAST_PUSHED", "\"_EM_4000_XYZ_\"")
                .d("NAME", "\"KQ3CVa4X1\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "-8192")
                .d("SNAPSHOT_DATE", "\"1934-07-19 16:16:58\"")
                .d("STARS_COUNT", "-8192")
                .d("URL", "\"w4r\"")
                .d("TITLE", "\"2618\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-1051793")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=&" + 
                    "limit=1331&" + 
                    "end_date=2094-09-24T22%3A36%3A22&" + 
                    "q=_EM_1554_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "3m_tnk3xJ_pZV")
                .header("X-Organizations", "sh")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=&" + 
                    "limit=301&" + 
                    "start_date=1976-09-24T04%3A32%3A38&" + 
                    "end_date=1901-01-28T21%3A03%3A26&" + 
                    "sortBy=C9sAuIrEbSexTOX&" + 
                    "q=_EM_4091_XYZ_&" + 
                    "language=dyQO9NAahwzpD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 152L)
                .d("ID", "-3431331649726555207")
                .d("SNAPSHOT_DATE", "\"2072-01-22 08:35:33\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "498")
                .d("ORGANIZATION_NAME", "\"_EM_3681_XYZ_\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "-64830")
                .d("TAGS_COUNT", "1199709945")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_3681_XYZ_")
                .header("X-Organizations", "_EM_2626_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_3681_XYZ_&" + 
                    "offset=_EM_2625_XYZ_&" + 
                    "limit=OS&" + 
                    "sortBy=AeHfW_mxU1gvZyN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'.'snapshotDate'", containsString("2072-01-22T08:35:33"))
                .body("[0].'privateProjectCount'", nullValue())
                .body("[0].'publicProjectCount'", numberMatches(-64830.0))
                .body("[0].'membersCount'", numberMatches(498.0))
                .body("[0].'teamsCount'", nullValue())
                .body("[0].'allContributorsCount'", nullValue())
                .body("[0].'externalContributorsCount'", nullValue())
                .body("[0].'allStarsCount'", nullValue())
                .body("[0].'allForksCount'", nullValue())
                .body("[0].'allSizeCount'", nullValue())
                .body("[0].'programLanguagesCount'", nullValue())
                .body("[0].'tagsCount'", numberMatches(1.199709945E9))
                .body("[0].'organizationName'", containsString("_EM_3681_XYZ_"))
                .body("[0].'snapshotDate'", numberMatches(3.220673733E12));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 87L)
                .d("ID", "795")
                .d("ORGANIZATION_ID", "158")
                .d("SNAPSHOT_DATE", "\"1973-09-10 03:40:44\"")
                .d("NAME", "\"_EM_1726_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"_EM_1727_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "196")
                .d("URL", "NULL")
            .and().insertInto("STATISTICS", 88L)
                .d("ID", "404")
                .d("SNAPSHOT_DATE", "\"1931-04-07 07:03:57\"")
                .d("ALL_CONTRIBUTORS_COUNT", "731")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "884")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "959")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "213")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("PROJECT", 89L)
                .d("COMMITS_COUNT", "351")
                .d("CONTRIBUTORS_COUNT", "152")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "258")
                .d("GIT_HUB_PROJECT_ID", "-7040874948876208377")
                .d("LAST_PUSHED", "\"_EM_1729_XYZ_\"")
                .d("NAME", "\"xnpNFVbTgAO\"")
                .d("ORGANIZATION_NAME", "\"_EM_1747_XYZ_\"")
                .d("PRIMARY_LANGUAGE", "\"TIdURukQlF_\"")
                .d("SCORE", "477")
                .d("SNAPSHOT_DATE", "\"1917-08-23 19:09:37\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_1730_XYZ_\"")
                .d("TITLE", "\"_EM_1731_XYZ_\"")
                .d("IMAGE", "\"_EM_1732_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-31780")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_1744_XYZ_")
                .get(baseUrlOfSut + "/export?" + 
                    "end_date=QeXp&" + 
                    "q=M72bUgk&" + 
                    "offset=z5RG&" + 
                    "organizations=_EM_1745_XYZ_&" + 
                    "limit=feQu7xfZs0cT&" + 
                    "language=EkfavwE7ERse&" + 
                    "start_date=M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(158.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1973-09-10T03:40:44"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", containsString("_EM_1726_XYZ_"))
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(196.0))
                .body("'contributors'[0].'organizationalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationName'", containsString("_EM_1727_XYZ_"))
                .body("'contributors'[0].'organizationId'", numberMatches(158.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(1.16476844E11))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(-7.0408749488762081E18))
                .body("'projects'[0].'snapshotDate'", containsString("1917-08-23T19:09:37"))
                .body("'projects'[0].'name'", containsString("xnpNFVbTgAO"))
                .body("'projects'[0].'title'", containsString("_EM_1731_XYZ_"))
                .body("'projects'[0].'image'", containsString("_EM_1732_XYZ_"))
                .body("'projects'[0].'organizationName'", containsString("_EM_1747_XYZ_"))
                .body("'projects'[0].'url'", containsString("_EM_1730_XYZ_"))
                .body("'projects'[0].'description'", nullValue())
                .body("'projects'[0].'starsCount'", nullValue())
                .body("'projects'[0].'commitsCount'", numberMatches(351.0))
                .body("'projects'[0].'forksCount'", numberMatches(258.0))
                .body("'projects'[0].'contributorsCount'", numberMatches(152.0))
                .body("'projects'[0].'externalContributorsCount'", numberMatches(-31780.0))
                .body("'projects'[0].'score'", numberMatches(477.0))
                .body("'projects'[0].'lastPushed'", containsString("_EM_1729_XYZ_"))
                .body("'projects'[0].'primaryLanguage'", containsString("TIdURukQlF_"))
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1931-04-07T07:03:57"))
                .body("'statistics'[0].'privateProjectCount'", nullValue())
                .body("'statistics'[0].'publicProjectCount'", numberMatches(959.0))
                .body("'statistics'[0].'membersCount'", numberMatches(884.0))
                .body("'statistics'[0].'teamsCount'", numberMatches(213.0))
                .body("'statistics'[0].'allContributorsCount'", numberMatches(731.0))
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", nullValue())
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", nullValue())
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", nullValue())
                .body("'statistics'[0].'snapshotDate'", numberMatches(-1.222448163E12));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 116L)
                .d("ID", "923")
                .d("ORGANIZATION_ID", "829")
                .d("SNAPSHOT_DATE", "\"2066-05-25 20:06:16\"")
                .d("NAME", "\"_EM_2162_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "56")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "769")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "260")
                .d("URL", "\"aAcxTj9_5\"")
            .and().insertInto("PROJECT", 117L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "318")
                .d("DESCRIPTION", "\"_EM_2163_XYZ_\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "694")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"d0RT8CyeMQMV_\"")
                .d("ORGANIZATION_NAME", "\"829\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "33")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "981")
                .d("URL", "NULL")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_2167_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "729")
            .and().insertInto("STATISTICS", 118L)
                .d("ID", "9163721121410806114")
                .d("SNAPSHOT_DATE", "\"2010-07-08 10:32:35\"")
                .d("ALL_CONTRIBUTORS_COUNT", "996")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "291")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "718")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "268")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "146")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "end_date=2035-13-05T12%3A19%3A-1&" + 
                    "offset=440&" + 
                    "limit=405&" + 
                    "sortBy=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(829.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("2066-05-25T20:06:16"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", containsString("_EM_2162_XYZ_"))
                .body("'contributors'[0].'url'", containsString("aAcxTj9_5"))
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(56.0))
                .body("'contributors'[0].'personalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(260.0))
                .body("'contributors'[0].'organizationalProjectsCount'", numberMatches(769.0))
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'organizationId'", numberMatches(829.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(3.042036376E12))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(694.0))
                .body("'projects'[0].'snapshotDate'", nullValue())
                .body("'projects'[0].'name'", containsString("d0RT8CyeMQMV_"))
                .body("'projects'[0].'title'", nullValue())
                .body("'projects'[0].'image'", containsString("_EM_2167_XYZ_"))
                .body("'projects'[0].'organizationName'", containsString("829"))
                .body("'projects'[0].'url'", nullValue())
                .body("'projects'[0].'description'", containsString("_EM_2163_XYZ_"))
                .body("'projects'[0].'starsCount'", numberMatches(981.0))
                .body("'projects'[0].'commitsCount'", nullValue())
                .body("'projects'[0].'forksCount'", nullValue())
                .body("'projects'[0].'contributorsCount'", numberMatches(318.0))
                .body("'projects'[0].'externalContributorsCount'", numberMatches(729.0))
                .body("'projects'[0].'score'", numberMatches(33.0))
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("2010-07-08T10:32:35"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(268.0))
                .body("'statistics'[0].'publicProjectCount'", nullValue())
                .body("'statistics'[0].'membersCount'", numberMatches(718.0))
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", numberMatches(996.0))
                .body("'statistics'[0].'externalContributorsCount'", numberMatches(146.0))
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", nullValue())
                .body("'statistics'[0].'allSizeCount'", numberMatches(291.0))
                .body("'statistics'[0].'programLanguagesCount'", nullValue())
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", nullValue())
                .body("'statistics'[0].'snapshotDate'", numberMatches(1.278577955E12));
        
    }


}
