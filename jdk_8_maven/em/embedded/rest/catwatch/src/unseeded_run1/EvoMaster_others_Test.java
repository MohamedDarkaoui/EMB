import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T09:17:13.327+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 34 tests
 * <br>
 * Covered targets: 479
 * <br>
 * Used time: 1h 4m 3s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("STATISTICS","PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/fetch?EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "j_dr0WdGFU")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=2004-01-01T22%3A52%3A59&" + 
                    "sortBy=y9jCks&" + 
                    "q=_EM_3690_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_182_XYZ_")
                .get(baseUrlOfSut + "/fetch?" + 
                    "EMextraParam123=42&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "xq03Iqy2lppE")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_1718_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=b&" + 
                    "limit=134&" + 
                    "access_token=&" + 
                    "end_date=tj0j9L11KrKu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "hqHRogp")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_hCJL8CIjR&" + 
                    "start_date=UhE&" + 
                    "end_date=XjoayjNPb0Em&" + 
                    "q=C8C8j&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "access_token=&" + 
                    "end_date=hY_5D_55&" + 
                    "q=8sZOZIbKHi7khQBC&" + 
                    "start_date=bhR3T")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "HkM_44b0_SYZ_")
                .get(baseUrlOfSut + "/delete?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=_EM_1_XYZ_&" + 
                    "end_date=_EM_2_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_1_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 15L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "14")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "834")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_402_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"_EM_403_XYZ_\"")
                .d("SCORE", "916")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "782")
                .d("URL", "NULL")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "106")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "o4GMjyR_9HqOfP6")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=VGuJHG&" + 
                    "start_date=_EM_407_XYZ_&" + 
                    "end_date=J3xe&" + 
                    "EMextraParam123=f1MGvRb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_407_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 10L)
                .d("ID", "566")
                .d("SNAPSHOT_DATE", "\"1927-09-18 10:47:56\"")
                .d("ALL_CONTRIBUTORS_COUNT", "588")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "191")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "377")
                .d("PROGRAM_LANGUAGES_COUNT", "303")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "326")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=_EM_235_XYZ_&" + 
                    "EMextraParam123=_EM_236_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_235_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_38_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_35_XYZ_&" + 
                    "start_date=_EM_36_XYZ_&" + 
                    "end_date=_EM_37_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?end_date=sbNRkTb0jN6R5OpH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_85_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"name\": \"_EM_43_XYZ_\", " + 
                    " \"organizationName\": \"_EM_44_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 646, " + 
                    " \"organizationalProjectsCount\": 506, " + 
                    " \"personalCommitsCount\": 374, " + 
                    " \"personalProjectsCount\": 267, " + 
                    " \"snapshotDate\": \"1968-09-31T-1:28:28\", " + 
                    " \"url\": \"_EM_45_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": 201, " + 
                    " \"snapshotDate\": \"2018-13-10T19:39:21\" " + 
                    " }, " + 
                    " \"loginId\": \"_EM_46_XYZ_\", " + 
                    " \"name\": \"_EM_47_XYZ_\", " + 
                    " \"organizationId\": 292, " + 
                    " \"organizationName\": \"_EM_48_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 46, " + 
                    " \"personalProjectsCount\": 792, " + 
                    " \"url\": \"_EM_49_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 661, " + 
                    " \"externalContributorsCount\": 801, " + 
                    " \"key\": { " + 
                    " \"id\": 482, " + 
                    " \"snapshotDate\": \"1900-08-07T04:39:26\" " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_83_XYZ_\", " + 
                    " \"programLanguagesCount\": 357, " + 
                    " \"snapshotDate\": \"1995-10-11T00:-1:42\", " + 
                    " \"tagsCount\": 302, " + 
                    " \"teamsCount\": 13 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_84_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("JSON parse error: Can not deserialize value of type java.util.Date from String \"1995-10-11T00:-1:42\": not a valid representation (error: Failed to parse Date value '1995-10-11T00:-1:42': Can not parse date \"1995-10-11T00:-142\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.Date from String \"1995-10-11T00:-1:42\": not a valid representation (error: Failed to parse Date value '1995-10-11T00:-1:42': Can not parse date \"1995-10-11T00:-142\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: java.io.ByteArrayInputStream@6f458be0; line: 1, column: 728] (through reference chain: org.zalando.catwatch.backend.web.admin.DatabaseDto[\"statistics\"]->java.util.ArrayList[0]->org.zalando.catwatch.backend.model.Statistics[\"snapshotDate\"])"))
                .body("'path'", containsString("/import"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/init?EMextraParam123=_EM_24_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_39_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_40_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_41_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=&" + 
                    "end_date=_EM_2_XYZ_&" + 
                    "access_token=_EM_120_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_20_XYZ_")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_228_XYZ_&" + 
                    "offset=67109402&" + 
                    "start_date=Zrm89&" + 
                    "end_date=_EM_229_XYZ_&" + 
                    "q=_EM_18_XYZ_&" + 
                    "EMextraParam123=_EM_19_XYZ_&" + 
                    "access_token=_EM_230_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=_EM_121_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_124_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=3&" + 
                    "start_date=_EM_122_XYZ_&" + 
                    "EMextraParam123=_EM_123_XYZ_&" + 
                    "access_token=_EM_125_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=&" + 
                    "access_token=_EM_181_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?access_token=LaTsFO")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=Wu&" + 
                    "limit=926&" + 
                    "access_token=cW")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?" + 
                    "EMextraParam123=42&" + 
                    "access_token=5")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .get(baseUrlOfSut + "/config?" + 
                    "EMextraParam123=_EM_14_XYZ_&" + 
                    "access_token=wVc")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 12L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "-1843003596")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "1691189922")
                .d("GIT_HUB_PROJECT_ID", "326")
                .d("LAST_PUSHED", "\"fMt9aTjhpIC9PAdq\"")
                .d("NAME", "\"_EM_254_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"0IpgXTZZuRCjztA\"")
                .d("SCORE", "706")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_255_XYZ_\"")
                .d("TITLE", "\"_EM_256_XYZ_\"")
                .d("IMAGE", "\"Oj85xe23dHU\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "818")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_259_XYZ_")
                .get(baseUrlOfSut + "/projects?" + 
                    "end_date=1997-01-09T11%3A50%3A15&" + 
                    "language=0IpgXTZZuRCjztA&" + 
                    "EMextraParam123=_EM_258_XYZ_&" + 
                    "access_token=_EM_260_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .get(baseUrlOfSut + "/delete?access_token=_EM_281_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_9_XYZ_&" + 
                    "start_date=_EM_10_XYZ_&" + 
                    "end_date=_EM_11_XYZ_&" + 
                    "EMextraParam123=_EM_12_XYZ_&" + 
                    "access_token=_EM_215_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 599, " + 
                    " \"externalContributorsCount\": 522, " + 
                    " \"forksCount\": 460, " + 
                    " \"languageList\": [ " + 
                    " \"806jzCdYZ3a0PSC\", " + 
                    " \"NAM_Iu\" " + 
                    " ], " + 
                    " \"lastPushed\": \"iv3awtHBWHg\", " + 
                    " \"organizationName\": \"tXqlAYDs_Gob8j8\", " + 
                    " \"primaryLanguage\": \"bjOOH2Uu\", " + 
                    " \"url\": \"ixWa4rw_EbhFJ\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 422, " + 
                    " \"contributorsCount\": 963, " + 
                    " \"externalContributorsCount\": 944, " + 
                    " \"gitHubProjectId\": 419, " + 
                    " \"languageList\": [ " + 
                    " \"RKBoByi9v\", " + 
                    " \"kACuvjor\", " + 
                    " \"bos4RCdk4Ica\", " + 
                    " \"GDd9\", " + 
                    " \"nLRtiG2jJONBkqvf\" " + 
                    " ], " + 
                    " \"lastPushed\": \"\", " + 
                    " \"organizationName\": \"8NJfzy_H3T2xjbK\", " + 
                    " \"score\": 259, " + 
                    " \"snapshotDate\": \"2093-08-20T09:23:02\", " + 
                    " \"url\": \"v0E\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 531, " + 
                    " \"description\": \"3Bi6uvvo\", " + 
                    " \"externalContributorsCount\": 958, " + 
                    " \"gitHubProjectId\": 977, " + 
                    " \"image\": \"LN4XxmFpwOYJ\", " + 
                    " \"maintainers\": [ " + 
                    " \"jfi2jv9Nq1olz\", " + 
                    " \"H9\", " + 
                    " \"xG\" " + 
                    " ], " + 
                    " \"name\": \"5_D\", " + 
                    " \"organizationName\": \"JucyKNb\", " + 
                    " \"score\": 353, " + 
                    " \"starsCount\": 397, " + 
                    " \"title\": \"XbR8\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 245, " + 
                    " \"externalContributorsCount\": 70, " + 
                    " \"lastPushed\": \"rILRJavhW8_w2\", " + 
                    " \"maintainers\": [], " + 
                    " \"name\": \"O0M5EdBNhcFj5W\", " + 
                    " \"starsCount\": 832 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allForksCount\": 342, " + 
                    " \"allStarsCount\": 939, " + 
                    " \"membersCount\": 503, " + 
                    " \"organizationName\": \"\", " + 
                    " \"privateProjectCount\": 309, " + 
                    " \"snapshotDate\": \"2071-12-02T19:47:13\", " + 
                    " \"teamsCount\": 1000 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 313, " + 
                    " \"allSizeCount\": 324, " + 
                    " \"allStarsCount\": 586, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1945-03-22T00:15:49\" " + 
                    " }, " + 
                    " \"organizationName\": \"ZuGuSHlP\", " + 
                    " \"privateProjectCount\": -817199315, " + 
                    " \"publicProjectCount\": 638, " + 
                    " \"teamsCount\": -1096524643 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 137, " + 
                    " \"id\": 946, " + 
                    " \"programLanguagesCount\": 429, " + 
                    " \"teamsCount\": 1185795434 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 301, " + 
                    " \"allStarsCount\": 148, " + 
                    " \"id\": 257, " + 
                    " \"privateProjectCount\": 903, " + 
                    " \"snapshotDate\": \"1929-09-11T03:05:20\", " + 
                    " \"tagsCount\": 165, " + 
                    " \"teamsCount\": 146 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 611, " + 
                    " \"allSizeCount\": 388, " + 
                    " \"privateProjectCount\": 302, " + 
                    " \"programLanguagesCount\": 963, " + 
                    " \"snapshotDate\": \"2032-10-09T08:30:13\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 703 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_488_XYZ_\", " + 
                    " \"organizationId\": 754, " + 
                    " \"organizationName\": \"yx4QC_afW12P\", " + 
                    " \"organizationalCommitsCount\": 196, " + 
                    " \"organizationalProjectsCount\": 715 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -964879903, " + 
                    " \"organizationalCommitsCount\": 368, " + 
                    " \"organizationalProjectsCount\": 182, " + 
                    " \"personalCommitsCount\": 362, " + 
                    " \"url\": \"_EM_494_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 252, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 578 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_495_XYZ_\", " + 
                    " \"name\": \"_EM_496_XYZ_\", " + 
                    " \"organizationId\": 116, " + 
                    " \"organizationalCommitsCount\": 234 " + 
                    " }, " + 
                    " { " + 
                    " \"loginId\": \"_EM_498_XYZ_\", " + 
                    " \"name\": \"_EM_499_XYZ_\", " + 
                    " \"organizationName\": \"_EM_500_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 794, " + 
                    " \"personalCommitsCount\": 574, " + 
                    " \"personalProjectsCount\": 937, " + 
                    " \"snapshotDate\": \"1967-13-14T06:17:26\", " + 
                    " \"url\": \"_EM_501_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 421, " + 
                    " \"name\": \"_EM_503_XYZ_\", " + 
                    " \"organizationId\": 111, " + 
                    " \"personalCommitsCount\": 377, " + 
                    " \"personalProjectsCount\": 683 " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 614, " + 
                    " \"description\": \"_EM_506_XYZ_\", " + 
                    " \"forksCount\": 611, " + 
                    " \"gitHubProjectId\": 524, " + 
                    " \"languageList\": [], " + 
                    " \"name\": \"\", " + 
                    " \"organizationName\": \"_EM_509_XYZ_\", " + 
                    " \"primaryLanguage\": \"8ObcrHML5Oc_0\", " + 
                    " \"snapshotDate\": \"1956-12-13T25:28:21\", " + 
                    " \"starsCount\": 854, " + 
                    " \"title\": \"_EM_510_XYZ_\", " + 
                    " \"url\": \"_EM_511_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 584, " + 
                    " \"contributorsCount\": 113, " + 
                    " \"gitHubProjectId\": 661, " + 
                    " \"lastPushed\": \"_EM_516_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_517_XYZ_\", " + 
                    " \"_EM_518_XYZ_\", " + 
                    " \"_EM_519_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_522_XYZ_\", " + 
                    " \"starsCount\": 268, " + 
                    " \"url\": \"_EM_524_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 503, " + 
                    " \"description\": \"_EM_525_XYZ_\", " + 
                    " \"forksCount\": 327, " + 
                    " \"gitHubProjectId\": 996, " + 
                    " \"lastPushed\": \"_EM_531_XYZ_\", " + 
                    " \"score\": 709, " + 
                    " \"snapshotDate\": \"2036-09-32T06:35:05\", " + 
                    " \"title\": \"_EM_537_XYZ_\", " + 
                    " \"url\": \"\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_84_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
