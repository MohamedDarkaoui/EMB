import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T23:14:58.919+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 37 tests
 * <br>
 * Covered targets: 555
 * <br>
 * Used time: 1h 5m 36s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PROJECT","LANGUAGE_LIST","MAINTAINERS","STATISTICS","CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch?EMextraParam123=_EM_27_XYZ_");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=Xds%60r&" + 
                    "start_date=Zn13mt&" + 
                    "access_token=Q1bVIstB9&" + 
                    "q=kEzX&" + 
                    "offset=gy&" + 
                    "limit=2Kn&" + 
                    "sortBy=NSnCZQFs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "1MPhwb")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "end_date=MEC6pxyBxkCZMOuj&" + 
                    "access_token=qkeC&" + 
                    "offset=Hzr4nVTlW&" + 
                    "limit=6mZ6z26&" + 
                    "q=rayWwkn&" + 
                    "sortBy=zw8")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "tdl")
                .header("X-Organizations", "vfTbvrE7B")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=XlYKtYU71&" + 
                    "offset=317&" + 
                    "start_date=OEuhy7um3Rvr&" + 
                    "sortBy=2ZFAtzjJYuqtg&" + 
                    "q=wte4Khi0WtLx&" + 
                    "access_token=aaznhmsxisru&" + 
                    "language=3UGxPdGcujk8M9")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch?" + 
                        "end_date=RY9krnQHBZYe&" + 
                        "organizations=&" + 
                        "start_date=KVrvtXxD7U");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=hzq&" + 
                    "limit=121&" + 
                    "offset=899&" + 
                    "start_date=&" + 
                    "sortBy=kEz50Cuo3&" + 
                    "q=r7JDedL&" + 
                    "access_token=Fi2ADbtR&" + 
                    "language=0QB")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "end_date=VyHPAe&" + 
                    "access_token=Fi2ADbtR&" + 
                    "limit=121")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "access_token=RqVyoq41q")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "end_date=VyHPAe&" + 
                    "access_token=Fi2ADbtR")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "9Xw7_0M7irj")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=&" + 
                    "limit=298&" + 
                    "offset=406&" + 
                    "language=k")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "oYxFf")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=CzxHbyUi&" + 
                    "offset=397&" + 
                    "start_date=1947-06-06T08%3A44%3A19&" + 
                    "end_date=2064-11-24T06%3A59%3A54&" + 
                    "sortBy=M1X&" + 
                    "q=b&" + 
                    "language=tgvN&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 36L)
                .d("ID", "577")
                .d("ORGANIZATION_ID", "146")
                .d("SNAPSHOT_DATE", "\"2065-01-22 00:30:51\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"_EM_1005_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "261")
                .d("PERSONAL_COMMITS_COUNT", "15")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_1006_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=146&" + 
                    "limit=470&" + 
                    "offset=640&" + 
                    "end_date=gdFDzhuSJl0IPI0Q&" + 
                    "q=pMRroM3dzl3D0IQ&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "limit=48928833&" + 
                    "offset=977&" + 
                    "q=_EM_219_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=&" + 
                    "access_token=&" + 
                    "q=mBIdD&" + 
                    "offset=R1TttdYpGazF&" + 
                    "limit=ZEvzDxWU&" + 
                    "sortBy=f3H2nokJ9V3ZR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=&" + 
                    "start_date=7brQowJqtB2DNlFG&" + 
                    "end_date=uTXkuzLVIMew&" + 
                    "access_token=BpdnECIR6Z7W&" + 
                    "offset=_EM_1656_XYZ_&" + 
                    "limit=dJ_b5kV6pfqjQkQ")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
        
        ValidatableResponse res_1 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=cIMpnFVf&" + 
                    "limit=823&" + 
                    "sortBy=8i5k%5C&" + 
                    "access_token=HXe&" + 
                    "language=nuU8NPpD")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=_EM_6_XYZ_&" + 
                    "end_date=_EM_7_XYZ_&" + 
                    "EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_6_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_0_XYZ_&" + 
                    "end_date=_EM_2_XYZ_&" + 
                    "EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_2_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "end_date=jG&" + 
                    "EMextraParam123=_EM_13_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string jG."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_44_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_657_XYZ_&" + 
                    "end_date=j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?start_date=_EM_211_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "DiyApTxua6")
                .header("X-Organizations", "")
                .get(baseUrlOfSut + "/statistics?end_date=5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?" + 
                    "access_token=nrFwdXswMw_pM&" + 
                    "end_date=&" + 
                    "organizations=Fbp9AoNqCr3z&" + 
                    "start_date=0EzqFEx3sS&" + 
                    "q=&" + 
                    "offset=r4arGvC01pvreY&" + 
                    "limit=rrUICdybVTYcUn&" + 
                    "sortBy=nQ&" + 
                    "language=FBJbxOW")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 395, " + 
                    " \"allForksCount\": 821, " + 
                    " \"allStarsCount\": 530, " + 
                    " \"id\": 275, " + 
                    " \"key\": { " + 
                    " \"id\": 4936064920347099870 " + 
                    " }, " + 
                    " \"membersCount\": 701, " + 
                    " \"privateProjectCount\": 117, " + 
                    " \"programLanguagesCount\": 648, " + 
                    " \"snapshotDate\": \"1951-12-30T11:03:52\", " + 
                    " \"tagsCount\": 371 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 827, " + 
                    " \"allSizeCount\": 177, " + 
                    " \"allStarsCount\": 674, " + 
                    " \"key\": {}, " + 
                    " \"organizationName\": \"7Z\", " + 
                    " \"privateProjectCount\": 572, " + 
                    " \"programLanguagesCount\": 461, " + 
                    " \"publicProjectCount\": 636, " + 
                    " \"tagsCount\": 473 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        ValidatableResponse res_1 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 255, " + 
                    " \"loginId\": \"B8\", " + 
                    " \"organizationName\": \"Ji\", " + 
                    " \"organizationalCommitsCount\": 445, " + 
                    " \"organizationalProjectsCount\": 805, " + 
                    " \"personalCommitsCount\": 910, " + 
                    " \"personalProjectsCount\": 598, " + 
                    " \"snapshotDate\": \"2080-10-14T13:01:23\", " + 
                    " \"url\": \"6BiWDMYheu\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"externalContributorsCount\": 984, " + 
                    " \"membersCount\": 794, " + 
                    " \"organizationName\": \"8s5pydfQ\", " + 
                    " \"publicProjectCount\": 224 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 118, " + 
                    " \"allStarsCount\": 662, " + 
                    " \"externalContributorsCount\": 933, " + 
                    " \"organizationName\": \"Q_QOKFeDmwEG\", " + 
                    " \"privateProjectCount\": 981, " + 
                    " \"programLanguagesCount\": 601, " + 
                    " \"teamsCount\": 570 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 452, " + 
                    " \"externalContributorsCount\": 378928201, " + 
                    " \"id\": -2052506058, " + 
                    " \"key\": { " + 
                    " \"id\": 119 " + 
                    " }, " + 
                    " \"privateProjectCount\": 424, " + 
                    " \"programLanguagesCount\": 751, " + 
                    " \"publicProjectCount\": 221, " + 
                    " \"tagsCount\": 992, " + 
                    " \"teamsCount\": 190 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 840, " + 
                    " \"key\": {}, " + 
                    " \"organizationName\": \"e03zbfx\", " + 
                    " \"tagsCount\": -1562498297 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 463, " + 
                    " \"allSizeCount\": 795, " + 
                    " \"allStarsCount\": 195, " + 
                    " \"key\": {}, " + 
                    " \"teamsCount\": 360 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?" + 
                    "EMextraParam123=_EM_68_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/delete?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_47_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_46_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_30_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=_EM_965_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_138_XYZ_&" + 
                    "EMextraParam123=_EM_3_XYZ_&" + 
                    "access_token=_EM_140_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=i6C")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 9L)
                .d("COMMITS_COUNT", "45")
                .d("CONTRIBUTORS_COUNT", "940")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "-5545673170638662914")
                .d("LAST_PUSHED", "\"qfr8q7Y61w\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"FxzlbcJT\"")
                .d("PRIMARY_LANGUAGE", "\"PmzGfTbHUPvNR\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "682")
                .d("URL", "\"_EM_174_XYZ_\"")
                .d("TITLE", "\"\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "680")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=FxzlbcJT&" + 
                    "offset=421&" + 
                    "end_date=2061-09-29T10%3A10%3A05&" + 
                    "sortBy=A9Wpi9Q9ueSEWYS3&" + 
                    "q=_EM_176_XYZ_&" + 
                    "access_token=_EM_179_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_169_XYZ_&" + 
                    "offset=883&" + 
                    "start_date=p1Hjr9V&" + 
                    "end_date=_EM_170_XYZ_&" + 
                    "q=mkMc4Ebn1VH7L&" + 
                    "EMextraParam123=5&" + 
                    "access_token=_EM_171_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 6L)
                .d("ID", "40")
                .d("SNAPSHOT_DATE", "\"1965-06-01 05:46:42\"")
                .d("ALL_CONTRIBUTORS_COUNT", "379")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "29")
                .d("MEMBERS_COUNT", "147")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "682")
                .d("PUBLIC_PROJECT_COUNT", "988")
                .d("TAGS_COUNT", "288")
                .d("TEAMS_COUNT", "89")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_44_XYZ_")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=CYSFr&" + 
                    "start_date=_EM_143_XYZ_&" + 
                    "end_date=y2QPu_FwvePsR&" + 
                    "EMextraParam123=_EM_144_XYZ_&" + 
                    "access_token=_EM_145_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_207_XYZ_&" + 
                    "offset=709&" + 
                    "access_token=A0K")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_209_XYZ_&" + 
                    "end_date=484G5u3FL16&" + 
                    "access_token=_EM_210_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "DNnFGIiDbRB6p")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=fhuewcVfQ8")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=_EM_142_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "sEA7kiQCoNQGQgM")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=_EM_25_XYZ_&" + 
                    "access_token=_EM_402_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "YsOM3XP6zD")
                .get(baseUrlOfSut + "/delete?" + 
                    "EMextraParam123=_EM_551_XYZ_&" + 
                    "access_token=_EM_552_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=_EM_5_XYZ_&" + 
                    "start_date=js3uGZMG779Ko&" + 
                    "end_date=_EM_7_XYZ_&" + 
                    "access_token=rLaGmknujlR9Pd")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allStarsCount\": 809, " + 
                    " \"externalContributorsCount\": 868, " + 
                    " \"key\": { " + 
                    " \"id\": -1231909024 " + 
                    " }, " + 
                    " \"membersCount\": 256, " + 
                    " \"organizationName\": \"_EM_66_XYZ_\", " + 
                    " \"privateProjectCount\": 710, " + 
                    " \"programLanguagesCount\": 357 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 705, " + 
                    " \"allStarsCount\": 936, " + 
                    " \"privateProjectCount\": 668, " + 
                    " \"programLanguagesCount\": 64, " + 
                    " \"publicProjectCount\": 31, " + 
                    " \"snapshotDate\": \"2073-06-01T18:26:36\", " + 
                    " \"tagsCount\": 118 " + 
                    " }, " + 
                    " { " + 
                    " \"membersCount\": 208, " + 
                    " \"organizationName\": \"_EM_67_XYZ_\", " + 
                    " \"programLanguagesCount\": 2009351793, " + 
                    " \"publicProjectCount\": 759, " + 
                    " \"tagsCount\": 69, " + 
                    " \"teamsCount\": 467 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 484, " + 
                    " \"loginId\": \"P_HW\", " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 792, " + 
                    " \"personalProjectsCount\": 979, " + 
                    " \"url\": \"_EM_72_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_74_XYZ_\", " + 
                    " \"organizationId\": 316, " + 
                    " \"organizationName\": \"_EM_75_XYZ_\", " + 
                    " \"url\": \"_EM_76_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_78_XYZ_\", " + 
                    " \"organizationId\": 809, " + 
                    " \"organizationalCommitsCount\": 108, " + 
                    " \"organizationalProjectsCount\": 529, " + 
                    " \"personalProjectsCount\": 407, " + 
                    " \"url\": \"_EM_79_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"organizationId\": 627, " + 
                    " \"organizationName\": \"_EM_82_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 84, " + 
                    " \"personalCommitsCount\": 842, " + 
                    " \"snapshotDate\": \"1918-06-01T11:37:12\", " + 
                    " \"url\": \"c\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5355451049546718532, " + 
                    " \"name\": \"_EM_84_XYZ_\", " + 
                    " \"organizationId\": 503, " + 
                    " \"organizationName\": \"_EM_85_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 706, " + 
                    " \"organizationalProjectsCount\": 911, " + 
                    " \"personalProjectsCount\": 485, " + 
                    " \"url\": \"_EM_86_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 484, " + 
                    " \"loginId\": \"_EM_104_XYZ_\", " + 
                    " \"name\": \"_EM_105_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 792, " + 
                    " \"personalProjectsCount\": 979, " + 
                    " \"url\": \"_EM_106_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_108_XYZ_\", " + 
                    " \"organizationId\": 316, " + 
                    " \"organizationName\": \"_EM_109_XYZ_\", " + 
                    " \"url\": \"_EM_110_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_112_XYZ_\", " + 
                    " \"organizationId\": 809, " + 
                    " \"organizationalCommitsCount\": 108, " + 
                    " \"organizationalProjectsCount\": 529, " + 
                    " \"personalProjectsCount\": 407, " + 
                    " \"url\": \"MrB0ckLGWj\" " + 
                    " }, " + 
                    " { " + 
                    " \"organizationId\": 627, " + 
                    " \"organizationName\": \"_EM_116_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 84, " + 
                    " \"personalCommitsCount\": 842, " + 
                    " \"snapshotDate\": \"1918-06-01T11:37:12\", " + 
                    " \"url\": \"_EM_117_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5355451049546718532, " + 
                    " \"name\": \"_EM_119_XYZ_\", " + 
                    " \"organizationId\": 503, " + 
                    " \"organizationName\": \"_EM_120_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 706, " + 
                    " \"organizationalProjectsCount\": 911, " + 
                    " \"personalProjectsCount\": 485, " + 
                    " \"url\": \"_EM_121_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 511, " + 
                    " \"forksCount\": 380, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_123_XYZ_\", " + 
                    " \"_EM_124_XYZ_\", " + 
                    " \"_EM_125_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_127_XYZ_\", " + 
                    " \"_EM_128_XYZ_\", " + 
                    " \"_EM_129_XYZ_\", " + 
                    " \"_EM_130_XYZ_\", " + 
                    " \"Ky\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_133_XYZ_\", " + 
                    " \"score\": 383, " + 
                    " \"snapshotDate\": \"1943-03-07T06:57:53\", " + 
                    " \"title\": \"_EM_134_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allForksCount\": 468, " + 
                    " \"id\": 850, " + 
                    " \"membersCount\": 174, " + 
                    " \"snapshotDate\": \"1928-02-05T13:41:01\", " + 
                    " \"tagsCount\": 147 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 705, " + 
                    " \"allSizeCount\": 173, " + 
                    " \"key\": { " + 
                    " \"id\": 6 " + 
                    " }, " + 
                    " \"programLanguagesCount\": 125, " + 
                    " \"publicProjectCount\": 400, " + 
                    " \"tagsCount\": 521, " + 
                    " \"teamsCount\": 390 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 627, " + 
                    " \"allStarsCount\": 1, " + 
                    " \"externalContributorsCount\": 41, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2064-13-05T18:59:15\" " + 
                    " }, " + 
                    " \"programLanguagesCount\": 96, " + 
                    " \"snapshotDate\": \"1967-02-28T07:12:04\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 647, " + 
                    " \"externalContributorsCount\": 741, " + 
                    " \"gitHubProjectId\": 351, " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_754_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"ST6a9HXbdQkkF6\", " + 
                    " \"organizationName\": \"_EM_755_XYZ_\", " + 
                    " \"score\": 955, " + 
                    " \"snapshotDate\": \"2065-02-19T18:30:39\", " + 
                    " \"starsCount\": -1686854801, " + 
                    " \"url\": \"_EM_758_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 538, " + 
                    " \"allForksCount\": 261, " + 
                    " \"allStarsCount\": 670, " + 
                    " \"externalContributorsCount\": 516, " + 
                    " \"organizationName\": \"_EM_759_XYZ_\", " + 
                    " \"privateProjectCount\": 520, " + 
                    " \"publicProjectCount\": 85, " + 
                    " \"snapshotDate\": \"1928-10-32T-1:34:59\", " + 
                    " \"tagsCount\": 184 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 659, " + 
                    " \"organizationName\": \"_EM_762_XYZ_\", " + 
                    " \"personalCommitsCount\": 119, " + 
                    " \"snapshotDate\": \"2018-09-09T16:40:05\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5490832462336530424, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1987-05-01T15:21:40\" " + 
                    " }, " + 
                    " \"name\": \"_EM_765_XYZ_\", " + 
                    " \"organizationName\": \"_EM_766_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 875 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 579, " + 
                    " \"key\": {}, " + 
                    " \"loginId\": \"_EM_768_XYZ_\", " + 
                    " \"name\": \"_EM_769_XYZ_\", " + 
                    " \"organizationId\": 337, " + 
                    " \"organizationName\": \"_EM_770_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 750, " + 
                    " \"description\": \"_EM_772_XYZ_\", " + 
                    " \"forksCount\": 14, " + 
                    " \"gitHubProjectId\": 22, " + 
                    " \"lastPushed\": \"_EM_774_XYZ_\", " + 
                    " \"name\": \"_EM_775_XYZ_\", " + 
                    " \"score\": 91, " + 
                    " \"starsCount\": 797 " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 351, " + 
                    " \"gitHubProjectId\": -1475854645, " + 
                    " \"image\": \"_EM_781_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_782_XYZ_\", " + 
                    " \"_EM_783_XYZ_\", " + 
                    " \"_EM_784_XYZ_\", " + 
                    " \"_EM_785_XYZ_\", " + 
                    " \"_EM_786_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_787_XYZ_\", " + 
                    " \"_EM_788_XYZ_\", " + 
                    " \"_EM_789_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_791_XYZ_\", " + 
                    " \"snapshotDate\": \"1992-05-23T01:14:58\", " + 
                    " \"title\": \"_EM_792_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 369, " + 
                    " \"externalContributorsCount\": 12, " + 
                    " \"forksCount\": 801, " + 
                    " \"image\": \"_EM_795_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_796_XYZ_\", " + 
                    " \"_EM_797_XYZ_\" " + 
                    " ], " + 
                    " \"starsCount\": 626, " + 
                    " \"url\": \"_EM_805_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 731, " + 
                    " \"key\": { " + 
                    " \"id\": -997623434, " + 
                    " \"organizationId\": 200521435 " + 
                    " }, " + 
                    " \"loginId\": \"viTATX0KnTCu1Kbr\", " + 
                    " \"name\": \"Ynhb6gBz\", " + 
                    " \"url\": \"qpI04VpL\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": {}, " + 
                    " \"name\": \"L6lzkHllguUYh0_v\", " + 
                    " \"organizationId\": 417, " + 
                    " \"organizationalCommitsCount\": 193 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 2074830685, " + 
                    " \"key\": { " + 
                    " \"id\": 144, " + 
                    " \"organizationId\": 374 " + 
                    " }, " + 
                    " \"name\": \"wLB_mj2W\", " + 
                    " \"organizationId\": 2404144485536861945, " + 
                    " \"organizationName\": \"LEKcllj6zDczw\", " + 
                    " \"personalProjectsCount\": 84, " + 
                    " \"snapshotDate\": \"2088-06-07T05:53:60\" " + 
                    " }, " + 
                    " { " + 
                    " \"loginId\": \"m\", " + 
                    " \"name\": \"broqMF7_kdS2\", " + 
                    " \"organizationalCommitsCount\": 177, " + 
                    " \"organizationalProjectsCount\": 278, " + 
                    " \"url\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 102, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1989-03-19T11:43:03\" " + 
                    " }, " + 
                    " \"organizationalCommitsCount\": 334, " + 
                    " \"organizationalProjectsCount\": 658 " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"gitHubProjectId\": 401, " + 
                    " \"image\": \"su8hh\", " + 
                    " \"lastPushed\": \"qfERcR9wAnORADF3\", " + 
                    " \"name\": \"nc3O9Q7\", " + 
                    " \"primaryLanguage\": \"fhz5IIn\", " + 
                    " \"snapshotDate\": \"2066-08-14T07:39:58\", " + 
                    " \"starsCount\": 1368564552, " + 
                    " \"title\": \"\", " + 
                    " \"url\": \"pX22m\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 1000, " + 
                    " \"description\": \"IDeQnEnzk\", " + 
                    " \"externalContributorsCount\": 357109188, " + 
                    " \"forksCount\": 682, " + 
                    " \"gitHubProjectId\": 357, " + 
                    " \"organizationName\": \"\", " + 
                    " \"snapshotDate\": \"2019-00-28T13:56:12\", " + 
                    " \"title\": \"MUlD1ggNBjWe\", " + 
                    " \"url\": \"c\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 262, " + 
                    " \"allSizeCount\": 823, " + 
                    " \"externalContributorsCount\": 873, " + 
                    " \"id\": 770, " + 
                    " \"key\": { " + 
                    " \"id\": 637 " + 
                    " }, " + 
                    " \"programLanguagesCount\": 297, " + 
                    " \"teamsCount\": 339 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 71, " + 
                    " \"allStarsCount\": 11, " + 
                    " \"externalContributorsCount\": 536, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2070-03-27T07:08:03\" " + 
                    " }, " + 
                    " \"organizationName\": \"iW\", " + 
                    " \"publicProjectCount\": 913, " + 
                    " \"tagsCount\": 820, " + 
                    " \"teamsCount\": 725 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 721, " + 
                    " \"allSizeCount\": 909, " + 
                    " \"externalContributorsCount\": 153, " + 
                    " \"id\": 438, " + 
                    " \"publicProjectCount\": 728, " + 
                    " \"tagsCount\": 121, " + 
                    " \"teamsCount\": 282 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 512, " + 
                    " \"allStarsCount\": 175, " + 
                    " \"externalContributorsCount\": 464, " + 
                    " \"key\": { " + 
                    " \"id\": 8748829306721301045, " + 
                    " \"snapshotDate\": \"2066-01-23T00:20:32\" " + 
                    " }, " + 
                    " \"privateProjectCount\": 379, " + 
                    " \"publicProjectCount\": 313 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 403, " + 
                    " \"allForksCount\": 757, " + 
                    " \"allSizeCount\": 352, " + 
                    " \"allStarsCount\": 562, " + 
                    " \"externalContributorsCount\": 469, " + 
                    " \"id\": 610, " + 
                    " \"key\": {}, " + 
                    " \"membersCount\": 200, " + 
                    " \"organizationName\": \"yj2yiLLX4c7uA4\", " + 
                    " \"privateProjectCount\": 148, " + 
                    " \"publicProjectCount\": 848, " + 
                    " \"teamsCount\": 796 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 428, " + 
                    " \"loginId\": \"9GXt\", " + 
                    " \"organizationId\": -65523780, " + 
                    " \"organizationalCommitsCount\": 889 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 967, " + 
                    " \"loginId\": \"K64nQz8E\", " + 
                    " \"organizationId\": 271, " + 
                    " \"organizationalCommitsCount\": 182, " + 
                    " \"personalProjectsCount\": 965, " + 
                    " \"snapshotDate\": \"1954-08-07T10:28:16\", " + 
                    " \"url\": \"uXBFbXK1\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
