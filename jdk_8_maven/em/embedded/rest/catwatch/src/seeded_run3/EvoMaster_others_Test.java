import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T13:27:12.959+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 34 tests
 * <br>
 * Covered targets: 901
 * <br>
 * Used time: 1h 1m 19s
 * <br>
 * Needed budget for current results: 86%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PROJECT","LANGUAGE_LIST","MAINTAINERS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "_EM_25_XYZ_")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?" + 
                    "access_token=&" + 
                    "end_date=XDbeNmrj&" + 
                    "offset=YGejJsuCgwWXI&" + 
                    "organizations=ZkSz&" + 
                    "language=45MjUIYbq&" + 
                    "start_date=bVJ4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 155, " + 
                    " \"contributorsCount\": 800, " + 
                    " \"description\": \"_EM_4271_XYZ_\", " + 
                    " \"externalContributorsCount\": 744, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_4273_XYZ_\", " + 
                    " \"3q8\", " + 
                    " \"VmPy5F\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_4274_XYZ_\", " + 
                    " \"_EM_4275_XYZ_\", " + 
                    " \"_EM_4276_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"15OecM6KXTQ8N\", " + 
                    " \"primaryLanguage\": \"Uu955ox4icHUoPNw\", " + 
                    " \"score\": 814, " + 
                    " \"starsCount\": 828, " + 
                    " \"url\": \"WacnWO0prXMiGW\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "hQa")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"hQa\" ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "vkO7VWbdQ6M")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=&" + 
                    "limit=1322&" + 
                    "offset=373&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "OXKHCgzIk")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=jv1d7&" + 
                    "limit=518&" + 
                    "offset=40&" + 
                    "end_date=LE22n2isvPGC&" + 
                    "sortBy=uHbOEv&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/export?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?start_date=_EM_4_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_4_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "end_date=gWuVFBvpLP&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string gWuVFBvpLP."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=h9SWiB55&" + 
                    "end_date=xTAIrPCk0j&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?start_date=_EM_37_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=574&" + 
                    "start_date=2061-10-10T13%3A15%3A21&" + 
                    "end_date=1920-02-29T07%3A25%3A38&" + 
                    "language=oD5SXB&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "fjt09A")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=&" + 
                    "access_token=&" + 
                    "q=Iam&" + 
                    "offset=w&" + 
                    "limit=_Ez&" + 
                    "sortBy=3IWyvw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_460_XYZ_")
                .get(baseUrlOfSut + "/config?" + 
                    "EMextraParam123=_EM_459_XYZ_&" + 
                    "access_token=_EM_461_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_2642_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_XJEK\" ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=_EM_2641_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "Ud6if")
                .get(baseUrlOfSut + "/fetch?access_token=_EM_514_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=Yxeq8kR7qgbIYk0Z&" + 
                    "access_token=_EM_252_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=_EM_23_XYZ_&" + 
                    "access_token=_EM_250_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=shP0ydmPk8&" + 
                    "limit=449&" + 
                    "offset=42&" + 
                    "start_date=1980-02-08T00%3A51%3A52&" + 
                    "sortBy=sKR6pVE6y4Fy5XA&" + 
                    "q=GB6WiT74itaHI&" + 
                    "access_token=xiWW5baSvS6t")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=organization1&" + 
                    "start_date=2024-05-29T04%3A05%3A12Z&" + 
                    "end_date=_EM_235_XYZ_&" + 
                    "EMextraParam123=42&" + 
                    "access_token=_EM_236_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "HYFY")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=f&" + 
                    "offset=856&" + 
                    "q=v6fTvYPyoXwcWm&" + 
                    "access_token=_EM_237_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=&" + 
                    "end_date=&" + 
                    "EMextraParam123=_EM_6_XYZ_&" + 
                    "access_token=S0Q5z7POv")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_386_XYZ_")
                .get(baseUrlOfSut + "/delete?access_token=_EM_387_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 72, " + 
                    " \"membersCount\": 201, " + 
                    " \"organizationName\": \"_EM_1287_XYZ_\", " + 
                    " \"privateProjectCount\": 762, " + 
                    " \"programLanguagesCount\": 36, " + 
                    " \"teamsCount\": 695 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 341, " + 
                    " \"allStarsCount\": 864, " + 
                    " \"id\": 176, " + 
                    " \"membersCount\": 1566750867, " + 
                    " \"organizationName\": \"KhirDCCxi08Z8HcP\", " + 
                    " \"programLanguagesCount\": 607, " + 
                    " \"snapshotDate\": \"1906-12-04T02:49:19\", " + 
                    " \"teamsCount\": 510 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_376_XYZ_&" + 
                    "limit=934&" + 
                    "start_date=_EM_377_XYZ_&" + 
                    "end_date=_EM_378_XYZ_&" + 
                    "EMextraParam123=_EM_380_XYZ_&" + 
                    "access_token=_EM_382_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 7L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "437")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "811")
                .d("GIT_HUB_PROJECT_ID", "451")
                .d("LAST_PUSHED", "\"_EM_389_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"lbNxsdF4\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1942-06-19 20:47:45\"")
                .d("STARS_COUNT", "167")
                .d("URL", "NULL")
                .d("TITLE", "\"_EM_392_XYZ_\"")
                .d("IMAGE", "\"_EM_393_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?access_token=_EM_397_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/init?" + 
                    "EMextraParam123=_EM_432_XYZ_&" + 
                    "access_token=_EM_433_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_107_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 801, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 68 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_944_XYZ_\", " + 
                    " \"organizationId\": 534, " + 
                    " \"organizationalCommitsCount\": 712, " + 
                    " \"url\": \"TwFwEw\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": -1542692027, " + 
                    " \"snapshotDate\": \"2100-03-00T-1:23:54\" " + 
                    " }, " + 
                    " \"loginId\": \"_EM_947_XYZ_\", " + 
                    " \"name\": \"_EM_948_XYZ_\", " + 
                    " \"organizationId\": 985, " + 
                    " \"organizationName\": \"_EM_949_XYZ_\", " + 
                    " \"personalProjectsCount\": 617 " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 807 " + 
                    " }, " + 
                    " \"name\": \"_EM_952_XYZ_\", " + 
                    " \"organizationId\": -4266530286080374137, " + 
                    " \"organizationName\": \"_EM_953_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 797, " + 
                    " \"personalProjectsCount\": 516, " + 
                    " \"snapshotDate\": \"2053-09-16T15:34:28\", " + 
                    " \"url\": \"_EM_954_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"personalCommitsCount\": 193, " + 
                    " \"personalProjectsCount\": 75, " + 
                    " \"url\": \"_EM_958_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 491, " + 
                    " \"externalContributorsCount\": 128, " + 
                    " \"gitHubProjectId\": 306, " + 
                    " \"image\": \"_EM_960_XYZ_\", " + 
                    " \"lastPushed\": \"_EM_963_XYZ_\", " + 
                    " \"organizationName\": \"aXc8N8jpQZbrU\", " + 
                    " \"primaryLanguage\": \"_EM_968_XYZ_\", " + 
                    " \"score\": 531, " + 
                    " \"snapshotDate\": \"2073-11-28T15:28:08\", " + 
                    " \"starsCount\": 104, " + 
                    " \"title\": \"_EM_969_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 364, " + 
                    " \"gitHubProjectId\": 919, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_973_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_974_XYZ_\", " + 
                    " \"organizationName\": \"_EM_976_XYZ_\", " + 
                    " \"primaryLanguage\": \"WyUNSuY\", " + 
                    " \"title\": \"_EM_977_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 903, " + 
                    " \"contributorsCount\": 228, " + 
                    " \"description\": \"_EM_978_XYZ_\", " + 
                    " \"externalContributorsCount\": 378, " + 
                    " \"forksCount\": 816, " + 
                    " \"gitHubProjectId\": 347, " + 
                    " \"image\": \"_EM_979_XYZ_\", " + 
                    " \"lastPushed\": \"n3xgg\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_985_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_986_XYZ_\", " + 
                    " \"score\": 918, " + 
                    " \"snapshotDate\": \"2063-04-17T20:54:44\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 352, " + 
                    " \"description\": \"_EM_990_XYZ_\", " + 
                    " \"externalContributorsCount\": 243, " + 
                    " \"forksCount\": 471, " + 
                    " \"gitHubProjectId\": 967, " + 
                    " \"image\": \"_EM_991_XYZ_\", " + 
                    " \"name\": \"_EM_994_XYZ_\", " + 
                    " \"organizationName\": \"_EM_995_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_996_XYZ_\", " + 
                    " \"score\": 909, " + 
                    " \"snapshotDate\": \"2078-07-04T03:35:10\", " + 
                    " \"starsCount\": 170, " + 
                    " \"url\": \"_EM_997_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 440, " + 
                    " \"externalContributorsCount\": 323, " + 
                    " \"forksCount\": 678990426, " + 
                    " \"image\": \"_EM_999_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_1000_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_1001_XYZ_\", " + 
                    " \"organizationName\": \"_EM_1004_XYZ_\", " + 
                    " \"score\": 239, " + 
                    " \"starsCount\": 680, " + 
                    " \"title\": \"_EM_1006_XYZ_\", " + 
                    " \"url\": \"3iBd\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"externalContributorsCount\": 108, " + 
                    " \"id\": 779, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2053-02-15T09:45:13\" " + 
                    " }, " + 
                    " \"privateProjectCount\": 97, " + 
                    " \"programLanguagesCount\": 708, " + 
                    " \"publicProjectCount\": 381, " + 
                    " \"snapshotDate\": \"2039-08-25T03:29:21\", " + 
                    " \"teamsCount\": 49 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 48, " + 
                    " \"allStarsCount\": 892, " + 
                    " \"id\": 563, " + 
                    " \"key\": { " + 
                    " \"id\": -1745621211, " + 
                    " \"snapshotDate\": \"1990-05-03T18:59:14\" " + 
                    " }, " + 
                    " \"membersCount\": 389 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 7, " + 
                    " \"allForksCount\": 389, " + 
                    " \"allStarsCount\": 245304993, " + 
                    " \"id\": 576, " + 
                    " \"key\": { " + 
                    " \"id\": 129, " + 
                    " \"snapshotDate\": \"2069-02-19T17:10:46\" " + 
                    " }, " + 
                    " \"privateProjectCount\": 896, " + 
                    " \"programLanguagesCount\": 896, " + 
                    " \"publicProjectCount\": 58, " + 
                    " \"teamsCount\": 515 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?EMextraParam123=_EM_106_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
