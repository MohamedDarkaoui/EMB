import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-02T10:31:26.637+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 36 tests
 * <br>
 * Covered targets: 484
 * <br>
 * Used time: 1h 5m 3s
 * <br>
 * Needed budget for current results: 63%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 29L)
                .d("ID", "923")
                .d("ORGANIZATION_ID", "929")
                .d("SNAPSHOT_DATE", "\"1970-06-13 07:20:02\"")
                .d("NAME", "\"\"")
                .d("ORGANIZATION_NAME", "\"_EM_907_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "153")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_908_XYZ_\"")
            .and().insertInto("PROJECT", 30L)
                .d("COMMITS_COUNT", "129")
                .d("CONTRIBUTORS_COUNT", "511")
                .d("DESCRIPTION", "\"fH\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "555")
                .d("LAST_PUSHED", "\"_EM_909_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"929\"")
                .d("PRIMARY_LANGUAGE", "\"mukZX6Nphw\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1903-07-20 19:36:15\"")
                .d("STARS_COUNT", "839")
                .d("URL", "\"_EM_911_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_913_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("STATISTICS", 31L)
                .d("ID", "919")
                .d("SNAPSHOT_DATE", "\"1909-05-20 13:47:37\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "671")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"929\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "-100248694")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "501")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "Bc30yiPGCD")
                .header("X-Organizations", "xeL")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=drVeDft9xE&" + 
                    "start_date=F72ZJg4XygL&" + 
                    "end_date=K5CiB9rsf&" + 
                    "access_token=&" + 
                    "q=9GOtVz2j_5A7eE&" + 
                    "offset=mHf&" + 
                    "limit=_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "Xgd")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"Xgd\" ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "zf5piipU")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=1915-09-32T15%3A59%3A01&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/fetch?" + 
                    "EMextraParam123=_EM_28_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "vTJrUxb5Ke")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=84P2P9bLXr&" + 
                    "q=&" + 
                    "access_token=&" + 
                    "end_date=GiG7K&" + 
                    "sortBy=oiHh9FXJEX&" + 
                    "language=oIXI442LizXo&" + 
                    "start_date=cPldtu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/delete?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"externalContributorsCount\": 544, " + 
                    " \"membersCount\": 381, " + 
                    " \"organizationName\": \"_3\", " + 
                    " \"privateProjectCount\": 845, " + 
                    " \"teamsCount\": 1679240588 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?" + 
                    "access_token=&" + 
                    "offset=dVPQuDPpGYr6RoG&" + 
                    "end_date=EDqhGU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=Cq5Q&" + 
                    "limit=-2076897825&" + 
                    "offset=271&" + 
                    "start_date=tHh9QubqoOm&" + 
                    "q=55VeeTNC0&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=5kT&" + 
                    "end_date=m_mRjtgXRpCSp&" + 
                    "EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string m_mRjtgXRpCSp."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 26L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "706")
                .d("DESCRIPTION", "\"_EM_876_XYZ_\"")
                .d("FORKS_COUNT", "804")
                .d("GIT_HUB_PROJECT_ID", "871")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "841")
                .d("SNAPSHOT_DATE", "\"1929-03-22 01:28:03\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_878_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "272")
            .and().insertInto("CONTRIBUTOR", 27L)
                .d("ID", "348")
                .d("ORGANIZATION_ID", "337")
                .d("SNAPSHOT_DATE", "\"2023-12-27 12:30:45\"")
                .d("NAME", "\"_EM_881_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "193798207")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "944")
                .d("PERSONAL_COMMITS_COUNT", "79")
                .d("PERSONAL_PROJECTS_COUNT", "602")
                .d("URL", "\"_EM_882_XYZ_\"")
            .and().insertInto("STATISTICS", 28L)
                .d("ID", "2")
                .d("SNAPSHOT_DATE", "\"2057-03-31 02:48:14\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "106")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "591")
                .d("MEMBERS_COUNT", "413469067")
                .d("ORGANIZATION_NAME", "\"QxFW4m\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "263")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=QxFW4m&" + 
                    "end_date=2025-06-31T08%3A35%3A32")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 2025-06-31T08:35:32."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?end_date=_EM_7_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_7_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 29L)
                .d("ID", "923")
                .d("ORGANIZATION_ID", "929")
                .d("SNAPSHOT_DATE", "\"1970-06-13 07:20:02\"")
                .d("NAME", "\"\"")
                .d("ORGANIZATION_NAME", "\"_EM_907_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "153")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_908_XYZ_\"")
            .and().insertInto("PROJECT", 30L)
                .d("COMMITS_COUNT", "129")
                .d("CONTRIBUTORS_COUNT", "511")
                .d("DESCRIPTION", "\"fH\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "555")
                .d("LAST_PUSHED", "\"_EM_909_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"929\"")
                .d("PRIMARY_LANGUAGE", "\"mukZX6Nphw\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1903-07-20 19:36:15\"")
                .d("STARS_COUNT", "839")
                .d("URL", "\"_EM_911_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"_EM_913_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("STATISTICS", 31L)
                .d("ID", "919")
                .d("SNAPSHOT_DATE", "\"1909-05-20 13:47:37\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "671")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"929\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "-100248694")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "501")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=929&" + 
                    "end_date=1977-09-05T12%3A37%3A10")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=_EM_42_XYZ_&" + 
                    "end_date=_EM_43_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_47_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 148L)
                .d("ID", "314")
                .d("ORGANIZATION_ID", "481")
                .d("SNAPSHOT_DATE", "\"1936-03-30 10:04:05\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"4e6astYy1hjWhYud\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"hCFDLIH16\"")
            .and().insertInto("PROJECT", 149L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "636")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "842")
                .d("GIT_HUB_PROJECT_ID", "534")
                .d("LAST_PUSHED", "\"2PrE\"")
                .d("NAME", "\"\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "622")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "984")
                .d("URL", "\"eStLIH7N8Df9Cu\"")
                .d("TITLE", "\"v\"")
                .d("IMAGE", "\"MGvQGwFy9m4Mnw\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "364")
            .and().insertInto("STATISTICS", 150L)
                .d("ID", "212")
                .d("SNAPSHOT_DATE", "\"2033-09-28 16:29:10\"")
                .d("ALL_CONTRIBUTORS_COUNT", "213")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "387")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "547")
                .d("ORGANIZATION_NAME", "\"481\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "698")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_2837_XYZ_\" ")
                .post(baseUrlOfSut + "/config/scoring.project?" + 
                    "access_token=481&" + 
                    "organizations=481&" + 
                    "offset=481&" + 
                    "limit=481&" + 
                    "sortBy=481")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/delete?access_token=_EM_422_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 6L)
                .d("ID", "1889084648")
                .d("SNAPSHOT_DATE", "\"1931-12-17 11:05:03\"")
                .d("ALL_CONTRIBUTORS_COUNT", "138")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "884")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"s6I\"")
                .d("PRIVATE_PROJECT_COUNT", "409")
                .d("PROGRAM_LANGUAGES_COUNT", "668")
                .d("PUBLIC_PROJECT_COUNT", "216")
                .d("TAGS_COUNT", "347")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=Upc&" + 
                    "end_date=_EM_131_XYZ_&" + 
                    "access_token=Wo")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=Z")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=organization1&" + 
                    "start_date=2024-05-29T04%3A05%3A12Z&" + 
                    "end_date=_EM_152_XYZ_&" + 
                    "access_token=_EM_153_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_219_XYZ_")
                .get(baseUrlOfSut + "/init?" + 
                    "EMextraParam123=_EM_218_XYZ_&" + 
                    "access_token=_EM_220_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_2092_XYZ_")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=CSu2F&" + 
                    "end_date=2026-09-03T20%3A10%3A44&" + 
                    "sortBy=CTyi5MxpUxP2q&" + 
                    "q=_EM_2090_XYZ_&" + 
                    "access_token=NlwN9zFEO")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_272_XYZ_&" + 
                    "offset=0&" + 
                    "start_date=foo&" + 
                    "end_date=foo&" + 
                    "sortBy=personalProjectsCount&" + 
                    "EMextraParam123=42&" + 
                    "access_token=_EM_273_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 8L)
                .d("COMMITS_COUNT", "839")
                .d("CONTRIBUTORS_COUNT", "3")
                .d("DESCRIPTION", "\"_EM_285_XYZ_\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "473")
                .d("LAST_PUSHED", "\"_EM_286_XYZ_\"")
                .d("NAME", "\"_EM_287_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"uiIVxVIvye2oogB\"")
                .d("PRIMARY_LANGUAGE", "\"_EM_288_XYZ_\"")
                .d("SCORE", "2")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_289_XYZ_\"")
                .d("TITLE", "\"_EM_290_XYZ_\"")
                .d("IMAGE", "\"_EM_291_XYZ_\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "606")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?access_token=_EM_292_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_0_XYZ_&" + 
                    "start_date=&" + 
                    "end_date=_EM_402_XYZ_&" + 
                    "EMextraParam123=_EM_3_XYZ_&" + 
                    "access_token=wsc_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=Alxz3YUg87g&" + 
                    "EMextraParam123=qj&" + 
                    "access_token=_EM_413_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/fetch?" + 
                    "EMextraParam123=_EM_28_XYZ_&" + 
                    "access_token=SUDV")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "OA61wyY9NBM")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=_EM_26_XYZ_&" + 
                    "access_token=k2GOJrS")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 26L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "706")
                .d("DESCRIPTION", "\"_EM_876_XYZ_\"")
                .d("FORKS_COUNT", "804")
                .d("GIT_HUB_PROJECT_ID", "871")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "841")
                .d("SNAPSHOT_DATE", "\"1929-03-22 01:28:03\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_878_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "272")
            .and().insertInto("CONTRIBUTOR", 27L)
                .d("ID", "348")
                .d("ORGANIZATION_ID", "337")
                .d("SNAPSHOT_DATE", "\"2023-12-27 12:30:45\"")
                .d("NAME", "\"_EM_881_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "193798207")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "944")
                .d("PERSONAL_COMMITS_COUNT", "79")
                .d("PERSONAL_PROJECTS_COUNT", "602")
                .d("URL", "\"_EM_882_XYZ_\"")
            .and().insertInto("STATISTICS", 28L)
                .d("ID", "2")
                .d("SNAPSHOT_DATE", "\"2057-03-31 02:48:14\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "106")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "591")
                .d("MEMBERS_COUNT", "413469067")
                .d("ORGANIZATION_NAME", "\"QxFW4m\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "263")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 865667345, " + 
                    " \"key\": {}, " + 
                    " \"loginId\": \"\", " + 
                    " \"organizationId\": 732, " + 
                    " \"organizationalCommitsCount\": 750, " + 
                    " \"organizationalProjectsCount\": -1375293213, " + 
                    " \"personalCommitsCount\": 972, " + 
                    " \"url\": \"_EM_887_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 174, " + 
                    " \"key\": { " + 
                    " \"id\": 856, " + 
                    " \"snapshotDate\": \"2099-11-31T19:04:33\" " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_889_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 333, " + 
                    " \"personalCommitsCount\": 541, " + 
                    " \"personalProjectsCount\": 619, " + 
                    " \"snapshotDate\": \"1943-07-27T22:09:00\", " + 
                    " \"url\": \"_EM_890_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 530, " + 
                    " \"name\": \"_EM_892_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 947, " + 
                    " \"snapshotDate\": \"2094-12-02T25:13:25\", " + 
                    " \"url\": \"_EM_893_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"organizationId\": 671851227, " + 
                    " \"organizationName\": \"cZyPn\", " + 
                    " \"snapshotDate\": \"1972-02-01T14:54:48\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 685, " + 
                    " \"contributorsCount\": 774, " + 
                    " \"description\": \"_EM_896_XYZ_\", " + 
                    " \"externalContributorsCount\": 472, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_897_XYZ_\", " + 
                    " \"3DXed0\", " + 
                    " \"_EM_898_XYZ_\", " + 
                    " \"_EM_899_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [], " + 
                    " \"name\": \"_EM_900_XYZ_\", " + 
                    " \"score\": 516, " + 
                    " \"starsCount\": 822, " + 
                    " \"title\": \"\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 328, " + 
                    " \"allForksCount\": 18, " + 
                    " \"allSizeCount\": 410, " + 
                    " \"externalContributorsCount\": 854, " + 
                    " \"organizationName\": \"7\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_677_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"contributorsCount\": 57604443, " + 
                    " \"description\": \"\", " + 
                    " \"forksCount\": 20, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_621_XYZ_\", " + 
                    " \"_EM_622_XYZ_\", " + 
                    " \"_EM_623_XYZ_\", " + 
                    " \"_EM_624_XYZ_\", " + 
                    " \"_EM_625_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_627_XYZ_\", " + 
                    " \"_EM_628_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_630_XYZ_\", " + 
                    " \"snapshotDate\": \"1911-08-01T14:59:04\", " + 
                    " \"starsCount\": 863 " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 482, " + 
                    " \"description\": \"_EM_632_XYZ_\", " + 
                    " \"forksCount\": 337, " + 
                    " \"gitHubProjectId\": 822, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_634_XYZ_\", " + 
                    " \"Dt\", " + 
                    " \"_EM_635_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_636_XYZ_\", " + 
                    " \"organizationName\": \"_EM_637_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_638_XYZ_\", " + 
                    " \"snapshotDate\": \"2079-01-00T25:22:45\", " + 
                    " \"starsCount\": 157, " + 
                    " \"title\": \"_EM_639_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"externalContributorsCount\": 365, " + 
                    " \"forksCount\": 818, " + 
                    " \"gitHubProjectId\": -1360486374530413652, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_643_XYZ_\", " + 
                    " \"_EM_644_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_645_XYZ_\", " + 
                    " \"name\": \"_EM_648_XYZ_\", " + 
                    " \"snapshotDate\": \"1907-12-01T21:04:43\", " + 
                    " \"title\": \"_EM_650_XYZ_\", " + 
                    " \"url\": \"_EM_651_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 174, " + 
                    " \"forksCount\": 804, " + 
                    " \"gitHubProjectId\": 392, " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_655_XYZ_\", " + 
                    " \"_EM_656_XYZ_\", " + 
                    " \"_EM_657_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_658_XYZ_\", " + 
                    " \"organizationName\": \"aktSPBk5k\", " + 
                    " \"primaryLanguage\": \"KR6F_Y0lvb\", " + 
                    " \"score\": 88, " + 
                    " \"snapshotDate\": \"1937-06-06T19:05:33\", " + 
                    " \"starsCount\": 772, " + 
                    " \"title\": \"_EM_659_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 90, " + 
                    " \"image\": \"_EM_661_XYZ_\", " + 
                    " \"lastPushed\": \"_EM_665_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_666_XYZ_\", " + 
                    " \"_EM_667_XYZ_\", " + 
                    " \"_EM_668_XYZ_\", " + 
                    " \"_EM_669_XYZ_\", " + 
                    " \"_EM_670_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_672_XYZ_\", " + 
                    " \"score\": 885, " + 
                    " \"url\": \"_EM_673_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allForksCount\": 777, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2015-02-03T08:23:33\" " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_674_XYZ_\", " + 
                    " \"privateProjectCount\": 504, " + 
                    " \"programLanguagesCount\": 164, " + 
                    " \"publicProjectCount\": 920, " + 
                    " \"snapshotDate\": \"2036-11-16T13:47:26\" " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 243, " + 
                    " \"externalContributorsCount\": 586, " + 
                    " \"organizationName\": \"_EM_675_XYZ_\", " + 
                    " \"programLanguagesCount\": 854, " + 
                    " \"snapshotDate\": \"2052-11-08T07:35:27\", " + 
                    " \"teamsCount\": 433 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 505, " + 
                    " \"allForksCount\": 861, " + 
                    " \"allSizeCount\": 586, " + 
                    " \"allStarsCount\": 1000, " + 
                    " \"externalContributorsCount\": 862, " + 
                    " \"id\": 799, " + 
                    " \"key\": {}, " + 
                    " \"organizationName\": \"wLNw5ffV\", " + 
                    " \"privateProjectCount\": 520, " + 
                    " \"publicProjectCount\": 47, " + 
                    " \"snapshotDate\": \"2061-12-07T23:12:44\", " + 
                    " \"tagsCount\": 588, " + 
                    " \"teamsCount\": 844 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": 448 " + 
                    " }, " + 
                    " \"name\": \"_EM_750_XYZ_\", " + 
                    " \"organizationId\": 380, " + 
                    " \"organizationName\": \"LXHoUxZt\", " + 
                    " \"organizationalCommitsCount\": 80, " + 
                    " \"personalCommitsCount\": 213, " + 
                    " \"url\": \"_EM_751_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"WSyxT7NuF\", " + 
                    " \"organizationalCommitsCount\": 618, " + 
                    " \"personalCommitsCount\": 4, " + 
                    " \"personalProjectsCount\": 935 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 3, " + 
                    " \"loginId\": \"YAVKBrH\", " + 
                    " \"organizationId\": 8329140247079646426, " + 
                    " \"personalCommitsCount\": 145, " + 
                    " \"personalProjectsCount\": 262, " + 
                    " \"snapshotDate\": \"1930-12-10T18:59:58\", " + 
                    " \"url\": \"_EM_757_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 50, " + 
                    " \"loginId\": \"_EM_758_XYZ_\", " + 
                    " \"organizationId\": -9055584387544962313, " + 
                    " \"organizationName\": \"_EM_760_XYZ_\", " + 
                    " \"organizationalCommitsCount\": 654, " + 
                    " \"organizationalProjectsCount\": 359, " + 
                    " \"snapshotDate\": \"2001-02-29T18:45:53\", " + 
                    " \"url\": \"_EM_761_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 135, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"2071-13-15T17:-1:04\" " + 
                    " }, " + 
                    " \"name\": \"_EM_763_XYZ_\", " + 
                    " \"organizationId\": 874, " + 
                    " \"organizationName\": \"wQTGHFLuMBEU\", " + 
                    " \"organizationalCommitsCount\": 364, " + 
                    " \"personalCommitsCount\": 558, " + 
                    " \"personalProjectsCount\": 108, " + 
                    " \"url\": \"_EM_764_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 40, " + 
                    " \"forksCount\": 382, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_766_XYZ_\", " + 
                    " \"_EM_767_XYZ_\", " + 
                    " \"_EM_768_XYZ_\", " + 
                    " \"_EM_769_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_770_XYZ_\", " + 
                    " \"name\": \"4\", " + 
                    " \"score\": 207, " + 
                    " \"starsCount\": 81, " + 
                    " \"title\": \"R\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 904, " + 
                    " \"description\": \"wnlOprVf8qkD\", " + 
                    " \"forksCount\": 881, " + 
                    " \"languageList\": [], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_776_XYZ_\", " + 
                    " \"_EM_777_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"_EM_780_XYZ_\", " + 
                    " \"score\": 268, " + 
                    " \"starsCount\": 11 " + 
                    " }, " + 
                    " { " + 
                    " \"forksCount\": 388, " + 
                    " \"gitHubProjectId\": 2481184553797181720, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_783_XYZ_\", " + 
                    " \"_EM_784_XYZ_\", " + 
                    " \"_EM_785_XYZ_\", " + 
                    " \"869kB_RlG0\", " + 
                    " \"_EM_786_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_788_XYZ_\", " + 
                    " \"organizationName\": \"_EM_789_XYZ_\", " + 
                    " \"score\": 363, " + 
                    " \"snapshotDate\": \"2035-04-30T19:13:24\", " + 
                    " \"title\": \"_EM_791_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 170, " + 
                    " \"description\": \"4WgQdSPRxh\", " + 
                    " \"image\": \"_EM_792_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"Q_k\", " + 
                    " \"_EM_793_XYZ_\", " + 
                    " \"_EM_794_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"_EM_795_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_796_XYZ_\", " + 
                    " \"qi\", " + 
                    " \"4o\" " + 
                    " ], " + 
                    " \"organizationName\": \"EeGej\", " + 
                    " \"primaryLanguage\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 828, " + 
                    " \"description\": \"_EM_800_XYZ_\", " + 
                    " \"forksCount\": 785, " + 
                    " \"gitHubProjectId\": 37, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_802_XYZ_\", " + 
                    " \"_EM_803_XYZ_\", " + 
                    " \"tu1iDK\", " + 
                    " \"_EM_804_XYZ_\", " + 
                    " \"_EM_805_XYZ_\" " + 
                    " ], " + 
                    " \"snapshotDate\": \"2014-00-24T05:54:29\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 87, " + 
                    " \"allSizeCount\": 652, " + 
                    " \"externalContributorsCount\": 795, " + 
                    " \"membersCount\": 779, " + 
                    " \"privateProjectCount\": 986, " + 
                    " \"publicProjectCount\": 880, " + 
                    " \"snapshotDate\": \"2011-10-03T04:06:59\", " + 
                    " \"tagsCount\": 529, " + 
                    " \"teamsCount\": 416 " + 
                    " }, " + 
                    " { " + 
                    " \"externalContributorsCount\": 898, " + 
                    " \"id\": 570, " + 
                    " \"organizationName\": \"QYaG\", " + 
                    " \"privateProjectCount\": 986, " + 
                    " \"publicProjectCount\": 887, " + 
                    " \"teamsCount\": 918 " + 
                    " }, " + 
                    " { " + 
                    " \"allSizeCount\": 999, " + 
                    " \"allStarsCount\": 238, " + 
                    " \"externalContributorsCount\": 216, " + 
                    " \"membersCount\": 790 " + 
                    " }, " + 
                    " { " + 
                    " \"externalContributorsCount\": 370, " + 
                    " \"key\": { " + 
                    " \"id\": 8638177802829075848, " + 
                    " \"snapshotDate\": \"1985-04-18T23:13:31\" " + 
                    " }, " + 
                    " \"membersCount\": 734, " + 
                    " \"organizationName\": \"S4\", " + 
                    " \"privateProjectCount\": 96, " + 
                    " \"programLanguagesCount\": 821 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }


}
