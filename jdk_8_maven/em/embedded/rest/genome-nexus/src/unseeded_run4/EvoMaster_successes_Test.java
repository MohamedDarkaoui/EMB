import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T16:01:34.862+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 82 tests
 * <br>
 * Covered targets: 3955
 * <br>
 * Used time: 6h 1m 26s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_33_XYZ_?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=_EM_73_XYZ_&" + 
                    "EMextraParam123=_EM_74_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_177_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_172_XYZ_\", " + 
                    " \"_EM_173_XYZ_\", " + 
                    " \"_EM_174_XYZ_\", " + 
                    " \"_EM_175_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_2437_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?geneId=_EM_2512_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_185_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"EZghwoXnX\", " + 
                    " \"_EM_180_XYZ_\", " + 
                    " \"_EM_181_XYZ_\", " + 
                    " \"_EM_182_XYZ_\", " + 
                    " \"_EM_183_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_57_XYZ_&" + 
                    "proteinId=wQ6eF&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/ptm/experimental?" + 
                    "ensemblTranscriptId=_EM_70_XYZ_&" + 
                    "EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_392_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_4378_XYZ_&" + 
                    "hugoSymbol=_EM_4380_XYZ_&" + 
                    "EMextraParam123=_EM_4381_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_871_XYZ_&" + 
                    "proteinId=_EM_2621_XYZ_&" + 
                    "hugoSymbol=_EM_873_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1437_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "limit=33359&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_607_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=D&" + 
                    "limit=337")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1681_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "limit=-4193560")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?hugoSymbol=_EM_954_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1311_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=_EM_1308_XYZ_&" + 
                    "hugoSymbol=_EM_1309_XYZ_&" + 
                    "EMextraParam123=_EM_1310_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_1028_XYZ_\", " + 
                    " \"_EM_1029_XYZ_\", " + 
                    " \"_EM_1030_XYZ_\", " + 
                    " \"_EM_1031_XYZ_\", " + 
                    " \"_EM_1032_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"H\", " + 
                    " \"_EM_1033_XYZ_\", " + 
                    " \"3ZpEje26C7z\", " + 
                    " \"3D2oetCRpTk\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_380_XYZ_\", " + 
                    " \"_EM_381_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_382_XYZ_\", " + 
                    " \"_EM_383_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_384_XYZ_\", " + 
                    " \"_EM_385_XYZ_\", " + 
                    " \"_EM_386_XYZ_\", " + 
                    " \"_EM_387_XYZ_\", " + 
                    " \"_EM_388_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"_EM_389_XYZ_\", " + 
                    " \"_EM_390_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_2505_XYZ_\", " + 
                    " \"_EM_2506_XYZ_\", " + 
                    " \"_EM_2507_XYZ_\", " + 
                    " \"_EM_2508_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_2509_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3024_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"proteinIds\": [], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_5058_XYZ_\", " + 
                    " \"_EM_5059_XYZ_\", " + 
                    " \"_EM_5060_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_5064_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_158_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=_EM_159_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("_EM_158_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"-1416664322\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=bNOUZc.&" + 
                    "limit=-1058243733")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=abOU%60g.&" + 
                    "limit=-1023238630")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_151_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 332, " + 
                    " \"mutationType\": \"_EM_152_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_153_XYZ_\", " + 
                    " \"start\": 15, " + 
                    " \"end\": 93, " + 
                    " \"mutationType\": \"_EM_154_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_155_XYZ_\", " + 
                    " \"start\": 307, " + 
                    " \"end\": 635, " + 
                    " \"mutationType\": \"_EM_156_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_157_XYZ_\", " + 
                    " \"start\": 695, " + 
                    " \"end\": 916, " + 
                    " \"mutationType\": \"HFNetbVkGPE\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("_EM_151_XYZ_"))
                .body("[0].'proteinLocation'.'start'", numberMatches(887.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(332.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("_EM_152_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'proteinLocation'.'transcriptId'", containsString("_EM_153_XYZ_"))
                .body("[1].'proteinLocation'.'start'", numberMatches(15.0))
                .body("[1].'proteinLocation'.'end'", numberMatches(93.0))
                .body("[1].'proteinLocation'.'mutationType'", containsString("_EM_154_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'proteinLocation'.'transcriptId'", containsString("_EM_155_XYZ_"))
                .body("[2].'proteinLocation'.'start'", numberMatches(307.0))
                .body("[2].'proteinLocation'.'end'", numberMatches(635.0))
                .body("[2].'proteinLocation'.'mutationType'", containsString("_EM_156_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_94_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_89_XYZ_\", " + 
                    " \"Mm_FEzhWfJEJ\", " + 
                    " \"_EM_90_XYZ_\", " + 
                    " \"_EM_91_XYZ_\", " + 
                    " \"_EM_92_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_100_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_96_XYZ_\", " + 
                    " \"_EM_97_XYZ_\", " + 
                    " \"_EM_98_XYZ_\", " + 
                    " \"nUpx\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?keyword=_EM_76_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_857_XYZ_&" + 
                    "limit=163")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_3079_XYZ_&" + 
                    "limit=-861&" + 
                    "EMextraParam123=_EM_858_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_479_XYZ_\", " + 
                    " \"_EM_480_XYZ_\", " + 
                    " \"_EM_481_XYZ_\", " + 
                    " \"\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"chrg.c\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"0Evg.VdX\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"\", " + 
                    " \"_EM_12540_XYZ_\", " + 
                    " \"_EM_12541_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_27489_XYZ_\", " + 
                    " \"trYBpif4CPsX\", " + 
                    " \"\", " + 
                    " \"_EM_27491_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_43023_XYZ_\", " + 
                    " \"\", " + 
                    " \"_EM_43024_XYZ_\", " + 
                    " \"0\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_523_XYZ_")
                .get(baseUrlOfSut + "/pdb/header/7mEV?EMextraParam123=_EM_522_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'pdbId'", containsString("7mEV"))
                .body("'title'", containsString("human apex/ref1 monomer with c138a mutation"))
                .body("'compound'.'1'.'chain'.size()", equalTo(1))
                .body("'compound'.'1'.'chain'", hasItems("a"))
                .body("'compound'.'1'.'synonym'", containsString("apex/ref1"))
                .body("'compound'.'1'.'engineered'", containsString("yes"))
                .body("'compound'.'1'.'molecule'", containsString("dna-(apurinic or apyrimidinic site) endonuclease, mitochondrial"))
                .body("'compound'.'1'.'mol_id'", containsString("1"))
                .body("'source'.'1'.'gene'.size()", equalTo(7))
                .body("'source'.'1'.'gene'", hasItems("apex1", "ape", "ape1", "apex", "apx", "hap1", "ref1"))
                .body("'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("'source'.'1'.'organism_common'", containsString("human"))
                .body("'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/5a5Z")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'pdbId'", containsString("5a5Z"))
                .body("'title'", containsString("approved drugs containing thiols as inhibitors of metallo-beta-lactamases: strategy to combat multidrug-resistant bacteria"))
                .body("'compound'.'1'.'chain'.size()", equalTo(2))
                .body("'compound'.'1'.'chain'", hasItems("a", "c"))
                .body("'compound'.'1'.'fragment'", containsString("lactamase_b, residues 29-270"))
                .body("'compound'.'1'.'synonym'", containsString("ndm-1, metallo-beta-lactamase ndm-1"))
                .body("'compound'.'1'.'engineered'", containsString("yes"))
                .body("'compound'.'1'.'molecule'", containsString("beta-lactamase ndm-1"))
                .body("'compound'.'1'.'mol_id'", containsString("1"))
                .body("'compound'.'1'.'ec'", containsString("3.5.2.6"))
                .body("'source'.'1'.'organism_scientific'", containsString("klebsiella pneumoniae"))
                .body("'source'.'1'.'organism_taxid'", containsString("573"))
                .body("'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_204_XYZ_\", " + 
                    " \"_EM_205_XYZ_\", " + 
                    " \"_EM_206_XYZ_\", " + 
                    " \"_EM_207_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=_EM_208_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"jU^URGg.0WO\", " + 
                    " \"R^hOVNhUX\", " + 
                    " \"_`6v\", " + 
                    " \"Q8UB\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_50_XYZ_")
                .get(baseUrlOfSut + "/annotation/_EM_44_XYZ_?" + 
                    "token=_EM_46_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_44_XYZ_"))
                .body("'originalVariantQuery'", containsString("_EM_44_XYZ_"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_145_XYZ_\", " + 
                    " \"_EM_146_XYZ_\", " + 
                    " \"_EM_147_XYZ_\", " + 
                    " \"_EM_148_XYZ_\", " + 
                    " \"d3Xu\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs?EMextraParam123=_EM_149_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_145_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_146_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_147_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1665_XYZ_")
                .get(baseUrlOfSut + "/annotation/dbsnp/COSM630?isoformOverrideSource=_EM_1661_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("COSM630"))
                .body("'originalVariantQuery'", containsString("COSM630"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("8"))
                .body("'start'", numberMatches(4.2174375E7))
                .body("'end'", numberMatches(4.2174375E7))
                .body("'allele_string'", containsString("COSMIC_MUTATION"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("?"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_7245_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"6RGn\", " + 
                    " \"_EM_7240_XYZ_\", " + 
                    " \"_EM_7241_XYZ_\", " + 
                    " \"_EM_7242_XYZ_\", " + 
                    " \"_EM_7243_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header?EMextraParam123=_EM_7244_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("6RGn"))
                .body("[0].'title'", containsString("btea131"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'1'.'chain'", hasItems("a"))
                .body("[0].'compound'.'1'.'synonym'", containsString("protein of uncharacterized function (duf3120)"))
                .body("[0].'compound'.'1'.'molecule'", containsString("duf3120 domain-containing protein"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'source'.'1'.'gene'.size()", equalTo(2))
                .body("[0].'source'.'1'.'gene'", hasItems("eho76_17700", "nctc10911_04001"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("bordetella pertussis"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("520"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli 'bl21-gold(de3)plyss ag'"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_1434_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=_EM_1432_XYZ_&" + 
                    "fields=&" + 
                    "EMextraParam123=_EM_1435_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("_EM_1434_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_1434_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/summary/KLBH8oYqYkj?projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("KLBH8oYqYkj"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_24_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_321_XYZ_\", " + 
                    " \"_EM_322_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "projection=CANONICAL&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_321_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'variant'", containsString("_EM_322_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"HHMXWSTG\", " + 
                    " \"_EM_1206_XYZ_\", " + 
                    " \"pxUlEiKCJnBlY\", " + 
                    " \"pxUlEiKGJnBlY\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "projection=ALL&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString(""))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[0].'transcriptConsequences'.size()", equalTo(0))
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[1].'variant'", containsString("HHMXWSTG"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'transcriptConsequences'.size()", equalTo(0))
                .body("[1].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_1206_XYZ_"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'transcriptConsequences'.size()", equalTo(0))
                .body("[2].'transcriptConsequenceSummaries'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_316_XYZ_\", " + 
                    " \"start\": 114312052, " + 
                    " \"end\": 130, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_318_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_1370_XYZ_&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1362_XYZ_%22%3A%22q3lSkJZGUuKa_V0H%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1363_XYZ_%22%3A%22Jjyxq9E179fF_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1364_XYZ_%22%3A%22%22%0A++++++++++++++++++++%7D&" + 
                    "fields=%5B&fields=_EM_3790_XYZ_&fields=_EM_1352_XYZ_&fields=_EM_3791_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("_EM_316_XYZ_:g.114312052_114312053ins_EM_318_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_316_XYZ_,114312052,130,,_EM_318_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"bGasrUgm\", " + 
                    " \"start\": 279002, " + 
                    " \"end\": -85093, " + 
                    " \"referenceAllele\": \"2mRF\", " + 
                    " \"variantAllele\": \"--\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("bGasrUgm"))
                .body("[0].'genomicLocation'.'start'", numberMatches(279002.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(-85093.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("2mRF"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("--"))
                .body("[0].'variant'", containsString("bGasrUgm:g.279002_-85093del"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs248?" + 
                    "token=%7B%0A++++++++++++++++++++%22wwKPlE0OqlPc8OsHL%22%3A%22_EM_5144_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=wwKPlE0OqlPc8OsHL&fields=hbJN5N&fields=_EM_5147_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs248"))
                .body("'originalVariantQuery'", containsString("rs248"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("8"))
                .body("'start'", numberMatches(1.9810826E7))
                .body("'end'", numberMatches(1.9810826E7))
                .body("'allele_string'", containsString("G/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("synonymous_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'exon'", containsString("4/10"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000309757.6:p.Glu145="))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.435G>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'codons'", containsString("gaG/gaA"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(145.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(145.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("E"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("synonymous_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("4/5"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000520959"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000428496.1:p.Glu69="))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000520959.1:c.207G>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[1].'codons'", containsString("gaG/gaA"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000428496"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(69.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(69.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("E"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("synonymous_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000521994"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs70?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "token=N&" + 
                    "fields=hgP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs70"))
                .body("'originalVariantQuery'", containsString("rs70"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1607706E7))
                .body("'end'", numberMatches(1.1607706E7))
                .body("'allele_string'", containsString("C/G/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1453+22381G>C"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1453+22381G>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs841?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=%7B%0A++++++++++++++++++++%22o%7BCbtUfHBWzl%22%3A%22S%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22bWUJYjU%22%3A%22MQ5l5%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22wR7HUU%22%3A%22VUXU%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_60589_XYZ_%22%3A%22j54Gu%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_&fields=1glFzTwF61UUJb2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs841"))
                .body("'originalVariantQuery'", containsString("rs841"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("14"))
                .body("'start'", numberMatches(5.5310492E7))
                .body("'end'", numberMatches(5.5310492E7))
                .body("'allele_string'", containsString("G/A/C"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("splice_region_variant"))
                .body("'transcript_consequences'.size()", equalTo(12))
                .body("'transcript_consequences'[0].'exon'", containsString("6/6"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000254299"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000254299.4:n.1144C>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("GCH1"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000131979"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("4193"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("non_coding_transcript_exon_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("6/6"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000254299"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000254299.4:n.1144C>G"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("GCH1"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000131979"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("4193"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("non_coding_transcript_exon_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000395514"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000395514.1:c.*16+227C>T"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000378890"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("GCH1"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000131979"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("4193"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_001024024.1"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs9?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=%7B%0A++++++++++++++++++++%22kji8Koi0ajxMoPk%22%3A%22ic1tUOzgeCBkMn%5DdA%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&fields=d0vSd1UU3gEE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs9"))
                .body("'originalVariantQuery'", containsString("rs9"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(9.2373455E7))
                .body("'end'", numberMatches(9.2373455E7))
                .body("'allele_string'", containsString("G/-"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000265734"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000265734.4:c.370-18348del"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000265734"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001259.6"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000424848"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000424848.2:c.370-18348del"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000397087"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_001145306.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs9?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=%7B%0A++++++++++++++++++++%22kji8Koi0ajxMoPk%22%3A%22ic1tUOzgeCBkMn%5DdA%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&fields=d0vSd1tY3gEG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs9"))
                .body("'originalVariantQuery'", containsString("rs9"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(9.2373455E7))
                .body("'end'", numberMatches(9.2373455E7))
                .body("'allele_string'", containsString("G/-"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000265734"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000265734.4:c.370-18348del"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000265734"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001259.6"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000424848"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000424848.2:c.370-18348del"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000397087"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_001145306.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"Y\", " + 
                    " \"start\": 131072, " + 
                    " \"end\": 126978, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"dKhAfm\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_8322_XYZ_\", " + 
                    " \"start\": -16776689, " + 
                    " \"end\": -1073743875, " + 
                    " \"referenceAllele\": \"_EM_10619_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2809_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_8323_XYZ_K\", " + 
                    " \"start\": -2096872, " + 
                    " \"end\": 66479, " + 
                    " \"referenceAllele\": \"2IS\", " + 
                    " \"variantAllele\": \"_EM_10621_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22jP%22%3A%22_EM_11780_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22H4N1d4%22%3A%22_EM_10874_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=Vxrq5h0g4Msr2vt75&fields=uldu&fields=onazuM2&fields=3tSQ3V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("Y:g.131072_131073insdKhAfm"))
                .body("[0].'originalVariantQuery'", containsString("Y,131072,126978,-,dKhAfm"))
                .body("[0].'hgvsg'", containsString("Y:g.131072_131073insdKhAfm"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("Y"))
                .body("[0].'start'", numberMatches(131073.0))
                .body("[0].'end'", numberMatches(131072.0))
                .body("[0].'allele_string'", containsString("-/DKHAFM"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intergenic_variant"))
                .body("[0].'intergenic_consequences'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("[0].'intergenic_consequences'[0].'variantAllele'", containsString("DKHAFM"))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("[0].'successfully_annotated'", equalTo(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs713")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs713"))
                .body("'originalVariantQuery'", containsString("rs713"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("HG1497_PATCH"))
                .body("'start'", numberMatches(1.53321455E8))
                .body("'end'", numberMatches(1.53321455E8))
                .body("'allele_string'", containsString("A/C"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(3))
                .body("'transcript_consequences'[0].'exon'", containsString("3/4"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000593419"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000593419.1:n.467A>C"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("OPN1LW"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000268832"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("9936"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("non_coding_transcript_exon_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("1/4"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000595220"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000471036.1:p.Met16Leu"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000595220.1:c.46A>C"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'codons'", containsString("Atg/Ctg"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000471036"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(16.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(16.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("OPN1LW"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000268832"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("M/L"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("9936"))
                .body("'transcript_consequences'[1].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[1].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[1].'sift_score'", numberMatches(1.0))
                .body("'transcript_consequences'[1].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("3/6"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000597195"))
                .body("'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000471283.1:p.Met153Leu"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000597195.1:c.457A>C"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[2].'codons'", containsString("Atg/Ctg"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000471283"))
                .body("'transcript_consequences'[2].'protein_start'", numberMatches(153.0))
                .body("'transcript_consequences'[2].'protein_end'", numberMatches(153.0))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("OPN1LW"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000268832"))
                .body("'transcript_consequences'[2].'amino_acids'", containsString("M/L"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("9936"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[2].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[2].'sift_score'", numberMatches(1.0))
                .body("'transcript_consequences'[2].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"fOwo\", " + 
                    " \"start\": 817, " + 
                    " \"end\": 810, " + 
                    " \"referenceAllele\": \"_EM_139_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_140_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_141_XYZ_\", " + 
                    " \"start\": 95, " + 
                    " \"end\": 149, " + 
                    " \"referenceAllele\": \"f\", " + 
                    " \"variantAllele\": \"_EM_142_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("fOwo"))
                .body("[0].'genomicLocation'.'start'", numberMatches(817.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(810.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_139_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_140_XYZ_"))
                .body("[0].'variant'", containsString("fOwo:g.822_810delins40_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_141_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(95.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(149.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("f"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_142_XYZ_"))
                .body("[1].'variant'", containsString("_EM_141_XYZ_:g.95delins_EM_142_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs61\", " + 
                    " \"S\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=Wid4K2CqjO&" + 
                    "token=&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs61"))
                .body("[0].'originalVariantQuery'", containsString("rs61"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("7"))
                .body("[0].'start'", numberMatches(1.1617229E7))
                .body("[0].'end'", numberMatches(1.1617229E7))
                .body("[0].'allele_string'", containsString("C/A/G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(3))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>T"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>C"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>A"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("S"))
                .body("[1].'originalVariantQuery'", containsString("S"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10535_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": -4030, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_21119_XYZ_\", " + 
                    " \"start\": -16743921, " + 
                    " \"end\": -261574, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_2809_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"MjnckKVOZ\", " + 
                    " \"start\": 278, " + 
                    " \"end\": 66476, " + 
                    " \"referenceAllele\": \"v\", " + 
                    " \"variantAllele\": \"vQ\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_3464_XYZ_%22%3A%22_EM_21118_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_10577_XYZ_%22%3A%22W3oB0P4mM3y%22%0A++++++++++++++++++++%7D&" + 
                    "fields=vjoaZyrkHXDOz&fields=_EM_21120_XYZ_&fields=opazu%5D&fields=_EM_21121_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("MjnckKVOZ:g.278_279insQ"))
                .body("[0].'originalVariantQuery'", containsString("MjnckKVOZ,278,66476,v,vQ"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2576_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"3itESOgOQe\", " + 
                    " \"start\": 426, " + 
                    " \"end\": 162, " + 
                    " \"referenceAllele\": \"1Hj\", " + 
                    " \"variantAllele\": \"_EM_2567_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2568_XYZ_\", " + 
                    " \"start\": 908, " + 
                    " \"end\": 452, " + 
                    " \"referenceAllele\": \"_EM_2569_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2570_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2571_XYZ_\", " + 
                    " \"start\": 789, " + 
                    " \"end\": 530, " + 
                    " \"referenceAllele\": \"_EM_2572_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2573_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"aeDBXu\", " + 
                    " \"start\": 426, " + 
                    " \"end\": 981, " + 
                    " \"referenceAllele\": \"_EM_2574_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2575_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("3itESOgOQe"))
                .body("[0].'genomicLocation'.'start'", numberMatches(426.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(162.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("1Hj"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_2567_XYZ_"))
                .body("[0].'variant'", containsString("3itESOgOQe:g.426_162delins_EM_2567_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_2568_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(908.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(452.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_2569_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_2570_XYZ_"))
                .body("[1].'variant'", containsString("_EM_2568_XYZ_:g.914_452delins70_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_2571_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(789.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(530.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2572_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_2573_XYZ_"))
                .body("[2].'variant'", containsString("_EM_2571_XYZ_:g.796_530delins3_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2244_XYZ_\", " + 
                    " \"start\": 725, " + 
                    " \"end\": 79, " + 
                    " \"referenceAllele\": \"_EM_2245_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2246_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2247_XYZ_\", " + 
                    " \"start\": 905, " + 
                    " \"end\": 803, " + 
                    " \"referenceAllele\": \"_EM_2248_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2249_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2250_XYZ_\", " + 
                    " \"start\": 928, " + 
                    " \"end\": 2, " + 
                    " \"referenceAllele\": \"_EM_2251_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2252_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2253_XYZ_\", " + 
                    " \"start\": 696, " + 
                    " \"end\": 762, " + 
                    " \"referenceAllele\": \"_EM_2254_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2255_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_2244_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(725.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(79.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_2245_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_2246_XYZ_"))
                .body("[0].'variant'", containsString("_EM_2Y4_XYZ_:g.732_79delins6_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_2247_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(905.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(803.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_2248_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_2249_XYZ_"))
                .body("[1].'variant'", containsString("_EM_2Y7_XYZ_:g.912_803delins9_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_2250_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(928.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(2.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2251_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_2252_XYZ_"))
                .body("[2].'variant'", containsString("_EM_2250_XYZ_:g.935_2delins2_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"lC4PXeQfj79eEgi\", " + 
                    " \"start\": 497, " + 
                    " \"end\": 606, " + 
                    " \"referenceAllele\": \"_EM_2589_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2590_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2591_XYZ_\", " + 
                    " \"start\": 598, " + 
                    " \"end\": 806, " + 
                    " \"referenceAllele\": \"_EM_2592_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2593_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2594_XYZ_\", " + 
                    " \"start\": 519, " + 
                    " \"end\": 452, " + 
                    " \"referenceAllele\": \"_EM_2595_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2596_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2597_XYZ_\", " + 
                    " \"start\": 827, " + 
                    " \"end\": -1873630498, " + 
                    " \"referenceAllele\": \"_EM_2598_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2599_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2600_XYZ_\", " + 
                    " \"start\": 264, " + 
                    " \"end\": 908, " + 
                    " \"referenceAllele\": \"_EM_3469_XYZ_\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'genomicLocation'.'chromosome'", containsString("lC4PXeQfj79eEgi"))
                .body("[0].'genomicLocation'.'start'", numberMatches(497.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(606.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_2589_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_2590_XYZ_"))
                .body("[0].'variant'", containsString("lC4PXeQfj79eEgi:g.503_606delins90_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_2591_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(598.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(806.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_2592_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_2593_XYZ_"))
                .body("[1].'variant'", containsString("_EM_2591_XYZ_:g.605_806delins3_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_2594_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(519.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(452.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2595_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_2596_XYZ_"))
                .body("[2].'variant'", containsString("_EM_2594_XYZ_:g.526_452delins6_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3470_XYZ_\", " + 
                    " \"start\": 688, " + 
                    " \"end\": 156, " + 
                    " \"referenceAllele\": \"Y\", " + 
                    " \"variantAllele\": \"Y\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2581_XYZ_\", " + 
                    " \"start\": 4194906, " + 
                    " \"end\": 963, " + 
                    " \"referenceAllele\": \"_EM_2582_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2583_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2584_XYZ_\", " + 
                    " \"start\": 599, " + 
                    " \"end\": 304, " + 
                    " \"referenceAllele\": \"_EM_2585_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2586_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2587_XYZ_\", " + 
                    " \"start\": 485, " + 
                    " \"end\": 57, " + 
                    " \"referenceAllele\": \"_EM_2588_XYZ_\", " + 
                    " \"variantAllele\": \"x1Wm6\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_3470_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(688.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(156.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("Y"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("Y"))
                .body("[0].'variant'", containsString("_EM_3470_XYZ_:g.688Y>Y"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_2581_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(4194906.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(963.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_2582_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_2583_XYZ_"))
                .body("[1].'variant'", containsString("_EM_2581_XYZ_:g.4194913_963delins3_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_2584_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(599.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(304.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2585_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_2586_XYZ_"))
                .body("[2].'variant'", containsString("_EM_2584_XYZ_:g.606_304delins6_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs4\", " + 
                    " \"_EM_51697_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=poX8L6ukagRdNLj&" + 
                    "fields=_EM_15262_XYZ_&fields=_EM_51695_XYZ_&fields=Zm74zLqD6y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs4"))
                .body("[0].'originalVariantQuery'", containsString("rs4"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("13"))
                .body("[0].'start'", numberMatches(3.2447222E7))
                .body("[0].'end'", numberMatches(3.2447222E7))
                .body("[0].'allele_string'", containsString("A/G"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000428783"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000428783.1:n.99+26146A>G"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("EEF1DP3"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000229715"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("30486"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(2))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("_EM_51697_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_51697_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10236_XYZ_\", " + 
                    " \"start\": 547, " + 
                    " \"end\": -1912663761, " + 
                    " \"referenceAllele\": \"_EM_10237_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_10238_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10239_XYZ_\", " + 
                    " \"start\": 811, " + 
                    " \"end\": 6, " + 
                    " \"referenceAllele\": \"_EM_10240_XYZ_\", " + 
                    " \"variantAllele\": \"qYx1L79Sbq8wYP4\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10241_XYZ_\", " + 
                    " \"start\": 551, " + 
                    " \"end\": 724, " + 
                    " \"referenceAllele\": \"_EM_10242_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_10243_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?isoformOverrideSource=3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_10X6_XYZ_:g.555_-1912663761delins8_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_10236_XYZ_,547,-1912663761,_EM_10237_XYZ_,_EM_10238_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_10X9_XYZ_:g.811_6delinsqYx1L79Sbq8wYP4"))
                .body("[1].'originalVariantQuery'", containsString("_EM_10239_XYZ_,811,6,_EM_10240_XYZ_,qYx1L79Sbq8wYP4"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_10Y1_XYZ_:g.559_724delins3_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_10241_XYZ_,551,724,_EM_10242_XYZ_,_EM_10243_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"k\", " + 
                    " \"start\": 281688, " + 
                    " \"end\": -83104, " + 
                    " \"referenceAllele\": \"-2\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"vANtt7QZxAtS8Z\", " + 
                    " \"start\": 386, " + 
                    " \"end\": 4953, " + 
                    " \"referenceAllele\": \"Yw8WKmEyXzcdJxKD\", " + 
                    " \"variantAllele\": \"T1H\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("k"))
                .body("[0].'genomicLocation'.'start'", numberMatches(281688.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(-83104.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-2"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'variant'", containsString("k:g.281689del"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("vANtt7QZxAtS8Z"))
                .body("[1].'genomicLocation'.'start'", numberMatches(386.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(4953.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("Yw8WKmEyXzcdJxKD"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("T1H"))
                .body("[1].'variant'", containsString("vANtt7QZxAtS8Z:g.386_4953delinsT1H"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3635_XYZ_\", " + 
                    " \"start\": -123, " + 
                    " \"end\": -536870912, " + 
                    " \"referenceAllele\": \"_EM_3630_XYZ_\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"XrxgpyT6LEhD8\", " + 
                    " \"start\": -33553913, " + 
                    " \"end\": 355, " + 
                    " \"referenceAllele\": \"_EM_3632_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1800_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3636_XYZ_\", " + 
                    " \"start\": 195, " + 
                    " \"end\": 536871559, " + 
                    " \"referenceAllele\": \"_EM_2237_XYZ_\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1803_XYZ_\", " + 
                    " \"start\": 54, " + 
                    " \"end\": 210, " + 
                    " \"referenceAllele\": \"_EM_1804_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1805_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_1793_XYZ_&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_2239_XYZ_%22%3A%22C%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_2240_XYZ_%22%3A%22G%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_2241_XYZ_%22%3A%22BlPy44wI7GZbvMs%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_2242_XYZ_%22%3A%22YpG2YkMw1oc9O%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_2243_XYZ_%22%3A%22ajuSJn%22%0A++++++++++++++++++++%7D&" + 
                    "fields=0I5WbE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_3636_XYZ_:g.195_536871559del"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3636_XYZ_,195,536871559,_EM_2237_XYZ_,-"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_1803_XYZ_:g.61_210delins5_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_1803_XYZ_,54,210,_EM_1804_XYZ_,_EM_1805_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"UFc0:^UQ\", " + 
                    " \"start\": 60, " + 
                    " \"end\": 2056, " + 
                    " \"referenceAllele\": \"La\", " + 
                    " \"variantAllele\": \"La\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"tXBB70E\", " + 
                    " \"start\": -1093462, " + 
                    " \"end\": -1073727384, " + 
                    " \"referenceAllele\": \"_EM_58035_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_36468_XYZ_A\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"TE\", " + 
                    " \"start\": 434, " + 
                    " \"end\": 992, " + 
                    " \"referenceAllele\": \"_EM_58046_XYZ_\", " + 
                    " \"variantAllele\": \"C\u003e5i\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_58036_XYZ_%22%3A%22apV%22%0A++++++++++++++++++++%7D&" + 
                    "fields=cZx%7CV4ciiHRk&fields=_EM_58039_XYZ_&fields=4fFsa8dulH5s&fields=_EM_58047_XYZ_&fields=TVOSS567PSzmJh5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("UFc0:^UQ:g.60_2056delinsLa"))
                .body("[0].'originalVariantQuery'", containsString("UFc0:^UQ,60,2056,La,La"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("TE:g.434_992delinsC>5i"))
                .body("[1].'originalVariantQuery'", containsString("TE,434,992,_EM_58046_XYZ_,C>5i"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_117_XYZ_\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"_EM_118_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_119_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_123_XYZ_\", " + 
                    " \"start\": 948, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"_EM_124_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_125_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_128_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_115_XYZ_&" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_117_XYZ_:g.399_98delins9_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_117_XYZ_,393,98,_EM_118_XYZ_,_EM_119_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_120_XYZ_:g.860_330delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_120_XYZ_,854,330,_EM_121_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_1X_XYZ_:g.954_541delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_123_XYZ_,948,541,_EM_124_XYZ_,_EM_125_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_dbsnp = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs61\", " + 
                    " \"S\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=Wid4K2CqjO&" + 
                    "token=&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs61"))
                .body("[0].'originalVariantQuery'", containsString("rs61"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("7"))
                .body("[0].'start'", numberMatches(1.1617229E7))
                .body("[0].'end'", numberMatches(1.1617229E7))
                .body("[0].'allele_string'", containsString("C/A/G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(3))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>T"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>C"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>A"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("S"))
                .body("[1].'originalVariantQuery'", containsString("S"))
                .body("[1].'successfully_annotated'", equalTo(false));
        location_dbsnp = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_dbsnp));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_dbsnp, baseUrlOfSut + "/annotation/dbsnp/rs61?isoformOverrideSource=Wid4K2CqjO&fields=vhDffUhmQeVq%5D&EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs61"))
                .body("'colocatedVariants'.size()", equalTo(1))
                .body("'colocatedVariants'[0].'dbSnpId'", containsString("rs61"))
                .body("'originalVariantQuery'", containsString("rs61"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1617229E7))
                .body("'end'", numberMatches(1.1617229E7))
                .body("'allele_string'", containsString("C/A/G/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(3))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>C"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1453+12858G>A"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3204_XYZ_\", " + 
                    " \"start\": 885, " + 
                    " \"end\": 1196728463, " + 
                    " \"referenceAllele\": \"_EM_3205_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3206_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3402_XYZ_\", " + 
                    " \"start\": 128, " + 
                    " \"end\": 447, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_3209_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_3197_XYZ_&" + 
                    "token=_EM_3198_XYZ_&" + 
                    "fields=_EM_3199_XYZ_&fields=_EM_3200_XYZ_&fields=_EM_3201_XYZ_&fields=_EM_3202_XYZ_&" + 
                    "EMextraParam123=_EM_3210_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_3204_XYZ_:g.892_1196728463delins6_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3204_XYZ_,885,1196728463,_EM_3205_XYZ_,_EM_3206_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_3402_XYZ_:g.128_129ins_EM_3209_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_3402_XYZ_,128,447,-,_EM_3209_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_M\u003d_U03gUUZU\", " + 
                    " \"start\": -7, " + 
                    " \"end\": 66171, " + 
                    " \"referenceAllele\": \"_EM_1400_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_302_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_303_XYZ_\", " + 
                    " \"start\": 69, " + 
                    " \"end\": 527, " + 
                    " \"referenceAllele\": \"_EM_304_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_305_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_306_XYZ_\", " + 
                    " \"start\": 992, " + 
                    " \"end\": 811, " + 
                    " \"referenceAllele\": \"_EM_307_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1354_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"0Hj_kehCp\", " + 
                    " \"start\": 1048576, " + 
                    " \"end\": 4096, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_1401_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_1370_XYZ_&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1357_XYZ_%22%3A%22RS%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1358_XYZ_%22%3A%22FyxA2njbzeL%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1359_XYZ_%22%3A%22YPNNLB6qD3R7qxC%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1360_XYZ_%22%3A%22s_xxi%22%0A++++++++++++++++++++%7D&" + 
                    "fields=%5B&fields=_EM_3790_XYZ_&fields=_EM_1352_XYZ_&fields=_EM_3791_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_303_XYZ_:g.75_527delins5_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_303_XYZ_,69,527,_EM_304_XYZ_,_EM_305_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_306_XYZ_:g.996_811delins1354_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_306_XYZ_,992,811,_EM_307_XYZ_,_EM_1354_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("0Hj_kehCp:g.1048576_1048577ins_EM_1401_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("0Hj_kehCp,1048576,4096,-,_EM_1401_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }


}
