import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T23:21:03.912+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 127 tests
 * <br>
 * Covered targets: 4300
 * <br>
 * Used time: 6h 1m 21s
 * <br>
 * Needed budget for current results: 94%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"_EM_36650_XYZ_\", " + 
                        " \"start\": 966, " + 
                        " \"end\": 524574, " + 
                        " \"referenceAllele\": \"_EM_36651_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_36652_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"Y\", " + 
                        " \"start\": 880, " + 
                        " \"end\": 4190841, " + 
                        " \"referenceAllele\": \"_EM_36653_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_10087_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_10088_XYZ_\", " + 
                        " \"start\": -134216938, " + 
                        " \"end\": 131759, " + 
                        " \"referenceAllele\": \"pIX4yZD8\", " + 
                        " \"variantAllele\": \"HE\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"\", " + 
                        " \"start\": 588, " + 
                        " \"end\": 8192, " + 
                        " \"referenceAllele\": \"_EM_10089_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_10090_XYZ_\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/genomic?" + 
                        "isoformOverrideSource=4uPYADuYxz&" + 
                        "token=%7B%7D&" + 
                        "fields=48l7OsgT70CZ&fields=VX&fields=wLmnf&fields=QYZ6N&fields=50c4d");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_33_XYZ_?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=_EM_73_XYZ_&" + 
                    "EMextraParam123=_EM_74_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_177_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_172_XYZ_\", " + 
                    " \"_EM_173_XYZ_\", " + 
                    " \"_EM_174_XYZ_\", " + 
                    " \"_EM_175_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_671_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_3633_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_185_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"EZghwoXnX\", " + 
                    " \"_EM_180_XYZ_\", " + 
                    " \"_EM_181_XYZ_\", " + 
                    " \"_EM_182_XYZ_\", " + 
                    " \"_EM_183_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_57_XYZ_&" + 
                    "proteinId=wQ6eF&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/ptm/experimental?" + 
                    "ensemblTranscriptId=_EM_70_XYZ_&" + 
                    "EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_392_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_2016_XYZ_&" + 
                    "hugoSymbol=NNWht9Dc31ckN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_607_XYZ_&" + 
                    "proteinId=_EM_608_XYZ_&" + 
                    "hugoSymbol=_EM_609_XYZ_&" + 
                    "EMextraParam123=_EM_610_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "limit=906")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "hugoSymbol=_EM_1223_XYZ_&" + 
                    "EMextraParam123=_EM_1224_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1408_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=_EM_1405_XYZ_&" + 
                    "hugoSymbol=_EM_1406_XYZ_&" + 
                    "EMextraParam123=_EM_1407_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_2005_XYZ_\", " + 
                    " \"_EM_2006_XYZ_\", " + 
                    " \"_EM_2007_XYZ_\", " + 
                    " \"_EM_2008_XYZ_\", " + 
                    " \"NFq3\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_380_XYZ_\", " + 
                    " \"_EM_381_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_382_XYZ_\", " + 
                    " \"_EM_383_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_384_XYZ_\", " + 
                    " \"_EM_385_XYZ_\", " + 
                    " \"_EM_386_XYZ_\", " + 
                    " \"_EM_387_XYZ_\", " + 
                    " \"_EM_388_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"_EM_389_XYZ_\", " + 
                    " \"_EM_390_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_2863_XYZ_\", " + 
                    " \"_EM_2864_XYZ_\", " + 
                    " \"_EM_2865_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"proteinIds\": [], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_977_XYZ_\", " + 
                    " \"_EM_978_XYZ_\", " + 
                    " \"_EM_979_XYZ_\", " + 
                    " \"_EM_980_XYZ_\", " + 
                    " \"_EM_981_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_982_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_553_XYZ_&" + 
                    "limit=-530658175&" + 
                    "EMextraParam123=_EM_554_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_158_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=_EM_159_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("_EM_158_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"-1416664322\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=%5EOMec.L4Ny%2FpOR&" + 
                    "limit=8938499")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=rD4tGg.8X42GpnO&" + 
                    "limit=199491569")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=%5EOMec.L4Ny+pOR&" + 
                    "limit=1011787075")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("GENE_CDNA"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_151_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 332, " + 
                    " \"mutationType\": \"_EM_152_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_153_XYZ_\", " + 
                    " \"start\": 15, " + 
                    " \"end\": 93, " + 
                    " \"mutationType\": \"_EM_154_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_155_XYZ_\", " + 
                    " \"start\": 307, " + 
                    " \"end\": 635, " + 
                    " \"mutationType\": \"_EM_156_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_157_XYZ_\", " + 
                    " \"start\": 695, " + 
                    " \"end\": 916, " + 
                    " \"mutationType\": \"HFNetbVkGPE\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("_EM_151_XYZ_"))
                .body("[0].'proteinLocation'.'start'", numberMatches(887.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(332.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("_EM_152_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'proteinLocation'.'transcriptId'", containsString("_EM_153_XYZ_"))
                .body("[1].'proteinLocation'.'start'", numberMatches(15.0))
                .body("[1].'proteinLocation'.'end'", numberMatches(93.0))
                .body("[1].'proteinLocation'.'mutationType'", containsString("_EM_154_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'proteinLocation'.'transcriptId'", containsString("_EM_155_XYZ_"))
                .body("[2].'proteinLocation'.'start'", numberMatches(307.0))
                .body("[2].'proteinLocation'.'end'", numberMatches(635.0))
                .body("[2].'proteinLocation'.'mutationType'", containsString("_EM_156_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_94_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_89_XYZ_\", " + 
                    " \"Mm_FEzhWfJEJ\", " + 
                    " \"_EM_90_XYZ_\", " + 
                    " \"_EM_91_XYZ_\", " + 
                    " \"_EM_92_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_100_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_96_XYZ_\", " + 
                    " \"_EM_97_XYZ_\", " + 
                    " \"_EM_98_XYZ_\", " + 
                    " \"nUpx\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?keyword=_EM_76_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1126_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_1124_XYZ_&" + 
                    "limit=517")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2548_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=nNAmQ4&" + 
                    "limit=-7438&" + 
                    "EMextraParam123=_EM_2547_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1650_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_7901_XYZ_\", " + 
                    " \"gZ\", " + 
                    " \"YtcU6QLbQ8YW7jR\", " + 
                    " \"YtcU6QLbQ8YW7jR\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"3OZ\", " + 
                    " \"_EM_17115_XYZ_\", " + 
                    " \"\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_5162_XYZ_\", " + 
                    " \"\", " + 
                    " \"_EM_5163_XYZ_\", " + 
                    " \"_EM_5164_XYZ_\", " + 
                    " \"_EM_5165_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/3az2?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'pdbId'", containsString("3az2"))
                .body("'title'", containsString("crystal structure analysis of vitamin d receptor"))
                .body("'compound'.'1'.'chain'.size()", equalTo(1))
                .body("'compound'.'1'.'chain'", hasItems("a"))
                .body("'compound'.'1'.'fragment'", containsString("unp residues 120-164, 216-423"))
                .body("'compound'.'1'.'synonym'", containsString("vdr, 1,25-dihydroxyvitamin d3 receptor, nuclear receptor subfamily 1 group i member 1"))
                .body("'compound'.'1'.'engineered'", containsString("yes"))
                .body("'compound'.'1'.'molecule'", containsString("vitamin d3 receptor"))
                .body("'compound'.'1'.'mol_id'", containsString("1"))
                .body("'source'.'1'.'gene'.size()", equalTo(2))
                .body("'source'.'1'.'gene'", hasItems("nr1i1", "vdr"))
                .body("'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("'source'.'1'.'organism_common'", containsString("human"))
                .body("'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/3Sc2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'pdbId'", containsString("3Sc2"))
                .body("'title'", containsString("refined atomic model of wheat serine carboxypeptidase ii at 2.2-angstroms resolution"))
                .body("'compound'.'1'.'chain'.size()", equalTo(1))
                .body("'compound'.'1'.'chain'", hasItems("a"))
                .body("'compound'.'1'.'engineered'", containsString("yes"))
                .body("'compound'.'1'.'molecule'", containsString("serine carboxypeptidase ii (cpdw-ii)"))
                .body("'compound'.'1'.'mol_id'", containsString("1"))
                .body("'compound'.'1'.'ec'", containsString("3.4.16.1"))
                .body("'compound'.'2'.'chain'.size()", equalTo(1))
                .body("'compound'.'2'.'chain'", hasItems("b"))
                .body("'compound'.'2'.'molecule'", containsString("serine carboxypeptidase ii (cpdw-ii)"))
                .body("'compound'.'2'.'mol_id'", containsString("2"))
                .body("'compound'.'2'.'ec'", containsString("3.4.16.1"))
                .body("'source'.'1'.'organism_scientific'", containsString("triticum aestivum"))
                .body("'source'.'1'.'organism_common'", containsString("bread wheat"))
                .body("'source'.'1'.'organism_taxid'", containsString("4565"))
                .body("'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_203_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_198_XYZ_\", " + 
                    " \"_EM_199_XYZ_\", " + 
                    " \"_EM_200_XYZ_\", " + 
                    " \"_EM_201_XYZ_\", " + 
                    " \"_EM_202_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_204_XYZ_\", " + 
                    " \"_EM_205_XYZ_\", " + 
                    " \"_EM_206_XYZ_\", " + 
                    " \"_EM_207_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=_EM_208_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_50_XYZ_")
                .get(baseUrlOfSut + "/annotation/_EM_44_XYZ_?" + 
                    "token=_EM_46_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_44_XYZ_"))
                .body("'originalVariantQuery'", containsString("_EM_44_XYZ_"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_145_XYZ_\", " + 
                    " \"_EM_146_XYZ_\", " + 
                    " \"_EM_147_XYZ_\", " + 
                    " \"_EM_148_XYZ_\", " + 
                    " \"d3Xu\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs?EMextraParam123=_EM_149_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_145_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_146_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_147_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"2dbO\", " + 
                    " \"_EM_795_XYZ_\", " + 
                    " \"_EM_796_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("2dbO"))
                .body("[0].'title'", containsString("crystal structure of d-tyr-trna(tyr) deacylase from aquifex aeolicus"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'1'.'chain'", hasItems("a"))
                .body("[0].'compound'.'1'.'molecule'", containsString("d-tyrosyl-trna(tyr) deacylase"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'1'.'ec'", containsString("3.1.-.-"))
                .body("[0].'source'.'1'.'strain'", containsString("vf5"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("aquifex aeolicus"))
                .body("[0].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("224324"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("562"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"{\\n      U      !! 0   \\\"1j\\\":\\\"P+m\\\"\\n U0    U     U      MXrQT\", " + 
                    " \"5GV\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "token=%7B%0A++++++++++++++++++++%22ofIqSi1q%7B%22%3A%2242%22%0A++++++++++++++++++++%7D&" + 
                    "fields=ptms&fields=nHnPfUUUj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("{\n      U      !! 0   \"1j\":\"P+m\"\n U0    U     U      MXrQT"))
                .body("[0].'originalVariantQuery'", containsString("{\n      U      !! 0   \"1j\":\"P+m\"\n U0    U     U      MXrQT"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("5GV"))
                .body("[1].'originalVariantQuery'", containsString("5GV"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"UCUFyQUVmNYip\", " + 
                    " \"[UXVqWcWTWTXzRUUW\", " + 
                    " \"JN3nxURNWP\", " + 
                    " \"Z\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=%7B%0A++++++++++++++++++++%22TMUVUZTaP%22%3A%22VUUVXTUUVWTTWx%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22fQWUU%22%3A%22ZQq%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22%22%3A%22OUKIpOPdPKzal%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22dOGggtHfOZ7lLk%5B%22%3A%22UeBfnoYpUtFUn%22%0A++++++++++++++++++++%7D&" + 
                    "fields=hotspots&fields=VUPVVUVYVWTRX%7Bhj&fields=Dg0kbXrP%5CQrOowWg&fields=FP3pxlRL3Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("UCUFyQUVmNYip"))
                .body("[0].'originalVariantQuery'", containsString("UCUFyQUVmNYip"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("[UXVqWcWTWTXzRUUW"))
                .body("[1].'originalVariantQuery'", containsString("[UXVqWcWTWTXzRUUW"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("JN3nxURNWP"))
                .body("[2].'originalVariantQuery'", containsString("JN3nxURNWP"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/COSM719?" + 
                    "token=GuvZluq2&" + 
                    "fields=jX&fields=vhDffUhmQeVqM&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("COSM719"))
                .body("'originalVariantQuery'", containsString("COSM719"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("4"))
                .body("'start'", numberMatches(1807889.0))
                .body("'end'", numberMatches(1807889.0))
                .body("'allele_string'", containsString("COSMIC_MUTATION"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("?"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_188_XYZ_\", " + 
                    " \"_EM_189_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=_EM_186_XYZ_&" + 
                    "token=_EM_187_XYZ_&" + 
                    "EMextraParam123=_EM_190_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_188_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_188_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_189_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_189_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=XBb_BRSFkqquy&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString(""))
                .body("[0].'originalVariantQuery'", containsString(""))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/Az8upeg0?" + 
                    "isoformOverrideSource=_EM_786_XYZ_&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("Az8upeg0"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"vSOWUT\", " + 
                    " \"aUUTXWT\", " + 
                    " \"genome_lexus\", " + 
                    " \"WB\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=&" + 
                    "fields=clinvar&fields=N2O8sUhjsbYUp5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("vSOWUT"))
                .body("[0].'originalVariantQuery'", containsString("vSOWUT"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[0].'clinvar'.'annotation'", nullValue())
                .body("[1].'variant'", containsString("aUUTXWT"))
                .body("[1].'originalVariantQuery'", containsString("aUUTXWT"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[1].'clinvar'.'annotation'", nullValue())
                .body("[2].'variant'", containsString("genome_lexus"))
                .body("[2].'originalVariantQuery'", containsString("genome_lexus"))
                .body("[2].'successfully_annotated'", equalTo(false))
                .body("[2].'clinvar'.'annotation'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_24_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_321_XYZ_\", " + 
                    " \"_EM_322_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "projection=CANONICAL&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_321_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'variant'", containsString("_EM_322_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_134_XYZ_\", " + 
                    " \"_EM_135_XYZ_\", " + 
                    " \"_EM_136_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_134_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[0].'transcriptConsequences'.size()", equalTo(0))
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_135_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'transcriptConsequences'.size()", equalTo(0))
                .body("[1].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_136_XYZ_"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'transcriptConsequences'.size()", equalTo(0))
                .body("[2].'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"eDUjUg:gaqi\", " + 
                    " \"start\": 62, " + 
                    " \"end\": -1744749360, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_38640_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("eDUjUg:gaqi"))
                .body("[0].'genomicLocation'.'start'", numberMatches(62.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(-1.74474936E9))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_38640_XYZ_"))
                .body("[0].'variant'", containsString("eDUjUg:gaqi:g.62_63ins_EM_38640_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs43?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=_EM_1456_XYZ_&" + 
                    "fields=_EM_1599_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs43"))
                .body("'originalVariantQuery'", containsString("rs43"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1586267E7))
                .body("'end'", numberMatches(1.1586267E7))
                .body("'allele_string'", containsString("G/C/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(4))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-3523C>G"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1454-3523C>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000497575"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("upstream_gene_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs533?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "fields=hfg02%5EfZV&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs533"))
                .body("'originalVariantQuery'", containsString("rs533"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(6838727.0))
                .body("'end'", numberMatches(6838727.0))
                .body("'allele_string'", containsString("C/A/G"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("3_prime_UTR_variant"))
                .body("'transcript_consequences'.size()", equalTo(30))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000297186"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000297186"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("RSPH10B2"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000169402"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("34385"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000297186"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000297186"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("RSPH10B2"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000169402"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("34385"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("15/15"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000316731"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000316731.8:c.*128G>T"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000314544"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("CCZ1B"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000146574"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("21717"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_198097.3"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("3_prime_UTR_variant"))
                // Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"5lNBeEds\", " + 
                    " \"start\": 33555421, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"_EM_3342_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3239_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"lquuFwfxLN5ZsT0F\", " + 
                    " \"start\": 4770, " + 
                    " \"end\": -21, " + 
                    " \"referenceAllele\": \"_EM_4428_XYZ_\", " + 
                    " \"variantAllele\": \"WX\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=m6Ov1bJ13bGbh&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("5lNBeEds:g.33555426_98delins239_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("5lNBeEds,33555421,98,_EM_3342_XYZ_,_EM_3239_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("lquuFwfxLN5ZsT0F:g.4770_-21delinsWX"))
                .body("[1].'originalVariantQuery'", containsString("lquuFwfxLN5ZsT0F,4770,-21,_EM_4428_XYZ_,WX"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs53?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "fields=RfuR&fields=BdsMomlYVts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs53"))
                .body("'originalVariantQuery'", containsString("rs53"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1577625E7))
                .body("'end'", numberMatches(1.1577625E7))
                .body("'allele_string'", containsString("C/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1822+3421G>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000497575"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000497575.1:n.311+3421G>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"J\", " + 
                    " \"start\": 524921, " + 
                    " \"end\": -66048, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"b\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_40155_XYZ_%22%3A%22%40uC%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_40156_XYZ_&fields=%5CYqPnd4rY50dT&fields=UqUWutFMfU4UTmKmr&fields=n")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("J:g.524921_524922insb"))
                .body("[0].'originalVariantQuery'", containsString("J,524921,-66048,-,b"))
                .body("[0].'hgvsg'", containsString("J:g.524921_524922insb"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("HG1488_PATCH"))
                .body("[0].'start'", numberMatches(524922.0))
                .body("[0].'end'", numberMatches(524921.0))
                .body("[0].'allele_string'", containsString("-/B"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intergenic_variant"))
                .body("[0].'intergenic_consequences'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("[0].'intergenic_consequences'[0].'variantAllele'", containsString("B"))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("[0].'successfully_annotated'", equalTo(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"fOwo\", " + 
                    " \"start\": 817, " + 
                    " \"end\": 810, " + 
                    " \"referenceAllele\": \"_EM_139_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_140_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_141_XYZ_\", " + 
                    " \"start\": 95, " + 
                    " \"end\": 149, " + 
                    " \"referenceAllele\": \"f\", " + 
                    " \"variantAllele\": \"_EM_142_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("fOwo"))
                .body("[0].'genomicLocation'.'start'", numberMatches(817.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(810.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_139_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_140_XYZ_"))
                .body("[0].'variant'", containsString("fOwo:g.822_810delins40_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_141_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(95.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(149.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("f"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_142_XYZ_"))
                .body("[1].'variant'", containsString("_EM_141_XYZ_:g.95delins_EM_142_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_18013_XYZ_\", " + 
                    " \"rs698\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=36YpXSfVdBhnYf&" + 
                    "token=U&" + 
                    "fields=_EM_11094_XYZ_&fields=uvq9cze8qZYrNR3&fields=tmoihx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_18013_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_18013_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("rs698"))
                .body("[1].'originalVariantQuery'", containsString("rs698"))
                .body("[1].'assembly_name'", containsString("GRCh37"))
                .body("[1].'seq_region_name'", containsString("4"))
                .body("[1].'start'", numberMatches(1.00260789E8))
                .body("[1].'end'", numberMatches(1.00260789E8))
                .body("[1].'allele_string'", containsString("T/A/C"))
                .body("[1].'strand'", numberMatches(1.0))
                .body("[1].'most_severe_consequence'", containsString("missense_variant"))
                .body("[1].'transcript_consequences'.size()", equalTo(6))
                .body("[1].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000510055"))
                .body("[1].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[1].'transcript_consequences'[0].'gene_symbol'", containsString("ADH1C"))
                .body("[1].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000248144"))
                .body("[1].'transcript_consequences'[0].'hgnc_id'", containsString("251"))
                .body("[1].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[0].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("[1].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000510055"))
                .body("[1].'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("[1].'transcript_consequences'[1].'gene_symbol'", containsString("ADH1C"))
                .body("[1].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000248144"))
                .body("[1].'transcript_consequences'[1].'hgnc_id'", containsString("251"))
                .body("[1].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[1].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("[1].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000511397"))
                .body("[1].'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("[1].'transcript_consequences'[2].'gene_symbol'", containsString("ADH1C"))
                .body("[1].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000248144"))
                .body("[1].'transcript_consequences'[2].'hgnc_id'", containsString("251"))
                .body("[1].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs4\", " + 
                    " \"_EM_11097_XYZ_\", " + 
                    " \"ShYXLo3MsgoX2\", " + 
                    " \"_EM_11099_XYZ_\", " + 
                    " \"_EM_17976_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?token=U")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("rs4"))
                .body("[0].'originalVariantQuery'", containsString("rs4"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("13"))
                .body("[0].'start'", numberMatches(3.2447222E7))
                .body("[0].'end'", numberMatches(3.2447222E7))
                .body("[0].'allele_string'", containsString("A/G"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000428783"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000428783.1:n.99+26146A>G"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("EEF1DP3"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000229715"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("30486"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(2))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("_EM_11097_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_11097_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("ShYXLo3MsgoX2"))
                .body("[2].'originalVariantQuery'", containsString("ShYXLo3MsgoX2"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3240_XYZ_\", " + 
                    " \"start\": 857, " + 
                    " \"end\": 17021, " + 
                    " \"referenceAllele\": \"_\", " + 
                    " \"variantAllele\": \"_EM_3242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"s\", " + 
                    " \"start\": 286, " + 
                    " \"end\": 2986, " + 
                    " \"referenceAllele\": \"_EM_5562_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3244_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4429_XYZ_\", " + 
                    " \"start\": 352, " + 
                    " \"end\": -130604, " + 
                    " \"referenceAllele\": \"_EM_3246_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4430_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=h1b7tMCUPWfa&" + 
                    "token=m6Ov1bJ13bGbh&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_3Y0_XYZ_:g.857_858insEM_3242_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3240_XYZ_,857,17021,_,_EM_3242_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("s:g.290_2986delins3244_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("s,286,2986,_EM_5562_XYZ_,_EM_3244_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_4429_XYZ_:g.356_-130604delins4430_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_4429_XYZ_,352,-130604,_EM_3246_XYZ_,_EM_4430_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3240_XYZ_\", " + 
                    " \"start\": 857, " + 
                    " \"end\": 637, " + 
                    " \"referenceAllele\": \"_EM_3241_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3243_XYZ_\", " + 
                    " \"start\": 286, " + 
                    " \"end\": 938, " + 
                    " \"referenceAllele\": \"9E\", " + 
                    " \"variantAllele\": \"_EM_3244_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3245_XYZ_\", " + 
                    " \"start\": 348, " + 
                    " \"end\": 468, " + 
                    " \"referenceAllele\": \"_EM_3246_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3247_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=r1x2kOl26IrBr&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_3Y0_XYZ_:g.864_637delins2_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3240_XYZ_,857,637,_EM_3241_XYZ_,_EM_3242_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_3Y3_XYZ_:g.286_938delins_EM_3244_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_3243_XYZ_,286,938,9E,_EM_3244_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_3Y5_XYZ_:g.355_468delins7_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_3245_XYZ_,348,468,_EM_3246_XYZ_,_EM_3247_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"v\", " + 
                    " \"start\": -32375, " + 
                    " \"end\": -30, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"P0\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"IT26OcyQoTP\", " + 
                    " \"start\": 1366, " + 
                    " \"end\": -33554102, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4231_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_5088_XYZ_\", " + 
                    " \"start\": 1082292, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"_EM_5089_XYZ_\", " + 
                    " \"variantAllele\": \"sJIl\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"04R\", " + 
                    " \"start\": 1167375242, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_5090_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"w\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"whW\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_4904_XYZ_%22%3A%22TvjEBq3d6Taqv%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_3403_XYZ_%22%3A%22nou%22%0A++++++++++++++++++++%7D&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("IT26OcyQoTP:g.1370_-33554102delins4231_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("IT26OcyQoTP,1366,-33554102,_EM_121_XYZ_,_EM_4231_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_5088_XYZ_:g.1082292_541delinssJIl"))
                .body("[1].'originalVariantQuery'", containsString("_EM_5088_XYZ_,1082292,541,_EM_5089_XYZ_,sJIl"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("04R:g.1167375242_1167375243ins_EM_5090_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("04R,1167375242,-907792429,,_EM_5090_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_298_XYZ_\", " + 
                    " \"start\": 677, " + 
                    " \"end\": 217, " + 
                    " \"referenceAllele\": \"_EM_299_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_300_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_301_XYZ_\", " + 
                    " \"start\": 249, " + 
                    " \"end\": 635, " + 
                    " \"referenceAllele\": \"cQbP4b\", " + 
                    " \"variantAllele\": \"_EM_302_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_303_XYZ_\", " + 
                    " \"start\": 69, " + 
                    " \"end\": 527, " + 
                    " \"referenceAllele\": \"_EM_304_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_305_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1118_XYZ_\", " + 
                    " \"start\": 9192, " + 
                    " \"end\": 555, " + 
                    " \"referenceAllele\": \"_EM_1119_XYZ_\", " + 
                    " \"variantAllele\": \"XZr\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"YBvPaUQda\", " + 
                    " \"start\": -4194275, " + 
                    " \"end\": 81, " + 
                    " \"referenceAllele\": \"4NYSIhr_\", " + 
                    " \"variantAllele\": \"DxTXxra?\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=CZWfIvowWv8sA&" + 
                    "fields=_EM_294_XYZ_&fields=_EM_295_XYZ_&fields=_EM_296_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_298_XYZ_:g.681_217delins300_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_298_XYZ_,677,217,_EM_299_XYZ_,_EM_300_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_301_XYZ_:g.249_635delins_EM_302_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_301_XYZ_,249,635,cQbP4b,_EM_302_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_303_XYZ_:g.75_527delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_303_XYZ_,69,527,_EM_304_XYZ_,_EM_305_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_117_XYZ_\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"_EM_118_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_119_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_123_XYZ_\", " + 
                    " \"start\": 948, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"_EM_124_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_125_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_128_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_115_XYZ_&" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_117_XYZ_:g.399_98delins9_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_117_XYZ_,393,98,_EM_118_XYZ_,_EM_119_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_120_XYZ_:g.860_330delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_120_XYZ_,854,330,_EM_121_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_1X_XYZ_:g.954_541delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_123_XYZ_,948,541,_EM_124_XYZ_,_EM_125_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"kovA\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_3467_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3468_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_3469_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"7E\", " + 
                    " \"start\": 33716, " + 
                    " \"end\": -483, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_H\", " + 
                    " \"variantAllele\": \"_EM_3412_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3470_XYZ_\", " + 
                    " \"start\": 4267, " + 
                    " \"end\": 2611, " + 
                    " \"referenceAllele\": \"rM6AWGTAKgxEE\", " + 
                    " \"variantAllele\": \"Z3BAsz\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_3402_XYZ_%22%3A%22TvjEBq3d6Taqv%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_3403_XYZ_%22%3A%22nou%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("kovA:g.393_394ins_EM_3467_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("kovA,393,98,-,_EM_3467_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_3468_XYZ_:g.858_330delins122_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_3468_XYZ_,854,330,_EM_3469_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("7E:g.33716_33717insNA"))
                .body("[2].'originalVariantQuery'", containsString("7E,33716,-483,NA,NA"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_117_XYZ_\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"H0\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"7E\", " + 
                    " \"start\": 33716, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_3407_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_128_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_3406_XYZ_&" + 
                    "token=_EM_116_XYZ_&" + 
                    "fields=W")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_117_XYZ_:g.393_394insH0"))
                .body("[0].'originalVariantQuery'", containsString("_EM_117_XYZ_,393,98,-,H0"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_120_XYZ_:g.860_330delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_120_XYZ_,854,330,_EM_121_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("7E:g.33716_33717ins_EM_3407_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("7E,33716,541,NA,_EM_3407_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"4\", " + 
                    " \"start\": 737, " + 
                    " \"end\": 796, " + 
                    " \"referenceAllele\": \"pPNx_WApNCaHm5\", " + 
                    " \"variantAllele\": \"dCm1LKrGGsYtw3\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"NGTDJmH\", " + 
                    " \"start\": 494, " + 
                    " \"end\": 183, " + 
                    " \"referenceAllele\": \"oIh_\", " + 
                    " \"variantAllele\": \"h\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"cg8IBcrKhk_\", " + 
                    " \"start\": 640, " + 
                    " \"end\": 861, " + 
                    " \"referenceAllele\": \"MDAme\", " + 
                    " \"variantAllele\": \"x\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=wPAAyKFVNgjoJYh3&" + 
                    "token=&" + 
                    "fields=&fields=xN7FUEkwHQQmxsI&fields=s5Q&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("4:g.737_796delinsdCm1LKrGGsYtw3"))
                .body("[0].'originalVariantQuery'", containsString("4,737,796,pPNx_WApNCaHm5,dCm1LKrGGsYtw3"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("NGTDJmH:g.494_183delinsh"))
                .body("[1].'originalVariantQuery'", containsString("NGTDJmH,494,183,oIh_,h"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("cg8IBcrKhk_:g.640_861delinsx"))
                .body("[2].'originalVariantQuery'", containsString("cg8IBcrKhk_,640,861,MDAme,x"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"EFLtz\", " + 
                    " \"start\": 983104, " + 
                    " \"end\": -69632, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_5740_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"X\", " + 
                    " \"start\": 64, " + 
                    " \"end\": 637, " + 
                    " \"referenceAllele\": \"CO\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375018, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"W8j4W9jUejnrFthi\", " + 
                    " \"variantAllele\": \"_EM_127_XYZ_H\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"Y6sYG1F2xYrjL\", " + 
                    " \"start\": -134217557, " + 
                    " \"end\": -33553867, " + 
                    " \"referenceAllele\": \"_EM_25038_XYZ_\", " + 
                    " \"variantAllele\": \"kZx\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "fields=&fields=eEbpg6t3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("EFLtz:g.983108_-69632delins5740_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("EFLtz,983104,-69632,_EM_121_XYZ_,_EM_5740_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("X:g.64_637del"))
                .body("[1].'originalVariantQuery'", containsString("X,64,637,CO,NA"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_126_XYZ_:g.1167375018_-907792429delins_EM_127_XYZ_H"))
                .body("[2].'originalVariantQuery'", containsString("_EM_126_XYZ_,1167375018,-907792429,W8j4W9jUejnrFthi,_EM_127_XYZ_H"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"1\", " + 
                    " \"start\": 16389, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"_EM_13416_XYZ_\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("1"))
                .body("[0].'genomicLocation'.'start'", numberMatches(16389.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(0.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_13416_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'variant'", containsString("1:g.16389_0del"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/%5C?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/%5CGxN4BVi1Rd?EMextraParam123=_EM_6754_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11342_XYZ_")
                .get(baseUrlOfSut + "/annotation/summary/%5Cg?" + 
                    "isoformOverrideSource=SJg3rTr3KJlp&" + 
                    "projection=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/o1DWj%5CU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/UUM_6304UXU%5CW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/shM_%5C756_X;U_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/%5CVz%3E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/Ck%5C?isoformOverrideSource=o9LG6XcwAHkscjHx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/BIj7%5CyX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/k9ZDiKq6%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/%5EEM_43585_XY%5C_?fields=_EM_6975_XYZ_&fields=_EM_6976_XYZ_&fields=y1hZAAiS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_74U1_XY%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/my_variant_info/variant/3DjW%5CaFY5zIxBL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'ACCESSION' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=_EM_59_XYZ_&" + 
                    "EMextraParam123=_EM_60_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_59_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_81_XYZ_")
                .get(baseUrlOfSut + "/xrefs/_EM_79_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_79_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_1115_XYZ_?" + 
                    "isoformOverrideSource=_EM_786_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_787_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=_EM_3422_XYZ_&" + 
                    "projection=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"{\\n                    \\\"1j\\\":\\\"O-o\\\"\\n      \u001f             MX\", " + 
                    " \"4C2\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "token=%7B%0A++++++++++++++++++++%220h%22%3A%22N-oE%22%0A++++++++++++++++++++%7D&" + 
                    "fields=3U&fields=4CS")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_88_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_86_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"FsiXm\\\\E\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"[_VUcSHFE\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/6S8PJoHUo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: 6S8PJoHUo"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/_EM_27_XYZ_?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/dQc8Q?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=cUMgc1U4Vp.tNU&" + 
                    "limit=-165212159")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/725?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=VVG%2FVK5jV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"page not found. Please check your uri and refer to our documentation http://grch37.rest.ensembl.org/\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/xrefs/%3F2wQ1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"page not found. Please check your uri and refer to our documentation http://grch37.rest.ensembl.org/\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_110() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_6_XYZ_?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_6_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_111() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"I:\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_112() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \":\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_113() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"Upq`8:\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_114() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id _EM_39_XYZ_: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_115() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/annotation/genomic/AaIgAnDiS?" + 
                    "isoformOverrideSource=_EM_17_XYZ_&" + 
                    "EMextraParam123=_EM_22_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_116() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_56_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_55_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_117() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"Q:\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=Rc1sgzqkYwio_&" + 
                    "token=nIrlwQ7Xbj&" + 
                    "fields=_EM_25467_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_118() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/%3FazW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB header not found: ?azW"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_119() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/my_variant_info/variant/del")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_120() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/_EM_67_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_121() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/undefined?EMextraParam123=_EM_1663_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: undefined"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_122() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_61_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_61_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_123() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \",WX\", " + 
                    " \"start\": 459163, " + 
                    " \"end\": -16900, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_36801_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=gaBSHPk6pa&" + 
                    "fields=KYGR%60ZUZw9zS&fields=%5BYqHnd4rY50dT&fields=UqUWutFKfU2UUmKmr&fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_124() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2722_XYZ_\", " + 
                    " \"start\": 474, " + 
                    " \"end\": 709, " + 
                    " \"referenceAllele\": \"_EM_2723_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2724_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2725_XYZ_\", " + 
                    " \"start\": 893, " + 
                    " \"end\": 594, " + 
                    " \"referenceAllele\": \"_EM_2726_XYZ_\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2727_XYZ_\", " + 
                    " \"start\": 675, " + 
                    " \"end\": 246, " + 
                    " \"referenceAllele\": \"_EM_2728_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2729_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2730_XYZ_\", " + 
                    " \"start\": 30, " + 
                    " \"end\": 788, " + 
                    " \"referenceAllele\": \"_EM_2731_XYZ_\", " + 
                    " \"variantAllele\": \"vk\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2732_XYZ_\", " + 
                    " \"start\": 596, " + 
                    " \"end\": 437, " + 
                    " \"referenceAllele\": \"_EM_2733_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2734_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_125() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"g\", " + 
                    " \"start\": 1, " + 
                    " \"end\": 16, " + 
                    " \"referenceAllele\": \"_EM_13416_XYZ_\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"jU\", " + 
                    " \"start\": 0, " + 
                    " \"end\": -1073741812, " + 
                    " \"referenceAllele\": \"SUVUD\", " + 
                    " \"variantAllele\": \"SqV_B\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"WrmnnRk5t2ne\", " + 
                    " \"start\": 910, " + 
                    " \"end\": 27, " + 
                    " \"referenceAllele\": \"qOeidG56pBd\", " + 
                    " \"variantAllele\": \"r\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"ya\", " + 
                    " \"start\": 155, " + 
                    " \"end\": 121, " + 
                    " \"referenceAllele\": \"XQ0hUZisE\", " + 
                    " \"variantAllele\": \"wGgjcIIbJaa\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_126() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"d5[\", " + 
                    " \"start\": -255983223, " + 
                    " \"end\": 4194404, " + 
                    " \"referenceAllele\": \"HG\", " + 
                    " \"variantAllele\": \"H0h\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 66382, " + 
                    " \"end\": -2742, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"p5ROSbZ\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"7A\", " + 
                    " \"start\": 33716, " + 
                    " \"end\": 2098653, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"N?\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"9hN7\", " + 
                    " \"start\": 1167367106, " + 
                    " \"end\": -907792428, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": -32597, " + 
                    " \"end\": 16947, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_3402_XYZ_%22%3A%22_EM_5690_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22E7%22%3A%22X%22%0A++++++++++++++++++++%7D&" + 
                    "fields=Hdqz5b_Zym0SWXH&fields=lVLRo8RpjB2a1")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
