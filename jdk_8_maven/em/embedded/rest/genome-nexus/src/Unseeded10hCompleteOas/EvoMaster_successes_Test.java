import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-04T11:39:16.108+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 73 tests
 * <br>
 * Covered targets: 3897
 * <br>
 * Used time: 10h 1m 18s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_38_XYZ_?EMextraParam123=_EM_39_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_43_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_41_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_81_XYZ_")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=_EM_79_XYZ_&" + 
                    "EMextraParam123=_EM_80_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_172_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3602_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_3601_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_63_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_59_XYZ_&" + 
                    "EMextraParam123=_EM_62_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_91_XYZ_")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_410_XYZ_&" + 
                    "proteinId=_EM_411_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_3950_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1319_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_1316_XYZ_&" + 
                    "hugoSymbol=i&" + 
                    "EMextraParam123=_EM_1318_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "EMextraParam123=_EM_589_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_625_XYZ_&" + 
                    "proteinId=rrMPnwe&" + 
                    "hugoSymbol=_EM_626_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_871_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "limit=372")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1517_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "limit=353")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=_EM_3547_XYZ_&" + 
                    "hugoSymbol=_EM_3548_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [ " + 
                    " \"_EM_175_XYZ_\", " + 
                    " \"_EM_176_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental?EMextraParam123=_EM_177_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"proteinIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_570_XYZ_\", " + 
                    " \"_EM_2992_XYZ_\", " + 
                    " \"_EM_571_XYZ_\", " + 
                    " \"_EM_2993_XYZ_\", " + 
                    " \"FrqQtg6cXSCafq\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_573_XYZ_\", " + 
                    " \"3kklnI5xn\", " + 
                    " \"_EM_574_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_575_XYZ_\", " + 
                    " \"_EM_1990_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"W\", " + 
                    " \"RwePC60jRA\", " + 
                    " \"_EM_578_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_579_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_1981_XYZ_\", " + 
                    " \"_EM_1982_XYZ_\", " + 
                    " \"_EM_1983_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_3539_XYZ_\", " + 
                    " \"_EM_3540_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_3541_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [], " + 
                    " \"hugoSymbols\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_5227_XYZ_\", " + 
                    " \"_EM_5228_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_89_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=HfGk7HQC9y&" + 
                    "EMextraParam123=_EM_88_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_2889_XYZ_&" + 
                    "limit=-1047884")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1380_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_1378_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=_EM_1379_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("_EM_1378_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"814\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=c.&" + 
                    "limit=93415666")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=g.&" + 
                    "limit=89745642&" + 
                    "EMextraParam123=_EM_1516_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_142_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"wS8NzrLitA99xN\", " + 
                    " \"start\": 607, " + 
                    " \"end\": 573, " + 
                    " \"mutationType\": \"_EM_140_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=_EM_141_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("wS8NzrLitA99xN"))
                .body("[0].'proteinLocation'.'start'", numberMatches(607.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(573.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("_EM_140_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_250_XYZ_\", " + 
                    " \"_EM_251_XYZ_\", " + 
                    " \"_EM_252_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_99_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_97_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "limit=611")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1006_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_1004_XYZ_&" + 
                    "limit=0&" + 
                    "EMextraParam123=_EM_1005_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_171_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_166_XYZ_\", " + 
                    " \"_EM_167_XYZ_\", " + 
                    " \"_EM_168_XYZ_\", " + 
                    " \"_EM_169_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"?cCr2hYMZf\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"1dHb\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_37_XYZ_")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_35_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"r{eUT2\", " + 
                    " \"_EM_50401_XYZ_\", " + 
                    " \"_EM_32056_XYZ_\", " + 
                    " \"r{eUT2\", " + 
                    " \"_EM_50402_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_204_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_199_XYZ_\", " + 
                    " \"DbaH3\", " + 
                    " \"_EM_200_XYZ_\", " + 
                    " \"_EM_201_XYZ_\", " + 
                    " \"_EM_202_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=_EM_203_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_198_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_192_XYZ_\", " + 
                    " \"_EM_193_XYZ_\", " + 
                    " \"_EM_194_XYZ_\", " + 
                    " \"_EM_195_XYZ_\", " + 
                    " \"_EM_196_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_106_XYZ_\", " + 
                    " \"_EM_107_XYZ_\", " + 
                    " \"_EM_108_XYZ_\", " + 
                    " \"_EM_109_XYZ_\", " + 
                    " \"_EM_110_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "token=_EM_101_XYZ_&" + 
                    "EMextraParam123=_EM_111_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_106_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_106_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_107_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_107_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_108_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_108_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_134_XYZ_\", " + 
                    " \"_EM_135_XYZ_\", " + 
                    " \"_EM_136_XYZ_\", " + 
                    " \"_EM_137_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_134_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_135_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_136_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"2Q5L\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("2Q5L"))
                .body("[0].'title'", containsString("x-ray structure of phenylpyruvate decarboxylase in complex with 2-(1-hydroxyethyl)-3-deaza-thdp"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(2))
                .body("[0].'compound'.'1'.'chain'", hasItems("a", "b"))
                .body("[0].'compound'.'1'.'synonym'", containsString("ppdc"))
                .body("[0].'compound'.'1'.'molecule'", containsString("phenylpyruvate decarboxylase"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'1'.'ec'", containsString("4.1.1.43"))
                .body("[0].'source'.'1'.'gene'.size()", equalTo(1))
                .body("[0].'source'.'1'.'gene'", hasItems("ipdc"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("azospirillum brasilense"))
                .body("[0].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("192"))
                .body("[0].'source'.'1'.'expression_system_strain'", containsString("bl21 codonplus-rp"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("562"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/_EM_50_XYZ_?" + 
                    "fields=_EM_53_XYZ_&" + 
                    "EMextraParam123=_EM_54_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_50_XYZ_"))
                .body("'originalVariantQuery'", containsString("_EM_50_XYZ_"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs89?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1272_XYZ_%22%3A%22Y3iiuxLnQRn%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1273_XYZ_%22%3A%22H0L3elFwoL%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1274_XYZ_%22%3A%22zV%22%0A++++++++++++++++++++%7D&" + 
                    "fields=Cuy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs89"))
                .body("'originalVariantQuery'", containsString("rs89"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(2.4454602E7))
                .body("'end'", numberMatches(2.4454602E7))
                .body("'allele_string'", containsString("G/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intergenic_variant"))
                .body("'intergenic_consequences'.size()", equalTo(1))
                .body("'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("'intergenic_consequences'[0].'variantAllele'", containsString("A"))
                .body("'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_337_XYZ_\", " + 
                    " \"\", " + 
                    " \"_EM_339_XYZ_\", " + 
                    " \"_EM_339_XYZ_\", " + 
                    " \"_EM_340_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=_EM_943_XYZ_&" + 
                    "token=Sis&" + 
                    "fields=_EM_332_XYZ_&fields=_EM_873_XYZ_&fields=xiERjGUAu&fields=_EM_874_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_337_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_337_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString(""))
                .body("[1].'originalVariantQuery'", containsString(""))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_339_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_339_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_857_XYZ_?" + 
                    "isoformOverrideSource=A0K7ESkpck0fJ1N&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_857_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_8866_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"COSM7\", " + 
                    " \"COSM0\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_35262_XYZ_%22%3A%22_EM_35120_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_35263_XYZ_%22%3A%22_EM_35121_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_35274_XYZ_%22%3A%22_EM_35275_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22%3CZ5nF_%22%3A%22_EM_35264_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22ez__JIw%22%3A%22_EM_35276_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=VEaQs&fields=csrqfUsk&fields=_EM_35118_XYZ_&" + 
                    "EMextraParam123=_EM_8865_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("COSM7"))
                .body("[0].'originalVariantQuery'", containsString("COSM7"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("COSM0"))
                .body("[1].'originalVariantQuery'", containsString("COSM0"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_32_XYZ_")
                .get(baseUrlOfSut + "/annotation/summary/_EM_29_XYZ_?isoformOverrideSource=_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_29_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_596_XYZ_\", " + 
                    " \"_EM_595_XYZ_\", " + 
                    " \"_EM_598_XYZ_\", " + 
                    " \"_EM_597_XYZ_\", " + 
                    " \"_EM_598_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=Mv_D6s3&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_596_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'variant'", containsString("_EM_595_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'variant'", containsString("_EM_598_XYZ_"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_127_XYZ_\", " + 
                    " \"L8h5bV8Skz4\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?EMextraParam123=_EM_128_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_127_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[0].'transcriptConsequences'.size()", equalTo(0))
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[1].'variant'", containsString("L8h5bV8Skz4"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'transcriptConsequences'.size()", equalTo(0))
                .body("[1].'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"h\\\\z6iU1Z:\", " + 
                    " \"start\": 33579321, " + 
                    " \"end\": 2098439, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"OqXHQWJZTvqbuLX\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("h\\z6iU1Z:"))
                .body("[0].'genomicLocation'.'start'", numberMatches(3.3579321E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(2098439.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("OqXHQWJZTvqbuLX"))
                .body("[0].'variant'", containsString("h\\z6iU1Z::g.33579321_33579322insOqXHQWJZTvqbuLX"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10795_XYZ_\", " + 
                    " \"start\": 189, " + 
                    " \"end\": -66976800, " + 
                    " \"referenceAllele\": \"EcfSklhOa\", " + 
                    " \"variantAllele\": \"EcfSklhOa1\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"h9z6if1ZW\", " + 
                    " \"start\": 234881401, " + 
                    " \"end\": -15973, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=_EM_2449_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_10795_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(189.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(-6.69768E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("EcfSklhOa"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("EcfSklhOa1"))
                .body("[0].'variant'", containsString("_EM_10795_XYZ_:g.197_198ins1"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("h9z6if1ZW"))
                .body("[1].'genomicLocation'.'start'", numberMatches(2.34881401E8))
                .body("[1].'genomicLocation'.'end'", numberMatches(-15973.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[1].'variant'", containsString("h9z6if1ZW:g.234881401_234881402ins-"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs9?" + 
                    "isoformOverrideSource=&" + 
                    "token=_EM_13_XYZ_&" + 
                    "fields=Cuy&fields=_EM_5550_XYZ_&" + 
                    "EMextraParam123=_EM_16_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs9"))
                .body("'originalVariantQuery'", containsString("rs9"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(9.2373455E7))
                .body("'end'", numberMatches(9.2373455E7))
                .body("'allele_string'", containsString("G/-"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000265734"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000265734.4:c.370-18348del"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000265734"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001259.6"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000424848"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000424848.2:c.370-18348del"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000397087"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_001145306.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs7?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=%7B%0A++++++++++++++++++++%22lLR7Y_BkgprFe%22%3A%22BKjlkktU4H%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_58687_XYZ_%22%3A%22_EM_58688_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=D7isT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs7"))
                .body("'originalVariantQuery'", containsString("rs7"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(9.1779557E7))
                .body("'end'", numberMatches(9.1779557E7))
                .body("'allele_string'", containsString("T/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000343318"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000343318.5:c.331+291A>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000339642"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("LRRD1"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000240720"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("34300"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000422722"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000422722.1:n.667+291A>T"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("LRRD1"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000240720"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("34300"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000430130"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000430130.2:c.2278+291A>T"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000411568"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("LRRD1"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000240720"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("34300"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_001161528.1"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs832?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=_EM_59087_XYZ_&" + 
                    "fields=_EM_59090_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs832"))
                .body("'originalVariantQuery'", containsString("rs832"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("11"))
                .body("'start'", numberMatches(1.699627E7))
                .body("'end'", numberMatches(1.699627E7))
                .body("'allele_string'", containsString("C/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("non_coding_transcript_exon_variant"))
                .body("'transcript_consequences'.size()", equalTo(7))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000355661"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000355661.3:c.221+39266G>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000347883"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("PLEKHA7"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000166689"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("27049"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000448080"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000448080.2:c.221+39266G>T"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000416895"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("PLEKHA7"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000166689"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("27049"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_175058.4"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("1/1"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000459748"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000459748.1:n.291G>T"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("RP11-466H18.1"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000244398"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("non_coding_transcript_exon_variant"))
                // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs996?" + 
                    "token=fQ&" + 
                    "fields=_EM_31904_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs996"))
                .body("'originalVariantQuery'", containsString("rs996"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("6"))
                .body("'start'", numberMatches(3.2154033E7))
                .body("'end'", numberMatches(3.2154033E7))
                .body("'allele_string'", containsString("G/C"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("3_prime_UTR_variant"))
                .body("'transcript_consequences'.size()", equalTo(25))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000375040"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000364180"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("GPSM3"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000213654"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("13945"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001276501.1"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000375043"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000364183"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("GPSM3"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000213654"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("13945"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_022107.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("9/9"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000375050"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000375050.4:c.*126C>G"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000364190"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("PBX2"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000204304"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("8633"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_002586.4"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("3_prime_UTR_variant"))
                // Skipping assertions on the remaining 22 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs15\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_736_XYZ_%22%3A%22e2xd%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_737_XYZ_%22%3A%22Sd6oK90TYSLjK%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1088_XYZ_%22%3A%22Il1QrBO3r%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1089_XYZ_%22%3A%22_EM_1090_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_933_XYZ_&fields=_EM_500_XYZ_&fields=_EM_501_XYZ_&fields=6M36s&fields=fyCTDb9tbyf8SUa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("rs15"))
                .body("[0].'originalVariantQuery'", containsString("rs15"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("7"))
                .body("[0].'start'", numberMatches(1.1602932E7))
                .body("[0].'end'", numberMatches(1.1602932E7))
                .body("[0].'allele_string'", containsString("C/G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(2))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-20188G>C"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1454-20188G>A"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs904?" + 
                    "token=Wb0oVDE7gE&" + 
                    "fields=Cu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs904"))
                .body("'originalVariantQuery'", containsString("rs904"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("8"))
                .body("'start'", numberMatches(5.6985773E7))
                .body("'end'", numberMatches(5.6985773E7))
                .body("'allele_string'", containsString("C/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(13))
                .body("'transcript_consequences'[0].'exon'", containsString("4/4"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000009589"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000009589.3:p.Arg79His"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000009589.3:c.236G>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[0].'codons'", containsString("cGt/cAt"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000009589"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(79.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(79.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("RPS20"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000008988"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("R/H"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("10405"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.04))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.26))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001023.3"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000459159"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("SNORD54"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000238650"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("10204"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NR_002437.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000518875"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000428146"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("RPS20"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000008988"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("10405"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"^eCiMOrDl8zhTONT\", " + 
                    " \"start\": 221481, " + 
                    " \"end\": -1073880773, " + 
                    " \"referenceAllele\": \"92\", " + 
                    " \"variantAllele\": \"--\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_93116_XYZ_\", " + 
                    " \"start\": 451, " + 
                    " \"end\": 475, " + 
                    " \"referenceAllele\": \"_EM_93114_XYZ_\", " + 
                    " \"variantAllele\": \"[\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_93109_XYZ_%22%3A%22gria4%7BBRnPUTq%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_81832_XYZ_%22%3A%22z2i%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22%5DEM_81831_XYZ_m%22%3A%22tw2lgX5G_bn%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22XSZeQoWH9RxVc6_%22%3A%22LI99bISsLBP6M%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_93115_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("^eCiMOrDl8zhTONT:g.221481_-1073880773del"))
                .body("[0].'originalVariantQuery'", containsString("^eCiMOrDl8zhTONT,221481,-1073880773,92,--"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_93116_XYZ_:g.451_475delins["))
                .body("[1].'originalVariantQuery'", containsString("_EM_93116_XYZ_,451,475,_EM_93114_XYZ_,["))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"BsjJBGJ10dVn2K\", " + 
                    " \"start\": 4393, " + 
                    " \"end\": -986637595, " + 
                    " \"referenceAllele\": \"5YgrfkARNr\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"5WgrfkARN\", " + 
                    " \"start\": 167, " + 
                    " \"end\": 581, " + 
                    " \"referenceAllele\": \"D8AZhzd095Mo5p\", " + 
                    " \"variantAllele\": \"74N\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"QG/ryg92KwTiH9v\", " + 
                    " \"start\": 794, " + 
                    " \"end\": 603, " + 
                    " \"referenceAllele\": \"8Ia2YFLQ1P\", " + 
                    " \"variantAllele\": \"x2z\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=1mdaMBa%60f9%5C&" + 
                    "fields=mz%5Ejcrianh_dbfj&fields=y7Yn7%3Ah&fields=XAvezXLsRgU9ie&fields=IA6CG5rq0OW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("BsjJBGJ10dVn2K:g.4393_-986637595del"))
                .body("[0].'originalVariantQuery'", containsString("BsjJBGJ10dVn2K,4393,-986637595,5YgrfkARNr,NA"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("5WgrfkARN:g.167_581delins74N"))
                .body("[1].'originalVariantQuery'", containsString("5WgrfkARN,167,581,D8AZhzd095Mo5p,74N"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("QG/ryg92KwTiH9v:g.794_603delinsx2z"))
                .body("[2].'originalVariantQuery'", containsString("QG/ryg92KwTiH9v,794,603,8Ia2YFLQ1P,x2z"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs257\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "EMextraParam123=_EM_605_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("rs257"))
                .body("[0].'originalVariantQuery'", containsString("rs257"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("8"))
                .body("[0].'start'", numberMatches(1.9812228E7))
                .body("[0].'end'", numberMatches(1.9812228E7))
                .body("[0].'allele_string'", containsString("A/C"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(5))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.775+364A>C"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000520959"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000428496"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000521994"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("C"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"mvjhF7lzStzcN\", " + 
                    " \"start\": 2162690, " + 
                    " \"end\": -536871103, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_3714_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_76682_XYZ_\", " + 
                    " \"start\": 668, " + 
                    " \"end\": -32511, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"aPuNy\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"\", " + 
                    " \"start\": 33555452, " + 
                    " \"end\": 4194439, " + 
                    " \"referenceAllele\": \"_4Uie_W\", " + 
                    " \"variantAllele\": \"KXMvqSB35Wm0I4\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"\", " + 
                    " \"start\": 2097039, " + 
                    " \"end\": 2805, " + 
                    " \"referenceAllele\": \"_EM_1131_XYZ_\", " + 
                    " \"variantAllele\": \"/KUZtbSFRn\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_1181_XYZ_&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1314_XYZ_%22%3A%22eD3YLyOdfYZ%22%0A++++++++++++++++++++%7D&" + 
                    "fields=S03bmx&fields=_EM_45053_XYZ_&fields=UOc%5BXUEhUDEa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("mvjhF7lzStzcN:g.2162690_2162691ins_EM_3714_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("mvjhF7lzStzcN,2162690,-536871103,NA,_EM_3714_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_76682_XYZ_:g.668_669insaPuNy"))
                .body("[1].'originalVariantQuery'", containsString("_EM_76682_XYZ_,668,-32511,,aPuNy"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString(":g.33555452_4194439delinsKXMvqSB35Wm0I4"))
                .body("[2].'originalVariantQuery'", containsString(",33555452,4194439,_4Uie_W,KXMvqSB35Wm0I4"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_308_XYZ_\", " + 
                    " \"start\": 758, " + 
                    " \"end\": -502911205, " + 
                    " \"referenceAllele\": \"_EM_309_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_310_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"2ixhX\", " + 
                    " \"start\": 645, " + 
                    " \"end\": 238, " + 
                    " \"referenceAllele\": \"_EM_312_XYZ_\", " + 
                    " \"variantAllele\": \"pkmqvxHIs65HpuI0\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_314_XYZ_\", " + 
                    " \"start\": 981, " + 
                    " \"end\": 158, " + 
                    " \"referenceAllele\": \"_EM_315_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_316_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_317_XYZ_\", " + 
                    " \"start\": 691, " + 
                    " \"end\": 351, " + 
                    " \"referenceAllele\": \"_EM_318_XYZ_\", " + 
                    " \"variantAllele\": \"b\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_319_XYZ_\", " + 
                    " \"start\": 252, " + 
                    " \"end\": 23, " + 
                    " \"referenceAllele\": \"_EM_320_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_321_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=_EM_3523_XYZ_&" + 
                    "fields=_EM_305_XYZ_&fields=_EM_306_XYZ_&fields=_EM_307_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_308_XYZ_:g.763_-502911205delins10_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_308_XYZ_,758,-502911205,_EM_309_XYZ_,_EM_310_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("2ixhX:g.645_238delinspkmqvxHIs65HpuI0"))
                .body("[1].'originalVariantQuery'", containsString("2ixhX,645,238,_EM_312_XYZ_,pkmqvxHIs65HpuI0"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_314_XYZ_:g.987_158delins6_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_314_XYZ_,981,158,_EM_315_XYZ_,_EM_316_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10248_XYZ_\", " + 
                    " \"start\": 647, " + 
                    " \"end\": 912, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"C3Aql3\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10249_XYZ_\", " + 
                    " \"start\": 363, " + 
                    " \"end\": 649, " + 
                    " \"referenceAllele\": \"_EM_10250_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_10251_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10252_XYZ_\", " + 
                    " \"start\": 804, " + 
                    " \"end\": 676, " + 
                    " \"referenceAllele\": \"_EM_10253_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_10254_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "fields=_EM_10246_XYZ_&fields=Hz7qbef9smNUxV&fields=_EM_10247_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_10Y8_XYZ_:g.647_648insC3Aql3"))
                .body("[0].'originalVariantQuery'", containsString("_EM_10248_XYZ_,647,912,,C3Aql3"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_10Y9_XYZ_:g.371_649delins1_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_10249_XYZ_,363,649,_EM_10250_XYZ_,_EM_10251_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_10252_XYZ_:g.812_676delins4_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_10252_XYZ_,804,676,_EM_10253_XYZ_,_EM_10254_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_679_XYZ_\", " + 
                    " \"start\": -523620, " + 
                    " \"end\": 16777727, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_3396_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1751_XYZ_\", " + 
                    " \"start\": 331, " + 
                    " \"end\": 2066, " + 
                    " \"referenceAllele\": \"4\", " + 
                    " \"variantAllele\": \"C5Sxx[0\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"K4U\", " + 
                    " \"start\": 923, " + 
                    " \"end\": 2097253, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_3397_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3398_XYZ_\", " + 
                    " \"start\": 536871695, " + 
                    " \"end\": 497, " + 
                    " \"referenceAllele\": \"_EM_791_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3399_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_690_XYZ_\", " + 
                    " \"start\": 618, " + 
                    " \"end\": 356, " + 
                    " \"referenceAllele\": \"_EM_691_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_692_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=Hm&" + 
                    "fields=CQRbRt&fields=_EM_3395_XYZ_&fields=lvdV5cXSgLBjhgw&fields=_EM_3400_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_1751_XYZ_:g.331delinsC5Sxx[0"))
                .body("[0].'originalVariantQuery'", containsString("_EM_1751_XYZ_,331,2066,4,C5Sxx[0"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("K4U:g.923_924ins_EM_3397_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("K4U,923,2097253,-,_EM_3397_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_3398_XYZ_:g.536871699_497delins3399_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_3398_XYZ_,536871695,497,_EM_791_XYZ_,_EM_3399_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"G\", " + 
                    " \"start\": 613, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"_EM_3520_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3521_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_761_XYZ_\", " + 
                    " \"start\": -67108680, " + 
                    " \"end\": 1048982, " + 
                    " \"referenceAllele\": \"_EM_762_XYZ_\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_297_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": -7276, " + 
                    " \"referenceAllele\": \"_EM_3522_XYZ_\", " + 
                    " \"variantAllele\": \"4SVh06h8W4ZZZSyQ\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"Yt3cXLha8A_p6KE\", " + 
                    " \"start\": -268434896, " + 
                    " \"end\": 65576, " + 
                    " \"referenceAllele\": \"_EM_300_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_301_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_302_XYZ_\", " + 
                    " \"start\": 399, " + 
                    " \"end\": 382, " + 
                    " \"referenceAllele\": \"_EM_303_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_304_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=_EM_3523_XYZ_&" + 
                    "fields=_EM_289_XYZ_&fields=_EM_290_XYZ_&fields=_EM_291_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("G:g.620_0delins1_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("G,613,0,_EM_3520_XYZ_,_EM_3521_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_302_XYZ_:g.405_382delins4_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_302_XYZ_,399,382,_EM_303_XYZ_,_EM_304_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_45062_XYZ_\", " + 
                    " \"start\": 2032642, " + 
                    " \"end\": -536871089, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"N@\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_697_XYZ_\", " + 
                    " \"start\": 668, " + 
                    " \"end\": 257, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_1184_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"2\", " + 
                    " \"start\": 33555452, " + 
                    " \"end\": 4194439, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"KXMvqSB35Wm0M4\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"\", " + 
                    " \"start\": 2097551, " + 
                    " \"end\": 3317, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_45063_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?fields=S03bmx&fields=6&fields=UOc%5BXUEhUDEa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_45062_XYZ_:g.2032643A>@"))
                .body("[0].'originalVariantQuery'", containsString("_EM_45062_XYZ_,2032642,-536871089,NA,N@"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_697_XYZ_:g.668_669ins_EM_1184_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_697_XYZ_,668,257,,_EM_1184_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("2:g.33555452_33555453insKXMvqSB35Wm0M4"))
                .body("[2].'originalVariantQuery'", containsString("2,33555452,4194439,-,KXMvqSB35Wm0M4"))
                .body("[2].'hgvsg'", containsString("2:g.33555452_33555453insKXMvqSB35Wm0M4"))
                .body("[2].'assembly_name'", containsString("GRCh37"))
                .body("[2].'seq_region_name'", containsString("2"))
                .body("[2].'start'", numberMatches(3.3555453E7))
                .body("[2].'end'", numberMatches(3.3555452E7))
                .body("[2].'allele_string'", containsString("-/"))
                .body("[2].'strand'", numberMatches(1.0))
                .body("[2].'most_severe_consequence'", containsString("?"))
                .body("[2].'successfully_annotated'", equalTo(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"4\", " + 
                    " \"start\": 37687609, " + 
                    " \"end\": -8392704, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"OqXHQWJZTvqbuLX\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"TmUc3IxHI\", " + 
                    " \"start\": 4194304, " + 
                    " \"end\": -2096790, " + 
                    " \"referenceAllele\": \"ZpOxHD042nwx\", " + 
                    " \"variantAllele\": \"_EM_42691_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_42708_XYZ_\", " + 
                    " \"start\": 524586, " + 
                    " \"end\": 2400, " + 
                    " \"referenceAllele\": \"_EM_42709_XYZ_\", " + 
                    " \"variantAllele\": \"kCGn9\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'genomicLocation'.'chromosome'", containsString("4"))
                .body("[0].'genomicLocation'.'start'", numberMatches(3.7687609E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(-8392704.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("OqXHQWJZTvqbuLX"))
                .body("[0].'variant'", containsString("4:g.37687609_37687610insOqXHQWJZTvqbuLX"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("TmUc3IxHI"))
                .body("[1].'genomicLocation'.'start'", numberMatches(4194304.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(-2096790.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("ZpOxHD042nwx"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_42691_XYZ_"))
                .body("[1].'variant'", containsString("TmUc3IxHI:g.4194304_-2096790delins_EM_42691_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_42708_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(524586.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(2400.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_42709_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("kCGn9"))
                .body("[2].'variant'", containsString("_EM_42708_XYZ_:g.524586_2400delinskCGn9"))
                .body("[2].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"4\", " + 
                    " \"start\": 4799, " + 
                    " \"end\": 131586, " + 
                    " \"referenceAllele\": \"_E\", " + 
                    " \"variantAllele\": \"iz8g9hnZWhS\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "fields=H9n3th&fields=_EM_31441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("4:g.4799_131586delinsiz8g9hnZWhS"))
                .body("[0].'originalVariantQuery'", containsString("4,4799,131586,_E,iz8g9hnZWhS"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }


}
