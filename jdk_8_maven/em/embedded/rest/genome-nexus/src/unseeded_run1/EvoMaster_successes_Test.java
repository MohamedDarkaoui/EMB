import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-27T22:16:46.428+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 71 tests
 * <br>
 * Covered targets: 3879
 * <br>
 * Used time: 6h 1m 21s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_33_XYZ_?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=_EM_73_XYZ_&" + 
                    "EMextraParam123=_EM_74_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_181_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_176_XYZ_\", " + 
                    " \"_EM_177_XYZ_\", " + 
                    " \"_EM_178_XYZ_\", " + 
                    " \"_EM_179_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2902_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_2901_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?geneId=_EM_1713_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_189_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_184_XYZ_\", " + 
                    " \"yVIsAfh3\", " + 
                    " \"_EM_185_XYZ_\", " + 
                    " \"_EM_186_XYZ_\", " + 
                    " \"_EM_187_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_57_XYZ_&" + 
                    "proteinId=wQ6eF&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/ptm/experimental?" + 
                    "ensemblTranscriptId=_EM_70_XYZ_&" + 
                    "EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_401_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2902_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_2898_XYZ_&" + 
                    "hugoSymbol=_EM_2900_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1353_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_1349_XYZ_&" + 
                    "proteinId=_EM_1350_XYZ_&" + 
                    "hugoSymbol=_EM_1351_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "limit=600")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "limit=456&" + 
                    "EMextraParam123=_EM_966_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=Pu17HXBU2O7Q3S&" + 
                    "hugoSymbol=_EM_3450_XYZ_&" + 
                    "EMextraParam123=_EM_3451_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_170_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_921_XYZ_\", " + 
                    " \"_EM_922_XYZ_\", " + 
                    " \"_EM_923_XYZ_\", " + 
                    " \"_EM_924_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_925_XYZ_\", " + 
                    " \"_EM_926_XYZ_\", " + 
                    " \"_EM_927_XYZ_\", " + 
                    " \"_EM_928_XYZ_\", " + 
                    " \"_EM_929_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_930_XYZ_\", " + 
                    " \"_EM_931_XYZ_\", " + 
                    " \"_EM_932_XYZ_\", " + 
                    " \"_EM_933_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_390_XYZ_\", " + 
                    " \"_EM_391_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_392_XYZ_\", " + 
                    " \"_EM_393_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_394_XYZ_\", " + 
                    " \"_EM_395_XYZ_\", " + 
                    " \"_EM_396_XYZ_\", " + 
                    " \"cydmzEUFKV_Rk\", " + 
                    " \"_EM_397_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"_EM_398_XYZ_\", " + 
                    " \"_EM_399_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"ip97ebT\", " + 
                    " \"_EM_1471_XYZ_\", " + 
                    " \"rjFqyZ5M\", " + 
                    " \"AlwQ9TlGvnmMv\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_1472_XYZ_\", " + 
                    " \"_EM_1473_XYZ_\", " + 
                    " \"_EM_1474_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_9269_XYZ_\", " + 
                    " \"_EM_9270_XYZ_\", " + 
                    " \"_EM_9271_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_161_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=_EM_162_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("_EM_161_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=ZC&" + 
                    "limit=-1504&" + 
                    "EMextraParam123=_EM_1590_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_88_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"-1416664322\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=c.&" + 
                    "limit=51589080")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=g.&" + 
                    "limit=51589088")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_153_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 332, " + 
                    " \"mutationType\": \"_EM_154_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_155_XYZ_\", " + 
                    " \"start\": 15, " + 
                    " \"end\": 93, " + 
                    " \"mutationType\": \"_EM_156_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_157_XYZ_\", " + 
                    " \"start\": 307, " + 
                    " \"end\": 635, " + 
                    " \"mutationType\": \"_EM_158_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_159_XYZ_\", " + 
                    " \"start\": 695, " + 
                    " \"end\": 916, " + 
                    " \"mutationType\": \"_EM_160_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("_EM_153_XYZ_"))
                .body("[0].'proteinLocation'.'start'", numberMatches(887.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(332.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("_EM_154_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'proteinLocation'.'transcriptId'", containsString("_EM_155_XYZ_"))
                .body("[1].'proteinLocation'.'start'", numberMatches(15.0))
                .body("[1].'proteinLocation'.'end'", numberMatches(93.0))
                .body("[1].'proteinLocation'.'mutationType'", containsString("_EM_156_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'proteinLocation'.'transcriptId'", containsString("_EM_157_XYZ_"))
                .body("[2].'proteinLocation'.'start'", numberMatches(307.0))
                .body("[2].'proteinLocation'.'end'", numberMatches(635.0))
                .body("[2].'proteinLocation'.'mutationType'", containsString("_EM_158_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_94_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_89_XYZ_\", " + 
                    " \"Mm_FEzhWfJEJ\", " + 
                    " \"_EM_90_XYZ_\", " + 
                    " \"_EM_91_XYZ_\", " + 
                    " \"_EM_92_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_100_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_96_XYZ_\", " + 
                    " \"_EM_97_XYZ_\", " + 
                    " \"_EM_98_XYZ_\", " + 
                    " \"nUpx\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?keyword=_EM_76_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_907_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_905_XYZ_&" + 
                    "limit=-8388153&" + 
                    "EMextraParam123=_EM_906_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=lWTbdAkjoEw8V&" + 
                    "limit=707")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"?FaU\", " + 
                    " \"U2o11gwmcbw\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_32_XYZ_")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/undefined?EMextraParam123=_EM_31_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_1411_XYZ_\", " + 
                    " \"_EM_1412_XYZ_\", " + 
                    " \"_EM_5001_XYZ_\", " + 
                    " \"\", " + 
                    " \"TRCRjLc0l2q\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_204_XYZ_\", " + 
                    " \"_EM_205_XYZ_\", " + 
                    " \"_EM_206_XYZ_\", " + 
                    " \"_EM_207_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=_EM_208_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_203_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"mE\", " + 
                    " \"_EM_198_XYZ_\", " + 
                    " \"_EM_199_XYZ_\", " + 
                    " \"_EM_200_XYZ_\", " + 
                    " \"_EM_201_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor?EMextraParam123=_EM_202_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_50_XYZ_")
                .get(baseUrlOfSut + "/annotation/_EM_44_XYZ_?" + 
                    "token=_EM_46_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_44_XYZ_"))
                .body("'originalVariantQuery'", containsString("_EM_44_XYZ_"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"IEB\", " + 
                    " \"_EM_3902_XYZ_\", " + 
                    " \"t4wdKBGoZyf\", " + 
                    " \"\", " + 
                    " \"FRbGoBlpcflQ\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("IEB"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_3902_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("t4wdKBGoZyf"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"r3AMy7wCfYQI_Y\", " + 
                    " \"_EM_29132_XYZ_\", " + 
                    " \"_EM_29133_XYZ_\", " + 
                    " \"1uvK\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("1uvK"))
                .body("[0].'title'", containsString("the structural basis for rna specificity and ca2 inhibition of an rna-dependent rna polymerase phi6p2 dead-end complex"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(3))
                .body("[0].'compound'.'1'.'chain'", hasItems("a", "c", "e"))
                .body("[0].'compound'.'1'.'synonym'", containsString("protein p2"))
                .body("[0].'compound'.'1'.'molecule'", containsString("rna-directed rna polymerase"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'1'.'ec'", containsString("2.7.7.48"))
                .body("[0].'source'.'1'.'gene'.size()", equalTo(1))
                .body("[0].'source'.'1'.'gene'", hasItems("p2"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("pseudomonas phage phi6"))
                .body("[0].'source'.'1'.'organism_common'", containsString("bacteriophage phi-6"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("10879"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_105_XYZ_\", " + 
                    " \"COSM5\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=_EM_101_XYZ_&" + 
                    "token=_EM_102_XYZ_&" + 
                    "fields=_EM_686_XYZ_&fields=_EM_687_XYZ_&fields=rCd2KvUP4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_105_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_105_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("COSM5"))
                .body("[1].'originalVariantQuery'", containsString("COSM5"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_2085_XYZ_\", " + 
                    " \"yEfU1Cqtqc446e\", " + 
                    " \"\", " + 
                    " \"_EM_2086_XYZ_\", " + 
                    " \"_EM_2087_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=iVgEETtl16A&" + 
                    "fields=3_BJLZ1jLGhU6OW&fields=_EM_2083_XYZ_&fields=_EM_2084_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_2085_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_2085_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("yEfU1Cqtqc446e"))
                .body("[1].'originalVariantQuery'", containsString("yEfU1Cqtqc446e"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString(""))
                .body("[2].'originalVariantQuery'", containsString(""))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_652_XYZ_?projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_652_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_24_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"xNd7TMZS6P8\", " + 
                    " \"OV9q9pV\", " + 
                    " \"bCFmkD\", " + 
                    " \"V\", " + 
                    " \"gIQwsR9pnD8XM\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=eMrrpJydtD5Zc4&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("xNd7TMZS6P8"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'variant'", containsString("OV9q9pV"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'variant'", containsString("bCFmkD"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_134_XYZ_\", " + 
                    " \"_EM_135_XYZ_\", " + 
                    " \"_EM_136_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_134_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[0].'transcriptConsequences'.size()", equalTo(0))
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_135_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'transcriptConsequences'.size()", equalTo(0))
                .body("[1].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_136_XYZ_"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'transcriptConsequences'.size()", equalTo(0))
                .body("[2].'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs673?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_43520_XYZ_%22%3A%22bPs4dPQQaD8EIe%22%0A++++++++++++++++++++%7D&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs673"))
                .body("'originalVariantQuery'", containsString("rs673"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("6"))
                .body("'start'", numberMatches(3.1543095E7))
                .body("'end'", numberMatches(3.1543095E7))
                .body("'allele_string'", containsString("G/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("upstream_gene_variant"))
                .body("'transcript_consequences'.size()", equalTo(5))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000418386"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000413450"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("LTA"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000226979"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("6709"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000595.3"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("downstream_gene_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000449264"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000398698"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("TNF"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000232810"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("11892"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_000594.3"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000454783"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000403495"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("LTA"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000226979"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("6709"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_001159740.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs22?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=&" + 
                    "fields=IC5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs22"))
                .body("'originalVariantQuery'", containsString("rs22"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1596502E7))
                .body("'end'", numberMatches(1.1596502E7))
                .body("'allele_string'", containsString("A/G/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-13758T>C"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1454-13758T>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"no8:qiUOQbUiUsS\", " + 
                    " \"start\": 1073709141, " + 
                    " \"end\": 46, " + 
                    " \"referenceAllele\": \"w6Yvx8vIY\", " + 
                    " \"variantAllele\": \"_EM_31653_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("no8:qiUOQbUiUsS"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.073709141E9))
                .body("[0].'genomicLocation'.'end'", numberMatches(46.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("w6Yvx8vIY"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_31653_XYZ_"))
                .body("[0].'variant'", containsString("no8:qiUOQbUiUsS:g.1073709141_46delins_EM_31653_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs42?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "token=_EM_5535_XYZ_&" + 
                    "fields=_EM_5536_XYZ_&" + 
                    "EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs42"))
                .body("'originalVariantQuery'", containsString("rs42"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1586351E7))
                .body("'end'", numberMatches(1.1586351E7))
                .body("'allele_string'", containsString("A/C/G/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-3607T>G"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1454-3607T>C"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1454-3607T>A"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs47?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=&" + 
                    "fields=&fields=aqok41T7&fields=SpV4eTu&fields=OXPZoM7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs47"))
                .body("'originalVariantQuery'", containsString("rs47"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1581121E7))
                .body("'end'", numberMatches(1.1581121E7))
                .body("'allele_string'", containsString("T/A/C/G"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583Tyr"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1747A>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'codons'", containsString("Aac/Tac"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("N/Y"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.05))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583Asp"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1747A>G"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'codons'", containsString("Aac/Gac"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("N/D"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[1].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[1].'sift_score'", numberMatches(0.63))
                .body("'transcript_consequences'[1].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583His"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1747A>C"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[2].'codons'", containsString("Aac/Cac"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[2].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[2].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[2].'amino_acids'", containsString("N/H"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[2].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[2].'sift_score'", numberMatches(0.12))
                .body("'transcript_consequences'[2].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3400_XYZ_\", " + 
                    " \"start\": -1050660, " + 
                    " \"end\": 511, " + 
                    " \"referenceAllele\": \"GDTvVbZbWf13E\", " + 
                    " \"variantAllele\": \"_EM_3497_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"*8WnJ\", " + 
                    " \"start\": 33554720, " + 
                    " \"end\": -33553883, " + 
                    " \"referenceAllele\": \"_EM_3402_XYZ_\", " + 
                    " \"variantAllele\": \"V4yVEaAMJLcX6nC\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"1e\", " + 
                    " \"start\": 363, " + 
                    " \"end\": -16293, " + 
                    " \"referenceAllele\": \"_EM_3498_XYZ_\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"NHIiTlVG\", " + 
                    " \"start\": 117473323, " + 
                    " \"end\": -3595, " + 
                    " \"referenceAllele\": \"_EM_3499_XYZ_\", " + 
                    " \"variantAllele\": \"h\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=&" + 
                    "fields=_uWsc3wkV&fields=wafuaPr8BYeIY5UK&fields=_EM_3496_XYZ_&fields=%7F&fields=_EM_3495_XYZ_&" + 
                    "EMextraParam123=_EM_1775_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("*8WnJ:g.33554720_-33553883delinsV4yVEaAMJLcX6nC"))
                .body("[0].'originalVariantQuery'", containsString("*8WnJ,33554720,-33553883,_EM_3402_XYZ_,V4yVEaAMJLcX6nC"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("1e:g.363_-16293del"))
                .body("[1].'originalVariantQuery'", containsString("1e,363,-16293,_EM_3498_XYZ_,NA"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("NHIiTlVG:g.117473323_-3595delinsh"))
                .body("[2].'originalVariantQuery'", containsString("NHIiTlVG,117473323,-3595,_EM_3499_XYZ_,h"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"2\", " + 
                    " \"start\": 354, " + 
                    " \"end\": 86247797, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"u\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=wLKRMTZgWbVRgu&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("2:g.354_355insu"))
                .body("[0].'originalVariantQuery'", containsString("2,354,86247797,-,u"))
                .body("[0].'hgvsg'", containsString("2:g.354_355insu"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("2"))
                .body("[0].'start'", numberMatches(355.0))
                .body("[0].'end'", numberMatches(354.0))
                .body("[0].'allele_string'", containsString("-/U"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intergenic_variant"))
                .body("[0].'intergenic_consequences'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("[0].'intergenic_consequences'[0].'variantAllele'", containsString("U"))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("[0].'successfully_annotated'", equalTo(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs523?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=%7B%0A++++++++++++++++++++%22imsp0KxyUI12m%22%3A%22GtyN7%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&fields=aqom41V7&fields=WqV4fRu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs523"))
                .body("'originalVariantQuery'", containsString("rs523"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.26183529E8))
                .body("'end'", numberMatches(1.26183529E8))
                .body("'allele_string'", containsString("T/-"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000339582"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000339582.2:c.1495-9588del"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000344173"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("GRM8"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000179603"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("4600"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000341617"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000341617.3:c.*60-9588del"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000345747"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("GRM8"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000179603"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("4600"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant", "NMD_transcript_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000358373"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000358373.3:c.1495-9588del"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000351142"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("GRM8"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000179603"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("4600"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_001127323.1"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs250?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%2209YzUAU%22%3A%22UVurjUc%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22N1fb3%22%3A%22UwUCYag0JX%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&fields=aomk44V7K&fields=09Y%7CUAUU&fields=OTPZpP7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs250"))
                .body("'originalVariantQuery'", containsString("rs250"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("8"))
                .body("'start'", numberMatches(1.981103E7))
                .body("'end'", numberMatches(1.9811029E7))
                .body("'allele_string'", containsString("-/TG"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(5))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.541+96_541+97dup"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("TG"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000520959"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000520959.1:c.313+96_313+97dup"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("TG"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000428496"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000521994"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("TG"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("LPL"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000175445"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("6677"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"VGtrYssm\", " + 
                    " \"start\": 58, " + 
                    " \"end\": 672, " + 
                    " \"referenceAllele\": \"_EM_798_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_799_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_800_XYZ_\", " + 
                    " \"start\": 10, " + 
                    " \"end\": -1372899869, " + 
                    " \"referenceAllele\": \"_EM_801_XYZ_\", " + 
                    " \"variantAllele\": \"Xyz92qresswmt\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3367_XYZ_\", " + 
                    " \"start\": 278, " + 
                    " \"end\": 734, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_3368_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_803_XYZ_\", " + 
                    " \"start\": 447, " + 
                    " \"end\": 1708715664, " + 
                    " \"referenceAllele\": \"_EM_804_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_805_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=_EM_806_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("VGtrYssm"))
                .body("[0].'genomicLocation'.'start'", numberMatches(58.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(672.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_798_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_799_XYZ_"))
                .body("[0].'variant'", containsString("VGtrYssm:g.64_672delins9_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_800_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(10.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(-1.372899869E9))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_801_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("Xyz92qresswmt"))
                .body("[1].'variant'", containsString("_EM_800_XYZ_:g.10_-1372899869delinsXyz92qresswmt"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_3367_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(278.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(734.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_3368_XYZ_"))
                .body("[2].'variant'", containsString("_EM_3367_XYZ_:g.278_279ins_EM_3368_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_11108_XYZ_\", " + 
                    " \"start\": -134154276, " + 
                    " \"end\": -4202496, " + 
                    " \"referenceAllele\": \"GDTvVbXbWf13E\", " + 
                    " \"variantAllele\": \"_EM_11887_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"9Ad0ro52f\", " + 
                    " \"start\": 134252288, " + 
                    " \"end\": -33521115, " + 
                    " \"referenceAllele\": \"V4yVEaAMJLcX6nC\", " + 
                    " \"variantAllele\": \"V4yVEaAMJLcX6nH\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"ED\", " + 
                    " \"start\": -67108509, " + 
                    " \"end\": -16357, " + 
                    " \"referenceAllele\": \"_S\", " + 
                    " \"variantAllele\": \"RB9Ab\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_11109_XYZ_\", " + 
                    " \"start\": -109, " + 
                    " \"end\": -4193987, " + 
                    " \"referenceAllele\": \"_EM_13667_XYZ_\", " + 
                    " \"variantAllele\": \"USAkCauAziaZ\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_13668_XYZ_%22%3A%22_EM_13666_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_11886_XYZ_&fields=_EM_11107_XYZ_&fields=_EM_11098_XYZ_&fields=B7D6knR&fields=bAeoke")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("9Ad0ro52f:g.134252302C>H"))
                .body("[0].'originalVariantQuery'", containsString("9Ad0ro52f,134252288,-33521115,V4yVEaAMJLcX6nC,V4yVEaAMJLcX6nH"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"Sayrxj_zgk\", " + 
                    " \"start\": -2124545730, " + 
                    " \"end\": 15, " + 
                    " \"referenceAllele\": \"tX\", " + 
                    " \"variantAllele\": \"aQ1OsyH\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"fa5\", " + 
                    " \"start\": 630, " + 
                    " \"end\": 899, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"R5FqBR1Ff\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"mppPgd\", " + 
                    " \"start\": 365, " + 
                    " \"end\": 820, " + 
                    " \"referenceAllele\": \"fHRe557qIi9\", " + 
                    " \"variantAllele\": \"Tp7f7XYD\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=2Nl_bkQshLtwzQ5&" + 
                    "fields=5iid0Q818zHB&fields=RutwNhUBl&fields=y1knwWcGqiAM&fields=2&fields=xA6&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("fa5:g.630_631insR5FqBR1Ff"))
                .body("[0].'originalVariantQuery'", containsString("fa5,630,899,,R5FqBR1Ff"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("mppPgd:g.365_820delinsTp7f7XYD"))
                .body("[1].'originalVariantQuery'", containsString("mppPgd,365,820,fHRe557qIi9,Tp7f7XYD"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4265_XYZ_\", " + 
                    " \"start\": 595, " + 
                    " \"end\": 157, " + 
                    " \"referenceAllele\": \"_EM_4266_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4267_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"\", " + 
                    " \"start\": 45, " + 
                    " \"end\": 123, " + 
                    " \"referenceAllele\": \"_EM_4268_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4269_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_9267_XYZ_\", " + 
                    " \"start\": -495423570, " + 
                    " \"end\": -107836458, " + 
                    " \"referenceAllele\": \"_EM_4271_XYZ_\", " + 
                    " \"variantAllele\": \"rR\u003dBfvuAlsZLzuYN\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4273_XYZ_\", " + 
                    " \"start\": 767, " + 
                    " \"end\": 61, " + 
                    " \"referenceAllele\": \"_EM_4274_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4275_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?token=n6uWHmWMti")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_4265_XYZ_:g.602_157delins7_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_4265_XYZ_,595,157,_EM_4266_XYZ_,_EM_4267_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString(":g.52_123delins9_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString(",45,123,_EM_4268_XYZ_,_EM_4269_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_4273_XYZ_:g.774_61delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_4273_XYZ_,767,61,_EM_4274_XYZ_,_EM_4275_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3400_XYZ_\", " + 
                    " \"start\": -19488, " + 
                    " \"end\": -67108353, " + 
                    " \"referenceAllele\": \"GDTvVbZbWf13E\", " + 
                    " \"variantAllele\": \"_EM_3587_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3588_XYZ_\", " + 
                    " \"start\": 16778016, " + 
                    " \"end\": -50331099, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"rUEBK3mUJ2\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"1e\", " + 
                    " \"start\": 355, " + 
                    " \"end\": 91, " + 
                    " \"referenceAllele\": \"RB9Ab\", " + 
                    " \"variantAllele\": \"_EM_1768_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"es_2HO\", " + 
                    " \"start\": 8389499, " + 
                    " \"end\": 268435802, " + 
                    " \"referenceAllele\": \"H\", " + 
                    " \"variantAllele\": \"mRehwcw2tS7\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"nfc1sXq6pUXw\", " + 
                    " \"start\": 30763, " + 
                    " \"end\": -16776683, " + 
                    " \"referenceAllele\": \"{8ocSW_2UT\", " + 
                    " \"variantAllele\": \"EXbtaZnYiB3q\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_3585_XYZ_%22%3A%22%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_uWsc3wk&fields=_EM_3399_XYZ_&fields=Y_G8k5IzTxch_&fields=o&fields=_EM_3586_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_3588_XYZ_:g.16778016_16778017insrUEBK3mUJ2"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3588_XYZ_,16778016,-50331099,-,rUEBK3mUJ2"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("1e:g.355_91delins_EM_1768_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("1e,355,91,RB9Ab,_EM_1768_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("es_2HO:g.8389499delinsmRehwcw2tS7"))
                .body("[2].'originalVariantQuery'", containsString("es_2HO,8389499,268435802,H,mRehwcw2tS7"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_231_XYZ_\", " + 
                    " \"start\": 444, " + 
                    " \"end\": 23, " + 
                    " \"referenceAllele\": \"_EM_232_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_233_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_234_XYZ_\", " + 
                    " \"start\": 829, " + 
                    " \"end\": 190, " + 
                    " \"referenceAllele\": \"_EM_235_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_236_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_237_XYZ_\", " + 
                    " \"start\": 871, " + 
                    " \"end\": 118, " + 
                    " \"referenceAllele\": \"_EM_238_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_239_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_240_XYZ_\", " + 
                    " \"start\": 293, " + 
                    " \"end\": 29, " + 
                    " \"referenceAllele\": \"_EM_241_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_243_XYZ_\", " + 
                    " \"start\": 506, " + 
                    " \"end\": 295, " + 
                    " \"referenceAllele\": \"_EM_244_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_245_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_697_XYZ_&" + 
                    "token=_EM_698_XYZ_&" + 
                    "fields=_EM_699_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_X1_XYZ_:g.450_23delins3_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_231_XYZ_,444,23,_EM_232_XYZ_,_EM_233_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_X4_XYZ_:g.835_190delins6_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_234_XYZ_,829,190,_EM_235_XYZ_,_EM_236_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_X7_XYZ_:g.877_118delins9_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_237_XYZ_,871,118,_EM_238_XYZ_,_EM_239_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_117_XYZ_\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"_EM_118_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_119_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_123_XYZ_\", " + 
                    " \"start\": 948, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"_EM_124_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_125_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_128_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_115_XYZ_&" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_117_XYZ_:g.399_98delins9_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_117_XYZ_,393,98,_EM_118_XYZ_,_EM_119_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_120_XYZ_:g.860_330delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_120_XYZ_,854,330,_EM_121_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_1X_XYZ_:g.954_541delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_123_XYZ_,948,541,_EM_124_XYZ_,_EM_125_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"yHge\", " + 
                    " \"start\": 519, " + 
                    " \"end\": 871, " + 
                    " \"referenceAllele\": \"1t4sWjlCE\", " + 
                    " \"variantAllele\": \"_EM_3112_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3113_XYZ_\", " + 
                    " \"start\": -7391, " + 
                    " \"end\": -32439, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_3369_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3729_XYZ_\", " + 
                    " \"start\": 830, " + 
                    " \"end\": -1049990, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_3370_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3119_XYZ_\", " + 
                    " \"start\": 780, " + 
                    " \"end\": 416, " + 
                    " \"referenceAllele\": \"_EM_3120_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3121_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"NXpU\", " + 
                    " \"start\": 266, " + 
                    " \"end\": 2196, " + 
                    " \"referenceAllele\": \"N?\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=3jGzjbD5xyF4nqiw7&" + 
                    "fields=_EM_3109_XYZ_&fields=_EM_3110_XYZ_&fields=bX8tbLGxZ2g&fields=_EM_3111_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("yHge:g.519_871delins_EM_3112_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("yHge,519,871,1t4sWjlCE,_EM_3112_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_3729_XYZ_:g.830_831ins_EM_3370_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_3729_XYZ_,830,-1049990,NA,_EM_3370_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_3119_XYZ_:g.787_416delins1_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_3119_XYZ_,780,416,_EM_3120_XYZ_,_EM_3121_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"IzMV2lUIH\", " + 
                    " \"rs07\", " + 
                    " \"rs7\", " + 
                    " \"IzMV2lUIH\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=4I&" + 
                    "token=gfEeid%7BQL&" + 
                    "fields=Ie1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("IzMV2lUIH"))
                .body("[0].'originalVariantQuery'", containsString("IzMV2lUIH"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("rs07"))
                .body("[1].'originalVariantQuery'", containsString("rs07"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("rs7"))
                .body("[2].'originalVariantQuery'", containsString("rs7"))
                .body("[2].'assembly_name'", containsString("GRCh37"))
                .body("[2].'seq_region_name'", containsString("7"))
                .body("[2].'start'", numberMatches(9.1779557E7))
                .body("[2].'end'", numberMatches(9.1779557E7))
                .body("[2].'allele_string'", containsString("T/A"))
                .body("[2].'strand'", numberMatches(1.0))
                .body("[2].'most_severe_consequence'", containsString("intron_variant"))
                .body("[2].'transcript_consequences'.size()", equalTo(6))
                .body("[2].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000343318"))
                .body("[2].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000343318.5:c.331+291A>T"))
                .body("[2].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[2].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000339642"))
                .body("[2].'transcript_consequences'[0].'gene_symbol'", containsString("LRRD1"))
                .body("[2].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000240720"))
                .body("[2].'transcript_consequences'[0].'hgnc_id'", containsString("34300"))
                .body("[2].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[2].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[2].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000422722"))
                .body("[2].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000422722.1:n.667+291A>T"))
                .body("[2].'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("[2].'transcript_consequences'[1].'gene_symbol'", containsString("LRRD1"))
                .body("[2].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000240720"))
                .body("[2].'transcript_consequences'[1].'hgnc_id'", containsString("34300"))
                .body("[2].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("[2].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("[2].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000430130"))
                .body("[2].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000430130.2:c.2278+291A>T"))
                .body("[2].'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("[2].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000411568"))
                .body("[2].'transcript_consequences'[2].'gene_symbol'", containsString("LRRD1"))
                .body("[2].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000240720"))
                .body("[2].'transcript_consequences'[2].'hgnc_id'", containsString("34300"))
                .body("[2].'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[2].'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_001161528.1"))
                .body("[2].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[2].'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("[2].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }


}
