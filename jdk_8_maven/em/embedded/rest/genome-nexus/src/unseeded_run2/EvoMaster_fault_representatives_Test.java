import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T00:45:25.152+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 110 tests
 * <br>
 * Covered targets: 4203
 * <br>
 * Used time: 6h 1m 45s
 * <br>
 * Needed budget for current results: 92%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_33_XYZ_?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=_EM_73_XYZ_&" + 
                    "EMextraParam123=_EM_74_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_177_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_172_XYZ_\", " + 
                    " \"_EM_173_XYZ_\", " + 
                    " \"_EM_174_XYZ_\", " + 
                    " \"_EM_175_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_796_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_706_XYZ_&" + 
                    "EMextraParam123=_EM_709_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_185_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"EZghwoXnX\", " + 
                    " \"_EM_180_XYZ_\", " + 
                    " \"_EM_181_XYZ_\", " + 
                    " \"_EM_182_XYZ_\", " + 
                    " \"_EM_183_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_57_XYZ_&" + 
                    "proteinId=wQ6eF&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/ptm/experimental?" + 
                    "ensemblTranscriptId=_EM_70_XYZ_&" + 
                    "EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_392_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_660_XYZ_&" + 
                    "hugoSymbol=_EM_662_XYZ_&" + 
                    "EMextraParam123=_EM_663_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1188_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_1184_XYZ_&" + 
                    "proteinId=_EM_1185_XYZ_&" + 
                    "hugoSymbol=_EM_1186_XYZ_&" + 
                    "EMextraParam123=_EM_1187_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "limit=-2096183&" + 
                    "EMextraParam123=_EM_1220_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "limit=339")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=_EM_835_XYZ_&" + 
                    "hugoSymbol=Whs48UvwTnjhES&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"Qq5SZPijZ52xy\", " + 
                    " \"QEYxlKoK\", " + 
                    " \"9tE_4pRPab6\", " + 
                    " \"a\", " + 
                    " \"F\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"lzoX\", " + 
                    " \"uhk3RLz_TxQ_\", " + 
                    " \"cwcsE3Fvab4\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_380_XYZ_\", " + 
                    " \"_EM_381_XYZ_\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_382_XYZ_\", " + 
                    " \"_EM_383_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_384_XYZ_\", " + 
                    " \"_EM_385_XYZ_\", " + 
                    " \"_EM_386_XYZ_\", " + 
                    " \"_EM_387_XYZ_\", " + 
                    " \"_EM_388_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"_EM_389_XYZ_\", " + 
                    " \"_EM_390_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_1924_XYZ_\", " + 
                    " \"4KIvCAfACj7H\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_1925_XYZ_\", " + 
                    " \"yMps\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3302_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_3301_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2431_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_2425_XYZ_\", " + 
                    " \"_EM_2426_XYZ_\", " + 
                    " \"_EM_2427_XYZ_\", " + 
                    " \"_EM_2428_XYZ_\", " + 
                    " \"_EM_2429_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_2430_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"XIcRjSNehhEuEY\", " + 
                    " \"eIoI070wbXMjw\", " + 
                    " \"8F16e9KBDsxez\" " + 
                    " ], " + 
                    " \"proteinIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1191_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_1189_XYZ_&" + 
                    "limit=16777563")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_158_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=_EM_159_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("_EM_158_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"-1416664322\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=c.&" + 
                    "limit=-1068602476")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=g.&" + 
                    "limit=1623679345")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_151_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 332, " + 
                    " \"mutationType\": \"_EM_152_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_153_XYZ_\", " + 
                    " \"start\": 15, " + 
                    " \"end\": 93, " + 
                    " \"mutationType\": \"_EM_154_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_155_XYZ_\", " + 
                    " \"start\": 307, " + 
                    " \"end\": 635, " + 
                    " \"mutationType\": \"_EM_156_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"transcriptId\": \"_EM_157_XYZ_\", " + 
                    " \"start\": 695, " + 
                    " \"end\": 916, " + 
                    " \"mutationType\": \"HFNetbVkGPE\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("_EM_151_XYZ_"))
                .body("[0].'proteinLocation'.'start'", numberMatches(887.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(332.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("_EM_152_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'proteinLocation'.'transcriptId'", containsString("_EM_153_XYZ_"))
                .body("[1].'proteinLocation'.'start'", numberMatches(15.0))
                .body("[1].'proteinLocation'.'end'", numberMatches(93.0))
                .body("[1].'proteinLocation'.'mutationType'", containsString("_EM_154_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'proteinLocation'.'transcriptId'", containsString("_EM_155_XYZ_"))
                .body("[2].'proteinLocation'.'start'", numberMatches(307.0))
                .body("[2].'proteinLocation'.'end'", numberMatches(635.0))
                .body("[2].'proteinLocation'.'mutationType'", containsString("_EM_156_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_94_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_89_XYZ_\", " + 
                    " \"Mm_FEzhWfJEJ\", " + 
                    " \"_EM_90_XYZ_\", " + 
                    " \"_EM_91_XYZ_\", " + 
                    " \"_EM_92_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_100_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_96_XYZ_\", " + 
                    " \"_EM_97_XYZ_\", " + 
                    " \"_EM_98_XYZ_\", " + 
                    " \"nUpx\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?keyword=_EM_76_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_742_XYZ_&" + 
                    "limit=223")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1221_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_1219_XYZ_&" + 
                    "limit=-31799&" + 
                    "EMextraParam123=_EM_1220_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_9174_XYZ_\", " + 
                    " \"_EM_9175_XYZ_\", " + 
                    " \"\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"XT8QV_UAfdukS\", " + 
                    " \"ktL7AnCq7(PTai3Y\", " + 
                    " \"eciO7Slx8iCqpHom\", " + 
                    " \"1NEqP_Pn\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"bbFqp:YPe\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"e51gdG7ekuAtry\", " + 
                    " \"\", " + 
                    " \"_EM_346_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("e51gdG7ekuAtry"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString(""))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_346_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"3IGl\", " + 
                    " \"?IGl\", " + 
                    " \"1KcT\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'pdbId'", containsString("3IGl"))
                .body("[0].'title'", containsString("diversity in dna recognition by p53 revealed by crystal structures with hoogsteen base pairs (p53-dna complex 1)"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'1'.'chain'", hasItems("a"))
                .body("[0].'compound'.'1'.'fragment'", containsString("p53 core domain, unp residues 94-293"))
                .body("[0].'compound'.'1'.'synonym'", containsString("tumor suppressor p53, phosphoprotein p53, antigen ny-co-13"))
                .body("[0].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'1'.'molecule'", containsString("cellular tumor antigen p53"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'2'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'2'.'chain'", hasItems("b"))
                .body("[0].'compound'.'2'.'molecule'", containsString("dna (5'-d(*cp*gp*gp*gp*cp*ap*tp*gp*cp*cp*cp*g)-3')"))
                .body("[0].'compound'.'2'.'mol_id'", containsString("2"))
                .body("[0].'source'.'1'.'expression_system_plasmid'", containsString("pet27-b"))
                .body("[0].'source'.'1'.'gene'.size()", equalTo(1))
                .body("[0].'source'.'1'.'gene'", hasItems("tp53"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'1'.'organism_common'", containsString("human"))
                .body("[0].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'1'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("469008"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"))
                .body("[0].'source'.'2'.'synthetic'", containsString("yes"))
                .body("[0].'source'.'2'.'mol_id'", containsString("2"))
                .body("[1].'pdbId'", containsString("1KcT"))
                .body("[1].'title'", containsString("alpha1-antitrypsin"))
                .body("[1].'compound'.'1'.'chain'.size()", equalTo(1))
                .body("[1].'compound'.'1'.'chain'", hasItems("a"))
                .body("[1].'compound'.'1'.'synonym'", containsString("alpha1-proteinase inhibitor"))
                .body("[1].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[1].'compound'.'1'.'molecule'", containsString("alpha1-antitrypsin"))
                .body("[1].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[1].'source'.'1'.'expression_system_plasmid'", containsString("pet-8c"))
                .body("[1].'source'.'1'.'gene'.size()", equalTo(1))
                .body("[1].'source'.'1'.'gene'", hasItems("a1at"))
                .body("[1].'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("[1].'source'.'1'.'organism_common'", containsString("human"))
                .body("[1].'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("[1].'source'.'1'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[1].'source'.'1'.'expression_system_taxid'", containsString("469008"))
                .body("[1].'source'.'1'.'expression_system'", containsString("escherichia coli bl21(de3)"))
                .body("[1].'source'.'1'.'mol_id'", containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_28363_XYZ\", " + 
                    " \"4b9K\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("4b9K"))
                .body("[0].'title'", containsString("pvhl-elob-eloc complex_(2s,4r)-1-(3-amino-2-methylbenzoyl)-4-hydroxy-n-(4-(4-methylthiazol-5-yl)benzyl)pyrrolidine-2-carboxamide bound"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(4))
                .body("[0].'compound'.'1'.'chain'", hasItems("a", "d", "g", "j"))
                .body("[0].'compound'.'1'.'fragment'", containsString("residues 1-104"))
                .body("[0].'compound'.'1'.'synonym'", containsString("elongin 18 kda subunit, elongin-b, elob, rna polymerase ii transcription factor siii subunit b, siii p18"))
                .body("[0].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'1'.'molecule'", containsString("transcription elongation factor b polypeptide 2"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'2'.'other_details'", containsString("cys 112 has not been observed as modified to cas"))
                .body("[0].'compound'.'2'.'chain'.size()", equalTo(3))
                .body("[0].'compound'.'2'.'chain'", hasItems("b", "h", "k"))
                .body("[0].'compound'.'2'.'fragment'", containsString("residues 17-112"))
                .body("[0].'compound'.'2'.'synonym'", containsString("elongin 15 kda subunit, elongin-c, eloc, rna polymerase ii transcription factor siii subunit c, siii p15"))
                .body("[0].'compound'.'2'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'2'.'molecule'", containsString("transcription elongation factor b polypeptide 1"))
                .body("[0].'compound'.'2'.'mol_id'", containsString("2"))
                .body("[0].'compound'.'3'.'chain'.size()", equalTo(4))
                .body("[0].'compound'.'3'.'chain'", hasItems("c", "f", "i", "l"))
                .body("[0].'compound'.'3'.'fragment'", containsString("residues 54-213"))
                .body("[0].'compound'.'3'.'synonym'", containsString("protein g7, pvhl"))
                .body("[0].'compound'.'3'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'3'.'molecule'", containsString("von hippel-lindau disease tumor suppressor"))
                .body("[0].'compound'.'3'.'mol_id'", containsString("3"))
                .body("[0].'compound'.'4'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'4'.'chain'", hasItems("e"))
                .body("[0].'compound'.'4'.'fragment'", containsString("residues 17-112"))
                .body("[0].'compound'.'4'.'synonym'", containsString("elongin 15 kda subunit, elongin-c, eloc, rna polymerase ii transcription factor siii subunit c, siii p15"))
                .body("[0].'compound'.'4'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'4'.'molecule'", containsString("transcription elongation factor b polypeptide 1"))
                .body("[0].'compound'.'4'.'mol_id'", containsString("4"))
                .body("[0].'source'.'1'.'expression_system_plasmid'", containsString("phat4"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'1'.'organism_common'", containsString("human"))
                .body("[0].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'1'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("469008"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"))
                .body("[0].'source'.'2'.'expression_system_plasmid'", containsString("pcdf_duet"))
                .body("[0].'source'.'2'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'2'.'organism_common'", containsString("human"))
                .body("[0].'source'.'2'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'2'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'2'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[0].'source'.'2'.'expression_system_taxid'", containsString("469008"))
                .body("[0].'source'.'2'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'2'.'mol_id'", containsString("2"))
                .body("[0].'source'.'3'.'expression_system_plasmid'", containsString("pcdf_duet"))
                .body("[0].'source'.'3'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'3'.'organism_common'", containsString("human"))
                .body("[0].'source'.'3'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'3'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'3'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[0].'source'.'3'.'expression_system_taxid'", containsString("469008"))
                .body("[0].'source'.'3'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'3'.'mol_id'", containsString("3"))
                .body("[0].'source'.'4'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'4'.'organism_common'", containsString("human"))
                .body("[0].'source'.'4'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'4'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'4'.'expression_system_strain'", containsString("bl21(de3)"))
                .body("[0].'source'.'4'.'expression_system_taxid'", containsString("469008"))
                .body("[0].'source'.'4'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'4'.'mol_id'", containsString("4"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"2a9K\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'pdbId'", containsString("2a9K"))
                .body("[0].'title'", containsString("crystal structure of the c3bot-nad-rala complex reveals a novel type of action of a bacterial exoenzyme"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'1'.'chain'", hasItems("a"))
                .body("[0].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'1'.'molecule'", containsString("ras-related protein ral-a"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'2'.'chain'.size()", equalTo(1))
                .body("[0].'compound'.'2'.'chain'", hasItems("b"))
                .body("[0].'compound'.'2'.'synonym'", containsString("exoenzyme c3"))
                .body("[0].'compound'.'2'.'molecule'", containsString("mono-adp-ribosyltransferase c3"))
                .body("[0].'compound'.'2'.'mol_id'", containsString("2"))
                .body("[0].'compound'.'2'.'ec'", containsString("2.4.2.-"))
                .body("[0].'source'.'1'.'expression_system_plasmid'", containsString("pgex-2t"))
                .body("[0].'source'.'1'.'gene'.size()", equalTo(2))
                .body("[0].'source'.'1'.'gene'", hasItems("rala", "ral"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("[0].'source'.'1'.'organism_common'", containsString("human"))
                .body("[0].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("[0].'source'.'1'.'expression_system_strain'", containsString("bl21"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("511693"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli bl21"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"))
                .body("[0].'source'.'2'.'gene'.size()", equalTo(1))
                .body("[0].'source'.'2'.'gene'", hasItems("c3"))
                .body("[0].'source'.'2'.'organism_scientific'", containsString("clostridium botulinum d phage"))
                .body("[0].'source'.'2'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[0].'source'.'2'.'organism_taxid'", containsString("29342"))
                .body("[0].'source'.'2'.'expression_system_strain'", containsString("bl21"))
                .body("[0].'source'.'2'.'expression_system_taxid'", containsString("511693"))
                .body("[0].'source'.'2'.'expression_system'", containsString("escherichia coli bl21"))
                .body("[0].'source'.'2'.'mol_id'", containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/55QqDW7CSDNPgqy?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22Bm0HRYJ3p%5CtMM%22%3A%22kYf%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22ao8N7FCUmItUKL%22%3A%22Bm0HRYJ3pZtMMS%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22nR%22%3A%22_U3EHVVWXpJoPLif%22%0A++++++++++++++++++++%7D&" + 
                    "fields=mutation_assessor&fields=7UUqWX6VRBNPiWzQqF&fields=_ALiqzsOU2&fields=WWW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("55QqDW7CSDNPgqy"))
                .body("'originalVariantQuery'", containsString("55QqDW7CSDNPgqy"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_668_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=_EM_665_XYZ_&" + 
                    "token=_EM_666_XYZ_&" + 
                    "fields=_EM_667_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("_EM_668_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_668_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/summary/_EM_712_XYZ_?" + 
                    "isoformOverrideSource=9ej8&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_712_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/undefined?isoformOverrideSource=_EM_25_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("undefined"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_24_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_321_XYZ_\", " + 
                    " \"_EM_322_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "projection=CANONICAL&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("_EM_321_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'variant'", containsString("_EM_322_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_134_XYZ_\", " + 
                    " \"_EM_135_XYZ_\", " + 
                    " \"_EM_136_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_134_XYZ_"))
                .body("[0].'genomicLocation'.'chromosome'", nullValue())
                .body("[0].'genomicLocation'.'start'", nullValue())
                .body("[0].'genomicLocation'.'end'", nullValue())
                .body("[0].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[0].'genomicLocation'.'variantAllele'", nullValue())
                .body("[0].'transcriptConsequences'.size()", equalTo(0))
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_135_XYZ_"))
                .body("[1].'genomicLocation'.'chromosome'", nullValue())
                .body("[1].'genomicLocation'.'start'", nullValue())
                .body("[1].'genomicLocation'.'end'", nullValue())
                .body("[1].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[1].'genomicLocation'.'variantAllele'", nullValue())
                .body("[1].'transcriptConsequences'.size()", equalTo(0))
                .body("[1].'transcriptConsequenceSummaries'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_136_XYZ_"))
                .body("[2].'genomicLocation'.'chromosome'", nullValue())
                .body("[2].'genomicLocation'.'start'", nullValue())
                .body("[2].'genomicLocation'.'end'", nullValue())
                .body("[2].'genomicLocation'.'referenceAllele'", nullValue())
                .body("[2].'genomicLocation'.'variantAllele'", nullValue())
                .body("[2].'transcriptConsequences'.size()", equalTo(0))
                .body("[2].'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs593?" + 
                    "token=%7B%0A++++++++++++++++++++%22HD1ZRj8V5%22%3A%221C%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22VlUQ3113WxBVWpP%22%3A%22eygA7lunY%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22ztTnb9Y6Vwnwd%22%3A%220B%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22eTHV%22%3A%22u34%22%0A++++++++++++++++++++%7D&" + 
                    "fields=XSCuRhetvxWgZ5E&fields=5&fields=KGRf%2F&fields=g0RJdw&fields=VwroeP%40lU78Rsdh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs593"))
                .body("'originalVariantQuery'", containsString("rs593"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("HG1453_PATCH"))
                .body("'start'", numberMatches(1.40707314E8))
                .body("'end'", numberMatches(1.40707315E8))
                .body("'allele_string'", containsString("AA/AAAACAA/AAACAA"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("upstream_gene_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000600538"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("AAAACAA"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("RP1-171K16.5"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000269485"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000600538"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("AAACAA"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("RP1-171K16.5"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000269485"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"p\", " + 
                    " \"start\": -8196, " + 
                    " \"end\": 18760496, " + 
                    " \"referenceAllele\": \"_EM_23765_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_44474_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"j\", " + 
                    " \"start\": 1073676492, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"f\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("j"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.073676492E9))
                .body("[0].'genomicLocation'.'end'", numberMatches(0.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("f"))
                .body("[0].'variant'", containsString("j:g.1073676492_1073676493insf"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_999_XYZ_")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs571?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_5665_XYZ_%22%3A%22_EM_5666_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1002_XYZ_%22%3A%22qz6%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_5503_XYZ_%22%3A%22UqR%22%0A++++++++++++++++++++%7D&" + 
                    "fields=M9d4UWg1Zrz&fields=_EM_5852_XYZ_&fields=_EM_5853_XYZ_&fields=KwVTZ6qwb7675rl&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs571"))
                .body("'originalVariantQuery'", containsString("rs571"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("2"))
                .body("'start'", numberMatches(1.18589843E8))
                .body("'end'", numberMatches(1.18589843E8))
                .body("'allele_string'", containsString("C/A/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("3_prime_UTR_variant"))
                .body("'transcript_consequences'.size()", equalTo(10))
                .body("'transcript_consequences'[0].'exon'", containsString("14/14"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000263239"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000263239.2:c.*1543C>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000263239"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("DDX18"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000088205"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("2741"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_006773.3"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("3_prime_UTR_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("14/14"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000263239"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000263239.2:c.*1543C>T"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000263239"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("DDX18"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000088205"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("2741"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_006773.3"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("3_prime_UTR_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000415038"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000415604"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("DDX18"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000088205"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("2741"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"lT\", " + 
                    " \"start\": 516, " + 
                    " \"end\": 1048952, " + 
                    " \"referenceAllele\": \"Gw-F\", " + 
                    " \"variantAllele\": \"--\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("lT"))
                .body("[0].'genomicLocation'.'start'", numberMatches(516.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(1048952.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("Gw-F"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("--"))
                .body("[0].'variant'", containsString("lT:g.516_1048952del"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs47?" + 
                    "isoformOverrideSource=_UM_U9%3BOXYZUk&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1001_XYZ_%22%3A%22_EM_30025_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_30029_XYZ_%22%3A%22UEUa30UUU%5BXYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=P2fx9MUPU&fields=XTKulgUUUUU&fields=_EM_30030_XYZ_&fields=_EM_30028_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs47"))
                .body("'originalVariantQuery'", containsString("rs47"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1581121E7))
                .body("'end'", numberMatches(1.1581121E7))
                .body("'allele_string'", containsString("T/A/C/G"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(6))
                .body("'transcript_consequences'[0].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583Tyr"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1747A>T"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'codons'", containsString("Aac/Tac"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("N/Y"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.05))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583Asp"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000423059.4:c.1747A>G"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'codons'", containsString("Aac/Gac"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("N/D"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[1].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[1].'sift_score'", numberMatches(0.63))
                .body("'transcript_consequences'[1].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("6/28"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000406482.2:p.Asn583His"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000423059.4:c.1747A>C"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[2].'codons'", containsString("Aac/Cac"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[2].'protein_start'", numberMatches(583.0))
                .body("'transcript_consequences'[2].'protein_end'", numberMatches(583.0))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[2].'amino_acids'", containsString("N/H"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'polyphen_score'", numberMatches(0.0))
                .body("'transcript_consequences'[2].'polyphen_prediction'", containsString("benign"))
                .body("'transcript_consequences'[2].'sift_score'", numberMatches(0.12))
                .body("'transcript_consequences'[2].'sift_prediction'", containsString("tolerated"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_999_XYZ_")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs36?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_5665_XYZ_%22%3A%22_EM_5666_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1002_XYZ_%22%3A%22qz6%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_5503_XYZ_%22%3A%22UqR%22%0A++++++++++++++++++++%7D&" + 
                    "fields=M9d4UWg1Zrz&fields=_EM_5851_XYZ_&fields=6BE2pAn2YGw9xB&fields=KwVTZ6qwb7675rl&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs36"))
                .body("'originalVariantQuery'", containsString("rs36"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1591213E7))
                .body("'end'", numberMatches(1.1591213E7))
                .body("'allele_string'", containsString("A/G"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-8469T>C"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"iV\", " + 
                    " \"start\": 524307, " + 
                    " \"end\": 33628880, " + 
                    " \"referenceAllele\": \"M\", " + 
                    " \"variantAllele\": \"ME\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"Wq\", " + 
                    " \"start\": -512, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"B\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("iV"))
                .body("[0].'genomicLocation'.'start'", numberMatches(524307.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(3.362888E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("M"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("ME"))
                .body("[0].'variant'", containsString("iV:g.524307_524308insE"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs9?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_12705_XYZ_%22%3A%224ucwek8I%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_12706_XYZ_%22%3A%22%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_12707_XYZ_%22%3A%22XIDr__pQ0G8sp%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_12708_XYZ_%22%3A%222%22%0A++++++++++++++++++++%7D&" + 
                    "fields=teM3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs9"))
                .body("'originalVariantQuery'", containsString("rs9"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(9.2373455E7))
                .body("'end'", numberMatches(9.2373455E7))
                .body("'allele_string'", containsString("G/-"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000265734"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000265734.4:c.370-18348del"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000265734"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_001259.6"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000424848"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000424848.2:c.370-18348del"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000397087"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("CDK6"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000105810"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("1777"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_001145306.1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_999_XYZ_")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs25?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_1001_XYZ_%22%3A%22_EM_5276_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1002_XYZ_%22%3A%22_EM_5277_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_1003_XYZ_%22%3A%22UqR%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_995_XYZ_&fields=xH_Qx54qf&fields=_EM_5263_XYZ_&fields=_l3qTd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs25"))
                .body("'originalVariantQuery'", containsString("rs25"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.1584142E7))
                .body("'end'", numberMatches(1.1584142E7))
                .body("'allele_string'", containsString("T/C"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("intron_variant"))
                .body("'transcript_consequences'.size()", equalTo(2))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000423059"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000423059.4:c.1454-1398A>G"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000406482"))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_015204.2"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000497575"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("THSD7A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000005108"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("22207"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"fOwo\", " + 
                    " \"start\": 817, " + 
                    " \"end\": 810, " + 
                    " \"referenceAllele\": \"_EM_139_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_140_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_141_XYZ_\", " + 
                    " \"start\": 95, " + 
                    " \"end\": 149, " + 
                    " \"referenceAllele\": \"f\", " + 
                    " \"variantAllele\": \"_EM_142_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("fOwo"))
                .body("[0].'genomicLocation'.'start'", numberMatches(817.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(810.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_139_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_140_XYZ_"))
                .body("[0].'variant'", containsString("fOwo:g.822_810delins40_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_141_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(95.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(149.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("f"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_142_XYZ_"))
                .body("[1].'variant'", containsString("_EM_141_XYZ_:g.95delins_EM_142_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_46369_XYZ_\", " + 
                    " \"start\": -8324, " + 
                    " \"end\": 2048, " + 
                    " \"referenceAllele\": \"7r\", " + 
                    " \"variantAllele\": \"_EM_44474_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"j\", " + 
                    " \"start\": 1073610956, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"izFV3\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("j"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.073610956E9))
                .body("[0].'genomicLocation'.'end'", numberMatches(0.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("izFV3"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'variant'", containsString("j:g.1073610956_0del"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4240_XYZ_\", " + 
                    " \"start\": 272, " + 
                    " \"end\": 992, " + 
                    " \"referenceAllele\": \"_EM_4241_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4242_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4243_XYZ_\", " + 
                    " \"start\": 895, " + 
                    " \"end\": 624, " + 
                    " \"referenceAllele\": \"_EM_4244_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4245_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4246_XYZ_\", " + 
                    " \"start\": 822, " + 
                    " \"end\": 537, " + 
                    " \"referenceAllele\": \"9svuutK\", " + 
                    " \"variantAllele\": \"_EM_4247_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_4248_XYZ_\", " + 
                    " \"start\": 312, " + 
                    " \"end\": 579, " + 
                    " \"referenceAllele\": \"_EM_4249_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4250_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"ms3aOOFToCjrv\", " + 
                    " \"start\": 177, " + 
                    " \"end\": 683, " + 
                    " \"referenceAllele\": \"_EM_4251_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_4252_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_4240_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(272.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(992.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_4241_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_4242_XYZ_"))
                .body("[0].'variant'", containsString("_EM_4Y0_XYZ_:g.279_992delins2_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_4243_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(895.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(624.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_4244_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_4245_XYZ_"))
                .body("[1].'variant'", containsString("_EM_4Y3_XYZ_:g.902_624delins5_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_4246_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(822.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(537.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("9svuutK"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_4247_XYZ_"))
                .body("[2].'variant'", containsString("_EM_4Y6_XYZ_:g.822_537delins_EM_4247_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1192_XYZ_\", " + 
                    " \"start\": 752, " + 
                    " \"end\": 732, " + 
                    " \"referenceAllele\": \"_EM_1193_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1194_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1195_XYZ_\", " + 
                    " \"start\": 727, " + 
                    " \"end\": 539, " + 
                    " \"referenceAllele\": \"_EM_1196_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1197_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1198_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 750, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"fc3lAbPIPKyUhWf\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1201_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 453, " + 
                    " \"referenceAllele\": \"_EM_1202_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1203_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=_EM_1204_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_1192_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(752.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(732.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_1193_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_1194_XYZ_"))
                .body("[0].'variant'", containsString("_EM_1192_XYZ_:g.759_732delins4_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("_EM_1195_XYZ_"))
                .body("[1].'genomicLocation'.'start'", numberMatches(727.0))
                .body("[1].'genomicLocation'.'end'", numberMatches(539.0))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_1196_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("_EM_1197_XYZ_"))
                .body("[1].'variant'", containsString("_EM_1195_XYZ_:g.734_539delins7_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_1198_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(887.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(750.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString(""))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("fc3lAbPIPKyUhWf"))
                .body("[2].'variant'", containsString("_EM_1198_XYZ_:g.887_888insfc3lAbPIPKyUhWf"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_30124_XYZ_\", " + 
                    " \"start\": 4195143, " + 
                    " \"end\": 501, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"l\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=_EM_30107_XYZ_&" + 
                    "fields=m2I7MhaLiI83mkTK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("_EM_301Y_XYZ_:g.4195143T>l"))
                .body("[0].'originalVariantQuery'", containsString("_EM_30124_XYZ_,4195143,501,T,l"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"zywNqem\", " + 
                    " \"start\": 892, " + 
                    " \"end\": 780, " + 
                    " \"referenceAllele\": \"_EM_2678_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2679_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"2ZAb8k_eY\", " + 
                    " \"start\": 614, " + 
                    " \"end\": 523, " + 
                    " \"referenceAllele\": \"Mu_9CdRHMT\", " + 
                    " \"variantAllele\": \"_EM_2680_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2681_XYZ_\", " + 
                    " \"start\": 733, " + 
                    " \"end\": 575, " + 
                    " \"referenceAllele\": \"_EM_2682_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2683_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2684_XYZ_\", " + 
                    " \"start\": 316, " + 
                    " \"end\": 115, " + 
                    " \"referenceAllele\": \"_EM_2685_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2686_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2687_XYZ_\", " + 
                    " \"start\": 519, " + 
                    " \"end\": 64, " + 
                    " \"referenceAllele\": \"_EM_2688_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2689_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("zywNqem:g.899_780delins9_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("zywNqem,892,780,_EM_2678_XYZ_,_EM_2679_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("2ZAb8k_eY:g.614_523delins_EM_2680_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("2ZAb8k_eY,614,523,Mu_9CdRHMT,_EM_2680_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_2681_XYZ_:g.740_575delins3_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_2681_XYZ_,733,575,_EM_2682_XYZ_,_EM_2683_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3966_XYZ_\", " + 
                    " \"start\": 16777216, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"_EM_6025_XYZ_\", " + 
                    " \"variantAllele\": \"NA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_6026_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 763, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"Mzk7\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"LSxFCG74NPCv6AJ\", " + 
                    " \"start\": 1049, " + 
                    " \"end\": 764, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_4586_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2976_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 189, " + 
                    " \"referenceAllele\": \"_EM_4587_XYZ_\", " + 
                    " \"variantAllele\": \"oYXc9G6foUCi89i9\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3968_XYZ_\", " + 
                    " \"start\": 337, " + 
                    " \"end\": 577, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_2980_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=Q1OsyHMkf&" + 
                    "fields=_EM_2966_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("_EM_3966_XYZ_:g.16777216_0del"))
                .body("[0].'originalVariantQuery'", containsString("_EM_3966_XYZ_,16777216,0,_EM_6025_XYZ_,NA"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("LSxFCG74NPCv6AJ:g.1049_1050ins_EM_4586_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("LSxFCG74NPCv6AJ,1049,764,NA,_EM_4586_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_3968_XYZ_:g.337_338ins_EM_2980_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_3968_XYZ_,337,577,,_EM_2980_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_117_XYZ_\", " + 
                    " \"start\": 393, " + 
                    " \"end\": 98, " + 
                    " \"referenceAllele\": \"_EM_118_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_119_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_120_XYZ_\", " + 
                    " \"start\": 854, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"_EM_121_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_122_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_123_XYZ_\", " + 
                    " \"start\": 948, " + 
                    " \"end\": 541, " + 
                    " \"referenceAllele\": \"_EM_124_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_125_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_126_XYZ_\", " + 
                    " \"start\": 1167375274, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"_EM_127_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_128_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_129_XYZ_\", " + 
                    " \"start\": 171, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_130_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_131_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_115_XYZ_&" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_117_XYZ_:g.399_98delins9_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_117_XYZ_,393,98,_EM_118_XYZ_,_EM_119_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_120_XYZ_:g.860_330delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_120_XYZ_,854,330,_EM_121_XYZ_,_EM_122_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_1X_XYZ_:g.954_541delins5_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_123_XYZ_,948,541,_EM_124_XYZ_,_EM_125_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_289_XYZ_\", " + 
                    " \"rs6\", " + 
                    " \"COSM45\", " + 
                    " \"rs780\", " + 
                    " \"5jnLmCucW0WgRRm\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_289_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("_EM_289_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("rs6"))
                .body("[1].'originalVariantQuery'", containsString("rs6"))
                .body("[1].'assembly_name'", containsString("GRCh37"))
                .body("[1].'seq_region_name'", containsString("7"))
                .body("[1].'start'", numberMatches(9.1747131E7))
                .body("[1].'end'", numberMatches(9.1747131E7))
                .body("[1].'allele_string'", containsString("A/G"))
                .body("[1].'strand'", numberMatches(1.0))
                .body("[1].'most_severe_consequence'", containsString("intron_variant"))
                .body("[1].'transcript_consequences'.size()", equalTo(5))
                .body("[1].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000003100"))
                .body("[1].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000003100.8:c.1183-605T>C"))
                .body("[1].'transcript_consequences'[0].'variant_allele'", containsString("G"))
                .body("[1].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000003100"))
                .body("[1].'transcript_consequences'[0].'gene_symbol'", containsString("CYP51A1"))
                .body("[1].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000001630"))
                .body("[1].'transcript_consequences'[0].'hgnc_id'", containsString("2649"))
                .body("[1].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[1].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000786.3"))
                .body("[1].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[1].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000422722"))
                .body("[1].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000422722.1:n.1658-605T>C"))
                .body("[1].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[1].'transcript_consequences'[1].'gene_symbol'", containsString("LRRD1"))
                .body("[1].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000240720"))
                .body("[1].'transcript_consequences'[1].'hgnc_id'", containsString("34300"))
                .body("[1].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("[1].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("[1].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000422867"))
                .body("[1].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000422867.1:c.404-605T>C"))
                .body("[1].'transcript_consequences'[2].'variant_allele'", containsString("G"))
                .body("[1].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000394268"))
                .body("[1].'transcript_consequences'[2].'gene_symbol'", containsString("CYP51A1"))
                .body("[1].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000001630"))
                .body("[1].'transcript_consequences'[2].'hgnc_id'", containsString("2649"))
                .body("[1].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[2].'consequence_terms'", hasItems("intron_variant"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'successfully_annotated'", equalTo(true))
                .body("[2].'variant'", containsString("COSM45"))
                .body("[2].'originalVariantQuery'", containsString("COSM45"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_6583_XYZ_\", " + 
                    " \"start\": 128, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"N9\", " + 
                    " \"variantAllele\": \"NI\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_6584_XYZ_\", " + 
                    " \"start\": 2056, " + 
                    " \"end\": -4193541, " + 
                    " \"referenceAllele\": \"_EM_2971_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2972_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2973_XYZ_\", " + 
                    " \"start\": 1049, " + 
                    " \"end\": 764, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_4586_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2976_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 189, " + 
                    " \"referenceAllele\": \"_EM_4587_XYZ_\", " + 
                    " \"variantAllele\": \"oYXc9G6foUCi89i9\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3968_XYZ_\", " + 
                    " \"start\": 337, " + 
                    " \"end\": 577, " + 
                    " \"referenceAllele\": \"_EM_3969_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2980_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "token=Q1OsyHMkf&" + 
                    "fields=_EM_2966_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("_EM_6583_XYZ_:g.1299>I"))
                .body("[0].'originalVariantQuery'", containsString("_EM_6583_XYZ_,128,0,N9,NI"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_6584_XYZ_:g.2063_-4193541delins2_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_6584_XYZ_,2056,-4193541,_EM_2971_XYZ_,_EM_2972_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_2973_XYZ_:g.1049_1050ins_EM_4586_XYZ_"))
                .body("[2].'originalVariantQuery'", containsString("_EM_2973_XYZ_,1049,764,NA,_EM_4586_XYZ_"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/p%5CnfIqmmb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7801_XYZ_")
                .get(baseUrlOfSut + "/annotation/genomic/dz%5CLeu2yb?" + 
                    "isoformOverrideSource=btrkMUhfG9&" + 
                    "token=_EM_7798_XYZ_&" + 
                    "fields=_EM_7799_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/%5CbVDr9MD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/%5BEO_B170PXY_%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/j%5C15")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/c9fn_fZ09%5C?" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_24286_XYZ_%22%3A%22_EM_24282_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_24213_XYZ_%22%3A%22_EM_24283_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_24209_XYZ_%22%3A%22rwiFCF%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_24211_XYZ_%22%3A%22_EM_24212_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22%22%3A%22P%22%0A++++++++++++++++++++%7D&" + 
                    "fields=_EM_30975_XYZ_&fields=LUj_L&fields=Rw9&fields=uwhdbax")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/_EM_32033_XY%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/V%5Co6jIcLQ5?isoformOverrideSource=uniprot")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/%5EEM_12881_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/sQMLT%5CUcbChjI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/c3%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/a5I1%5CXNt3yU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/_EM%60992%5DXY%5CU?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22UU_xN%22%3A%22VgwuKJATyD%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22QYj%22%3A%22ry6P%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22c5p%22%3A%22RUWL%22%0A++++++++++++++++++++%7D&" + 
                    "fields=Hw74lvS1&fields=VgwuKJATyD&fields=ChqBRZdSyu&fields=vrv&fields=heViDG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/S%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=_EM_59_XYZ_&" + 
                    "EMextraParam123=_EM_60_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_59_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_81_XYZ_")
                .get(baseUrlOfSut + "/xrefs/_EM_79_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_79_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/summary/Xq?" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4115_XYZ_")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=_EM_4113_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_4114_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [\"U\\UDUJLrcjUcgUBxBT\", \"U\\\\UDUJLrcjUcgUBxBT\", \"7f<SPUs\", \"Hu0_XWXSY\"] ")
                .post(baseUrlOfSut + "/mutation_assessor")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental?EMextraParam123=_EM_3465_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_88_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_86_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"{\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"AjKbz9Ve[\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=_EM_4967_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/6S8PJoHUo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: 6S8PJoHUo"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/_EM_27_XYZ_?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/dQc8Q?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=p.&" + 
                    "limit=-589269942")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/725?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_6_XYZ_?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_6_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id _EM_39_XYZ_: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_56_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_55_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/_EM_655_XYZ_?" + 
                    "token=pEwI17aje_&" + 
                    "fields=_EM_656_XYZ_&fields=HhnQ&fields=_EM_657_XYZ_&fields=_EM_658_XYZ_&fields=_EM_659_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/my_variant_info/variant/del")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/_EM_67_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_61_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_61_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1205_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10311_XYZ_\", " + 
                    " \"start\": 751, " + 
                    " \"end\": 724, " + 
                    " \"referenceAllele\": \"_EM_1193_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_10312_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"gfDWsvDypUaPI9\", " + 
                    " \"start\": -130345, " + 
                    " \"end\": -261605, " + 
                    " \"referenceAllele\": \"hzcaPpAu1bQj\", " + 
                    " \"variantAllele\": \"_EM_1197_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \",\", " + 
                    " \"start\": 888, " + 
                    " \"end\": -32018, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_1200_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_10313_XYZ_\", " + 
                    " \"start\": -100663125, " + 
                    " \"end\": 1477, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_1203_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=_EM_1204_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1205_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1192_XYZ_\", " + 
                    " \"start\": 752, " + 
                    " \"end\": 732, " + 
                    " \"referenceAllele\": \"_EM_1193_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1194_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1195_XYZ_\", " + 
                    " \"start\": 727, " + 
                    " \"end\": 539, " + 
                    " \"referenceAllele\": \"_EM_1196_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1197_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1198_XYZ_\", " + 
                    " \"start\": 887, " + 
                    " \"end\": 750, " + 
                    " \"referenceAllele\": \"_EM_1199_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1200_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"]YkZ\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 453, " + 
                    " \"referenceAllele\": \"_EM_1202_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_7091_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3496_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"JilKZ40Ig8_\", " + 
                    " \"start\": 1684, " + 
                    " \"end\": 222, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_6847_XYZ_\", " + 
                    " \"start\": 321, " + 
                    " \"end\": -1448663945, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_8950_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"o_Q1lbo1qv8xSGue\", " + 
                    " \"start\": 977, " + 
                    " \"end\": -134348756, " + 
                    " \"referenceAllele\": \"9\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_3489_XYZ_\", " + 
                    " \"start\": 921, " + 
                    " \"end\": 39, " + 
                    " \"referenceAllele\": \"_EM_3490_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_3491_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"AjS6f83z4dLwjdIr\", " + 
                    " \"start\": -717, " + 
                    " \"end\": -134090300, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"Kp4dxJR23kjvR5\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_6846_XYZ_&" + 
                    "token=&" + 
                    "fields=qhBvyBbFKpzJyth&fields=_EM_8947_XYZ_&fields=xiTV1jqTERH&fields=_EM_6794_XYZ_&fields=_EM_8949_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
