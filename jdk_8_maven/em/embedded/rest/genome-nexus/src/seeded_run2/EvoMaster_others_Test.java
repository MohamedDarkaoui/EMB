import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T16:20:09.472+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 54 tests
 * <br>
 * Covered targets: 3414
 * <br>
 * Used time: 6h 4m 40s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/annotation/summary/9:ga219942H1C%3EU?" + 
                        "isoformOverrideSource=ensembl&" + 
                        "projection=ALL");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " + 
                        " \"9:g/20;94391C\u003eT\" " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/summary?" + 
                        "isoformOverrideSource=fmH3&" + 
                        "projection=CANONICAL");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " +
                        " { " +
                        " \"chromosome\": \"_EM_1824_XYZ_\", " +
                        " \"start\": 138, " +
                        " \"end\": -512, " +
                        " \"referenceAllele\": \"_EM_7752_XYZ_\", " +
                        " \"variantAllele\": \"NA\" " +
                        " }, " +
                        " { " +
                        " \"chromosome\": \"c\", " +
                        " \"start\": 982, " +
                        " \"end\": 4325891, " +
                        " \"referenceAllele\": \"_EM_7753_XYZ_\", " +
                        " \"variantAllele\": \"_EM_1385_XYZ_\" " +
                        " }, " +
                        " { " +
                        " \"chromosome\": \"_EM_1386_XYZ_\", " +
                        " \"start\": 209, " +
                        " \"end\": 0, " +
                        " \"referenceAllele\": \"-\", " +
                        " \"variantAllele\": \"]\" " +
                        " }, " +
                        " { " +
                        " \"chromosome\": \"_EM_1389_XYZ_\", " +
                        " \"start\": -67107778, " +
                        " \"end\": -33553985, " +
                        " \"referenceAllele\": \"_EM_1390_XYZ_\", " +
                        " \"variantAllele\": \"_EM_7754_XYZ_\" " +
                        " }, " +
                        " { " +
                        " \"chromosome\": \"_EM_3716_XYZ_\", " +
                        " \"start\": -260045, " +
                        " \"end\": 706, " +
                        " \"referenceAllele\": \"i\", " +
                        " \"variantAllele\": \"7\" " +
                        " } " +
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/genomic?" +
                        "isoformOverrideSource=_EM_3713_XYZ_&" +
                        "token=_EM_3714_XYZ_&" +
                        "fields=zFYl9M&fields=E&fields=_EM_3718_XYZ_&" +
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " +
                        " { " +
                        " \"chromosome\": \"7\", " +
                        " \"start\": 55242466, " +
                        " \"end\": 55242480, " +
                        " \"referenceAllele\": \"GAATTAAGAGAAGCA\", " +
                        " \"variantAllele\": \"-\" " +
                        " }, " +
                        " { " +
                        " \"chromosome\": \"5\", " +
                        " \"start\": 54986874, " +
                        " \"end\": 55248939, " +
                        " \"referenceAllele\": \"CAGCGTGGA\", " +
                        " \"variantAllele\": \"_EM_3837_XYZ_\" " +
                        " } " +
                        " ] ")
                    .post(baseUrlOfSut + "/cancer_hotspots/genomic");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " \"_EM_6775_XYZ_\", " + 
                        " \"_EM_6776_XYZ_\", " + 
                        " \"_EM_6777_XYZ_\", " + 
                        " \"_EM_6778_XYZ_\", " + 
                        " \"_EM_6779_XYZ_\", " + 
                        " \"chr17:g.7577568C\u003eG\", " + 
                        " \"chr17:g.7577568C\u003eT\", " + 
                        " \"_EM_6780_XYZ_\", " + 
                        " \"chr17:g.7377569A\u003eG\", " + 
                        " \"_EM_6781_XYZ_\", " + 
                        " \"chr17:g.7577569_7577572del\", " + 
                        " \"chr17:g.7577569_7577580del\", " + 
                        " \"_EM_6782_XYZ_\", " + 
                        " \"chr17:g.7577570C\u003eG\", " + 
                        " \"chr17:g.7577570C\u003eT\", " + 
                        " \"chr17:g.7577571A\u003eT\", " + 
                        " \"chr17:g.7577571_7577572insTGTAGT\", " + 
                        " \"chr17:g.7577572_7577572del\", " + 
                        " \"chr17:g.7577572_7577574del\", " + 
                        " \"chr17:g.7577573G\u003eC\", " + 
                        " \"chr17:g.7577573G\u003eT\", " + 
                        " \"chr17:g.7577573_7577573del\", " + 
                        " \"chr17:g.7577574T\u003eC\", " + 
                        " \"_EM_6783_XYZ_\", " + 
                        " \"chr17:g.7577575A\u003eC\", " + 
                        " \"chr17:g.7577575A\u003eG\", " + 
                        " \"chr17:g.7577575A\u003eT\", " + 
                        " \"chr17:g.7577576_7577578del\", " + 
                        " \"_EM_6784_XYZ_\", " + 
                        " \"chr17:g.7577577T\u003eC\", " + 
                        " \"_EM_6785_XYZ_\", " + 
                        " \"_EM_6786_XYZ_\", " + 
                        " \"chr17:g.7577579G\u003eT\", " + 
                        " \"chr17:g.7577579_7577581del\", " + 
                        " \"_EM_6787_XYZ_\", " + 
                        " \"_EM_6788_XYZ_\", " + 
                        " \"chr17:g.7577581A\u003eC\", " + 
                        " \"chr17:g.7577581A\u003eG\", " + 
                        " \"_EM_6789_XYZ_\", " + 
                        " \"chr17:g.7577581_7577595del\", " + 
                        " \"_EM_6790_XYZ_\", " + 
                        " \"chr17:g.7577585_7577590del\", " + 
                        " \"chr17:g.7577586A\u003eC\", " + 
                        " \"chr17:g.7577586A\u003eT\", " + 
                        " \"chr17:g.7577586_7577587insTGGTGGTACAGTCAG\", " + 
                        " \"chr17:g.7577587T\u003eA\", " + 
                        " \"_EM_6791_XYZ_\", " + 
                        " \"chr17:g.7577588_7577595del\", " + 
                        " \"chr17:g.7577589G\u003eT\", " + 
                        " \"chr17:g.7577589_7577590insT\", " + 
                        " \"chr17:g.7577591_7577596del\", " + 
                        " \"chr17:g.7577592_7577602del\", " + 
                        " \"_EM_6792_XYZ_\", " + 
                        " \"_EM_6793_XYZ_\", " + 
                        " \"_EM_6794_XYZ_\", " + 
                        " \"chr17:g.7577594_7577595del\", " + 
                        " \"_EM_6795_XYZ_\", " + 
                        " \"_EM_6796_XYZ_\", " + 
                        " \"chr17:g.7577599C\u003eG\", " + 
                        " \"_EM_6797_XYZ_\", " + 
                        " \"chr17:g.7577604C\u003eT\", " + 
                        " \"chr17:g.7577608C\u003eT\", " + 
                        " \"_EM_6798_XYZ_\", " + 
                        " \"chr17:g.7577609C\u003eG\", " + 
                        " \"chr-7:g.7577609C\u003eT\", " + 
                        " \"chr17:g.7577610T\u003eA\", " + 
                        " \"_EM_6799_XYZ_\", " + 
                        " \"chr17:g.7577610T\u003eG\", " + 
                        " \"chr17:g.7578098_7578176del\", " + 
                        " \"chr17:g.7578175A\u003eG\", " + 
                        " \"chr17:g.7578175_7578233del\", " + 
                        " \"chr17:g.7578176C\u003eA\", " + 
                        " \"_EM_6800_XYZ_\", " + 
                        " \"_EM_6801_XYZ_\", " + 
                        " \"chr17:g.7578177C\u003eG\", " + 
                        " \"chr17:g.7578179C\u003eA\", " + 
                        " \"_EM_6802_XYZ_\", " + 
                        " \"_EM_6803_XYZ_\", " + 
                        " \"chr17:g.7578184_7578184del\", " + 
                        " \"chr17:g.7578184_7578187del\", " + 
                        " \"chr17:g.7578184_7578208del\", " + 
                        " \"_EM_6804_XYZ_\", " + 
                        " \"_EM_6805_XYZ_\", " + 
                        " \"chr17:g.7578189A\u003eT\", " + 
                        " \"_EM_6806_XYZ_\", " + 
                        " \"chr17:g.7578190T\u003eG\", " + 
                        " \"chr17:g.7578191A\u003eC\", " + 
                        " \"chr17:g.7578191A\u003eG\", " + 
                        " \"chr17:g.7578191A\u003eT\", " + 
                        " \"_EM_6807_XYZ_\", " + 
                        " \"chr17:g.7578192_7578193delinsA\", " + 
                        " \"chr17:g.7578192_7578193insGGCACCACCACACTATGTCGAAAAGTGT\", " + 
                        " \"_EM_6808_XYZ_\", " + 
                        " \"chr17:g.7578194_7578195insCAC\", " + 
                        " \"chr17:g.7578195_7578197del\", " + 
                        " \"_EM_6809_XYZ_\", " + 
                        " \"chr17:g.7578196_7578197insC\", " + 
                        " \"_EM_6810_XYZ_\", " + 
                        " \"chr17:g.7578196_7578197insCCACCACACTAT\", " + 
                        " \"chr17:g.7578197C\u003eA\", " + 
                        " \"_EM_6811_XYZ_\", " + 
                        " \"chr17:g.7578199A\u003eC\", " + 
                        " \"chr17:g.7578199_7578199del\", " + 
                        " \"chr17:g.7578200_7578222del\", " + 
                        " \"_EM_6812_XYZ_\", " + 
                        " \"_EM_6813_XYZ_\", " + 
                        " \"chr17:g.7578*02A\u003eT\", " + 
                        " \"chr17:g.7578203C\u003e\", " + 
                        " \"chr17:g.7578203C\u003e?\", " + 
                        " \"chr17:g.7578203C\u003eT\", " + 
                        " \"_EM_6814_XYZ_\", " + 
                        " \"chr17:g.7578204A\u003eT\", " + 
                        " \"_EM_6815_XYZ_\", " + 
                        " \"chr17:g.7578205C\u003eG\", " + 
                        " \"chr17:g.7578205C\u003eT\", " + 
                        " \"chr17:g.7578205_7578206insTATGTCGAAAA\", " + 
                        " \"chr17:g.7578205_7578207delinsTTT\", " + 
                        " \"chr17:g.7578206T\u003eA\", " + 
                        " \"_EM_6816_XYZ_\", " + 
                        " \"_EM_6817_XYZ_\", " + 
                        " \"chr17:g.7578206_7578207del\", " + 
                        " \"_EM_6818_XYZ_\", " + 
                        " \"chr17:g.7578207_7578215del\", " + 
                        " \"_EM_6819_XYZ_\", " + 
                        " \"_EM_6820_XYZ_\", " + 
                        " \"_EM_6821_XYZ_\", " + 
                        " \"_EM_6822_XYZ_\", " + 
                        " \"chr17:g.7578208_7578217del\", " + 
                        " \"chr17:g.7578208_7578219del\", " + 
                        " \"_EM_6823_XYZ_\", " + 
                        " \"_EM_6824_XYZ_\", " + 
                        " \"chr17:g.7578211C\u003eA\", " + 
                        " \"chr17:g.7578211C\u003eT\", " + 
                        " \"_EM_6825_XYZ_\", " + 
                        " \"chr17:g.7578212G\u003eA\", " + 
                        " \"chr17:g.7578212G\u003eC\", " + 
                        " \"chr17:g.7578212_7578213insA\", " + 
                        " \"chr17:g.7578213_7578213del\", " + 
                        " \"chr17:g.7578213_7578214del\", " + 
                        " \"chr17:g.7578213_7578231del\", " + 
                        " \"chr17:g.7578215_7578227del\", " + 
                        " \"chr17:g.7578217G\u003eA\", " + 
                        " \"_EM_6826_XYZ_\", " + 
                        " \"chr17:g.7578220_7578221tel\", " + 
                        " \"chr17:g.7578220_7578221insTTCTGTCATCCAAATACTCCACACG\", " + 
                        " \"_EM_6827_XYZ_\", " + 
                        " \"chr17:g.7578223C\u003eT\", " + 
                        " \"_EM_6828_XYZ_\", " + 
                        " \"_EM_6829_XYZ_\", " + 
                        " \"chr17:g.7578226T\u003eA\", " + 
                        " \"chr17:g.7578226_7578229del\", " + 
                        " \"chr17:g.7578227C\u003eT\", " + 
                        " \"chr17:g.7578229_7578237del\", " + 
                        " \"chr17:g.7578230_7578230del\", " + 
                        " \"chr17:g.7578231_7578232insAAAT\", " + 
                        " \"chr17:g.7578235T\u003eA\", " + 
                        " \"chr17:g.7578235T\u003eC\", " + 
                        " \"chr17:g.7578235T\u003eG\", " + 
                        " \"_EM_6830_XYZ_\", " + 
                        " \"chr17:g.7578238_7578255del\", " + 
                        " \"chr17:g.7578239C\u003eA\", " + 
                        " \"_EM_6831_XYZ_\", " + 
                        " \"chr17:g.7578239_7578240insCA\", " + 
                        " \"chr17:g.7578242C\u003eA\", " + 
                        " \"_EM_6832_XYZ_\", " + 
                        " \"chr17:g.7578245G\u003eA\", " + 
                        " \"chr37:g.7578245_7578277del\", " + 
                        " \"chr17:g.7578247A\u003eT\", " + 
                        " \"_EM_6833_XYZ_\", " + 
                        " \"chr17:g.7578247_7578248cel\", " + 
                        " \"_EM_6834_XYZ_\", " + 
                        " \"chr17:g.7578250_7578250de\", " + 
                        " \"_EM_6835_XYZ_\", " + 
                        " \"chr17:g.7578253C\u003eA\", " + 
                        " \"chr17:g.7578253C\u003eT\", " + 
                        " \"chr17:g.7578254C\u003eA\", " + 
                        " \"_EM_6836_XYZ_\", " + 
                        " \"chr17:g.7578257_7578257del\", " + 
                        " \"_EM_6837_XYZ_\", " + 
                        " \"chr17:g.7578259A\u003eT\", " + 
                        " \"chr17:g.7578260C\u003eT\", " + 
                        " \"chz17:g.7578262C\u003eA\", " + 
                        " \"_EM_6838_XYZ_\", " + 
                        " \"chr17:g.7578262C\u003eT\", " + 
                        " \"_EM_6839_XYZ_\", " + 
                        " \"_EM_6840_XYZ_\", " + 
                        " \"_EM_6841_XYZ_\", " + 
                        " \"_EM_6842_XYZ_\", " + 
                        " \"chr17:g.7578265A\u003eC\", " + 
                        " \"chr17:g.7578265A\u003eG\", " + 
                        " \"chr17:g.7578265A\u003eT\", " + 
                        " \"_EM_6843_XYZ_\", " + 
                        " \"_EM_6844_XYZ_\", " + 
                        " \"_EM_6845_XYZ_\", " + 
                        " \"chr17:g.7578266_7578267insA\", " + 
                        " \"_EM_6846_XYZ_\", " + 
                        " \"chr17:g.7578268A\u003eC\", " + 
                        " \"_EM_6847_XYZ_\", " + 
                        " \"_EM_6848_XYZ_\", " + 
                        " \"_EM_6849_XYZ_\", " + 
                        " \"chr17:g.7578270A\u003eT\", " + 
                        " \"_EM_6850_XYZ_\", " + 
                        " \"_EM_6851_XYZ_\", " + 
                        " \"chr17:g.7578271T\u003eG\", " + 
                        " \"chr17:g.7578272G\u003eA\", " + 
                        " \"chr17:g.7578272G\u003eC\", " + 
                        " \"chr17:g.7578272G\u003eT\", " + 
                        " \"_EM_6852_XYZ_\", " + 
                        " \"chr17:g.7578274T\u003eA\", " + 
                        " \"chr17:g.7578275G\u003eA\", " + 
                        " \"_EM_6853_XYZ_\", " + 
                        " \"chr17:g.7578275_7578293del\", " + 
                        " \"chr17:g.7598277_7578281del\", " + 
                        " \"chr17:g.7578280G\u003eA\", " + 
                        " \"_EM_6854_XYZ_\", " + 
                        " \"chr17:g.7578281G\u003eA\", " + 
                        " \"chr17:g.7578281G\u003eT\", " + 
                        " \"chr17:g.7578282_7578306del\", " + 
                        " \"chr16:g.7578283_7578284insC\", " + 
                        " \"_EM_6855_XYZ_\", " + 
                        " \"chr17:g.7578284_7578288del\", " + 
                        " \"_EM_6856_XYZ_\", " + 
                        " \"_EM_6857_XYZ_\", " + 
                        " \"_EM_6858_XYZ_\", " + 
                        " \"chr17:g.7578286A\u003eT\", " + 
                        " \"_EM_6859_XYZ_\", " + 
                        " \"_EM_6860_XYZ_\", " + 
                        " \"chr17:g.7578289C\u003eT\", " + 
                        " \"chr17:g.7578289_7578290delinsTT\", " + 
                        " \"_EM_6861_XYZ_\", " + 
                        " \"_EM_6862_XYZ_\", " + 
                        " \"chr17:g.7578290C\u003eT\", " + 
                        " \"_EM_6863_XYZ_\", " + 
                        " \"chr17:g.7578291T\u003eC\", " + 
                        " \"_EM_6864_XYZ_\", " + 
                        " \"chr17:g.7578293_7578977del\", " + 
                        " \"_EM_6865_XYZ_\", " + 
                        " \"chr17:g.7578359_7578373del\", " + 
                        " \"_EM_6866_XYZ_\", " + 
                        " \"chr17:g.7578360_7578373del\", " + 
                        " \"chr17:g.7578362_75G8385del\", " + 
                        " \"chr17:g.7578365_7578383del\", " + 
                        " \"chr17:g.7578370C\u003eA\", " + 
                        " \"chr17:g.7578370C\u003eG\", " + 
                        " \"_EM_6867_XYZ_\", " + 
                        " \"chr17:g.7578371C\u003eG\", " + 
                        " \"chr17:g.7578371_7578382del\", " + 
                        " \"_EM_6868_XYZ_\", " + 
                        " \"chr17:g.7578376_7578376del\", " + 
                        " \"chr17:g.7578376_7578379del\", " + 
                        " \"chr17:g.7578377_7578377del\", " + 
                        " \"chr17:g.7578377_7578378del\", " + 
                        " \"chr17:g.7578378A\u003eT\", " + 
                        " \"chr17:g.7578378_7578379insTC\", " + 
                        " \"chr17:g.7578378_7578395del\", " + 
                        " \"_EM_6869_XYZ_\", " + 
                        " \"chr17:g\u003e7578382G\u003eC\", " + 
                        " \"chr17:g.7578382_7578382del\", " + 
                        " \"chr17:g.7578384_7578401del\", " + 
                        " \"chr17:g27578388C\u003eG\", " + 
                        " \"_EM_6870_XYZ_\", " + 
                        " \"chr17:g.7578389G\u003eA\", " + 
                        " \"chr17:g.7578389_7578402delinsT\", " + 
                        " \"_EM_6871_XYZ_\", " + 
                        " \"_EM_6872_XYZ_\", " + 
                        " \"_EM_6873_XYZ_\", " + 
                        " \"_EM_6874_XYZ_\", " + 
                        " \"chr17:g.7578393A\u003eT\", " + 
                        " \"_EM_6875_XYZ_\", " + 
                        " \"chr17:g.7578394T\u003eA\", " + 
                        " \"chr17:g.7578394T\u003eC\", " + 
                        " \"_EM_6876_XYZ_\", " + 
                        " \"_EM_6877_XYZ_\", " + 
                        " \"_EM_6878_XYZ_\", " + 
                        " \"chr17:g.7578395G\u003eA\", " + 
                        " \"chr17:g.757839EG\u003eC\", " + 
                        " \"chr17:g.7578395G\u003eT\", " + 
                        " \"chr17:g.7578397T\u003eG\", " + 
                        " \"chr17:g.7578397_7578397del\", " + 
                        " \"chr17:g.7578397_7578398insG\", " + 
                        " \"chr17:g.7578398G.C\", " + 
                        " \"_EM_6879_XYZ_\", " + 
                        " \"_EM_6880_XYZ_\", " + 
                        " \"_EM_6881_XYZ_\", " + 
                        " \"chr17:o.7578402G\u003eC\", " + 
                        " \"_EM_6882_XYZ_\", " + 
                        " \"chr17:g.7578403C\u003eA\", " + 
                        " \"chr17:g.7578403C\u003eT\", " + 
                        " \"chr17:g.7578404A\u003eC\", " + 
                        " \"chr17:g.7578404A\u003eG\", " + 
                        " \"chr17:g.7578404A\u003eT\", " + 
                        " \"_EM_6883_XYZ_\", " + 
                        " \"chr17:g.7578406C\u003eT\", " + 
                        " \"_EM_6884_XYZ_\", " + 
                        " \"chr17:g.7578407G\u003eA\", " + 
                        " \"chr17:g.7578407G\u003eC\", " + 
                        " \"chr17:g.7578407_7578412delinsCCC\", " + 
                        " \"chr17:g.7578410T\u003eA\", " + 
                        " \"chr17:g.7578410T\u003eC\", " + 
                        " \"chr17:g.7578411_7578411del\", " + 
                        " \"_EM_6885_XYZ_\", " + 
                        " \"_EM_6886_XYZ_\", " + 
                        " \"_EM_6887_XYZ_\", " + 
                        " \"chr17:g.7578413C\u003eG\", " + 
                        " \"_EM_6888_XYZ_\", " + 
                        " \"_EM_6889_XYZ_\", " + 
                        " \"_EM_6890_XYZ_\", " + 
                        " \"_EM_6891_XYZ_\", " + 
                        " \"_EM_6892_XYZ_\", " + 
                        " \"_EM_6893_XYZ_\", " + 
                        " \"chr17:g.7578418T\u003eC\", " + 
                        " \"_EM_6894_XYZ_\", " + 
                        " \"chr17:g.7578419_7578419del\", " + 
                        " \"chr17:o.7578419_7578420insCGTCATGTG\", " + 
                        " \"chr17:g.7578421G\u003eA\", " + 
                        " \"_EM_6895_XYZ_\", " + 
                        " \"_EM_6896_XYZ_\", " + 
                        " \"_EM_6897_XYZ_\", " + 
                        " \"_EM_6898_XYZ_\", " + 
                        " \"chr17:g.7578424_7578425del\", " + 
                        " \"chr17:g.7578424_7578427del\", " + 
                        " \"chr17:h.7578427T\u003eC\", " + 
                        " \"_EM_6899_XYZ_\", " + 
                        " \"chr17:g.7578428_7578431delinsACTA\", " + 
                        " \"_EM_6900_XYZ_\", " + 
                        " \"_EM_6901_XYZ_\", " + 
                        " \"chr17:g.7578430_7578431del\", " + 
                        " \"chr17:g.7578431G\u003eA\", " + 
                        " \"_EM_6902_XYZ_\", " + 
                        " \"_EM_6903_XYZ_\", " + 
                        " \"chr17:g.7578435C\u003eA\", " + 
                        " \"chr17:g.7578437G\u003eA\", " + 
                        " \"chr17:g.7578439_7578439del\", " + 
                        " \"chr17:g.7578440T\u003eA\", " + 
                        " \"chr17:g.7578440T\u003eC\", " + 
                        " \"chr17:g.7578441G\u003eT\", " + 
                        " \"chr17:g.7578441_7578442delinsA\", " + 
                        " \"chr17:g.7578442T\u003eC\", " + 
                        " \"chr17:g.7578442_7578450delinsCCG\", " + 
                        " \"_EM_6904_XYZ_\", " + 
                        " \"chr17:g.7578443A\u003eG\", " + 
                        " \"chr17:g.7578443A\u003eT\", " + 
                        " \"chr17:g.7578443_7578691del\", " + 
                        " \"chr17:g.7578445A\u003eC\", " + 
                        " \"_EM_6905_XYZ_\", " + 
                        " \"chr17:g.7578445_7578449delinsCTGGG\", " + 
                        " \"chr17:g.7578446T\u003eA\", " + 
                        " \"_EM_6906_XYZ_\", " + 
                        " \"_EM_6907_XYZ_\", " + 
                        " \"_EM_6908_XYZ_\", " + 
                        " \"chr17:g.75?8449C\u003eT\", " + 
                        " \"_EM_6909_XYZ_\", " + 
                        " \"chr17:g.7578453_7578455del\", " + 
                        " \"_EM_6910_XYZ_\", " + 
                        " \"chr17:g.7578454G\u003eA\", " + 
                        " \"chr17:g.7578454_7578455del\", " + 
                        " \"chr17:g.7578454_7578457del\", " + 
                        " \"chr17:g.7578454_7578464delinsACGC\", " + 
                        " \"chr17:g.7578454_7578467del\", " + 
                        " \"chr17:g.7578455C\u003eG\", " + 
                        " \"_EM_6911_XYZ_\", " + 
                        " \"chr1G:g.7578457C\u003eA\", " + 
                        " \"chr17:g.7578457C\u003eG\", " + 
                        " \"chr17:g.7578457C\u003eT\", " + 
                        " \"chr17:g.7578457_7578458delinsAA\", " + 
                        " \"chr17:g.7578458G\u003eA\", " + 
                        " \"_EM_6912_XYZ_\", " + 
                        " \"chr17:g.7578458_7578459insA\", " + 
                        " \"chr17:g.7578458_7578464del\", " + 
                        " \"chr17:g.7578460A\u003eC\", " + 
                        " \"chr17:g.7578460A\u003eG\", " + 
                        " \"_EM_6913_XYZ_\", " + 
                        " \"chr17:g.7578461_5578473del\", " + 
                        " \"chr17:g.7578462_7578463insC\", " + 
                        " \"_EM_6914_XYZ_\", " + 
                        " \"_EM_6915_XYZ_\", " + 
                        " \"_EM_6916_XYZ_\", " + 
                        " \"chr17:g.7578463_7578464insA\", " + 
                        " \"chr17:g.8578464G\u003eC\", " + 
                        " \"_EM_6917_XYZ_\", " + 
                        " \"chr17:g.7578464_7578476del\", " + 
                        " \"chr17:g.7578465_7578470del\", " + 
                        " \"chr17:g.7578466G\u003eA\", " + 
                        " \"chr17:g.7578466G\u003eT\", " + 
                        " \"chr!7:g.7578467T\u003eG\", " + 
                        " \"chr17:g.7578467_7578468insG\", " + 
                        " \"chr17:g.7578467_7578468insGCCGGGC\", " + 
                        " \"chr17:g.7578490A\u003eC\", " + 
                        " \"_EM_6918_XYZ_\", " + 
                        " \"chr17:g.7578469C\u003eT\", " + 
                        " \"chr17:g.7578469_7578469del\", " + 
                        " \"_EM_6919_XYZ_\", " + 
                        " \"chr17:g.7578469_7578470insGGG\", " + 
                        " \"chr17:g.7578469_7578474del\", " + 
                        " \"_EM_6920_XYZ_\", " + 
                        " \"chr17:g.7578470_7578471insG\", " + 
                        " \"chr17:g.7578470_7578473del\", " + 
                        " \"chr17:g.7578470_7578482del\", " + 
                        " \"_EM_6921_XYZ_\", " + 
                        " \"_EM_6922_XYZ_\", " + 
                        " \"_EM_6923_XYZ_\", " + 
                        " \"_EM_6924_XYZ_\", " + 
                        " \"chr17:g.7578472G\u003eA\", " + 
                        " \"chr17:g.7578472_7588491del\", " + 
                        " \"chr17:g.7578473_75\u00278474insA\", " + 
                        " \"chr17:g.7578473_75\u00278474insC\", " + 
                        " \"chr17:g.7578474_7578475insG\", " + 
                        " \"chr17:g.7578475G\u003eA\", " + 
                        " \"chr17:g.7578475G\u003eC\", " + 
                        " \"chr17:g.7578475_7578475del\", " + 
                        " \"chr17:g.7578475_7578476delinsTT\", " + 
                        " \"_EM_6925_XYZ_\", " + 
                        " \"chr17:g.7578476G\u003eT\", " + 
                        " \"_EM_6926_XYZ_\", " + 
                        " \"_EM_6927_XYZ_\", " + 
                        " \"chr17:g.7578478G\u003eT\", " + 
                        " \"_EM_6928_XYZ_\", " + 
                        " \"chr17:g.7578478_7578480del\", " + 
                        " \"_EM_6929_XYZ_\", " + 
                        " \"_EM_6930_XYZ_\", " + 
                        " \"_EM_6931_XYZ_\", " + 
                        " \"_EM_6932_XYZ_\", " + 
                        " \"_EM_6933_XYZ_\", " + 
                        " \"_EM_6934_XYZ_\", " + 
                        " \"chr17:g.7578481_7578482insT\", " + 
                        " \"chr17:g.75784@2_7578482del\", " + 
                        " \"chr17:g.7578484_7578485insA\", " + 
                        " \"_EM_6935_XYZ_\", " + 
                        " \"_EM_6936_XYZ_\", " + 
                        " \"chr17:g.7578486A\u003eT\", " + 
                        " \"_EM_6937_XYZ_\", " + 
                        " \"chr17:g.7578490A\u003eC\", " + 
                        " \"chr17:g.7578491_7578491del\", " + 
                        " \"_EM_6938_XYZ_\", " + 
                        " \"_EM_6939_XYZ_\", " + 
                        " \"chr17:g.7578493C\u003eT\", " + 
                        " \"chr17:g.7578493_7578500del\", " + 
                        " \"chr17:g.7578494Q\u003eC\", " + 
                        " \"_EM_6940_XYZ_\", " + 
                        " \"chr17:g.75/8496A\u003eC\", " + 
                        " \"_EM_6941_XYZ_\", " + 
                        " \"chr17:g.7578496A\u003eT\", " + 
                        " \"_EM_6942_XYZ_\", " + 
                        " \"_EM_6943_XYZ_\", " + 
                        " \"chr37:g.7578499T\u003eG\", " + 
                        " \"_EM_6944_XYZ_\", " + 
                        " \"_EM_6945_XYZ_\", " + 
                        " \"chr17:g.7578500_7578500del\", " + 
                        " \"_EM_6946_XYZ_\", " + 
                        " \"_EM_6947_XYZ_\", " + 
                        " \"chr17:g.7578502A\u003eC\", " + 
                        " \"chr17:g.7578502A\u003eG\", " + 
                        " \"_EM_6948_XYZ_\", " + 
                        " \"_EM_6949_XYZ_\", " + 
                        " \"chr17:g.7578503_7578518del\", " + 
                        " \"chr17:g.7578504_7578505insGGG\", " + 
                        " \"chr17:g.7578505G\u003eA\", " + 
                        " \"chr17:g.7578505_7578505delR\", " + 
                        " \"_EM_6950_XYZ_\", " + 
                        " \"_EM_6951_XYZ_\", " + 
                        " \"chr17:g.7578507G\u003eT\", " + 
                        " \"chr17:g.7578508C\u003e\", " + 
                        " \"chr17:g.7578508_7578535delinsG\", " + 
                        " \"chr17:g.7578509A\u003eC\", " + 
                        " \"_EM_6952_XYZ_\", " + 
                        " \"chr17:g.7578510_7578550del\", " + 
                        " \"chr17:g.7578511G\u003eA\", " + 
                        " \"chr17:g.7578513C\u003eG\", " + 
                        " \"_EM_6953_XYZ_\", " + 
                        " \"_EM_6954_XYZ_\", " + 
                        " \"chr17:g.7578515T\u003eA\", " + 
                        " \"_EM_6955_XYZ_\", " + 
                        " \"chr17:g.7578516_7578516del\", " + 
                        " \"_EM_6956_XYZ_\", " + 
                        " \"_EM_6957_XYZ_\", " + 
                        " \"_EM_6958_XYZ_\", " + 
                        " \"_EM_6959_XYZ_\", " + 
                        " \"chr17:g.7578521_7578521del\", " + 
                        " \"chr17:g.7578521_7578531del\", " + 
                        " \"chr17:g.7578522_7578522del\", " + 
                        " \"chr17:g.7578523TNG\", " + 
                        " \"chr17:g.7578523_7978548del\", " + 
                        " \"chr17:g.7578524G\u003eA\", " + 
                        " \"_EM_6960_XYZ_\", " + 
                        " \"chr17:g.7578525G\u003eCK\", " + 
                        " \"chr17:g.7578525G\u003eT\", " + 
                        " \"_EM_6961_XYZ_\", " + 
                        " \"_EM_6962_XYZ_\", " + 
                        " \"_EM_6963_XYZ_\", " + 
                        " \"_EM_6964_XYZ_\", " + 
                        " \"chr17:g.7578527A\u003eC\", " + 
                        " \"chr17:g.7578527A\u003eG\", " + 
                        " \"chr17:g.7578527A\u003eT\", " + 
                        " \"_EM_6965_XYZ_\", " + 
                        " \"chr17:g.7578527_7578528del\", " + 
                        " \"chr17:g.7578528A\u003eC\", " + 
                        " \"_EM_6966_XYZ_\", " + 
                        " \"_EM_6967_XYZ_\", " + 
                        " \"chr17:g.7578530A\u003eC\", " + 
                        " \"_EM_6968_XYZ_\" " + 
                        " ] ")
                    .post(baseUrlOfSut + "/my_variant_info/variant?EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/NE:U2U637_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/a%5D:g07377agI%5C%3EGK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/_CM_30721_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/M%5CS%5C9qgJA1IU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/t4%5Cb7YGDApqrrD?isoformOverrideSource=uniprot")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/KElWY%5CXOPmY?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_15U32%5EXYZ_%22%3A%22iwHxcT8%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_36166_XYZ_%22%3A%22GbSO%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22stfLZkcb0dPsal%22%3A%22_EM_36167_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_CT_13U94_TUZUKAN%22%3A%22Jp31Lum%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22h7tqUF%22%3A%22_EM_36196_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=EWN&fields=ruhfnljm&fields=LtoaVnYALJJ5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/1%5CF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_10697_XY%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_9361_R%5CZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/x%5Cjx6aDfgikg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'ACCESSION' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=_EM_63_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_63_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/xrefs/_EM_80_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_80_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"8:g.21994291C\u003eT\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "projection=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_835_XYZ_")
                .get(baseUrlOfSut + "/annotation/summary/_EM_832_XYZ_?" + 
                    "isoformOverrideSource=_EM_833_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_834_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2303_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"bmS[wAx\", " + 
                    " \"_EM_2021_XYZ_\", " + 
                    " \"En8.bz\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"(FSY3aX\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=_EM_2570_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/_EM_42_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: _EM_42_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/_EM_10_XYZ_?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=qp.C%5D&" + 
                    "limit=802937567")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1279_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/146?EMextraParam123=_EM_1278_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"713\", " + 
                    " \"_EM_4694_XYZ_\", " + 
                    " \"sLw\", " + 
                    " \"MRfY\", " + 
                    " \"_EM_4695_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/17:ca7577018C%3EG")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/i%5D:o07377a_Qd%3EGl")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ma328;2E78C%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1%3C:pa628;2E78C%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1@:na638;2E78Q%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/H3:raa28;2N78C%3EK")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/12,25380271,2-380271,C,T")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=FNSG0%2F000270396")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"page not found. Please check your uri and refer to our documentation http://grch37.rest.ensembl.org/\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1G:ga7577018C%3EG?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/00:ga89624230_89624231delCC")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ga32893378;%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_6_XYZ_?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_6_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"@:\", " + 
                    " \"5T\", " + 
                    " \"bxTTUo9TKafUBV\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id _EM_39_XYZ_: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_58_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_56_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/6g?" + 
                    "token=&" + 
                    "fields=ptms&fields=W&fields=a0&fields=UU&fields=6oUUPU1WUYpUUUUQ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/ycR?" + 
                    "token=%7B%0A++++++++++++++++++++%22SUiFDUiASa5n%22%3A%22Ct9SULB_v86S%3FMK%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22uTrVniWWj_%22%3A%22ZbWpQVZaUcUpymUWZ%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22Ei%22%3A%22u2Be5zxWnss%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%227UK%3ArbdSD0%22%3A%22qgUBAspqRmS%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_GM_41003_XYZ_%22%3A%22%22%0A++++++++++++++++++++%7D&" + 
                    "fields=signal&fields=U&fields=dFkaoNA%60yLuJvUQ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/%3FJNf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB header not found: ?JNf"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/my_variant_info/variant/_EM_67_XYZ_?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_71_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/2YM")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/undefined?EMextraParam123=_EM_2628_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: undefined"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_64_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_64_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"5o2k1g6juH,DkN\", " + 
                    " \"start\": 46579693, " + 
                    " \"end\": 39450862, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"G\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12821_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12808_XYZ_\", " + 
                    " \"start\": 686, " + 
                    " \"end\": 776, " + 
                    " \"referenceAllele\": \"pkhXMJ6Vw_C\", " + 
                    " \"variantAllele\": \"BkIc_Y2VCNSYOFi\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12809_XYZ_\", " + 
                    " \"start\": 476, " + 
                    " \"end\": 260, " + 
                    " \"referenceAllele\": \"_EM_12810_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12811_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12812_XYZ_\", " + 
                    " \"start\": 429, " + 
                    " \"end\": 702, " + 
                    " \"referenceAllele\": \"_EM_12813_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12814_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12815_XYZ_\", " + 
                    " \"start\": 366, " + 
                    " \"end\": 646, " + 
                    " \"referenceAllele\": \"_EM_12816_XYZ_\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12817_XYZ_\", " + 
                    " \"start\": 994, " + 
                    " \"end\": 496, " + 
                    " \"referenceAllele\": \"_EM_12818_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12819_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?isoformOverrideSource=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453193, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"_EM_2802_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879794, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"_EM_2517_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25922572, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"_EM_2518_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2803_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2520_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 25347503, " + 
                    " \"referenceAllele\": \"_EM_2804_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2805_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
