import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T16:20:09.511+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 137 tests
 * <br>
 * Covered targets: 5815
 * <br>
 * Used time: 6h 4m 40s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/annotation/summary/9:ga219942H1C%3EU?" + 
                        "isoformOverrideSource=ensembl&" + 
                        "projection=ALL");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " + 
                        " \"9:g/20;94391C\u003eT\" " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/summary?" + 
                        "isoformOverrideSource=fmH3&" + 
                        "projection=CANONICAL");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"_EM_1824_XYZ_\", " + 
                        " \"start\": 138, " + 
                        " \"end\": -512, " + 
                        " \"referenceAllele\": \"_EM_7752_XYZ_\", " + 
                        " \"variantAllele\": \"NA\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"c\", " + 
                        " \"start\": 982, " + 
                        " \"end\": 4325891, " + 
                        " \"referenceAllele\": \"_EM_7753_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_1385_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_1386_XYZ_\", " + 
                        " \"start\": 209, " + 
                        " \"end\": 0, " + 
                        " \"referenceAllele\": \"-\", " + 
                        " \"variantAllele\": \"]\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_1389_XYZ_\", " + 
                        " \"start\": -67107778, " + 
                        " \"end\": -33553985, " + 
                        " \"referenceAllele\": \"_EM_1390_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_7754_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_3716_XYZ_\", " + 
                        " \"start\": -260045, " + 
                        " \"end\": 706, " + 
                        " \"referenceAllele\": \"i\", " + 
                        " \"variantAllele\": \"7\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/genomic?" + 
                        "isoformOverrideSource=_EM_3713_XYZ_&" + 
                        "token=_EM_3714_XYZ_&" + 
                        "fields=zFYl9M&fields=E&fields=_EM_3718_XYZ_&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"7\", " + 
                        " \"start\": 55242466, " + 
                        " \"end\": 55242480, " + 
                        " \"referenceAllele\": \"GAATTAAGAGAAGCA\", " + 
                        " \"variantAllele\": \"-\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"5\", " + 
                        " \"start\": 54986874, " + 
                        " \"end\": 55248939, " + 
                        " \"referenceAllele\": \"CAGCGTGGA\", " + 
                        " \"variantAllele\": \"_EM_3837_XYZ_\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/cancer_hotspots/genomic");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " \"_EM_6775_XYZ_\", " + 
                        " \"_EM_6776_XYZ_\", " + 
                        " \"_EM_6777_XYZ_\", " + 
                        " \"_EM_6778_XYZ_\", " + 
                        " \"_EM_6779_XYZ_\", " + 
                        " \"chr17:g.7577568C\u003eG\", " + 
                        " \"chr17:g.7577568C\u003eT\", " + 
                        " \"_EM_6780_XYZ_\", " + 
                        " \"chr17:g.7377569A\u003eG\", " + 
                        " \"_EM_6781_XYZ_\", " + 
                        " \"chr17:g.7577569_7577572del\", " + 
                        " \"chr17:g.7577569_7577580del\", " + 
                        " \"_EM_6782_XYZ_\", " + 
                        " \"chr17:g.7577570C\u003eG\", " + 
                        " \"chr17:g.7577570C\u003eT\", " + 
                        " \"chr17:g.7577571A\u003eT\", " + 
                        " \"chr17:g.7577571_7577572insTGTAGT\", " + 
                        " \"chr17:g.7577572_7577572del\", " + 
                        " \"chr17:g.7577572_7577574del\", " + 
                        " \"chr17:g.7577573G\u003eC\", " + 
                        " \"chr17:g.7577573G\u003eT\", " + 
                        " \"chr17:g.7577573_7577573del\", " + 
                        " \"chr17:g.7577574T\u003eC\", " + 
                        " \"_EM_6783_XYZ_\", " + 
                        " \"chr17:g.7577575A\u003eC\", " + 
                        " \"chr17:g.7577575A\u003eG\", " + 
                        " \"chr17:g.7577575A\u003eT\", " + 
                        " \"chr17:g.7577576_7577578del\", " + 
                        " \"_EM_6784_XYZ_\", " + 
                        " \"chr17:g.7577577T\u003eC\", " + 
                        " \"_EM_6785_XYZ_\", " + 
                        " \"_EM_6786_XYZ_\", " + 
                        " \"chr17:g.7577579G\u003eT\", " + 
                        " \"chr17:g.7577579_7577581del\", " + 
                        " \"_EM_6787_XYZ_\", " + 
                        " \"_EM_6788_XYZ_\", " + 
                        " \"chr17:g.7577581A\u003eC\", " + 
                        " \"chr17:g.7577581A\u003eG\", " + 
                        " \"_EM_6789_XYZ_\", " + 
                        " \"chr17:g.7577581_7577595del\", " + 
                        " \"_EM_6790_XYZ_\", " + 
                        " \"chr17:g.7577585_7577590del\", " + 
                        " \"chr17:g.7577586A\u003eC\", " + 
                        " \"chr17:g.7577586A\u003eT\", " + 
                        " \"chr17:g.7577586_7577587insTGGTGGTACAGTCAG\", " + 
                        " \"chr17:g.7577587T\u003eA\", " + 
                        " \"_EM_6791_XYZ_\", " + 
                        " \"chr17:g.7577588_7577595del\", " + 
                        " \"chr17:g.7577589G\u003eT\", " + 
                        " \"chr17:g.7577589_7577590insT\", " + 
                        " \"chr17:g.7577591_7577596del\", " + 
                        " \"chr17:g.7577592_7577602del\", " + 
                        " \"_EM_6792_XYZ_\", " + 
                        " \"_EM_6793_XYZ_\", " + 
                        " \"_EM_6794_XYZ_\", " + 
                        " \"chr17:g.7577594_7577595del\", " + 
                        " \"_EM_6795_XYZ_\", " + 
                        " \"_EM_6796_XYZ_\", " + 
                        " \"chr17:g.7577599C\u003eG\", " + 
                        " \"_EM_6797_XYZ_\", " + 
                        " \"chr17:g.7577604C\u003eT\", " + 
                        " \"chr17:g.7577608C\u003eT\", " + 
                        " \"_EM_6798_XYZ_\", " + 
                        " \"chr17:g.7577609C\u003eG\", " + 
                        " \"chr-7:g.7577609C\u003eT\", " + 
                        " \"chr17:g.7577610T\u003eA\", " + 
                        " \"_EM_6799_XYZ_\", " + 
                        " \"chr17:g.7577610T\u003eG\", " + 
                        " \"chr17:g.7578098_7578176del\", " + 
                        " \"chr17:g.7578175A\u003eG\", " + 
                        " \"chr17:g.7578175_7578233del\", " + 
                        " \"chr17:g.7578176C\u003eA\", " + 
                        " \"_EM_6800_XYZ_\", " + 
                        " \"_EM_6801_XYZ_\", " + 
                        " \"chr17:g.7578177C\u003eG\", " + 
                        " \"chr17:g.7578179C\u003eA\", " + 
                        " \"_EM_6802_XYZ_\", " + 
                        " \"_EM_6803_XYZ_\", " + 
                        " \"chr17:g.7578184_7578184del\", " + 
                        " \"chr17:g.7578184_7578187del\", " + 
                        " \"chr17:g.7578184_7578208del\", " + 
                        " \"_EM_6804_XYZ_\", " + 
                        " \"_EM_6805_XYZ_\", " + 
                        " \"chr17:g.7578189A\u003eT\", " + 
                        " \"_EM_6806_XYZ_\", " + 
                        " \"chr17:g.7578190T\u003eG\", " + 
                        " \"chr17:g.7578191A\u003eC\", " + 
                        " \"chr17:g.7578191A\u003eG\", " + 
                        " \"chr17:g.7578191A\u003eT\", " + 
                        " \"_EM_6807_XYZ_\", " + 
                        " \"chr17:g.7578192_7578193delinsA\", " + 
                        " \"chr17:g.7578192_7578193insGGCACCACCACACTATGTCGAAAAGTGT\", " + 
                        " \"_EM_6808_XYZ_\", " + 
                        " \"chr17:g.7578194_7578195insCAC\", " + 
                        " \"chr17:g.7578195_7578197del\", " + 
                        " \"_EM_6809_XYZ_\", " + 
                        " \"chr17:g.7578196_7578197insC\", " + 
                        " \"_EM_6810_XYZ_\", " + 
                        " \"chr17:g.7578196_7578197insCCACCACACTAT\", " + 
                        " \"chr17:g.7578197C\u003eA\", " + 
                        " \"_EM_6811_XYZ_\", " + 
                        " \"chr17:g.7578199A\u003eC\", " + 
                        " \"chr17:g.7578199_7578199del\", " + 
                        " \"chr17:g.7578200_7578222del\", " + 
                        " \"_EM_6812_XYZ_\", " + 
                        " \"_EM_6813_XYZ_\", " + 
                        " \"chr17:g.7578*02A\u003eT\", " + 
                        " \"chr17:g.7578203C\u003e\", " + 
                        " \"chr17:g.7578203C\u003e?\", " + 
                        " \"chr17:g.7578203C\u003eT\", " + 
                        " \"_EM_6814_XYZ_\", " + 
                        " \"chr17:g.7578204A\u003eT\", " + 
                        " \"_EM_6815_XYZ_\", " + 
                        " \"chr17:g.7578205C\u003eG\", " + 
                        " \"chr17:g.7578205C\u003eT\", " + 
                        " \"chr17:g.7578205_7578206insTATGTCGAAAA\", " + 
                        " \"chr17:g.7578205_7578207delinsTTT\", " + 
                        " \"chr17:g.7578206T\u003eA\", " + 
                        " \"_EM_6816_XYZ_\", " + 
                        " \"_EM_6817_XYZ_\", " + 
                        " \"chr17:g.7578206_7578207del\", " + 
                        " \"_EM_6818_XYZ_\", " + 
                        " \"chr17:g.7578207_7578215del\", " + 
                        " \"_EM_6819_XYZ_\", " + 
                        " \"_EM_6820_XYZ_\", " + 
                        " \"_EM_6821_XYZ_\", " + 
                        " \"_EM_6822_XYZ_\", " + 
                        " \"chr17:g.7578208_7578217del\", " + 
                        " \"chr17:g.7578208_7578219del\", " + 
                        " \"_EM_6823_XYZ_\", " + 
                        " \"_EM_6824_XYZ_\", " + 
                        " \"chr17:g.7578211C\u003eA\", " + 
                        " \"chr17:g.7578211C\u003eT\", " + 
                        " \"_EM_6825_XYZ_\", " + 
                        " \"chr17:g.7578212G\u003eA\", " + 
                        " \"chr17:g.7578212G\u003eC\", " + 
                        " \"chr17:g.7578212_7578213insA\", " + 
                        " \"chr17:g.7578213_7578213del\", " + 
                        " \"chr17:g.7578213_7578214del\", " + 
                        " \"chr17:g.7578213_7578231del\", " + 
                        " \"chr17:g.7578215_7578227del\", " + 
                        " \"chr17:g.7578217G\u003eA\", " + 
                        " \"_EM_6826_XYZ_\", " + 
                        " \"chr17:g.7578220_7578221tel\", " + 
                        " \"chr17:g.7578220_7578221insTTCTGTCATCCAAATACTCCACACG\", " + 
                        " \"_EM_6827_XYZ_\", " + 
                        " \"chr17:g.7578223C\u003eT\", " + 
                        " \"_EM_6828_XYZ_\", " + 
                        " \"_EM_6829_XYZ_\", " + 
                        " \"chr17:g.7578226T\u003eA\", " + 
                        " \"chr17:g.7578226_7578229del\", " + 
                        " \"chr17:g.7578227C\u003eT\", " + 
                        " \"chr17:g.7578229_7578237del\", " + 
                        " \"chr17:g.7578230_7578230del\", " + 
                        " \"chr17:g.7578231_7578232insAAAT\", " + 
                        " \"chr17:g.7578235T\u003eA\", " + 
                        " \"chr17:g.7578235T\u003eC\", " + 
                        " \"chr17:g.7578235T\u003eG\", " + 
                        " \"_EM_6830_XYZ_\", " + 
                        " \"chr17:g.7578238_7578255del\", " + 
                        " \"chr17:g.7578239C\u003eA\", " + 
                        " \"_EM_6831_XYZ_\", " + 
                        " \"chr17:g.7578239_7578240insCA\", " + 
                        " \"chr17:g.7578242C\u003eA\", " + 
                        " \"_EM_6832_XYZ_\", " + 
                        " \"chr17:g.7578245G\u003eA\", " + 
                        " \"chr37:g.7578245_7578277del\", " + 
                        " \"chr17:g.7578247A\u003eT\", " + 
                        " \"_EM_6833_XYZ_\", " + 
                        " \"chr17:g.7578247_7578248cel\", " + 
                        " \"_EM_6834_XYZ_\", " + 
                        " \"chr17:g.7578250_7578250de\", " + 
                        " \"_EM_6835_XYZ_\", " + 
                        " \"chr17:g.7578253C\u003eA\", " + 
                        " \"chr17:g.7578253C\u003eT\", " + 
                        " \"chr17:g.7578254C\u003eA\", " + 
                        " \"_EM_6836_XYZ_\", " + 
                        " \"chr17:g.7578257_7578257del\", " + 
                        " \"_EM_6837_XYZ_\", " + 
                        " \"chr17:g.7578259A\u003eT\", " + 
                        " \"chr17:g.7578260C\u003eT\", " + 
                        " \"chz17:g.7578262C\u003eA\", " + 
                        " \"_EM_6838_XYZ_\", " + 
                        " \"chr17:g.7578262C\u003eT\", " + 
                        " \"_EM_6839_XYZ_\", " + 
                        " \"_EM_6840_XYZ_\", " + 
                        " \"_EM_6841_XYZ_\", " + 
                        " \"_EM_6842_XYZ_\", " + 
                        " \"chr17:g.7578265A\u003eC\", " + 
                        " \"chr17:g.7578265A\u003eG\", " + 
                        " \"chr17:g.7578265A\u003eT\", " + 
                        " \"_EM_6843_XYZ_\", " + 
                        " \"_EM_6844_XYZ_\", " + 
                        " \"_EM_6845_XYZ_\", " + 
                        " \"chr17:g.7578266_7578267insA\", " + 
                        " \"_EM_6846_XYZ_\", " + 
                        " \"chr17:g.7578268A\u003eC\", " + 
                        " \"_EM_6847_XYZ_\", " + 
                        " \"_EM_6848_XYZ_\", " + 
                        " \"_EM_6849_XYZ_\", " + 
                        " \"chr17:g.7578270A\u003eT\", " + 
                        " \"_EM_6850_XYZ_\", " + 
                        " \"_EM_6851_XYZ_\", " + 
                        " \"chr17:g.7578271T\u003eG\", " + 
                        " \"chr17:g.7578272G\u003eA\", " + 
                        " \"chr17:g.7578272G\u003eC\", " + 
                        " \"chr17:g.7578272G\u003eT\", " + 
                        " \"_EM_6852_XYZ_\", " + 
                        " \"chr17:g.7578274T\u003eA\", " + 
                        " \"chr17:g.7578275G\u003eA\", " + 
                        " \"_EM_6853_XYZ_\", " + 
                        " \"chr17:g.7578275_7578293del\", " + 
                        " \"chr17:g.7598277_7578281del\", " + 
                        " \"chr17:g.7578280G\u003eA\", " + 
                        " \"_EM_6854_XYZ_\", " + 
                        " \"chr17:g.7578281G\u003eA\", " + 
                        " \"chr17:g.7578281G\u003eT\", " + 
                        " \"chr17:g.7578282_7578306del\", " + 
                        " \"chr16:g.7578283_7578284insC\", " + 
                        " \"_EM_6855_XYZ_\", " + 
                        " \"chr17:g.7578284_7578288del\", " + 
                        " \"_EM_6856_XYZ_\", " + 
                        " \"_EM_6857_XYZ_\", " + 
                        " \"_EM_6858_XYZ_\", " + 
                        " \"chr17:g.7578286A\u003eT\", " + 
                        " \"_EM_6859_XYZ_\", " + 
                        " \"_EM_6860_XYZ_\", " + 
                        " \"chr17:g.7578289C\u003eT\", " + 
                        " \"chr17:g.7578289_7578290delinsTT\", " + 
                        " \"_EM_6861_XYZ_\", " + 
                        " \"_EM_6862_XYZ_\", " + 
                        " \"chr17:g.7578290C\u003eT\", " + 
                        " \"_EM_6863_XYZ_\", " + 
                        " \"chr17:g.7578291T\u003eC\", " + 
                        " \"_EM_6864_XYZ_\", " + 
                        " \"chr17:g.7578293_7578977del\", " + 
                        " \"_EM_6865_XYZ_\", " + 
                        " \"chr17:g.7578359_7578373del\", " + 
                        " \"_EM_6866_XYZ_\", " + 
                        " \"chr17:g.7578360_7578373del\", " + 
                        " \"chr17:g.7578362_75G8385del\", " + 
                        " \"chr17:g.7578365_7578383del\", " + 
                        " \"chr17:g.7578370C\u003eA\", " + 
                        " \"chr17:g.7578370C\u003eG\", " + 
                        " \"_EM_6867_XYZ_\", " + 
                        " \"chr17:g.7578371C\u003eG\", " + 
                        " \"chr17:g.7578371_7578382del\", " + 
                        " \"_EM_6868_XYZ_\", " + 
                        " \"chr17:g.7578376_7578376del\", " + 
                        " \"chr17:g.7578376_7578379del\", " + 
                        " \"chr17:g.7578377_7578377del\", " + 
                        " \"chr17:g.7578377_7578378del\", " + 
                        " \"chr17:g.7578378A\u003eT\", " + 
                        " \"chr17:g.7578378_7578379insTC\", " + 
                        " \"chr17:g.7578378_7578395del\", " + 
                        " \"_EM_6869_XYZ_\", " + 
                        " \"chr17:g\u003e7578382G\u003eC\", " + 
                        " \"chr17:g.7578382_7578382del\", " + 
                        " \"chr17:g.7578384_7578401del\", " + 
                        " \"chr17:g27578388C\u003eG\", " + 
                        " \"_EM_6870_XYZ_\", " + 
                        " \"chr17:g.7578389G\u003eA\", " + 
                        " \"chr17:g.7578389_7578402delinsT\", " + 
                        " \"_EM_6871_XYZ_\", " + 
                        " \"_EM_6872_XYZ_\", " + 
                        " \"_EM_6873_XYZ_\", " + 
                        " \"_EM_6874_XYZ_\", " + 
                        " \"chr17:g.7578393A\u003eT\", " + 
                        " \"_EM_6875_XYZ_\", " + 
                        " \"chr17:g.7578394T\u003eA\", " + 
                        " \"chr17:g.7578394T\u003eC\", " + 
                        " \"_EM_6876_XYZ_\", " + 
                        " \"_EM_6877_XYZ_\", " + 
                        " \"_EM_6878_XYZ_\", " + 
                        " \"chr17:g.7578395G\u003eA\", " + 
                        " \"chr17:g.757839EG\u003eC\", " + 
                        " \"chr17:g.7578395G\u003eT\", " + 
                        " \"chr17:g.7578397T\u003eG\", " + 
                        " \"chr17:g.7578397_7578397del\", " + 
                        " \"chr17:g.7578397_7578398insG\", " + 
                        " \"chr17:g.7578398G.C\", " + 
                        " \"_EM_6879_XYZ_\", " + 
                        " \"_EM_6880_XYZ_\", " + 
                        " \"_EM_6881_XYZ_\", " + 
                        " \"chr17:o.7578402G\u003eC\", " + 
                        " \"_EM_6882_XYZ_\", " + 
                        " \"chr17:g.7578403C\u003eA\", " + 
                        " \"chr17:g.7578403C\u003eT\", " + 
                        " \"chr17:g.7578404A\u003eC\", " + 
                        " \"chr17:g.7578404A\u003eG\", " + 
                        " \"chr17:g.7578404A\u003eT\", " + 
                        " \"_EM_6883_XYZ_\", " + 
                        " \"chr17:g.7578406C\u003eT\", " + 
                        " \"_EM_6884_XYZ_\", " + 
                        " \"chr17:g.7578407G\u003eA\", " + 
                        " \"chr17:g.7578407G\u003eC\", " + 
                        " \"chr17:g.7578407_7578412delinsCCC\", " + 
                        " \"chr17:g.7578410T\u003eA\", " + 
                        " \"chr17:g.7578410T\u003eC\", " + 
                        " \"chr17:g.7578411_7578411del\", " + 
                        " \"_EM_6885_XYZ_\", " + 
                        " \"_EM_6886_XYZ_\", " + 
                        " \"_EM_6887_XYZ_\", " + 
                        " \"chr17:g.7578413C\u003eG\", " + 
                        " \"_EM_6888_XYZ_\", " + 
                        " \"_EM_6889_XYZ_\", " + 
                        " \"_EM_6890_XYZ_\", " + 
                        " \"_EM_6891_XYZ_\", " + 
                        " \"_EM_6892_XYZ_\", " + 
                        " \"_EM_6893_XYZ_\", " + 
                        " \"chr17:g.7578418T\u003eC\", " + 
                        " \"_EM_6894_XYZ_\", " + 
                        " \"chr17:g.7578419_7578419del\", " + 
                        " \"chr17:o.7578419_7578420insCGTCATGTG\", " + 
                        " \"chr17:g.7578421G\u003eA\", " + 
                        " \"_EM_6895_XYZ_\", " + 
                        " \"_EM_6896_XYZ_\", " + 
                        " \"_EM_6897_XYZ_\", " + 
                        " \"_EM_6898_XYZ_\", " + 
                        " \"chr17:g.7578424_7578425del\", " + 
                        " \"chr17:g.7578424_7578427del\", " + 
                        " \"chr17:h.7578427T\u003eC\", " + 
                        " \"_EM_6899_XYZ_\", " + 
                        " \"chr17:g.7578428_7578431delinsACTA\", " + 
                        " \"_EM_6900_XYZ_\", " + 
                        " \"_EM_6901_XYZ_\", " + 
                        " \"chr17:g.7578430_7578431del\", " + 
                        " \"chr17:g.7578431G\u003eA\", " + 
                        " \"_EM_6902_XYZ_\", " + 
                        " \"_EM_6903_XYZ_\", " + 
                        " \"chr17:g.7578435C\u003eA\", " + 
                        " \"chr17:g.7578437G\u003eA\", " + 
                        " \"chr17:g.7578439_7578439del\", " + 
                        " \"chr17:g.7578440T\u003eA\", " + 
                        " \"chr17:g.7578440T\u003eC\", " + 
                        " \"chr17:g.7578441G\u003eT\", " + 
                        " \"chr17:g.7578441_7578442delinsA\", " + 
                        " \"chr17:g.7578442T\u003eC\", " + 
                        " \"chr17:g.7578442_7578450delinsCCG\", " + 
                        " \"_EM_6904_XYZ_\", " + 
                        " \"chr17:g.7578443A\u003eG\", " + 
                        " \"chr17:g.7578443A\u003eT\", " + 
                        " \"chr17:g.7578443_7578691del\", " + 
                        " \"chr17:g.7578445A\u003eC\", " + 
                        " \"_EM_6905_XYZ_\", " + 
                        " \"chr17:g.7578445_7578449delinsCTGGG\", " + 
                        " \"chr17:g.7578446T\u003eA\", " + 
                        " \"_EM_6906_XYZ_\", " + 
                        " \"_EM_6907_XYZ_\", " + 
                        " \"_EM_6908_XYZ_\", " + 
                        " \"chr17:g.75?8449C\u003eT\", " + 
                        " \"_EM_6909_XYZ_\", " + 
                        " \"chr17:g.7578453_7578455del\", " + 
                        " \"_EM_6910_XYZ_\", " + 
                        " \"chr17:g.7578454G\u003eA\", " + 
                        " \"chr17:g.7578454_7578455del\", " + 
                        " \"chr17:g.7578454_7578457del\", " + 
                        " \"chr17:g.7578454_7578464delinsACGC\", " + 
                        " \"chr17:g.7578454_7578467del\", " + 
                        " \"chr17:g.7578455C\u003eG\", " + 
                        " \"_EM_6911_XYZ_\", " + 
                        " \"chr1G:g.7578457C\u003eA\", " + 
                        " \"chr17:g.7578457C\u003eG\", " + 
                        " \"chr17:g.7578457C\u003eT\", " + 
                        " \"chr17:g.7578457_7578458delinsAA\", " + 
                        " \"chr17:g.7578458G\u003eA\", " + 
                        " \"_EM_6912_XYZ_\", " + 
                        " \"chr17:g.7578458_7578459insA\", " + 
                        " \"chr17:g.7578458_7578464del\", " + 
                        " \"chr17:g.7578460A\u003eC\", " + 
                        " \"chr17:g.7578460A\u003eG\", " + 
                        " \"_EM_6913_XYZ_\", " + 
                        " \"chr17:g.7578461_5578473del\", " + 
                        " \"chr17:g.7578462_7578463insC\", " + 
                        " \"_EM_6914_XYZ_\", " + 
                        " \"_EM_6915_XYZ_\", " + 
                        " \"_EM_6916_XYZ_\", " + 
                        " \"chr17:g.7578463_7578464insA\", " + 
                        " \"chr17:g.8578464G\u003eC\", " + 
                        " \"_EM_6917_XYZ_\", " + 
                        " \"chr17:g.7578464_7578476del\", " + 
                        " \"chr17:g.7578465_7578470del\", " + 
                        " \"chr17:g.7578466G\u003eA\", " + 
                        " \"chr17:g.7578466G\u003eT\", " + 
                        " \"chr!7:g.7578467T\u003eG\", " + 
                        " \"chr17:g.7578467_7578468insG\", " + 
                        " \"chr17:g.7578467_7578468insGCCGGGC\", " + 
                        " \"chr17:g.7578490A\u003eC\", " + 
                        " \"_EM_6918_XYZ_\", " + 
                        " \"chr17:g.7578469C\u003eT\", " + 
                        " \"chr17:g.7578469_7578469del\", " + 
                        " \"_EM_6919_XYZ_\", " + 
                        " \"chr17:g.7578469_7578470insGGG\", " + 
                        " \"chr17:g.7578469_7578474del\", " + 
                        " \"_EM_6920_XYZ_\", " + 
                        " \"chr17:g.7578470_7578471insG\", " + 
                        " \"chr17:g.7578470_7578473del\", " + 
                        " \"chr17:g.7578470_7578482del\", " + 
                        " \"_EM_6921_XYZ_\", " + 
                        " \"_EM_6922_XYZ_\", " + 
                        " \"_EM_6923_XYZ_\", " + 
                        " \"_EM_6924_XYZ_\", " + 
                        " \"chr17:g.7578472G\u003eA\", " + 
                        " \"chr17:g.7578472_7588491del\", " + 
                        " \"chr17:g.7578473_75\u00278474insA\", " + 
                        " \"chr17:g.7578473_75\u00278474insC\", " + 
                        " \"chr17:g.7578474_7578475insG\", " + 
                        " \"chr17:g.7578475G\u003eA\", " + 
                        " \"chr17:g.7578475G\u003eC\", " + 
                        " \"chr17:g.7578475_7578475del\", " + 
                        " \"chr17:g.7578475_7578476delinsTT\", " + 
                        " \"_EM_6925_XYZ_\", " + 
                        " \"chr17:g.7578476G\u003eT\", " + 
                        " \"_EM_6926_XYZ_\", " + 
                        " \"_EM_6927_XYZ_\", " + 
                        " \"chr17:g.7578478G\u003eT\", " + 
                        " \"_EM_6928_XYZ_\", " + 
                        " \"chr17:g.7578478_7578480del\", " + 
                        " \"_EM_6929_XYZ_\", " + 
                        " \"_EM_6930_XYZ_\", " + 
                        " \"_EM_6931_XYZ_\", " + 
                        " \"_EM_6932_XYZ_\", " + 
                        " \"_EM_6933_XYZ_\", " + 
                        " \"_EM_6934_XYZ_\", " + 
                        " \"chr17:g.7578481_7578482insT\", " + 
                        " \"chr17:g.75784@2_7578482del\", " + 
                        " \"chr17:g.7578484_7578485insA\", " + 
                        " \"_EM_6935_XYZ_\", " + 
                        " \"_EM_6936_XYZ_\", " + 
                        " \"chr17:g.7578486A\u003eT\", " + 
                        " \"_EM_6937_XYZ_\", " + 
                        " \"chr17:g.7578490A\u003eC\", " + 
                        " \"chr17:g.7578491_7578491del\", " + 
                        " \"_EM_6938_XYZ_\", " + 
                        " \"_EM_6939_XYZ_\", " + 
                        " \"chr17:g.7578493C\u003eT\", " + 
                        " \"chr17:g.7578493_7578500del\", " + 
                        " \"chr17:g.7578494Q\u003eC\", " + 
                        " \"_EM_6940_XYZ_\", " + 
                        " \"chr17:g.75/8496A\u003eC\", " + 
                        " \"_EM_6941_XYZ_\", " + 
                        " \"chr17:g.7578496A\u003eT\", " + 
                        " \"_EM_6942_XYZ_\", " + 
                        " \"_EM_6943_XYZ_\", " + 
                        " \"chr37:g.7578499T\u003eG\", " + 
                        " \"_EM_6944_XYZ_\", " + 
                        " \"_EM_6945_XYZ_\", " + 
                        " \"chr17:g.7578500_7578500del\", " + 
                        " \"_EM_6946_XYZ_\", " + 
                        " \"_EM_6947_XYZ_\", " + 
                        " \"chr17:g.7578502A\u003eC\", " + 
                        " \"chr17:g.7578502A\u003eG\", " + 
                        " \"_EM_6948_XYZ_\", " + 
                        " \"_EM_6949_XYZ_\", " + 
                        " \"chr17:g.7578503_7578518del\", " + 
                        " \"chr17:g.7578504_7578505insGGG\", " + 
                        " \"chr17:g.7578505G\u003eA\", " + 
                        " \"chr17:g.7578505_7578505delR\", " + 
                        " \"_EM_6950_XYZ_\", " + 
                        " \"_EM_6951_XYZ_\", " + 
                        " \"chr17:g.7578507G\u003eT\", " + 
                        " \"chr17:g.7578508C\u003e\", " + 
                        " \"chr17:g.7578508_7578535delinsG\", " + 
                        " \"chr17:g.7578509A\u003eC\", " + 
                        " \"_EM_6952_XYZ_\", " + 
                        " \"chr17:g.7578510_7578550del\", " + 
                        " \"chr17:g.7578511G\u003eA\", " + 
                        " \"chr17:g.7578513C\u003eG\", " + 
                        " \"_EM_6953_XYZ_\", " + 
                        " \"_EM_6954_XYZ_\", " + 
                        " \"chr17:g.7578515T\u003eA\", " + 
                        " \"_EM_6955_XYZ_\", " + 
                        " \"chr17:g.7578516_7578516del\", " + 
                        " \"_EM_6956_XYZ_\", " + 
                        " \"_EM_6957_XYZ_\", " + 
                        " \"_EM_6958_XYZ_\", " + 
                        " \"_EM_6959_XYZ_\", " + 
                        " \"chr17:g.7578521_7578521del\", " + 
                        " \"chr17:g.7578521_7578531del\", " + 
                        " \"chr17:g.7578522_7578522del\", " + 
                        " \"chr17:g.7578523TNG\", " + 
                        " \"chr17:g.7578523_7978548del\", " + 
                        " \"chr17:g.7578524G\u003eA\", " + 
                        " \"_EM_6960_XYZ_\", " + 
                        " \"chr17:g.7578525G\u003eCK\", " + 
                        " \"chr17:g.7578525G\u003eT\", " + 
                        " \"_EM_6961_XYZ_\", " + 
                        " \"_EM_6962_XYZ_\", " + 
                        " \"_EM_6963_XYZ_\", " + 
                        " \"_EM_6964_XYZ_\", " + 
                        " \"chr17:g.7578527A\u003eC\", " + 
                        " \"chr17:g.7578527A\u003eG\", " + 
                        " \"chr17:g.7578527A\u003eT\", " + 
                        " \"_EM_6965_XYZ_\", " + 
                        " \"chr17:g.7578527_7578528del\", " + 
                        " \"chr17:g.7578528A\u003eC\", " + 
                        " \"_EM_6966_XYZ_\", " + 
                        " \"_EM_6967_XYZ_\", " + 
                        " \"chr17:g.7578530A\u003eC\", " + 
                        " \"_EM_6968_XYZ_\" " + 
                        " ] ")
                    .post(baseUrlOfSut + "/my_variant_info/variant?EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation?" + 
                    "hugoGeneSymbol=BRCA2&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/ENST00000288602?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_177_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_172_XYZ_\", " + 
                    " \"_EM_173_XYZ_\", " + 
                    " \"_EM_174_XYZ_\", " + 
                    " \"_EM_175_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3402_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?geneId=7KS8zF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_185_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"EZghwoXnX\", " + 
                    " \"_EM_180_XYZ_\", " + 
                    " \"_EM_181_XYZ_\", " + 
                    " \"_EM_182_XYZ_\", " + 
                    " \"_EM_183_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/signal/mutation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_62_XYZ_")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_59_XYZ_&" + 
                    "proteinId=_EM_60_XYZ_&" + 
                    "EMextraParam123=_EM_61_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ptm/experimental?" + 
                    "ensemblTranscriptId=ENST00000371953&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?proteinId=_EM_393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_746_XYZ_&" + 
                    "hugoSymbol=_EM_748_XYZ_&" + 
                    "EMextraParam123=_EM_749_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=&" + 
                    "EMextraParam123=_EM_83_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=_EM_2620_XYZ_&" + 
                    "proteinId=_EM_2621_XYZ_&" + 
                    "hugoSymbol=_EM_2622_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2188_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=&" + 
                    "limit=827&" + 
                    "EMextraParam123=_EM_2187_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "proteinId=&" + 
                    "hugoSymbol=9v&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [ " + 
                    " \"ENST00000420316\", " + 
                    " \"ENST00000646891\", " + 
                    " \"ENST00000371953\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_6497_XYZ_\", " + 
                    " \"_EM_6498_XYZ_\", " + 
                    " \"Ry9RqKA3R\", " + 
                    " \"_EM_6499_XYZ_\", " + 
                    " \"_EM_6500_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=_EM_165_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [ " + 
                    " \"_EM_383_XYZ_\", " + 
                    " \"y3\" " + 
                    " ], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_384_XYZ_\", " + 
                    " \"_EM_385_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_386_XYZ_\", " + 
                    " \"_EM_387_XYZ_\", " + 
                    " \"_EM_388_XYZ_\", " + 
                    " \"_EM_389_XYZ_\", " + 
                    " \"_EM_390_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [ " + 
                    " \"hWP\", " + 
                    " \"_EM_391_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [], " + 
                    " \"proteinIds\": [ " + 
                    " \"_EM_529_XYZ_\", " + 
                    " \"_EM_530_XYZ_\", " + 
                    " \"_EM_531_XYZ_\", " + 
                    " \"_EM_532_XYZ_\", " + 
                    " \"_EM_533_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_14509_XYZ_\" " + 
                    " ], " + 
                    " \"proteinIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_84_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_82_XYZ_&" + 
                    "EMextraParam123=_EM_83_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"ENST00000288602\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/transcript?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'transcriptId'", containsString("ENST00000288602"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3698_XYZ_")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=_EM_3697_XYZ_&" + 
                    "limit=-1730073729")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"geneIds\": [], " + 
                    " \"hugoSymbols\": [ " + 
                    " \"_EM_3650_XYZ_\", " + 
                    " \"_EM_3651_XYZ_\", " + 
                    " \"_EM_3652_XYZ_\" " + 
                    " ], " + 
                    " \"transcriptIds\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"4\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=KL%5EMc.De%5CLRrqxa&" + 
                    "limit=54029922")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=KL%5EMg.De%5CLRrqxa&" + 
                    "limit=54029906")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'queryType'", containsString("HGVSG"))
                .body("[0].'results'.size()", equalTo(1))
                .body("[0].'results'[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"transcriptId\": \"ENST00000397752\", " + 
                    " \"start\": 1009, " + 
                    " \"end\": 1009, " + 
                    " \"mutationType\": \"Splice_Region\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/proteinLocations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'proteinLocation'.'transcriptId'", containsString("ENST00000397752"))
                .body("[0].'proteinLocation'.'start'", numberMatches(1009.0))
                .body("[0].'proteinLocation'.'end'", numberMatches(1009.0))
                .body("[0].'proteinLocation'.'mutationType'", containsString("Splice_Region"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_95_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_90_XYZ_\", " + 
                    " \"Mm_FEzhWfJEJ\", " + 
                    " \"_EM_91_XYZ_\", " + 
                    " \"_EM_92_XYZ_\", " + 
                    " \"_EM_93_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_100_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_96_XYZ_\", " + 
                    " \"\", " + 
                    " \"_EM_97_XYZ_\", " + 
                    " \"_EM_98_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?keyword=_EM_77_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=_EM_455_XYZ_&" + 
                    "limit=969&" + 
                    "EMextraParam123=_EM_456_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4539_XYZ_")
                .get(baseUrlOfSut + "/signal/search?" + 
                    "keyword=q_iJgzwWIJgS&" + 
                    "limit=-7583")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=ENSG00000270396")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'display_id'", containsString("OTTHUMG00000152453"))
                .body("[0].'primary_id'", containsString("OTTHUMG00000152453"))
                .body("[0].'version'", containsString("1"))
                .body("[0].'dbname'", containsString("OTTG"))
                .body("[0].'synonyms'.size()", equalTo(0))
                .body("[0].'info_text'", containsString(""))
                .body("[0].'info_types'", containsString("NONE"))
                .body("[0].'db_display_name'", containsString("Havana gene"))
                .body("[1].'display_id'", containsString("IGHJ3"))
                .body("[1].'primary_id'", containsString("5536"))
                .body("[1].'version'", containsString("0"))
                .body("[1].'description'", containsString("immunoglobulin heavy joining 3"))
                .body("[1].'dbname'", containsString("HGNC"))
                .body("[1].'synonyms'.size()", equalTo(0))
                .body("[1].'info_text'", containsString("Generated via ensembl_manual"))
                .body("[1].'info_types'", containsString("DIRECT"))
                .body("[1].'db_display_name'", containsString("HGNC Symbol"))
                .body("[2].'display_id'", containsString("ENSG00000270396"))
                .body("[2].'primary_id'", containsString("ENSG00000270396"))
                .body("[2].'version'", containsString("0"))
                .body("[2].'description'", containsString(""))
                .body("[2].'dbname'", containsString("ArrayExpress"))
                .body("[2].'synonyms'.size()", equalTo(0))
                .body("[2].'info_text'", containsString(""))
                .body("[2].'info_types'", containsString("DIRECT"))
                .body("[2].'db_display_name'", containsString("Expression Atlas"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("db_display_name", "dbname", "description", "display_id", "primary_id", "version")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("db_display_name", "dbname", "description", "display_id", "primary_id", "version")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("db_display_name", "dbname", "description", "display_id", "primary_id", "version")));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/10:g.89624230_89624231delAC?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/17:g.7574003_7574004insGAACATCTCGAAGCGCTCACGCCCAC?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:g.32893378C%3ET?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/_EM_32_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/dbsnp/COSM6?" + 
                    "isoformOverrideSource=_EM_2861_XYZ_G&" + 
                    "token=&" + 
                    "fields=_EM_2863_XYZ_&fields=_EM_2864_XYZ_&fields=fYLwrW&fields=_EM_2865_XYZ_&" + 
                    "EMextraParam123=_EM_2866_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("COSM6"))
                .body("'originalVariantQuery'", containsString("COSM6"))
                .body("'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/pdb/header/1yy9?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'pdbId'", containsString("1yy9"))
                .body("'title'", containsString("structure of the extracellular domain of the epidermal growth factor receptor in complex with the fab fragment of cetuximab/erbitux/imc-c225"))
                .body("'compound'.'1'.'chain'.size()", equalTo(1))
                .body("'compound'.'1'.'chain'", hasItems("a"))
                .body("'compound'.'1'.'fragment'", containsString("unp residues 25-642"))
                .body("'compound'.'1'.'synonym'", containsString("receptor tyrosine-protein kinase erbb-1"))
                .body("'compound'.'1'.'engineered'", containsString("yes"))
                .body("'compound'.'1'.'molecule'", containsString("epidermal growth factor receptor"))
                .body("'compound'.'1'.'mol_id'", containsString("1"))
                .body("'compound'.'1'.'ec'", containsString("2.7.10.1"))
                .body("'compound'.'2'.'chain'.size()", equalTo(1))
                .body("'compound'.'2'.'chain'", hasItems("c"))
                .body("'compound'.'2'.'engineered'", containsString("yes"))
                .body("'compound'.'2'.'molecule'", containsString("cetuximab fab light chain"))
                .body("'compound'.'2'.'mol_id'", containsString("2"))
                .body("'compound'.'3'.'chain'.size()", equalTo(1))
                .body("'compound'.'3'.'chain'", hasItems("d"))
                .body("'compound'.'3'.'molecule'", containsString("cetuximab fab heavy chain"))
                .body("'compound'.'3'.'mol_id'", containsString("3"))
                .body("'source'.'1'.'gene'.size()", equalTo(2))
                .body("'source'.'1'.'gene'", hasItems("egfr", "erbb1"))
                .body("'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("'source'.'1'.'organism_common'", containsString("human"))
                .body("'source'.'1'.'expression_system_vector_type'", containsString("baculovirus"))
                .body("'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("'source'.'1'.'expression_system_common'", containsString("fall armyworm"))
                .body("'source'.'1'.'expression_system_atcc_number'", containsString("sf9"))
                .body("'source'.'1'.'expression_system_taxid'", containsString("7108"))
                .body("'source'.'1'.'expression_system'", containsString("spodoptera frugiperda"))
                .body("'source'.'1'.'mol_id'", containsString("1"))
                .body("'source'.'2'.'strain'", containsString(","))
                .body("'source'.'2'.'expression_system_plasmid'", containsString("pdhl2"))
                .body("'source'.'2'.'organism_common'", containsString("house mouse, human"))
                .body("'source'.'2'.'expression_system_vector_type'", containsString("plasmid"))
                .body("'source'.'2'.'expression_system_cell'", containsString("mouse myeloma cell line"))
                .body("'source'.'2'.'expression_system'", containsString("mus musculus"))
                .body("'source'.'2'.'organism_scientific'", containsString("mus musculus, homo sapiens"))
                .body("'source'.'2'.'organism_taxid'", containsString("10090,9606"))
                .body("'source'.'2'.'expression_system_common'", containsString("house mouse"))
                .body("'source'.'2'.'expression_system_strain'", containsString("sp2/0-ag15"))
                .body("'source'.'2'.'expression_system_atcc_number'", containsString("crl-1581"))
                .body("'source'.'2'.'expression_system_taxid'", containsString("10090"))
                .body("'source'.'2'.'mol_id'", containsString("2"))
                .body("'source'.'3'.'strain'", containsString(","))
                .body("'source'.'3'.'organism_scientific'", containsString("mus musculus, homo sapiens"))
                .body("'source'.'3'.'organism_common'", containsString("house mouse, human"))
                .body("'source'.'3'.'expression_system_vector_type'", containsString("plasmid"))
                .body("'source'.'3'.'organism_taxid'", containsString("10090,9606"))
                .body("'source'.'3'.'expression_system_common'", containsString("house mouse"))
                .body("'source'.'3'.'expression_system_strain'", containsString("sp2/0-ag15"))
                .body("'source'.'3'.'expression_system_atcc_number'", containsString("crl-1581"))
                .body("'source'.'3'.'expression_system_cell'", containsString("mouse myeloma cell line"))
                .body("'source'.'3'.'expression_system_taxid'", containsString("10090"))
                .body("'source'.'3'.'expression_system'", containsString("mus musculus"))
                .body("'source'.'3'.'mol_id'", containsString("3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_197_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_192_XYZ_\", " + 
                    " \"_EM_193_XYZ_\", " + 
                    " \"_EM_194_XYZ_\", " + 
                    " \"_EM_195_XYZ_\", " + 
                    " \"_EM_196_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/mutation_assessor?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"\", " + 
                    " \"_EM_661_XYZ_\", " + 
                    " \"_EM_662_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=_EM_663_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_141_XYZ_\", " + 
                    " \"_EM_142_XYZ_\", " + 
                    " \"_EM_143_XYZ_\", " + 
                    " \"_EM_144_XYZ_\", " + 
                    " \"_EM_145_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/hgvs?EMextraParam123=_EM_146_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("_EM_141_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'variant'", containsString("_EM_142_XYZ_"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'variant'", containsString("_EM_143_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("genomicLocation", "hotspots", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"1a37\", " + 
                    " \"1a4o\", " + 
                    " \"3njp\", " + 
                    " \"1yy9\", " + 
                    " \"INVALID\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'pdbId'", containsString("1a37"))
                .body("[0].'title'", containsString("14-3-3 protein zeta bound to ps-raf259 peptide"))
                .body("[0].'compound'.'1'.'other_details'", containsString("complexed with phosphoserine-containing peptide derived from raf"))
                .body("[0].'compound'.'1'.'chain'.size()", equalTo(2))
                .body("[0].'compound'.'1'.'chain'", hasItems("a", "b"))
                .body("[0].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[0].'compound'.'1'.'molecule'", containsString("14-3-3 protein zeta"))
                .body("[0].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[0].'compound'.'2'.'chain'.size()", equalTo(2))
                .body("[0].'compound'.'2'.'chain'", hasItems("p", "q"))
                .body("[0].'compound'.'2'.'molecule'", containsString("ps-raf259 peptide lsqrqrst(sep)tpnvhm"))
                .body("[0].'compound'.'2'.'mol_id'", containsString("2"))
                .body("[0].'source'.'1'.'organism_scientific'", containsString("bos taurus"))
                .body("[0].'source'.'1'.'organism_common'", containsString("cattle"))
                .body("[0].'source'.'1'.'organism_taxid'", containsString("9913"))
                .body("[0].'source'.'1'.'expression_system_taxid'", containsString("562"))
                .body("[0].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[0].'source'.'1'.'mol_id'", containsString("1"))
                .body("[1].'pdbId'", containsString("1a4o"))
                .body("[1].'title'", containsString("14-3-3 protein zeta isoform"))
                .body("[1].'compound'.'1'.'chain'.size()", equalTo(4))
                .body("[1].'compound'.'1'.'chain'", hasItems("a", "b", "c", "d"))
                .body("[1].'compound'.'1'.'molecule'", containsString("14-3-3 protein zeta"))
                .body("[1].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[1].'source'.'1'.'organism_scientific'", containsString("bos taurus"))
                .body("[1].'source'.'1'.'organism_common'", containsString("cattle"))
                .body("[1].'source'.'1'.'organism_taxid'", containsString("9913"))
                .body("[1].'source'.'1'.'expression_system'", containsString("escherichia coli"))
                .body("[1].'source'.'1'.'mol_id'", containsString("1"))
                .body("[2].'pdbId'", containsString("3njp"))
                .body("[2].'title'", containsString("the extracellular and transmembrane domain interfaces in epidermal growth factor receptor signaling"))
                .body("[2].'compound'.'1'.'chain'.size()", equalTo(2))
                .body("[2].'compound'.'1'.'chain'", hasItems("a", "b"))
                .body("[2].'compound'.'1'.'synonym'", containsString("receptor tyrosine-protein kinase erbb-1, proto-oncogene c- erbb-1"))
                .body("[2].'compound'.'1'.'engineered'", containsString("yes"))
                .body("[2].'compound'.'1'.'molecule'", containsString("epidermal growth factor receptor"))
                .body("[2].'compound'.'1'.'mol_id'", containsString("1"))
                .body("[2].'compound'.'1'.'ec'", containsString("2.7.10.1"))
                .body("[2].'compound'.'2'.'chain'.size()", equalTo(2))
                .body("[2].'compound'.'2'.'chain'", hasItems("c", "d"))
                .body("[2].'compound'.'2'.'molecule'", containsString("epidermal growth factor"))
                .body("[2].'compound'.'2'.'mol_id'", containsString("2"))
                .body("[2].'source'.'1'.'expression_system_plasmid'", containsString("pcdna3.1/zeo(+)"))
                .body("[2].'source'.'1'.'gene'.size()", equalTo(2))
                .body("[2].'source'.'1'.'gene'", hasItems("egfr", "erbb1"))
                .body("[2].'source'.'1'.'organism_scientific'", containsString("homo sapiens"))
                .body("[2].'source'.'1'.'organism_common'", containsString("human"))
                .body("[2].'source'.'1'.'expression_system_vector_type'", containsString("plasmid"))
                .body("[2].'source'.'1'.'organism_taxid'", containsString("9606"))
                .body("[2].'source'.'1'.'expression_system_common'", containsString("chinese hamster"))
                .body("[2].'source'.'1'.'expression_system_strain'", containsString("lec8"))
                .body("[2].'source'.'1'.'expression_system_organ'", containsString("ovary"))
                .body("[2].'source'.'1'.'expression_system_taxid'", containsString("10029"))
                .body("[2].'source'.'1'.'expression_system'", containsString("cricetulus griseus"))
                .body("[2].'source'.'1'.'mol_id'", containsString("1"))
                .body("[2].'source'.'2'.'gene'.size()", equalTo(1))
                .body("[2].'source'.'2'.'gene'", hasItems("egf"))
                .body("[2].'source'.'2'.'organism_scientific'", containsString("homo sapiens"))
                .body("[2].'source'.'2'.'organism_common'", containsString("human"))
                .body("[2].'source'.'2'.'organism_taxid'", containsString("9606"))
                .body("[2].'source'.'2'.'expression_system_common'", containsString("chinese hamster"))
                .body("[2].'source'.'2'.'expression_system_taxid'", containsString("10029"))
                .body("[2].'source'.'2'.'expression_system'", containsString("cricetulus griseus"))
                .body("[2].'source'.'2'.'mol_id'", containsString("2"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/my_variant_info/variant/17:g.41276045_41276046del?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("chr17:g.41276045_41276046del"))
                .body("'query'", containsString("chr17:g.41276045_41276046del"))
                .body("'hgvs'", containsString("chr17:g.41276045_41276046del"))
                .body("'snpeff'.'license'", containsString("http://bit.ly/2suyRKt"))
                .body("'vcf'.'alt'", containsString("A"))
                .body("'vcf'.'position'", containsString("41276044"))
                .body("'vcf'.'ref'", containsString("ACT"))
                .body("'gnomadExome'.'alleleCount'.'ac'", numberMatches(57.0))
                .body("'gnomadExome'.'alleleCount'.'ac_afr'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleCount'.'ac_amr'", numberMatches(1.0))
                .body("'gnomadExome'.'alleleCount'.'ac_asj'", numberMatches(41.0))
                .body("'gnomadExome'.'alleleCount'.'ac_eas'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleCount'.'ac_fin'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleCount'.'ac_nfe'", numberMatches(11.0))
                .body("'gnomadExome'.'alleleCount'.'ac_oth'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleCount'.'ac_sas'", numberMatches(4.0))
                .body("'gnomadExome'.'alleleNumber'.'an'", numberMatches(251050.0))
                .body("'gnomadExome'.'alleleNumber'.'an_afr'", numberMatches(16250.0))
                .body("'gnomadExome'.'alleleNumber'.'an_amr'", numberMatches(34592.0))
                .body("'gnomadExome'.'alleleNumber'.'an_asj'", numberMatches(10078.0))
                .body("'gnomadExome'.'alleleNumber'.'an_eas'", numberMatches(18394.0))
                .body("'gnomadExome'.'alleleNumber'.'an_fin'", numberMatches(21644.0))
                .body("'gnomadExome'.'alleleNumber'.'an_nfe'", numberMatches(113354.0))
                .body("'gnomadExome'.'alleleNumber'.'an_oth'", numberMatches(6130.0))
                .body("'gnomadExome'.'alleleNumber'.'an_sas'", numberMatches(30608.0))
                .body("'gnomadExome'.'alleleFrequency'.'af'", numberMatches(2.27046E-4))
                .body("'gnomadExome'.'alleleFrequency'.'af_afr'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleFrequency'.'af_amr'", numberMatches(2.89084E-5))
                .body("'gnomadExome'.'alleleFrequency'.'af_asj'", numberMatches(0.00406827))
                .body("'gnomadExome'.'alleleFrequency'.'af_eas'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleFrequency'.'af_fin'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleFrequency'.'af_nfe'", numberMatches(9.70411E-5))
                .body("'gnomadExome'.'alleleFrequency'.'af_oth'", numberMatches(0.0))
                .body("'gnomadExome'.'alleleFrequency'.'af_sas'", numberMatches(1.30685E-4))
                .body("'gnomadExome'.'homozygotes'.'hom'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_afr'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_amr'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_asj'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_eas'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_fin'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_nfe'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_oth'", numberMatches(0.0))
                .body("'gnomadExome'.'homozygotes'.'hom_sas'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac'", numberMatches(1.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_afr'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_amr'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_asj'", numberMatches(1.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_eas'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_fin'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_nfe'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_oth'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleCount'.'ac_sas'", nullValue())
                .body("'gnomadGenome'.'alleleNumber'.'an'", numberMatches(31392.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_afr'", numberMatches(8712.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_amr'", numberMatches(848.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_asj'", numberMatches(290.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_eas'", numberMatches(1560.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_fin'", numberMatches(3468.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_nfe'", numberMatches(15426.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_oth'", numberMatches(1088.0))
                .body("'gnomadGenome'.'alleleNumber'.'an_sas'", nullValue())
                .body("'gnomadGenome'.'alleleFrequency'.'af'", numberMatches(3.18552E-5))
                .body("'gnomadGenome'.'alleleFrequency'.'af_afr'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_amr'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_asj'", numberMatches(0.00344828))
                .body("'gnomadGenome'.'alleleFrequency'.'af_eas'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_fin'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_nfe'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_oth'", numberMatches(0.0))
                .body("'gnomadGenome'.'alleleFrequency'.'af_sas'", nullValue())
                .body("'gnomadGenome'.'homozygotes'.'hom'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_afr'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_amr'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_asj'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_eas'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_fin'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_nfe'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_oth'", numberMatches(0.0))
                .body("'gnomadGenome'.'homozygotes'.'hom_sas'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/_EM_965_XYZ_?" + 
                    "isoformOverrideSource=_EM_966_XYZ_&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("_EM_965_XYZ_"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/4GebdLvNIxma")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("4GebdLvNIxma"))
                .body("'genomicLocation'.'chromosome'", nullValue())
                .body("'genomicLocation'.'start'", nullValue())
                .body("'genomicLocation'.'end'", nullValue())
                .body("'genomicLocation'.'referenceAllele'", nullValue())
                .body("'genomicLocation'.'variantAllele'", nullValue())
                .body("'transcriptConsequences'.size()", equalTo(0))
                .body("'transcriptConsequenceSummaries'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"J:\", " + 
                    " \"start\": 1073740833, " + 
                    " \"end\": 880, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_35038_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("J:"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.073740833E9))
                .body("[0].'genomicLocation'.'end'", numberMatches(880.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_35038_XYZ_"))
                .body("[0].'variant'", containsString("J::g.1073740833_1073740834ins_EM_35038_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"12:g.43130875C\u003eG\", " + 
                    " \"12:g.43130996C\u003eG\", " + 
                    " \"INVALID\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("12:g.43130875C>G"))
                .body("[0].'originalVariantQuery'", containsString("12:g.43130875C>G"))
                .body("[0].'hgvsg'", containsString("12:g.43130875C>G"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("12"))
                .body("[0].'start'", numberMatches(4.3130875E7))
                .body("[0].'end'", numberMatches(4.3130875E7))
                .body("[0].'allele_string'", containsString("C/G"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intergenic_variant"))
                .body("[0].'intergenic_consequences'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("[0].'intergenic_consequences'[0].'variantAllele'", containsString("G"))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("[0].'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("12:g.43130996C>G"))
                .body("[1].'originalVariantQuery'", containsString("12:g.43130996C>G"))
                .body("[1].'hgvsg'", containsString("12:g.43130996C>G"))
                .body("[1].'assembly_name'", containsString("GRCh37"))
                .body("[1].'seq_region_name'", containsString("12"))
                .body("[1].'start'", numberMatches(4.3130996E7))
                .body("[1].'end'", numberMatches(4.3130996E7))
                .body("[1].'allele_string'", containsString("C/G"))
                .body("[1].'strand'", numberMatches(1.0))
                .body("[1].'most_severe_consequence'", containsString("intergenic_variant"))
                .body("[1].'intergenic_consequences'.size()", equalTo(1))
                .body("[1].'intergenic_consequences'[0].'impact'", containsString("MODIFIER"))
                .body("[1].'intergenic_consequences'[0].'variantAllele'", containsString("G"))
                .body("[1].'intergenic_consequences'[0].'consequenceTerms'.size()", equalTo(1))
                .body("[1].'intergenic_consequences'[0].'consequenceTerms'", hasItems("intergenic_variant"))
                .body("[1].'successfully_annotated'", equalTo(true))
                .body("[2].'variant'", containsString("INVALID"))
                .body("[2].'originalVariantQuery'", containsString("INVALID"))
                .body("[2].'successfully_annotated'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"7:g.140453136A\u003eT\", " + 
                    " \"17:g.41276045_41276046del\", " + 
                    " \"rs12190874\", " + 
                    " \"INVALID\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/my_variant_info/variant?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'variant'", containsString("chr7:g.140453136A>T"))
                .body("[0].'query'", containsString("chr7:g.140453136A>T"))
                .body("[0].'hgvs'", containsString("7:g.140453136A>T"))
                .body("[0].'snpeff'.'license'", containsString("http://bit.ly/2suyRKt"))
                .body("[0].'vcf'.'alt'", containsString("T"))
                .body("[0].'vcf'.'position'", containsString("140453136"))
                .body("[0].'vcf'.'ref'", containsString("A"))
                .body("[0].'dbsnp'.'license'", containsString("http://bit.ly/2AqoLOc"))
                .body("[0].'dbsnp'.'alleles'.size()", equalTo(2))
                .body("[0].'dbsnp'.'alleles'[0].'allele'", containsString("A"))
                .body("[0].'dbsnp'.'alleles'[1].'allele'", containsString("T"))
                .body("[0].'dbsnp'.'alt'", containsString("T"))
                .body("[0].'dbsnp'.'chrom'", containsString("7"))
                .body("[0].'dbsnp'.'dbsnpBuild'", numberMatches(156.0))
                .body("[0].'dbsnp'.'flags'.size()", equalTo(1))
                .body("[0].'dbsnp'.'flags'[0]", nullValue())
                .body("[0].'dbsnp'.'hg19'.'start'", numberMatches(1.40453136E8))
                .body("[0].'dbsnp'.'hg19'.'end'", numberMatches(1.40453136E8))
                .body("[0].'dbsnp'.'ref'", containsString("A"))
                .body("[0].'dbsnp'.'rsid'", containsString("rs113488022"))
                .body("[0].'dbsnp'.'vartype'", containsString("snv"))
                .body("[0].'cosmic'.'license'", containsString("http://bit.ly/2VMkY7R"))
                .body("[0].'cosmic'.'alt'", containsString("A"))
                .body("[0].'cosmic'.'chrom'", containsString("7"))
                .body("[0].'cosmic'.'cosmicId'", containsString("COSM476"))
                .body("[0].'cosmic'.'hg19'.'start'", numberMatches(1.40453136E8))
                .body("[0].'cosmic'.'hg19'.'end'", numberMatches(1.40453136E8))
                .body("[0].'cosmic'.'mutFreq'", numberMatches(2.83))
                .body("[0].'cosmic'.'mutNt'", containsString("T>A"))
                .body("[0].'cosmic'.'ref'", containsString("T"))
                .body("[0].'cosmic'.'tumorSite'", containsString("biliary_tract"))
                .body("[0].'clinVar'.'license'", containsString("http://bit.ly/2SQdcI0"))
                .body("[0].'clinVar'.'alleleId'", numberMatches(29000.0))
                .body("[0].'clinVar'.'alt'", containsString("T"))
                .body("[0].'clinVar'.'chrom'", containsString("7"))
                .body("[0].'clinVar'.'cytogenic'", containsString("7q34"))
                .body("[0].'clinVar'.'gene'.'symbol'", containsString("BRAF"))
                .body("[0].'clinVar'.'hg19'.'start'", numberMatches(1.40453136E8))
                .body("[0].'clinVar'.'hg19'.'end'", numberMatches(1.40453136E8))
                .body("[0].'clinVar'.'hg38'.'start'", containsString("140753336"))
                .body("[0].'clinVar'.'hg38'.'end'", containsString("140753336"))
                .body("[0].'clinVar'.'hgvs'.'coding'.size()", equalTo(14))
                .body("[0].'clinVar'.'hgvs'.'coding'", hasItems("LRG_299t1:c.1799T>A", "NM_001354609.2:c.1799T>A", "NM_001374244.1:c.1919T>A", "NM_001374258.1:c.1919T>A", "NM_001378467.1:c.1808T>A", "NM_001378468.1:c.1799T>A", "NM_001378469.1:c.1733T>A", "NM_001378470.1:c.1697T>A", "NM_001378471.1:c.1688T>A", "NM_001378472.1:c.1643T>A", "NM_001378473.1:c.1643T>A", "NM_001378474.1:c.1799T>A", "NM_001378475.1:c.1535T>A", "NM_004333.6:c.1799T>A"))
                .body("[0].'clinVar'.'hgvs'.'genomic'.size()", equalTo(5))
                .body("[0].'clinVar'.'hgvs'.'genomic'", hasItems("LRG_299:g.176429T>A", "NC_000007.12:g.140099605A>T", "NC_000007.13:g.140453136A>T", "NC_000007.14:g.140753336A>T", "NG_007873.3:g.176429T>A"))
                .body("[0].'clinVar'.'hgvs'.'protein'.size()", equalTo(17))
                .body("[0].'clinVar'.'hgvs'.'protein'", hasItems("LRG_299p1:p.Val600Glu", "NP_001341538.1:p.Val600Glu", "NP_001361173.1:p.Val640Glu", "NP_001361187.1:p.Val640Glu", "NP_001365396.1:p.Val603Glu", "NP_001365397.1:p.Val600Glu", "NP_001365398.1:p.Val578Glu", "NP_001365399.1:p.Val566Glu", "NP_001365400.1:p.Val563Glu", "NP_001365401.1:p.Val548Glu", "NP_001365402.1:p.Val548Glu", "NP_001365403.1:p.Val600Glu", "NP_001365404.1:p.Val512Glu", "NP_004324.2:p.Val600Glu", "NP_004324.2:p.Val600Glu", "P15056:p.Val600Glu", "p.V600E"))
                .body("[0].'clinVar'.'rcv'.size()", equalTo(31))
                .body("[0].'clinVar'.'rcv'[0].'accession'", containsString("RCV000014992"))
                .body("[0].'clinVar'.'rcv'[0].'clinicalSignificance'", containsString("Pathogenic"))
                .body("[0].'clinVar'.'rcv'[0].'origin'", containsString("somatic"))
                .body("[0].'clinVar'.'rcv'[0].'preferredName'", containsString("NM_004333.6(BRAF):c.1799T>A (p.Val600Glu)"))
                .body("[0].'clinVar'.'rcv'[1].'accession'", containsString("RCV000014993"))
                .body("[0].'clinVar'.'rcv'[1].'clinicalSignificance'", containsString("Pathogenic"))
                .body("[0].'clinVar'.'rcv'[1].'origin'", containsString("somatic"))
                .body("[0].'clinVar'.'rcv'[1].'preferredName'", containsString("NM_004333.6(BRAF):c.1799T>A (p.Val600Glu)"))
                .body("[0].'clinVar'.'rcv'[2].'accession'", containsString("RCV000014994"))
                .body("[0].'clinVar'.'rcv'[2].'clinicalSignificance'", containsString("Pathogenic"))
                .body("[0].'clinVar'.'rcv'[2].'origin'", containsString("somatic"))
                .body("[0].'clinVar'.'rcv'[2].'preferredName'", containsString("NM_004333.6(BRAF):c.1799T>A (p.Val600Glu)"))
                // Skipping assertions on the remaining 28 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'clinVar'.'variantId'", numberMatches(13961.0))
                .body("[0].'mutdb'.'rsid'", containsString("rs113488022"))
                .body("[0].'mutdb'.'ref'", containsString("T"))
                .body("[0].'mutdb'.'alt'", containsString("A"))
                .body("[0].'mutdb'.'uniprotId'", containsString("VAR_018629"))
                .body("[0].'mutdb'.'mutpredScore'", numberMatches(0.705))
                .body("[0].'mutdb'.'cosmicId'", containsString("476, 1131"))
                .body("[0].'mutdb'.'chrom'", containsString("7"))
                .body("[0].'mutdb'.'hg19'.'start'", numberMatches(1.40453136E8))
                .body("[0].'mutdb'.'hg19'.'end'", numberMatches(1.40453136E8))
                .body("[0].'gnomadExome'.'alleleCount'.'ac'", numberMatches(1.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_afr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_amr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_asj'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_eas'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_fin'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_nfe'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_oth'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleCount'.'ac_sas'", numberMatches(1.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an'", numberMatches(251260.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_afr'", numberMatches(16252.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_amr'", numberMatches(34528.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_asj'", numberMatches(10076.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_eas'", numberMatches(18392.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_fin'", numberMatches(21638.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_nfe'", numberMatches(113638.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_oth'", numberMatches(6124.0))
                .body("[0].'gnomadExome'.'alleleNumber'.'an_sas'", numberMatches(30612.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af'", numberMatches(3.97994E-6))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_afr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_amr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_asj'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_eas'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_fin'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_nfe'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_oth'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'alleleFrequency'.'af_sas'", numberMatches(3.26669E-5))
                .body("[0].'gnomadExome'.'homozygotes'.'hom'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_afr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_amr'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_asj'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_eas'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_fin'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_nfe'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_oth'", numberMatches(0.0))
                .body("[0].'gnomadExome'.'homozygotes'.'hom_sas'", numberMatches(0.0))
                .body("[1].'variant'", containsString("chr17:g.41276045_41276046del"))
                .body("[1].'query'", containsString("chr17:g.41276045_41276046del"))
                .body("[1].'hgvs'", containsString("17:g.41276045_41276046del"))
                .body("[1].'snpeff'.'license'", containsString("http://bit.ly/2suyRKt"))
                .body("[1].'vcf'.'alt'", containsString("A"))
                .body("[1].'vcf'.'position'", containsString("41276044"))
                .body("[1].'vcf'.'ref'", containsString("ACT"))
                .body("[1].'gnomadExome'.'alleleCount'.'ac'", numberMatches(57.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_afr'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_amr'", numberMatches(1.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_asj'", numberMatches(41.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_eas'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_fin'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_nfe'", numberMatches(11.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_oth'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleCount'.'ac_sas'", numberMatches(4.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an'", numberMatches(251050.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_afr'", numberMatches(16250.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_amr'", numberMatches(34592.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_asj'", numberMatches(10078.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_eas'", numberMatches(18394.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_fin'", numberMatches(21644.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_nfe'", numberMatches(113354.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_oth'", numberMatches(6130.0))
                .body("[1].'gnomadExome'.'alleleNumber'.'an_sas'", numberMatches(30608.0))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af'", numberMatches(2.27046E-4))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_afr'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_amr'", numberMatches(2.89084E-5))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_asj'", numberMatches(0.00406827))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_eas'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_fin'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_nfe'", numberMatches(9.70411E-5))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_oth'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'alleleFrequency'.'af_sas'", numberMatches(1.30685E-4))
                .body("[1].'gnomadExome'.'homozygotes'.'hom'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_afr'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_amr'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_asj'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_eas'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_fin'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_nfe'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_oth'", numberMatches(0.0))
                .body("[1].'gnomadExome'.'homozygotes'.'hom_sas'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac'", numberMatches(1.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_afr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_amr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_asj'", numberMatches(1.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_eas'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_fin'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_nfe'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_oth'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleCount'.'ac_sas'", nullValue())
                .body("[1].'gnomadGenome'.'alleleNumber'.'an'", numberMatches(31392.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_afr'", numberMatches(8712.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_amr'", numberMatches(848.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_asj'", numberMatches(290.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_eas'", numberMatches(1560.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_fin'", numberMatches(3468.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_nfe'", numberMatches(15426.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_oth'", numberMatches(1088.0))
                .body("[1].'gnomadGenome'.'alleleNumber'.'an_sas'", nullValue())
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af'", numberMatches(3.18552E-5))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_afr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_amr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_asj'", numberMatches(0.00344828))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_eas'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_fin'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_nfe'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_oth'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'alleleFrequency'.'af_sas'", nullValue())
                .body("[1].'gnomadGenome'.'homozygotes'.'hom'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_afr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_amr'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_asj'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_eas'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_fin'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_nfe'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_oth'", numberMatches(0.0))
                .body("[1].'gnomadGenome'.'homozygotes'.'hom_sas'", nullValue())
                .body("[2].'variant'", containsString("chr6:g.42454850G>A"))
                .body("[2].'query'", containsString("rs12190874"))
                .body("[2].'hgvs'", containsString("rs12190874"))
                .body("[2].'snpeff'.'license'", containsString("http://bit.ly/2suyRKt"))
                .body("[2].'vcf'.'alt'", containsString("A"))
                .body("[2].'vcf'.'position'", containsString("42454850"))
                .body("[2].'vcf'.'ref'", containsString("G"))
                .body("[2].'dbsnp'.'license'", containsString("http://bit.ly/2AqoLOc"))
                .body("[2].'dbsnp'.'alleles'.size()", equalTo(2))
                .body("[2].'dbsnp'.'alleles'[0].'allele'", containsString("G"))
                .body("[2].'dbsnp'.'alleles'[1].'allele'", containsString("A"))
                .body("[2].'dbsnp'.'alt'", containsString("A"))
                .body("[2].'dbsnp'.'chrom'", containsString("6"))
                .body("[2].'dbsnp'.'dbsnpBuild'", numberMatches(156.0))
                .body("[2].'dbsnp'.'flags'.size()", equalTo(1))
                .body("[2].'dbsnp'.'flags'[0]", nullValue())
                .body("[2].'dbsnp'.'hg19'.'start'", numberMatches(4.245485E7))
                .body("[2].'dbsnp'.'hg19'.'end'", numberMatches(4.245485E7))
                .body("[2].'dbsnp'.'ref'", containsString("G"))
                .body("[2].'dbsnp'.'rsid'", containsString("rs12190874"))
                .body("[2].'dbsnp'.'vartype'", containsString("snv"))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac'", numberMatches(3282.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_afr'", numberMatches(646.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_amr'", numberMatches(94.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_asj'", numberMatches(12.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_eas'", numberMatches(271.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_fin'", numberMatches(433.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_nfe'", numberMatches(1698.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_oth'", numberMatches(128.0))
                .body("[2].'gnomadGenome'.'alleleCount'.'ac_sas'", nullValue())
                .body("[2].'gnomadGenome'.'alleleNumber'.'an'", numberMatches(31340.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_afr'", numberMatches(8696.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_amr'", numberMatches(846.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_asj'", numberMatches(290.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_eas'", numberMatches(1556.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_fin'", numberMatches(3474.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_nfe'", numberMatches(15394.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_oth'", numberMatches(1084.0))
                .body("[2].'gnomadGenome'.'alleleNumber'.'an_sas'", nullValue())
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af'", numberMatches(0.104722))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_afr'", numberMatches(0.074287))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_amr'", numberMatches(0.111111))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_asj'", numberMatches(0.0413793))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_eas'", numberMatches(0.174165))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_fin'", numberMatches(0.12464))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_nfe'", numberMatches(0.110303))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_oth'", numberMatches(0.118081))
                .body("[2].'gnomadGenome'.'alleleFrequency'.'af_sas'", nullValue())
                .body("[2].'gnomadGenome'.'homozygotes'.'hom'", numberMatches(179.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_afr'", numberMatches(15.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_amr'", numberMatches(7.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_asj'", numberMatches(1.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_eas'", numberMatches(19.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_fin'", numberMatches(26.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_nfe'", numberMatches(103.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_oth'", numberMatches(8.0))
                .body("[2].'gnomadGenome'.'homozygotes'.'hom_sas'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/nucleotide_context/7:g.140453136A%3ET?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'molecule'", containsString("dna"))
                .body("'seq'", containsString("CAC"))
                .body("'hgvs'", containsString("7:g.140453136A>T"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"J:A\", " + 
                    " \"start\": 1073732641, " + 
                    " \"end\": 880, " + 
                    " \"referenceAllele\": \"-v\", " + 
                    " \"variantAllele\": \"iLVsblxDj\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("J:A"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.073732641E9))
                .body("[0].'genomicLocation'.'end'", numberMatches(880.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("-v"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("iLVsblxDj"))
                .body("[0].'variant'", containsString("J:A:g.1073732641_880delinsiLVsblxDj"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/dbsnp/rs116035550?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("rs116035550"))
                .body("'originalVariantQuery'", containsString("rs116035550"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("11"))
                .body("'start'", numberMatches(212464.0))
                .body("'end'", numberMatches(212464.0))
                .body("'allele_string'", containsString("G/A/C"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(46))
                .body("'transcript_consequences'[0].'exon'", containsString("6/10"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000325207"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000325941.5:p.Glu340Lys"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000325207.5:c.1018G>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'codons'", containsString("Gaa/Aaa"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000325941"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(340.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(340.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("RIC8A"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000177963"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("E/K"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("29550"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.932))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("probably_damaging"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_021932.4"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("6/10"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000325207"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000325941.5:p.Glu340Gln"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000325207.5:c.1018G>C"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("C"))
                .body("'transcript_consequences'[1].'codons'", containsString("Gaa/Caa"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000325941"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(340.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(340.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("RIC8A"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000177963"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("E/Q"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("29550"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'polyphen_score'", numberMatches(0.969))
                .body("'transcript_consequences'[1].'polyphen_prediction'", containsString("probably_damaging"))
                .body("'transcript_consequences'[1].'sift_score'", numberMatches(0.0))
                .body("'transcript_consequences'[1].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_021932.4"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000382743"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000372191"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("SIRT3"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000142082"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("14931"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(2))
                .body("'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_012239.5", "NM_001017524.2"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 43 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/MT:g.10360G%3EA?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("MT:g.10360G>A"))
                .body("'originalVariantQuery'", containsString("MT:g.10360G>A"))
                .body("'hgvsg'", containsString("MT:g.10360G>A"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("MT"))
                .body("'start'", numberMatches(10360.0))
                .body("'end'", numberMatches(10360.0))
                .body("'allele_string'", containsString("G/A"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(26))
                .body("'transcript_consequences'[0].'exon'", containsString("1/1"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000361227"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000355206.2:p.Ser101Asn"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000361227.2:c.302G>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[0].'codons'", containsString("aGt/aAt"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000355206"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(101.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(101.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("MT-ND3"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000198840"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("S/N"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("7458"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.569))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("possibly_damaging"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("deleterious_low_confidence"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000361335"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000354728"))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("MT-ND4L"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000212907"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("7460"))
                .body("'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000361381"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000354961"))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("MT-ND4"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000198886"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("7459"))
                .body("'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("upstream_gene_variant"))
                // Skipping assertions on the remaining 23 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs316\", " + 
                    " \"_EM_710_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "token=_U3hUoU&" + 
                    "fields=_EM_705_XYZ_&fields=_EM_706_XYZ_&fields=_EM_27726_XYZ_&fields=_EM_708_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs316"))
                .body("[0].'originalVariantQuery'", containsString("rs316"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("8"))
                .body("[0].'start'", numberMatches(1.9818436E7))
                .body("[0].'end'", numberMatches(1.9818436E7))
                .body("[0].'allele_string'", containsString("C/A/G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("synonymous_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(3))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.1164C>A"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("acC/acA"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'transcript_consequences'[1].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000311322.8:c.1164C>G"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[1].'codons'", containsString("acC/acG"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[1].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[1].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[1].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'transcript_consequences'[2].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000311322.8:c.1164C>T"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'codons'", containsString("acC/acT"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[2].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[2].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[2].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("_EM_710_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_710_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs316\", " + 
                    " \"_EM_710_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=mskcc&" + 
                    "token=_EM_27727_XYZ_&" + 
                    "fields=_EM_705_XYZ_&fields=_EM_706_XYZ_&fields=_EM_27726_XYZ_&fields=_EM_708_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs316"))
                .body("[0].'originalVariantQuery'", containsString("rs316"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("8"))
                .body("[0].'start'", numberMatches(1.9818436E7))
                .body("[0].'end'", numberMatches(1.9818436E7))
                .body("[0].'allele_string'", containsString("C/A/G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("synonymous_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(3))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.1164C>A"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("acC/acA"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'transcript_consequences'[1].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000311322.8:c.1164C>G"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[1].'codons'", containsString("acC/acG"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[1].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[1].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[1].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'transcript_consequences'[2].'exon'", containsString("8/10"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000309757.6:p.Thr388="))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000311322.8:c.1164C>T"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'codons'", containsString("acC/acT"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[2].'protein_start'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[2].'protein_end'", numberMatches(388.0))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[2].'amino_acids'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("synonymous_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("_EM_710_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_710_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_712_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs305\", " + 
                    " \"_EM_710_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=TCUkZIcocByj2S0&" + 
                    "token=_R3hFoI&" + 
                    "fields=_EM_705_XYZ_&fields=_EM_706_XYZ_&fields=_EM_707_XYZ_&fields=_EM_708_XYZ_&" + 
                    "EMextraParam123=_EM_711_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("rs305"))
                .body("[0].'originalVariantQuery'", containsString("rs305"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("8"))
                .body("[0].'start'", numberMatches(1.9817401E7))
                .body("[0].'end'", numberMatches(1.9817401E7))
                .body("[0].'allele_string'", containsString("A/C/G"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(2))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000311322.8:c.1139+510A>C"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("C"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000311322"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000311322.8:c.1139+510A>G"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("G"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000309757"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("LPL"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000175445"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("6677"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_000237.2"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("intron_variant"))
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[1].'variant'", containsString("_EM_710_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_710_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"MT:g.10360G\u003eA\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("MT:g.10360G>A"))
                .body("[0].'originalVariantQuery'", containsString("MT:g.10360G>A"))
                .body("[0].'hgvsg'", containsString("MT:g.10360G>A"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("MT"))
                .body("[0].'start'", numberMatches(10360.0))
                .body("[0].'end'", numberMatches(10360.0))
                .body("[0].'allele_string'", containsString("G/A"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("missense_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(26))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("1/1"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000361227"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000355206.2:p.Ser101Asn"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000361227.2:c.302G>A"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("aGt/aAt"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000355206"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(101.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(101.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("MT-ND3"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000198840"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("S/N"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("7458"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'polyphen_score'", numberMatches(0.569))
                .body("[0].'transcript_consequences'[0].'polyphen_prediction'", containsString("possibly_damaging"))
                .body("[0].'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("[0].'transcript_consequences'[0].'sift_prediction'", containsString("deleterious_low_confidence"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000361335"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000354728"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("MT-ND4L"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000212907"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("7460"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000361381"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000354961"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("MT-ND4"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000198886"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("7459"))
                .body("[0].'transcript_consequences'[2].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("upstream_gene_variant"))
                // Skipping assertions on the remaining 23 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rs3\", " + 
                    " \"rs3\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "token=%7B%0A++++++++++++++++++++%22laELiCUJS%22%3A%22YKJu0Ta%22%0A++++++++++++++++++++%7D&" + 
                    "fields=%3C&fields=nv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("rs3"))
                .body("[0].'originalVariantQuery'", containsString("rs3"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("13"))
                .body("[0].'start'", numberMatches(3.2446842E7))
                .body("[0].'end'", numberMatches(3.2446842E7))
                .body("[0].'allele_string'", containsString("C/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("intron_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000428783"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000428783.1:n.99+25766C>T"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("EEF1DP3"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000229715"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("30486"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(2))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("intron_variant", "non_coding_transcript_variant"))
                .body("[0].'successfully_annotated'", equalTo(true));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_127_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"A\", " + 
                    " \"start\": 397, " + 
                    " \"end\": 131170, " + 
                    " \"referenceAllele\": \"yNBR]ycoJYO\", " + 
                    " \"variantAllele\": \"_EM_115_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_116_XYZ_\", " + 
                    " \"start\": 918, " + 
                    " \"end\": 330, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_2190_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2151_XYZ_\", " + 
                    " \"start\": 932, " + 
                    " \"end\": 605, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"7xAh5sTgu5Y\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"eGytDEybIlCUAjv\", " + 
                    " \"start\": 1129626538, " + 
                    " \"end\": -907792429, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_123_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_124_XYZ_\", " + 
                    " \"start\": -524117, " + 
                    " \"end\": 563, " + 
                    " \"referenceAllele\": \"_EM_2153_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_125_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_2189_XYZ_&" + 
                    "token=p2zESjktwvvX_&" + 
                    "fields=NRr0Tl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("A:g.397_131170delins_EM_115_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("A,397,131170,yNBR]ycoJYO,_EM_115_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("_EM_116_XYZ_:g.918_919ins_EM_2190_XYZ_"))
                .body("[1].'originalVariantQuery'", containsString("_EM_116_XYZ_,918,330,,_EM_2190_XYZ_"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_2151_XYZ_:g.932_933ins7xAh5sTgu5Y"))
                .body("[2].'originalVariantQuery'", containsString("_EM_2151_XYZ_,932,605,,7xAh5sTgu5Y"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_21587_XYZ_\", " + 
                    " \"start\": 2, " + 
                    " \"end\": 65536, " + 
                    " \"referenceAllele\": \"_EM_21588_XYZ_\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_21587_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(2.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(65536.0))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_21588_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'variant'", containsString("_EM_21587_XYZ_:g.2_65536del"))
                .body("[0].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/12,25380271,25380271,C,T4?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"v6YsSZSrMQT\", " + 
                    " \"start\": 1, " + 
                    " \"end\": 37863772, " + 
                    " \"referenceAllele\": \"_EM_20256_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_20257_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"LF30J6_G4Ld4QZVg\", " + 
                    " \"start\": 46530800, " + 
                    " \"end\": 38403056, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 8, " + 
                    " \"end\": -2097148, " + 
                    " \"referenceAllele\": \"-Y\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"LuR0\", " + 
                    " \"start\": 8406023, " + 
                    " \"end\": 262319, " + 
                    " \"referenceAllele\": \"FA\", " + 
                    " \"variantAllele\": \"MA\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'genomicLocation'.'chromosome'", containsString("v6YsSZSrMQT"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.0))
                .body("[0].'genomicLocation'.'end'", numberMatches(3.7863772E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_20256_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_20257_XYZ_"))
                .body("[0].'variant'", containsString("v6YsSZSrMQT:g.9_37863772delins7_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("LF30J6_G4Ld4QZVg"))
                .body("[1].'genomicLocation'.'start'", numberMatches(4.65308E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(3.8403056E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[1].'variant'", containsString("LF30J6_G4Ld4QZVg:g.46530800C>C"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("12"))
                .body("[2].'genomicLocation'.'start'", numberMatches(8.0))
                .body("[2].'genomicLocation'.'end'", numberMatches(-2097148.0))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("-Y"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[2].'variant'", containsString("12:g.9del"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"7:g.140453136A\u003eT\", " + 
                    " \"12:g.25398285C\u003eA\", " + 
                    " \"17:g.41242962_41242963insGA\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'molecule'", containsString("dna"))
                .body("[0].'seq'", containsString("CAC"))
                .body("[0].'hgvs'", containsString("7:g.140453136A>T"))
                .body("[1].'molecule'", containsString("dna"))
                .body("[1].'seq'", containsString("CCA"))
                .body("[1].'hgvs'", containsString("12:g.25398285C>A"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140451024, " + 
                    " \"end\": 140453136, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_4611_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=&" + 
                    "token=_EM_4610_XYZ_&" + 
                    "fields=annotation_summary&fields=nucleotide_context&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("7:g.140451024_140451025ins_EM_4611_XYZ_"))
                .body("[0].'originalVariantQuery'", containsString("7,140451024,140453136,NA,_EM_4611_XYZ_"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 55242466, " + 
                    " \"end\": 55242480, " + 
                    " \"referenceAllele\": \"GAATTAAGAGAAGCA\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 55249002, " + 
                    " \"end\": 55249003, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"CAGCGTGGA\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'genomicLocation'.'chromosome'", containsString("7"))
                .body("[0].'genomicLocation'.'start'", numberMatches(5.5242466E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(5.524248E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("GAATTAAGAGAAGCA"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'variant'", containsString("7:g.55242466_55242480del"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("7"))
                .body("[1].'genomicLocation'.'start'", numberMatches(5.5249002E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(5.5249003E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("-"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("CAGCGTGGA"))
                .body("[1].'variant'", containsString("7:g.55249002_55249003insCAGCGTGGA"))
                .body("[1].'hotspots'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"8:g.21994291C\u003eTw\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=%5CmU1Iz&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("8:g.21994291C>Tw"))
                .body("[0].'genomicLocation'.'chromosome'", containsString("8"))
                .body("[0].'genomicLocation'.'start'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("TW"))
                .body("[0].'strandSign'", containsString("+"))
                .body("[0].'variantType'", containsString("INS"))
                .body("[0].'assemblyName'", containsString("GRCh37"))
                .body("[0].'canonicalTranscriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequences'.size()", equalTo(1))
                .body("[0].'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequences'[0].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("HR"))
                .body("[0].'transcriptConsequences'[0].'refSeq'", containsString("NM_005144.4"))
                .body("[0].'transcriptConsequences'[0].'variantClassification'", containsString("5'Flank"))
                .body("[0].'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequenceSummary'.'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("HR"))
                .body("[0].'transcriptConsequenceSummary'.'refSeq'", containsString("NM_005144.4"))
                .body("[0].'transcriptConsequenceSummary'.'variantClassification'", containsString("5'Flank"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("transcriptConsequenceSummaries", "transcriptConsequenceSummary", "transcriptConsequences", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"8:g.21994291C\u003eT\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=foo&" + 
                    "projection=ALL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("8:g.21994291C>T"))
                .body("[0].'genomicLocation'.'chromosome'", containsString("8"))
                .body("[0].'genomicLocation'.'start'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("T"))
                .body("[0].'strandSign'", containsString("+"))
                .body("[0].'variantType'", containsString("SNP"))
                .body("[0].'assemblyName'", containsString("GRCh37"))
                .body("[0].'canonicalTranscriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequences'.size()", equalTo(9))
                .body("[0].'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000306306"))
                .body("[0].'transcriptConsequences'[0].'consequenceTerms'", containsString("downstream_gene_variant"))
                .body("[0].'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("REEP4"))
                .body("[0].'transcriptConsequences'[0].'refSeq'", containsString("NM_025232.2"))
                .body("[0].'transcriptConsequences'[0].'variantClassification'", containsString("3'Flank"))
                .body("[0].'transcriptConsequences'[1].'transcriptId'", containsString("ENST00000334530"))
                .body("[0].'transcriptConsequences'[1].'consequenceTerms'", containsString("downstream_gene_variant"))
                .body("[0].'transcriptConsequences'[1].'hugoGeneSymbol'", containsString("REEP4"))
                .body("[0].'transcriptConsequences'[1].'variantClassification'", containsString("3'Flank"))
                .body("[0].'transcriptConsequences'[2].'transcriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequences'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequences'[2].'hugoGeneSymbol'", containsString("HR"))
                .body("[0].'transcriptConsequences'[2].'refSeq'", containsString("NM_005144.4"))
                .body("[0].'transcriptConsequences'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(9))
                .body("[0].'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000306306"))
                .body("[0].'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("downstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("REEP4"))
                .body("[0].'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_025232.2"))
                .body("[0].'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("3'Flank"))
                .body("[0].'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000334530"))
                .body("[0].'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("downstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("REEP4"))
                .body("[0].'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("3'Flank"))
                .body("[0].'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("HR"))
                .body("[0].'transcriptConsequenceSummaries'[2].'refSeq'", containsString("NM_005144.4"))
                .body("[0].'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000381418"))
                .body("[0].'transcriptConsequenceSummary'.'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("HR"))
                .body("[0].'transcriptConsequenceSummary'.'refSeq'", containsString("NM_005144.4"))
                .body("[0].'transcriptConsequenceSummary'.'variantClassification'", containsString("5'Flank"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/summary/9:g.21994291C%3ET?" + 
                    "isoformOverrideSource=foo&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("9:g.21994291C>T"))
                .body("'genomicLocation'.'chromosome'", containsString("9"))
                .body("'genomicLocation'.'start'", numberMatches(2.1994291E7))
                .body("'genomicLocation'.'end'", numberMatches(2.1994291E7))
                .body("'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("'genomicLocation'.'variantAllele'", containsString("T"))
                .body("'strandSign'", containsString("+"))
                .body("'variantType'", containsString("SNP"))
                .body("'assemblyName'", containsString("GRCh37"))
                .body("'canonicalTranscriptId'", containsString("ENST00000428597"))
                .body("'transcriptConsequences'.size()", equalTo(23))
                .body("'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000361570"))
                .body("'transcriptConsequences'[0].'codonChange'", containsString("Gcg/Acg"))
                .body("'transcriptConsequences'[0].'aminoAcids'", containsString("A/T"))
                .body("'transcriptConsequences'[0].'aminoAcidRef'", containsString("A"))
                .body("'transcriptConsequences'[0].'aminoAcidAlt'", containsString("T"))
                .body("'transcriptConsequences'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("CDKN2A"))
                .body("'transcriptConsequences'[0].'hgvspShort'", containsString("p.A55T"))
                .body("'transcriptConsequences'[0].'hgvsp'", containsString("p.Ala55Thr"))
                .body("'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000361570.3:c.163G>A"))
                .body("'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(55.0))
                .body("'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(55.0))
                .body("'transcriptConsequences'[0].'refSeq'", containsString("NM_058195.3"))
                .body("'transcriptConsequences'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("'transcriptConsequences'[0].'exon'", containsString("1/3"))
                .body("'transcriptConsequences'[0].'polyphenScore'", numberMatches(0.014))
                .body("'transcriptConsequences'[0].'polyphenPrediction'", containsString("benign"))
                .body("'transcriptConsequences'[0].'siftScore'", numberMatches(0.09))
                .body("'transcriptConsequences'[0].'siftPrediction'", containsString("tolerated_low_confidence"))
                .body("'transcriptConsequences'[1].'transcriptId'", containsString("ENST00000428597"))
                .body("'transcriptConsequences'[1].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("'transcriptConsequences'[1].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("'transcriptConsequences'[1].'variantClassification'", containsString("5'Flank"))
                .body("'transcriptConsequences'[2].'transcriptId'", containsString("ENST00000455933"))
                .body("'transcriptConsequences'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("'transcriptConsequences'[2].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("'transcriptConsequences'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 20 elements. This limit of 3 elements can be increased in the configurations
                .body("'transcriptConsequenceSummaries'.size()", equalTo(23))
                .body("'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000361570"))
                .body("'transcriptConsequenceSummaries'[0].'codonChange'", containsString("Gcg/Acg"))
                .body("'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("A/T"))
                .body("'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("A"))
                .body("'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("T"))
                .body("'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("CDKN2A"))
                .body("'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.A55T"))
                .body("'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Ala55Thr"))
                .body("'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000361570.3:c.163G>A"))
                .body("'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(55.0))
                .body("'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(55.0))
                .body("'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_058195.3"))
                .body("'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("'transcriptConsequenceSummaries'[0].'exon'", containsString("1/3"))
                .body("'transcriptConsequenceSummaries'[0].'polyphenScore'", numberMatches(0.014))
                .body("'transcriptConsequenceSummaries'[0].'polyphenPrediction'", containsString("benign"))
                .body("'transcriptConsequenceSummaries'[0].'siftScore'", numberMatches(0.09))
                .body("'transcriptConsequenceSummaries'[0].'siftPrediction'", containsString("tolerated_low_confidence"))
                .body("'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000428597"))
                .body("'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("5'Flank"))
                .body("'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000455933"))
                .body("'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 20 elements. This limit of 3 elements can be increased in the configurations
                .body("'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000428597"))
                .body("'transcriptConsequenceSummary'.'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("'transcriptConsequenceSummary'.'variantClassification'", containsString("5'Flank"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"9:g.21994291C\u003eT\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("9:g.21994291C>T"))
                .body("[0].'genomicLocation'.'chromosome'", containsString("9"))
                .body("[0].'genomicLocation'.'start'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(2.1994291E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("T"))
                .body("[0].'strandSign'", containsString("+"))
                .body("[0].'variantType'", containsString("SNP"))
                .body("[0].'assemblyName'", containsString("GRCh37"))
                .body("[0].'canonicalTranscriptId'", containsString("ENST00000428597"))
                .body("[0].'transcriptConsequences'.size()", equalTo(23))
                .body("[0].'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000361570"))
                .body("[0].'transcriptConsequences'[0].'codonChange'", containsString("Gcg/Acg"))
                .body("[0].'transcriptConsequences'[0].'aminoAcids'", containsString("A/T"))
                .body("[0].'transcriptConsequences'[0].'aminoAcidRef'", containsString("A"))
                .body("[0].'transcriptConsequences'[0].'aminoAcidAlt'", containsString("T"))
                .body("[0].'transcriptConsequences'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("CDKN2A"))
                .body("[0].'transcriptConsequences'[0].'hgvspShort'", containsString("p.A55T"))
                .body("[0].'transcriptConsequences'[0].'hgvsp'", containsString("p.Ala55Thr"))
                .body("[0].'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000361570.3:c.163G>A"))
                .body("[0].'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(55.0))
                .body("[0].'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(55.0))
                .body("[0].'transcriptConsequences'[0].'refSeq'", containsString("NM_058195.3"))
                .body("[0].'transcriptConsequences'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'transcriptConsequences'[0].'exon'", containsString("1/3"))
                .body("[0].'transcriptConsequences'[0].'polyphenScore'", numberMatches(0.014))
                .body("[0].'transcriptConsequences'[0].'polyphenPrediction'", containsString("benign"))
                .body("[0].'transcriptConsequences'[0].'siftScore'", numberMatches(0.09))
                .body("[0].'transcriptConsequences'[0].'siftPrediction'", containsString("tolerated_low_confidence"))
                .body("[0].'transcriptConsequences'[1].'transcriptId'", containsString("ENST00000428597"))
                .body("[0].'transcriptConsequences'[1].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequences'[1].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("[0].'transcriptConsequences'[1].'variantClassification'", containsString("5'Flank"))
                .body("[0].'transcriptConsequences'[2].'transcriptId'", containsString("ENST00000455933"))
                .body("[0].'transcriptConsequences'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequences'[2].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("[0].'transcriptConsequences'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 20 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'transcriptConsequenceSummaries'.size()", equalTo(23))
                .body("[0].'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000361570"))
                .body("[0].'transcriptConsequenceSummaries'[0].'codonChange'", containsString("Gcg/Acg"))
                .body("[0].'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("A/T"))
                .body("[0].'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("A"))
                .body("[0].'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("T"))
                .body("[0].'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("CDKN2A"))
                .body("[0].'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.A55T"))
                .body("[0].'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Ala55Thr"))
                .body("[0].'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000361570.3:c.163G>A"))
                .body("[0].'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(55.0))
                .body("[0].'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(55.0))
                .body("[0].'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_058195.3"))
                .body("[0].'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'transcriptConsequenceSummaries'[0].'exon'", containsString("1/3"))
                .body("[0].'transcriptConsequenceSummaries'[0].'polyphenScore'", numberMatches(0.014))
                .body("[0].'transcriptConsequenceSummaries'[0].'polyphenPrediction'", containsString("benign"))
                .body("[0].'transcriptConsequenceSummaries'[0].'siftScore'", numberMatches(0.09))
                .body("[0].'transcriptConsequenceSummaries'[0].'siftPrediction'", containsString("tolerated_low_confidence"))
                .body("[0].'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000428597"))
                .body("[0].'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("[0].'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("5'Flank"))
                .body("[0].'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000455933"))
                .body("[0].'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("[0].'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("5'Flank"))
                // Skipping assertions on the remaining 20 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000428597"))
                .body("[0].'transcriptConsequenceSummary'.'consequenceTerms'", containsString("upstream_gene_variant"))
                .body("[0].'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("CDKN2B-AS1"))
                .body("[0].'transcriptConsequenceSummary'.'variantClassification'", containsString("5'Flank"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"QSaDiL\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453065, " + 
                    " \"referenceAllele\": \"_EM_2983_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2984_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2985_XYZ_\", " + 
                    " \"start\": 37879730, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"_EM_2986_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2987_XYZ_\", " + 
                    " \"start\": 24873996, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"CG\", " + 
                    " \"variantAllele\": \"GA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25380271, " + 
                    " \"end\": 25380303, " + 
                    " \"referenceAllele\": \"_EM_2988_XYZ_\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2989_XYZ_\", " + 
                    " \"start\": 89684748, " + 
                    " \"end\": 89701196, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"CKdGQqCuIe\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'genomicLocation'.'chromosome'", containsString("QSaDiL"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.40453193E8))
                .body("[0].'genomicLocation'.'end'", numberMatches(1.40453065E8))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_2983_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("_EM_2984_XYZ_"))
                .body("[0].'variant'", containsString("QSaDiL:g.140453200_140453065delins4_XYZ_"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[1].'genomicLocation'.'start'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("T"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[1].'variant'", containsString("17:g.37880220T>C"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("_EM_2985_XYZ_"))
                .body("[2].'genomicLocation'.'start'", numberMatches(3.787973E7))
                .body("[2].'genomicLocation'.'end'", numberMatches(3.7879794E7))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2986_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[2].'variant'", containsString("_EM_2985_XYZ_:g.37879730_37879794delinsC"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2530_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 141501769, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879794, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"_EM_2517_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25922572, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"_EM_2518_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2519_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2520_XYZ_\", " + 
                    " \"start\": 25388463, " + 
                    " \"end\": 25347503, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[0].'genomicLocation'.'start'", numberMatches(3.788022E7))
                .body("[0].'genomicLocation'.'end'", numberMatches(3.788022E7))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("T"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[0].'variant'", containsString("17:g.37880220T>C"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[1].'genomicLocation'.'start'", numberMatches(3.7879794E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(3.7879794E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("_EM_2517_XYZ_"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[1].'variant'", containsString("17:g.37879794_37879794delinsC"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("12"))
                .body("[2].'genomicLocation'.'start'", numberMatches(2.5922572E7))
                .body("[2].'genomicLocation'.'end'", numberMatches(2.5398285E7))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2518_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("_EM_2519_XYZ_"))
                .body("[2].'variant'", containsString("12:g.25922579_25398285delins9_XYZ_"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453193, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879794, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"_EM_2517_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25922572, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"_EM_2518_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2519_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2520_XYZ_\", " + 
                    " \"start\": 25388463, " + 
                    " \"end\": 25347503, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'genomicLocation'.'chromosome'", containsString("7"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.40453193E8))
                .body("[0].'genomicLocation'.'end'", numberMatches(1.40453193E8))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("T"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[0].'variant'", containsString("7:g.140453193T>C"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[1].'genomicLocation'.'start'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("T"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[1].'variant'", containsString("17:g.37880220T>C"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[2].'genomicLocation'.'start'", numberMatches(3.7879794E7))
                .body("[2].'genomicLocation'.'end'", numberMatches(3.7879794E7))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("_EM_2517_XYZ_"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[2].'variant'", containsString("17:g.37879794_37879794delinsC"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2823_XYZ_\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453065, " + 
                    " \"referenceAllele\": \"_EM_2824_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879794, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"G\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25398284, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"CC\", " + 
                    " \"variantAllele\": \"GA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25380271, " + 
                    " \"end\": 25380271, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2825_XYZ_\", " + 
                    " \"start\": 89684748, " + 
                    " \"end\": 89693004, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"_EM_2826_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'genomicLocation'.'chromosome'", containsString("_EM_2823_XYZ_"))
                .body("[0].'genomicLocation'.'start'", numberMatches(1.40453193E8))
                .body("[0].'genomicLocation'.'end'", numberMatches(1.40453065E8))
                .body("[0].'genomicLocation'.'referenceAllele'", containsString("_EM_2824_XYZ_"))
                .body("[0].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[0].'variant'", containsString("_EM_28X_XYZ_:g.140453193_140453065delinsC"))
                .body("[0].'hotspots'.size()", equalTo(0))
                .body("[1].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[1].'genomicLocation'.'start'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'end'", numberMatches(3.788022E7))
                .body("[1].'genomicLocation'.'referenceAllele'", containsString("T"))
                .body("[1].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[1].'variant'", containsString("17:g.37880220T>C"))
                .body("[1].'hotspots'.size()", equalTo(0))
                .body("[2].'genomicLocation'.'chromosome'", containsString("17"))
                .body("[2].'genomicLocation'.'start'", numberMatches(3.7879794E7))
                .body("[2].'genomicLocation'.'end'", numberMatches(3.7879794E7))
                .body("[2].'genomicLocation'.'referenceAllele'", containsString("G"))
                .body("[2].'genomicLocation'.'variantAllele'", containsString("C"))
                .body("[2].'variant'", containsString("17:g.37879794G>C"))
                .body("[2].'hotspots'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/genomic/7,140453136,140453136,A,T?" + 
                    "fields=annotation_summary&fields=nucleotide_context&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("7:g.140453136A>T"))
                .body("'originalVariantQuery'", containsString("7,140453136,140453136,A,T"))
                .body("'hgvsg'", containsString("7:g.140453136A>T"))
                .body("'assembly_name'", containsString("GRCh37"))
                .body("'seq_region_name'", containsString("7"))
                .body("'start'", numberMatches(1.40453136E8))
                .body("'end'", numberMatches(1.40453136E8))
                .body("'allele_string'", containsString("A/T"))
                .body("'strand'", numberMatches(1.0))
                .body("'most_severe_consequence'", containsString("missense_variant"))
                .body("'transcript_consequences'.size()", equalTo(4))
                .body("'transcript_consequences'[0].'exon'", containsString("15/18"))
                .body("'transcript_consequences'[0].'transcript_id'", containsString("ENST00000288602"))
                .body("'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000288602.6:p.Val600Glu"))
                .body("'transcript_consequences'[0].'hgvsc'", containsString("ENST00000288602.6:c.1799T>A"))
                .body("'transcript_consequences'[0].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[0].'codons'", containsString("gTg/gAg"))
                .body("'transcript_consequences'[0].'protein_id'", containsString("ENSP00000288602"))
                .body("'transcript_consequences'[0].'protein_start'", numberMatches(600.0))
                .body("'transcript_consequences'[0].'protein_end'", numberMatches(600.0))
                .body("'transcript_consequences'[0].'gene_symbol'", containsString("BRAF"))
                .body("'transcript_consequences'[0].'gene_id'", containsString("ENSG00000157764"))
                .body("'transcript_consequences'[0].'amino_acids'", containsString("V/E"))
                .body("'transcript_consequences'[0].'hgnc_id'", containsString("1097"))
                .body("'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("'transcript_consequences'[0].'polyphen_score'", numberMatches(0.963))
                .body("'transcript_consequences'[0].'polyphen_prediction'", containsString("probably_damaging"))
                .body("'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_004333.4"))
                .body("'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("'transcript_consequences'[1].'exon'", containsString("2/6"))
                .body("'transcript_consequences'[1].'transcript_id'", containsString("ENST00000479537"))
                .body("'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000418033.1:p.Val28Glu"))
                .body("'transcript_consequences'[1].'hgvsc'", containsString("ENST00000479537.1:c.83T>A"))
                .body("'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[1].'codons'", containsString("gTg/gAg"))
                .body("'transcript_consequences'[1].'protein_id'", containsString("ENSP00000418033"))
                .body("'transcript_consequences'[1].'protein_start'", numberMatches(28.0))
                .body("'transcript_consequences'[1].'protein_end'", numberMatches(28.0))
                .body("'transcript_consequences'[1].'gene_symbol'", containsString("BRAF"))
                .body("'transcript_consequences'[1].'gene_id'", containsString("ENSG00000157764"))
                .body("'transcript_consequences'[1].'amino_acids'", containsString("V/E"))
                .body("'transcript_consequences'[1].'hgnc_id'", containsString("1097"))
                .body("'transcript_consequences'[1].'polyphen_score'", numberMatches(0.991))
                .body("'transcript_consequences'[1].'polyphen_prediction'", containsString("probably_damaging"))
                .body("'transcript_consequences'[1].'sift_score'", numberMatches(0.01))
                .body("'transcript_consequences'[1].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[1].'consequence_terms'.size()", equalTo(2))
                .body("'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant", "NMD_transcript_variant"))
                .body("'transcript_consequences'[2].'exon'", containsString("6/10"))
                .body("'transcript_consequences'[2].'transcript_id'", containsString("ENST00000496384"))
                .body("'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000419060.1:p.Val208Glu"))
                .body("'transcript_consequences'[2].'hgvsc'", containsString("ENST00000496384.2:c.623T>A"))
                .body("'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("'transcript_consequences'[2].'codons'", containsString("gTg/gAg"))
                .body("'transcript_consequences'[2].'protein_id'", containsString("ENSP00000419060"))
                .body("'transcript_consequences'[2].'protein_start'", numberMatches(208.0))
                .body("'transcript_consequences'[2].'protein_end'", numberMatches(208.0))
                .body("'transcript_consequences'[2].'gene_symbol'", containsString("BRAF"))
                .body("'transcript_consequences'[2].'gene_id'", containsString("ENSG00000157764"))
                .body("'transcript_consequences'[2].'amino_acids'", containsString("V/E"))
                .body("'transcript_consequences'[2].'hgnc_id'", containsString("1097"))
                .body("'transcript_consequences'[2].'polyphen_score'", numberMatches(0.817))
                .body("'transcript_consequences'[2].'polyphen_prediction'", containsString("possibly_damaging"))
                .body("'transcript_consequences'[2].'sift_score'", numberMatches(0.0))
                .body("'transcript_consequences'[2].'sift_prediction'", containsString("deleterious"))
                .body("'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'successfully_annotated'", equalTo(true))
                .body("'nucleotide_context'.'license'", nullValue())
                .body("'nucleotide_context'.'annotation'.'molecule'", containsString("dna"))
                .body("'nucleotide_context'.'annotation'.'seq'", containsString("CAC"))
                .body("'nucleotide_context'.'annotation'.'hgvs'", containsString("7:g.140453136A>T"))
                .body("'annotation_summary'.'variant'", containsString("7:g.140453136A>T"))
                .body("'annotation_summary'.'genomicLocation'.'chromosome'", containsString("7"))
                .body("'annotation_summary'.'genomicLocation'.'start'", numberMatches(1.40453136E8))
                .body("'annotation_summary'.'genomicLocation'.'end'", numberMatches(1.40453136E8))
                .body("'annotation_summary'.'genomicLocation'.'referenceAllele'", containsString("A"))
                .body("'annotation_summary'.'genomicLocation'.'variantAllele'", containsString("T"))
                .body("'annotation_summary'.'strandSign'", containsString("+"))
                .body("'annotation_summary'.'variantType'", containsString("SNP"))
                .body("'annotation_summary'.'assemblyName'", containsString("GRCh37"))
                .body("'annotation_summary'.'canonicalTranscriptId'", containsString("ENST00000288602"))
                .body("'annotation_summary'.'transcriptConsequences'.size()", equalTo(1))
                .body("'annotation_summary'.'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000288602"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'codonChange'", containsString("gTg/gAg"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'aminoAcids'", containsString("V/E"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'aminoAcidRef'", containsString("V"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'aminoAcidAlt'", containsString("E"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("BRAF"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'hgvspShort'", containsString("p.V600E"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'hgvsp'", containsString("p.Val600Glu"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000288602.6:c.1799T>A"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequences'[0].'refSeq'", containsString("NM_004333.4"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'exon'", containsString("15/18"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'polyphenScore'", numberMatches(0.963))
                .body("'annotation_summary'.'transcriptConsequences'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("'annotation_summary'.'transcriptConsequences'[0].'siftScore'", numberMatches(0.0))
                .body("'annotation_summary'.'transcriptConsequences'[0].'siftPrediction'", containsString("deleterious"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'.size()", equalTo(4))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000288602"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'codonChange'", containsString("gTg/gAg"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("V/E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("V"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("BRAF"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.V600E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Val600Glu"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000288602.6:c.1799T>A"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_004333.4"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'exon'", containsString("15/18"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenScore'", numberMatches(0.963))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftScore'", numberMatches(0.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftPrediction'", containsString("deleterious"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000479537"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'codonChange'", containsString("gTg/gAg"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcids'", containsString("V/E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidRef'", containsString("V"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidAlt'", containsString("E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("missense_variant,NMD_transcript_variant"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("BRAF"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvspShort'", containsString("p.V28E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsp'", containsString("p.Val28Glu"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsc'", containsString("ENST00000479537.1:c.83T>A"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'start'", numberMatches(28.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'end'", numberMatches(28.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("Missense_Mutation"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'exon'", containsString("2/6"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenScore'", numberMatches(0.991))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenPrediction'", containsString("probably_damaging"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftScore'", numberMatches(0.01))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftPrediction'", containsString("deleterious"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000496384"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'codonChange'", containsString("gTg/gAg"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcids'", containsString("V/E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidRef'", containsString("V"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidAlt'", containsString("E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("missense_variant"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("BRAF"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvspShort'", containsString("p.V208E"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsp'", containsString("p.Val208Glu"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsc'", containsString("ENST00000496384.2:c.623T>A"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'start'", numberMatches(208.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'end'", numberMatches(208.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("Missense_Mutation"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'exon'", containsString("6/10"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenScore'", numberMatches(0.817))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenPrediction'", containsString("possibly_damaging"))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftScore'", numberMatches(0.0))
                .body("'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftPrediction'", containsString("deleterious"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000288602"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'codonChange'", containsString("gTg/gAg"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcids'", containsString("V/E"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidRef'", containsString("V"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidAlt'", containsString("E"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'consequenceTerms'", containsString("missense_variant"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("BRAF"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'hgvspShort'", containsString("p.V600E"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'hgvsp'", containsString("p.Val600Glu"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'hgvsc'", containsString("ENST00000288602.6:c.1799T>A"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'start'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'end'", numberMatches(600.0))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'refSeq'", containsString("NM_004333.4"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'variantClassification'", containsString("Missense_Mutation"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'exon'", containsString("15/18"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'polyphenScore'", numberMatches(0.963))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'polyphenPrediction'", containsString("probably_damaging"))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'siftScore'", numberMatches(0.0))
                .body("'annotation_summary'.'transcriptConsequenceSummary'.'siftPrediction'", containsString("deleterious"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"4\", " + 
                    " \"start\": 55152095, " + 
                    " \"end\": 55152107, " + 
                    " \"referenceAllele\": \"ATCATGCATGATT\", " + 
                    " \"variantAllele\": \"A\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "fields=annotation_summary&fields=nucleotide_context&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("4:g.55152096_55152107del"))
                .body("[0].'originalVariantQuery'", containsString("4,55152095,55152107,ATCATGCATGATT,A"))
                .body("[0].'hgvsg'", containsString("4:g.55152096_55152107del"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("4"))
                .body("[0].'start'", numberMatches(5.5152096E7))
                .body("[0].'end'", numberMatches(5.5152107E7))
                .body("[0].'allele_string'", containsString("TCATGCATGATT/-"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("inframe_deletion"))
                .body("[0].'transcript_consequences'.size()", equalTo(4))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("18/23"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000257290"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000257290.5:p.Ile843_Ser847delinsThr"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000257290.5:c.2528_2539del"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("-"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000257290"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(843.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(847.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("PDGFRA"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000134853"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("IMHDS/T"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("8803"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_006206.4"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("inframe_deletion"))
                .body("[0].'transcript_consequences'[1].'exon'", containsString("19/24"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000507166"))
                .body("[0].'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000423325.1:p.Ile603_Ser607delinsThr"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000507166.1:c.1808_1819del"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("-"))
                .body("[0].'transcript_consequences'[1].'codons'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000423325"))
                .body("[0].'transcript_consequences'[1].'protein_start'", numberMatches(603.0))
                .body("[0].'transcript_consequences'[1].'protein_end'", numberMatches(607.0))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("FIP1L1"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000145216"))
                .body("[0].'transcript_consequences'[1].'amino_acids'", containsString("IMHDS/T"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("19124"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("inframe_deletion"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000507536"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("-"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("PDGFRA"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000134853"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("8803"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("downstream_gene_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[0].'annotation_summary'.'variant'", containsString("4:g.55152096_55152107del"))
                .body("[0].'annotation_summary'.'genomicLocation'.'chromosome'", containsString("4"))
                .body("[0].'annotation_summary'.'genomicLocation'.'start'", numberMatches(5.5152096E7))
                .body("[0].'annotation_summary'.'genomicLocation'.'end'", numberMatches(5.5152107E7))
                .body("[0].'annotation_summary'.'genomicLocation'.'referenceAllele'", containsString("TCATGCATGATT"))
                .body("[0].'annotation_summary'.'genomicLocation'.'variantAllele'", containsString("-"))
                .body("[0].'annotation_summary'.'strandSign'", containsString("+"))
                .body("[0].'annotation_summary'.'variantType'", containsString("DEL"))
                .body("[0].'annotation_summary'.'assemblyName'", containsString("GRCh37"))
                .body("[0].'annotation_summary'.'canonicalTranscriptId'", containsString("ENST00000257290"))
                .body("[0].'annotation_summary'.'transcriptConsequences'.size()", equalTo(1))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000257290"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'codonChange'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcids'", containsString("IMHDS/T"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidRef'", containsString("IMHDS"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidAlt'", containsString("T"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'consequenceTerms'", containsString("inframe_deletion"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("PDGFRA"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvspShort'", containsString("p.I843_S847delinsT"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvsp'", containsString("p.Ile843_Ser847delinsThr"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000257290.5:c.2528_2539del"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(843.0))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(847.0))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'refSeq'", containsString("NM_006206.4"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'variantClassification'", containsString("In_Frame_Del"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'exon'", containsString("18/23"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'.size()", equalTo(4))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000257290"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'codonChange'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("IMHDS/T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("IMHDS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("inframe_deletion"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("PDGFRA"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.I843_S847delinsT"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Ile843_Ser847delinsThr"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000257290.5:c.2528_2539del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(843.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(847.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_006206.4"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("In_Frame_Del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'exon'", containsString("18/23"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000507166"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'codonChange'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcids'", containsString("IMHDS/T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidRef'", containsString("IMHDS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidAlt'", containsString("T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("inframe_deletion"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("FIP1L1"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvspShort'", containsString("p.I603_S607delinsT"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsp'", containsString("p.Ile603_Ser607delinsThr"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsc'", containsString("ENST00000507166.1:c.1808_1819del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'start'", numberMatches(603.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'end'", numberMatches(607.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("In_Frame_Del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'exon'", containsString("19/24"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000507536"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("downstream_gene_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("PDGFRA"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("3'Flank"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000257290"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'codonChange'", containsString("aTCATGCATGATTcg/acg"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcids'", containsString("IMHDS/T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidRef'", containsString("IMHDS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidAlt'", containsString("T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'consequenceTerms'", containsString("inframe_deletion"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("PDGFRA"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvspShort'", containsString("p.I843_S847delinsT"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsp'", containsString("p.Ile843_Ser847delinsThr"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsc'", containsString("ENST00000257290.5:c.2528_2539del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'start'", numberMatches(843.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'end'", numberMatches(847.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'refSeq'", containsString("NM_006206.4"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'variantClassification'", containsString("In_Frame_Del"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'exon'", containsString("18/23"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140451088, " + 
                    " \"end\": 140453136, " + 
                    " \"referenceAllele\": \"_EM_2343_XYZ_\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_2297_XYZ_&" + 
                    "token=foo&" + 
                    "fields=annotation_summary&fields=nucleotide_context&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("7:g.140451088_140453136delinsT"))
                .body("[0].'originalVariantQuery'", containsString("7,140451088,140453136,_EM_2343_XYZ_,T"))
                .body("[0].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89624245, " + 
                    " \"end\": 89624245, " + 
                    " \"referenceAllele\": \"G\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10.0\", " + 
                    " \"start\": 89624242, " + 
                    " \"end\": 89624243, " + 
                    " \"referenceAllele\": \"AA\", " + 
                    " \"variantAllele\": \"-\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "fields=my_variant_info&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("10:g.89624245G>T"))
                .body("[0].'originalVariantQuery'", containsString("10,89624245,89624245,G,T"))
                .body("[0].'hgvsg'", containsString("10:g.89624245G>T"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("10"))
                .body("[0].'start'", numberMatches(8.9624245E7))
                .body("[0].'end'", numberMatches(8.9624245E7))
                .body("[0].'allele_string'", containsString("G/T"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("stop_gained"))
                .body("[0].'transcript_consequences'.size()", equalTo(4))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("1/9"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000371953"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000361021.3:p.Glu7Ter"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000371953.3:c.19G>T"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("Gag/Tag"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000361021"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(7.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(7.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("PTEN"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000171862"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("E/*"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("9588"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_000314.4"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("stop_gained"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000445946"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000392204"))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("KLLN"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000227268"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("37212"))
                .body("[0].'transcript_consequences'[1].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_001126049.1"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("upstream_gene_variant"))
                .body("[0].'transcript_consequences'[2].'exon'", containsString("1/2"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000462694"))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000462694.1:n.21G>T"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("T"))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("PTEN"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000171862"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("9588"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("non_coding_transcript_exon_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[0].'my_variant_info'.'license'", nullValue())
                .body("[0].'my_variant_info'.'annotation'.'variant'", containsString("chr10:g.89624245G>T"))
                .body("[0].'my_variant_info'.'annotation'.'query'", containsString("chr10:g.89624245G>T"))
                .body("[0].'my_variant_info'.'annotation'.'hgvs'", containsString("10:g.89624245G>T"))
                .body("[0].'my_variant_info'.'annotation'.'snpeff'.'license'", containsString("http://bit.ly/2suyRKt"))
                .body("[0].'my_variant_info'.'annotation'.'vcf'.'alt'", containsString("T"))
                .body("[0].'my_variant_info'.'annotation'.'vcf'.'position'", containsString("89624245"))
                .body("[0].'my_variant_info'.'annotation'.'vcf'.'ref'", containsString("G"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'license'", containsString("http://bit.ly/2AqoLOc"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'alleles'.size()", equalTo(1))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'alleles'[0]", nullValue())
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'alt'", containsString("T"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'chrom'", containsString("10"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'dbsnpBuild'", numberMatches(156.0))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'flags'.size()", equalTo(1))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'flags'[0]", nullValue())
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'hg19'.'start'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'hg19'.'end'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'ref'", containsString("G"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'rsid'", containsString("rs1554890335"))
                .body("[0].'my_variant_info'.'annotation'.'dbsnp'.'vartype'", containsString("snv"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'license'", containsString("http://bit.ly/2VMkY7R"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'alt'", containsString("T"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'chrom'", containsString("10"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'cosmicId'", containsString("COSM5298"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'hg19'.'start'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'hg19'.'end'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'mutFreq'", numberMatches(0.19))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'mutNt'", containsString("G>T"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'ref'", containsString("G"))
                .body("[0].'my_variant_info'.'annotation'.'cosmic'.'tumorSite'", containsString("large_intestine"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'license'", containsString("http://bit.ly/2SQdcI0"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'alleleId'", numberMatches(486042.0))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'alt'", containsString("T"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'chrom'", containsString("10"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'cytogenic'", containsString("10q23.31"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'gene'.'symbol'", containsString("PTEN"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hg19'.'start'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hg19'.'end'", numberMatches(8.9624245E7))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hg38'.'start'", containsString("87864488"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hg38'.'end'", containsString("87864488"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'coding'.size()", equalTo(3))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'coding'", hasItems("NM_000314.8:c.19G>T", "NM_001304717.5:c.538G>T", "NM_001304718.2:c.-687G>T"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'genomic'.size()", equalTo(6))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'genomic'", hasItems("LRG_1087:g.3950C>A", "LRG_311:g.6050G>T", "NC_000010.10:g.89624245G>T", "NC_000010.11:g.87864488G>T", "NG_007466.2:g.6050G>T", "NG_033079.1:g.3950C>A"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'protein'.size()", equalTo(3))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'hgvs'.'protein'", hasItems("", "NP_000305.3:p.Glu7Ter", "NP_001291646.4:p.Glu180Ter"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'.size()", equalTo(2))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[0].'accession'", containsString("RCV000585486"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[0].'clinicalSignificance'", containsString("Pathogenic"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[0].'origin'", containsString("germline"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[0].'preferredName'", containsString("NM_000314.8(PTEN):c.19G>T (p.Glu7Ter)"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[1].'accession'", containsString("RCV003451323"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[1].'clinicalSignificance'", containsString("Pathogenic"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[1].'origin'", containsString("unknown"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'rcv'[1].'preferredName'", containsString("NM_000314.8(PTEN):c.19G>T (p.Glu7Ter)"))
                .body("[0].'my_variant_info'.'annotation'.'clinVar'.'variantId'", numberMatches(493079.0))
                .body("[1].'variant'", containsString("10.0:g.89624242_89624243del"))
                .body("[1].'originalVariantQuery'", containsString("10.0,89624242,89624243,AA,-"))
                .body("[1].'successfully_annotated'", equalTo(false));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25398284, " + 
                    " \"end\": 25398284, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"A\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25398283, " + 
                    " \"end\": 25398284, " + 
                    " \"referenceAllele\": \"AC\", " + 
                    " \"variantAllele\": \"AA\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "fields=annotation_summary&fields=nucleotide_context&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("12:g.25398284C>A"))
                .body("[0].'originalVariantQuery'", containsString("12,25398284,25398284,C,A"))
                .body("[0].'hgvsg'", containsString("12:g.25398284C>A"))
                .body("[0].'assembly_name'", containsString("GRCh37"))
                .body("[0].'seq_region_name'", containsString("12"))
                .body("[0].'start'", numberMatches(2.5398284E7))
                .body("[0].'end'", numberMatches(2.5398284E7))
                .body("[0].'allele_string'", containsString("C/A"))
                .body("[0].'strand'", numberMatches(1.0))
                .body("[0].'most_severe_consequence'", containsString("missense_variant"))
                .body("[0].'transcript_consequences'.size()", equalTo(4))
                .body("[0].'transcript_consequences'[0].'exon'", containsString("2/6"))
                .body("[0].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000256078"))
                .body("[0].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000256078.4:p.Gly12Val"))
                .body("[0].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[0].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[0].'codons'", containsString("gGt/gTt"))
                .body("[0].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000256078"))
                .body("[0].'transcript_consequences'[0].'protein_start'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[0].'protein_end'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[0].'gene_symbol'", containsString("KRAS"))
                .body("[0].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000133703"))
                .body("[0].'transcript_consequences'[0].'amino_acids'", containsString("G/V"))
                .body("[0].'transcript_consequences'[0].'hgnc_id'", containsString("6407"))
                .body("[0].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[0].'transcript_consequences'[0].'polyphen_score'", numberMatches(0.972))
                .body("[0].'transcript_consequences'[0].'polyphen_prediction'", containsString("probably_damaging"))
                .body("[0].'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("[0].'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_033360.2"))
                .body("[0].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("[0].'transcript_consequences'[1].'exon'", containsString("2/5"))
                .body("[0].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000311936"))
                .body("[0].'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000308495.3:p.Gly12Val"))
                .body("[0].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000311936.3:c.35G>T"))
                .body("[0].'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[1].'codons'", containsString("gGt/gTt"))
                .body("[0].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000308495"))
                .body("[0].'transcript_consequences'[1].'protein_start'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[1].'protein_end'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[1].'gene_symbol'", containsString("KRAS"))
                .body("[0].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000133703"))
                .body("[0].'transcript_consequences'[1].'amino_acids'", containsString("G/V"))
                .body("[0].'transcript_consequences'[1].'hgnc_id'", containsString("6407"))
                .body("[0].'transcript_consequences'[1].'polyphen_score'", numberMatches(0.96))
                .body("[0].'transcript_consequences'[1].'polyphen_prediction'", containsString("probably_damaging"))
                .body("[0].'transcript_consequences'[1].'sift_score'", numberMatches(0.0))
                .body("[0].'transcript_consequences'[1].'sift_prediction'", containsString("deleterious"))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_004985.3"))
                .body("[0].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("[0].'transcript_consequences'[2].'exon'", containsString("2/3"))
                .body("[0].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000556131"))
                .body("[0].'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000451856.1:p.Gly12Val"))
                .body("[0].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000556131.1:c.35G>T"))
                .body("[0].'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("[0].'transcript_consequences'[2].'codons'", containsString("gGt/gTt"))
                .body("[0].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000451856"))
                .body("[0].'transcript_consequences'[2].'protein_start'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[2].'protein_end'", numberMatches(12.0))
                .body("[0].'transcript_consequences'[2].'gene_symbol'", containsString("KRAS"))
                .body("[0].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000133703"))
                .body("[0].'transcript_consequences'[2].'amino_acids'", containsString("G/V"))
                .body("[0].'transcript_consequences'[2].'hgnc_id'", containsString("6407"))
                .body("[0].'transcript_consequences'[2].'polyphen_score'", numberMatches(0.884))
                .body("[0].'transcript_consequences'[2].'polyphen_prediction'", containsString("possibly_damaging"))
                .body("[0].'transcript_consequences'[2].'sift_score'", numberMatches(0.0))
                .body("[0].'transcript_consequences'[2].'sift_prediction'", containsString("deleterious"))
                .body("[0].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[0].'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'successfully_annotated'", equalTo(true))
                .body("[0].'nucleotide_context'.'license'", nullValue())
                .body("[0].'nucleotide_context'.'annotation'.'molecule'", containsString("dna"))
                .body("[0].'nucleotide_context'.'annotation'.'seq'", containsString("ACC"))
                .body("[0].'nucleotide_context'.'annotation'.'hgvs'", containsString("12:g.25398284C>A"))
                .body("[0].'annotation_summary'.'variant'", containsString("12:g.25398284C>A"))
                .body("[0].'annotation_summary'.'genomicLocation'.'chromosome'", containsString("12"))
                .body("[0].'annotation_summary'.'genomicLocation'.'start'", numberMatches(2.5398284E7))
                .body("[0].'annotation_summary'.'genomicLocation'.'end'", numberMatches(2.5398284E7))
                .body("[0].'annotation_summary'.'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[0].'annotation_summary'.'genomicLocation'.'variantAllele'", containsString("A"))
                .body("[0].'annotation_summary'.'strandSign'", containsString("+"))
                .body("[0].'annotation_summary'.'variantType'", containsString("SNP"))
                .body("[0].'annotation_summary'.'assemblyName'", containsString("GRCh37"))
                .body("[0].'annotation_summary'.'canonicalTranscriptId'", containsString("ENST00000256078"))
                .body("[0].'annotation_summary'.'transcriptConsequences'.size()", equalTo(1))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000256078"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'codonChange'", containsString("gGt/gTt"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcids'", containsString("G/V"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidRef'", containsString("G"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidAlt'", containsString("V"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvspShort'", containsString("p.G12V"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvsp'", containsString("p.Gly12Val"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'refSeq'", containsString("NM_033360.2"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'exon'", containsString("2/6"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'polyphenScore'", numberMatches(0.972))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'siftScore'", numberMatches(0.0))
                .body("[0].'annotation_summary'.'transcriptConsequences'[0].'siftPrediction'", containsString("deleterious"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'.size()", equalTo(4))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000256078"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'codonChange'", containsString("gGt/gTt"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("G/V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("G"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.G12V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Gly12Val"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_033360.2"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'exon'", containsString("2/6"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenScore'", numberMatches(0.972))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftScore'", numberMatches(0.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftPrediction'", containsString("deleterious"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000311936"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'codonChange'", containsString("gGt/gTt"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcids'", containsString("G/V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidRef'", containsString("G"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidAlt'", containsString("V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvspShort'", containsString("p.G12V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsp'", containsString("p.Gly12Val"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsc'", containsString("ENST00000311936.3:c.35G>T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'refSeq'", containsString("NM_004985.3"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'exon'", containsString("2/5"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenScore'", numberMatches(0.96))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftScore'", numberMatches(0.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftPrediction'", containsString("deleterious"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000556131"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'codonChange'", containsString("gGt/gTt"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcids'", containsString("G/V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidRef'", containsString("G"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidAlt'", containsString("V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvspShort'", containsString("p.G12V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsp'", containsString("p.Gly12Val"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsc'", containsString("ENST00000556131.1:c.35G>T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'exon'", containsString("2/3"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenScore'", numberMatches(0.884))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenPrediction'", containsString("possibly_damaging"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftScore'", numberMatches(0.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftPrediction'", containsString("deleterious"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000256078"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'codonChange'", containsString("gGt/gTt"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcids'", containsString("G/V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidRef'", containsString("G"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidAlt'", containsString("V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'consequenceTerms'", containsString("missense_variant"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("KRAS"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvspShort'", containsString("p.G12V"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsp'", containsString("p.Gly12Val"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'start'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'end'", numberMatches(12.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'refSeq'", containsString("NM_033360.2"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'variantClassification'", containsString("Missense_Mutation"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'exon'", containsString("2/6"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'polyphenScore'", numberMatches(0.972))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'polyphenPrediction'", containsString("probably_damaging"))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'siftScore'", numberMatches(0.0))
                .body("[0].'annotation_summary'.'transcriptConsequenceSummary'.'siftPrediction'", containsString("deleterious"))
                .body("[1].'variant'", containsString("12:g.25398284C>A"))
                .body("[1].'originalVariantQuery'", containsString("12,25398283,25398284,AC,AA"))
                .body("[1].'hgvsg'", containsString("12:g.25398284C>A"))
                .body("[1].'assembly_name'", containsString("GRCh37"))
                .body("[1].'seq_region_name'", containsString("12"))
                .body("[1].'start'", numberMatches(2.5398284E7))
                .body("[1].'end'", numberMatches(2.5398284E7))
                .body("[1].'allele_string'", containsString("C/A"))
                .body("[1].'strand'", numberMatches(1.0))
                .body("[1].'most_severe_consequence'", containsString("missense_variant"))
                .body("[1].'transcript_consequences'.size()", equalTo(4))
                .body("[1].'transcript_consequences'[0].'exon'", containsString("2/6"))
                .body("[1].'transcript_consequences'[0].'transcript_id'", containsString("ENST00000256078"))
                .body("[1].'transcript_consequences'[0].'hgvsp'", containsString("ENSP00000256078.4:p.Gly12Val"))
                .body("[1].'transcript_consequences'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[1].'transcript_consequences'[0].'variant_allele'", containsString("A"))
                .body("[1].'transcript_consequences'[0].'codons'", containsString("gGt/gTt"))
                .body("[1].'transcript_consequences'[0].'protein_id'", containsString("ENSP00000256078"))
                .body("[1].'transcript_consequences'[0].'protein_start'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[0].'protein_end'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[0].'gene_symbol'", containsString("KRAS"))
                .body("[1].'transcript_consequences'[0].'gene_id'", containsString("ENSG00000133703"))
                .body("[1].'transcript_consequences'[0].'amino_acids'", containsString("G/V"))
                .body("[1].'transcript_consequences'[0].'hgnc_id'", containsString("6407"))
                .body("[1].'transcript_consequences'[0].'canonical'", containsString("1"))
                .body("[1].'transcript_consequences'[0].'polyphen_score'", numberMatches(0.972))
                .body("[1].'transcript_consequences'[0].'polyphen_prediction'", containsString("probably_damaging"))
                .body("[1].'transcript_consequences'[0].'sift_score'", numberMatches(0.0))
                .body("[1].'transcript_consequences'[0].'sift_prediction'", containsString("deleterious"))
                .body("[1].'transcript_consequences'[0].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[0].'refseq_transcript_ids'", hasItems("NM_033360.2"))
                .body("[1].'transcript_consequences'[0].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[0].'consequence_terms'", hasItems("missense_variant"))
                .body("[1].'transcript_consequences'[1].'exon'", containsString("2/5"))
                .body("[1].'transcript_consequences'[1].'transcript_id'", containsString("ENST00000311936"))
                .body("[1].'transcript_consequences'[1].'hgvsp'", containsString("ENSP00000308495.3:p.Gly12Val"))
                .body("[1].'transcript_consequences'[1].'hgvsc'", containsString("ENST00000311936.3:c.35G>T"))
                .body("[1].'transcript_consequences'[1].'variant_allele'", containsString("A"))
                .body("[1].'transcript_consequences'[1].'codons'", containsString("gGt/gTt"))
                .body("[1].'transcript_consequences'[1].'protein_id'", containsString("ENSP00000308495"))
                .body("[1].'transcript_consequences'[1].'protein_start'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[1].'protein_end'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[1].'gene_symbol'", containsString("KRAS"))
                .body("[1].'transcript_consequences'[1].'gene_id'", containsString("ENSG00000133703"))
                .body("[1].'transcript_consequences'[1].'amino_acids'", containsString("G/V"))
                .body("[1].'transcript_consequences'[1].'hgnc_id'", containsString("6407"))
                .body("[1].'transcript_consequences'[1].'polyphen_score'", numberMatches(0.96))
                .body("[1].'transcript_consequences'[1].'polyphen_prediction'", containsString("probably_damaging"))
                .body("[1].'transcript_consequences'[1].'sift_score'", numberMatches(0.0))
                .body("[1].'transcript_consequences'[1].'sift_prediction'", containsString("deleterious"))
                .body("[1].'transcript_consequences'[1].'refseq_transcript_ids'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[1].'refseq_transcript_ids'", hasItems("NM_004985.3"))
                .body("[1].'transcript_consequences'[1].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[1].'consequence_terms'", hasItems("missense_variant"))
                .body("[1].'transcript_consequences'[2].'exon'", containsString("2/3"))
                .body("[1].'transcript_consequences'[2].'transcript_id'", containsString("ENST00000556131"))
                .body("[1].'transcript_consequences'[2].'hgvsp'", containsString("ENSP00000451856.1:p.Gly12Val"))
                .body("[1].'transcript_consequences'[2].'hgvsc'", containsString("ENST00000556131.1:c.35G>T"))
                .body("[1].'transcript_consequences'[2].'variant_allele'", containsString("A"))
                .body("[1].'transcript_consequences'[2].'codons'", containsString("gGt/gTt"))
                .body("[1].'transcript_consequences'[2].'protein_id'", containsString("ENSP00000451856"))
                .body("[1].'transcript_consequences'[2].'protein_start'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[2].'protein_end'", numberMatches(12.0))
                .body("[1].'transcript_consequences'[2].'gene_symbol'", containsString("KRAS"))
                .body("[1].'transcript_consequences'[2].'gene_id'", containsString("ENSG00000133703"))
                .body("[1].'transcript_consequences'[2].'amino_acids'", containsString("G/V"))
                .body("[1].'transcript_consequences'[2].'hgnc_id'", containsString("6407"))
                .body("[1].'transcript_consequences'[2].'polyphen_score'", numberMatches(0.884))
                .body("[1].'transcript_consequences'[2].'polyphen_prediction'", containsString("possibly_damaging"))
                .body("[1].'transcript_consequences'[2].'sift_score'", numberMatches(0.0))
                .body("[1].'transcript_consequences'[2].'sift_prediction'", containsString("deleterious"))
                .body("[1].'transcript_consequences'[2].'consequence_terms'.size()", equalTo(1))
                .body("[1].'transcript_consequences'[2].'consequence_terms'", hasItems("missense_variant"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'successfully_annotated'", equalTo(true))
                .body("[1].'nucleotide_context'.'license'", nullValue())
                .body("[1].'nucleotide_context'.'annotation'.'molecule'", containsString("dna"))
                .body("[1].'nucleotide_context'.'annotation'.'seq'", containsString("ACC"))
                .body("[1].'nucleotide_context'.'annotation'.'hgvs'", containsString("12:g.25398284C>A"))
                .body("[1].'annotation_summary'.'variant'", containsString("12:g.25398284C>A"))
                .body("[1].'annotation_summary'.'genomicLocation'.'chromosome'", containsString("12"))
                .body("[1].'annotation_summary'.'genomicLocation'.'start'", numberMatches(2.5398284E7))
                .body("[1].'annotation_summary'.'genomicLocation'.'end'", numberMatches(2.5398284E7))
                .body("[1].'annotation_summary'.'genomicLocation'.'referenceAllele'", containsString("C"))
                .body("[1].'annotation_summary'.'genomicLocation'.'variantAllele'", containsString("A"))
                .body("[1].'annotation_summary'.'strandSign'", containsString("+"))
                .body("[1].'annotation_summary'.'variantType'", containsString("SNP"))
                .body("[1].'annotation_summary'.'assemblyName'", containsString("GRCh37"))
                .body("[1].'annotation_summary'.'canonicalTranscriptId'", containsString("ENST00000256078"))
                .body("[1].'annotation_summary'.'transcriptConsequences'.size()", equalTo(1))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'transcriptId'", containsString("ENST00000256078"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'codonChange'", containsString("gGt/gTt"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'aminoAcids'", containsString("G/V"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidRef'", containsString("G"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'aminoAcidAlt'", containsString("V"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'hgvspShort'", containsString("p.G12V"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'hgvsp'", containsString("p.Gly12Val"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'refSeq'", containsString("NM_033360.2"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'exon'", containsString("2/6"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'polyphenScore'", numberMatches(0.972))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'siftScore'", numberMatches(0.0))
                .body("[1].'annotation_summary'.'transcriptConsequences'[0].'siftPrediction'", containsString("deleterious"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'.size()", equalTo(4))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'transcriptId'", containsString("ENST00000256078"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'codonChange'", containsString("gGt/gTt"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcids'", containsString("G/V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidRef'", containsString("G"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'aminoAcidAlt'", containsString("V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'consequenceTerms'", containsString("missense_variant"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvspShort'", containsString("p.G12V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsp'", containsString("p.Gly12Val"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'refSeq'", containsString("NM_033360.2"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'variantClassification'", containsString("Missense_Mutation"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'exon'", containsString("2/6"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenScore'", numberMatches(0.972))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftScore'", numberMatches(0.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[0].'siftPrediction'", containsString("deleterious"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'transcriptId'", containsString("ENST00000311936"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'codonChange'", containsString("gGt/gTt"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcids'", containsString("G/V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidRef'", containsString("G"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'aminoAcidAlt'", containsString("V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'consequenceTerms'", containsString("missense_variant"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvspShort'", containsString("p.G12V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsp'", containsString("p.Gly12Val"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'hgvsc'", containsString("ENST00000311936.3:c.35G>T"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'refSeq'", containsString("NM_004985.3"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'variantClassification'", containsString("Missense_Mutation"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'exon'", containsString("2/5"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenScore'", numberMatches(0.96))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'polyphenPrediction'", containsString("probably_damaging"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftScore'", numberMatches(0.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[1].'siftPrediction'", containsString("deleterious"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'transcriptId'", containsString("ENST00000556131"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'codonChange'", containsString("gGt/gTt"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcids'", containsString("G/V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidRef'", containsString("G"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'aminoAcidAlt'", containsString("V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'consequenceTerms'", containsString("missense_variant"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hugoGeneSymbol'", containsString("KRAS"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvspShort'", containsString("p.G12V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsp'", containsString("p.Gly12Val"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'hgvsc'", containsString("ENST00000556131.1:c.35G>T"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'start'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'proteinPosition'.'end'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'variantClassification'", containsString("Missense_Mutation"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'exon'", containsString("2/3"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenScore'", numberMatches(0.884))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'polyphenPrediction'", containsString("possibly_damaging"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftScore'", numberMatches(0.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummaries'[2].'siftPrediction'", containsString("deleterious"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'transcriptId'", containsString("ENST00000256078"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'codonChange'", containsString("gGt/gTt"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcids'", containsString("G/V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidRef'", containsString("G"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'aminoAcidAlt'", containsString("V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'consequenceTerms'", containsString("missense_variant"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'hugoGeneSymbol'", containsString("KRAS"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'hgvspShort'", containsString("p.G12V"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsp'", containsString("p.Gly12Val"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'hgvsc'", containsString("ENST00000256078.4:c.35G>T"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'start'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'proteinPosition'.'end'", numberMatches(12.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'refSeq'", containsString("NM_033360.2"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'variantClassification'", containsString("Missense_Mutation"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'exon'", containsString("2/6"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'polyphenScore'", numberMatches(0.972))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'polyphenPrediction'", containsString("probably_damaging"))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'siftScore'", numberMatches(0.0))
                .body("[1].'annotation_summary'.'transcriptConsequenceSummary'.'siftPrediction'", containsString("deleterious"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("id", "intergenic_consequences", "originalVariantQuery", "variant")));
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/NE:U2U637_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/a%5D:g07377agI%5C%3EGK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/_CM_30721_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/M%5CS%5C9qgJA1IU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/t4%5Cb7YGDApqrrD?isoformOverrideSource=uniprot")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/KElWY%5CXOPmY?" + 
                    "isoformOverrideSource=&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_15U32%5EXYZ_%22%3A%22iwHxcT8%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_36166_XYZ_%22%3A%22GbSO%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22stfLZkcb0dPsal%22%3A%22_EM_36167_XYZ_%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_CT_13U94_TUZUKAN%22%3A%22Jp31Lum%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22h7tqUF%22%3A%22_EM_36196_XYZ_%22%0A++++++++++++++++++++%7D&" + 
                    "fields=EWN&fields=ruhfnljm&fields=LtoaVnYALJJ5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/1%5CF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_EM_10697_XY%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_9361_R%5CZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/x%5Cjx6aDfgikg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'ACCESSION' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=_EM_63_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_63_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/xrefs/_EM_80_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_80_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"8:g.21994291C\u003eT\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=genome_nexus&" + 
                    "projection=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_835_XYZ_")
                .get(baseUrlOfSut + "/annotation/summary/_EM_832_XYZ_?" + 
                    "isoformOverrideSource=_EM_833_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_834_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2303_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"bmS[wAx\", " + 
                    " \"_EM_2021_XYZ_\", " + 
                    " \"En8.bz\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"(FSY3aX\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=_EM_2570_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/_EM_42_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: _EM_42_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/_EM_10_XYZ_?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=qp.C%5D&" + 
                    "limit=802937567")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1279_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/146?EMextraParam123=_EM_1278_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_110() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"713\", " + 
                    " \"_EM_4694_XYZ_\", " + 
                    " \"sLw\", " + 
                    " \"MRfY\", " + 
                    " \"_EM_4695_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_111() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/17:ca7577018C%3EG")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_112() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/i%5D:o07377a_Qd%3EGl")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_113() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ma328;2E78C%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_114() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1%3C:pa628;2E78C%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_115() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1@:na638;2E78Q%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_116() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/H3:raa28;2N78C%3EK")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_117() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/12,25380271,2-380271,C,T")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_118() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=FNSG0%2F000270396")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"page not found. Please check your uri and refer to our documentation http://grch37.rest.ensembl.org/\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_119() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1G:ga7577018C%3EG?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_120() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/00:ga89624230_89624231delCC")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_121() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_122() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ga32893378;%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_123() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_6_XYZ_?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_6_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_124() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"@:\", " + 
                    " \"5T\", " + 
                    " \"bxTTUo9TKafUBV\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_125() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id _EM_39_XYZ_: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_126() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_58_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_56_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_127() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/6g?" + 
                    "token=&" + 
                    "fields=ptms&fields=W&fields=a0&fields=UU&fields=6oUUPU1WUYpUUUUQ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_128() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/ycR?" + 
                    "token=%7B%0A++++++++++++++++++++%22SUiFDUiASa5n%22%3A%22Ct9SULB_v86S%3FMK%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22uTrVniWWj_%22%3A%22ZbWpQVZaUcUpymUWZ%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22Ei%22%3A%22u2Be5zxWnss%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%227UK%3ArbdSD0%22%3A%22qgUBAspqRmS%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_GM_41003_XYZ_%22%3A%22%22%0A++++++++++++++++++++%7D&" + 
                    "fields=signal&fields=U&fields=dFkaoNA%60yLuJvUQ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_129() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/%3FJNf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB header not found: ?JNf"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_130() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/my_variant_info/variant/_EM_67_XYZ_?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_131() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_71_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/2YM")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_132() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/undefined?EMextraParam123=_EM_2628_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: undefined"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_133() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_64_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_64_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_134() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"5o2k1g6juH,DkN\", " + 
                    " \"start\": 46579693, " + 
                    " \"end\": 39450862, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"G\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_135() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12821_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12808_XYZ_\", " + 
                    " \"start\": 686, " + 
                    " \"end\": 776, " + 
                    " \"referenceAllele\": \"pkhXMJ6Vw_C\", " + 
                    " \"variantAllele\": \"BkIc_Y2VCNSYOFi\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12809_XYZ_\", " + 
                    " \"start\": 476, " + 
                    " \"end\": 260, " + 
                    " \"referenceAllele\": \"_EM_12810_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12811_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12812_XYZ_\", " + 
                    " \"start\": 429, " + 
                    " \"end\": 702, " + 
                    " \"referenceAllele\": \"_EM_12813_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12814_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12815_XYZ_\", " + 
                    " \"start\": 366, " + 
                    " \"end\": 646, " + 
                    " \"referenceAllele\": \"_EM_12816_XYZ_\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_12817_XYZ_\", " + 
                    " \"start\": 994, " + 
                    " \"end\": 496, " + 
                    " \"referenceAllele\": \"_EM_12818_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_12819_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?isoformOverrideSource=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_136() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453193, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37880220, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"_EM_2802_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879794, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"_EM_2517_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 25922572, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"_EM_2518_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2803_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2520_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 25347503, " + 
                    " \"referenceAllele\": \"_EM_2804_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2805_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
