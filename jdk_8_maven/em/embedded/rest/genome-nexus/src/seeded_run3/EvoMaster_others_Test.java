import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T13:58:32.559+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 58 tests
 * <br>
 * Covered targets: 2959
 * <br>
 * Used time: 6h 3m 55s
 * <br>
 * Needed budget for current results: 93%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/nucleotide_context/8:ga140452136A%3ET");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"7\", " + 
                        " \"start\": 132064528, " + 
                        " \"end\": 140469520, " + 
                        " \"referenceAllele\": \"_EM_1500_XYZ_\", " + 
                        " \"variantAllele\": \"T\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/genomic?fields=_EM_1499_XYZ_&fields=nucleotide_context");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"7\", " + 
                        " \"start\": 140457289, " + 
                        " \"end\": 174007625, " + 
                        " \"referenceAllele\": \"T\", " + 
                        " \"variantAllele\": \"_EM_1698_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"17\", " + 
                        " \"start\": 37880220, " + 
                        " \"end\": 38404508, " + 
                        " \"referenceAllele\": \"_EM_1699_XYZ_\", " + 
                        " \"variantAllele\": \"C\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"17\", " + 
                        " \"start\": 37879794, " + 
                        " \"end\": 37879794, " + 
                        " \"referenceAllele\": \"G\", " + 
                        " \"variantAllele\": \"C\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"12\", " + 
                        " \"start\": 25390092, " + 
                        " \"end\": 25398285, " + 
                        " \"referenceAllele\": \"CC\", " + 
                        " \"variantAllele\": \"GA\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"12\", " + 
                        " \"start\": 25380271, " + 
                        " \"end\": 25380271, " + 
                        " \"referenceAllele\": \"C\", " + 
                        " \"variantAllele\": \"T\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"10\", " + 
                        " \"start\": 89692940, " + 
                        " \"end\": 89692940, " + 
                        " \"referenceAllele\": \"C\", " + 
                        " \"variantAllele\": \"T\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/g%5CK?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/a%5C_ga757J00%60_U574UU4UnUUUBUUUCTUIIUGUFUTCAUKC%3FUAC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/JVa%5C69bac1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/nucleotide_context/OE_%5Eq%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/Os%5CXeY4TFkpeUIq?isoformOverrideSource=_EM_9073_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/_Ebk%5C752XXYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/XZ%5C0j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/MT:ga10%5C71G%3E?" + 
                    "isoformOverrideSource=fok&" + 
                    "token=%7B%0A++++++++++++++++++++%22_EM_25319_XYZ_%22%3A%22kazNE78D%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_25320_XYZ_%22%3A%22%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_25321UXYZ_%22%3A%22KiYO%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_25322_XYZ_%22%3A%221GIkA%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22_EM_25323_XYZ_%22%3A%22AOv1MlqVcm6%22%0A++++++++++++++++++++%7D&" + 
                    "fields=&fields=_EM_34363_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/i%5CQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/zD%5C0:tVm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/1%5C87")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_10526_XY%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/f%5C?" + 
                    "isoformOverrideSource=SUd&" + 
                    "token=%3DUCnRi&" + 
                    "fields=muelelqmbb_ckpsfw&fields=WWYWUX1vqz4&fields=%3DUCnTk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=&" + 
                    "EMextraParam123=_EM_3186_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'ACCESSION' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?" + 
                    "accession=_EM_63_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_63_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/xrefs/_EM_80_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_80_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1482_XYZ_")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "isoformOverrideSource=_EM_1480_XYZ_&" + 
                    "projection=EVOMASTER")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/annotation/summary/9:g.21994291C%3ET?" + 
                    "isoformOverrideSource=_EM_930_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"313U\", " + 
                    " \"{\\n                    \\\"RSsSY\\\":\\\"rE79lUafI52U\\\"\\n    !      \u001f        ,\\n                    \\\"eZlUaFS6EhNR\\\":\\\"qE79ltagI52g\\\"\\n                    ,\\n                    \\\"Y78bJSeZjqlLRH9\\\":\\\"Vs7rhjrLB\\\"\\n           \" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "token=%7B%0A++++++++++++++++++++%22RSr%22%3A%22rE79lUafI52U%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22eZkUaFS6EhN%22%3A%22qE79ltagI52%22%0A++++++++++++++++++++%2C%0A++++++++++++++++++++%22YU8bJSeZjWmLRH9%22%3A%22Vs7rhjrLA%22%0A++++++++++++++++++++%7D&" + 
                    "fields=jmcold&fields=US.nruGU6%40BQVBeh&fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ptm/experimental?ensemblTranscriptId=6R4%5BzhHWSDmYYsOJ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"?J_cR\", " + 
                    " \"Tu9CS\", " + 
                    " \"ylMqCEUN9SDSZCy\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=w0K3")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/_EM_42_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: _EM_42_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/_EM_30_XYZ_?EMextraParam123=_EM_31_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/_EM_10_XYZ_?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=p.i&" + 
                    "limit=1017462204")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2866_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/238?EMextraParam123=_EM_2865_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3169_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " \"604\", " + 
                    " \"_EM_3453_XYZ_\", " + 
                    " \"_EM_3449_XYZ_\", " + 
                    " \"_EM_3450_XYZ_\", " + 
                    " \"_EM_3167_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/10:oaW5X4003%60%3F574UU4hnsGUACAUCRUUUUKCUUT;ACUCCCA")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/UU:ca7266a13ij5U%3C6U3UUUUUACAUMLCGIUKC%3FVTCUCUCCUAU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1U:pY771400U_75g7805ifUUUAKITDUUGI=ICHCUCACUD%3FBADU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1U:rY771400W_75g7824ifUUTAJITDUUGI=UCHCUCACUD%3FBADU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1U:mY771400W_74g7824ifUUTAJITDUWGI=VCHCUUAEUD%3FBABU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/1U:nY771400W_74g7824ifUUTAJITDUWGI=VCHCUUAEUD%3FBABU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=ENSG0000%2F198695")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"page not found. Please check your uri and refer to our documentation http://grch37.rest.ensembl.org/\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/7,140453136,1504531U6,A,U?" + 
                    "isoformOverrideSource=fmo&" + 
                    "token=fon&" + 
                    "fields=annotation_summary&fields=nucleotide_contex")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ga32893385_3289338:delTATTC?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/-3:ga32893378C%3ET")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_5390_XYZ_\", " + 
                    " \"_EM_5391_XYZ_\", " + 
                    " \"NeT\", " + 
                    " \"izLS{I\", " + 
                    " \"n\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc?EMextraParam123=_EM_929_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/17:ga7574003_7574004insGAACATCTCGIAGCGCTCACGCCCAC?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_6_XYZ_?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_6_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"iDFJR:\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id _EM_39_XYZ_: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/=?token=_EM_1477_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_58_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_56_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/%3FU78")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB header not found: ?U78"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/my_variant_info/variant/_EM_67_XYZ_?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_71_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/2YM")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_64_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_64_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"y:U\", " + 
                    " \"start\": 738008576, " + 
                    " \"end\": -1048576, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \",rqIxsW8G6My8a\", " + 
                    " \"start\": 55155679, " + 
                    " \"end\": 55152107, " + 
                    " \"referenceAllele\": \"y4O_ugLgl\", " + 
                    " \"variantAllele\": \"_EM_5114_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_5004_XYZ_&" + 
                    "fields=annotatiop_summary&fields=tvTWxlI&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2625_XYZ_")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_7303_XYZ_\", " + 
                    " \"start\": 34, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"NA\", " + 
                    " \"variantAllele\": \"_EM_2617_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"8Mi3cSpE\", " + 
                    " \"start\": 965, " + 
                    " \"end\": 1286, " + 
                    " \"referenceAllele\": \"_t\", " + 
                    " \"variantAllele\": \"_tI\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_7304_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 865, " + 
                    " \"referenceAllele\": \"_EM_2622_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2623_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=_EM_2624_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1339_XYZ_\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"_EM_1340_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_602_XYZ_\", " + 
                    " \"start\": 37880228, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"_EM_603_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_604_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 37879786, " + 
                    " \"end\": 37879794, " + 
                    " \"referenceAllele\": \"G\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_605_XYZ_\", " + 
                    " \"start\": 25398412, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"CC\", " + 
                    " \"variantAllele\": \"GA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1341_XYZ_\", " + 
                    " \"start\": 25380271, " + 
                    " \"end\": 25380271, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"_EM_1342_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1343_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453193, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_602_XYZ_\", " + 
                    " \"start\": 37880228, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"-\", " + 
                    " \"variantAllele\": \"_EM_604_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_1690_XYZ_\", " + 
                    " \"start\": 0, " + 
                    " \"end\": -1038628526, " + 
                    " \"referenceAllele\": \"_EM_1691_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1692_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_605_XYZ_\", " + 
                    " \"start\": 25398412, " + 
                    " \"end\": 25398285, " + 
                    " \"referenceAllele\": \"CC\", " + 
                    " \"variantAllele\": \"GA\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2436_XYZ_\", " + 
                    " \"start\": 25380271, " + 
                    " \"end\": 25380271, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"_EM_2437_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"C\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
