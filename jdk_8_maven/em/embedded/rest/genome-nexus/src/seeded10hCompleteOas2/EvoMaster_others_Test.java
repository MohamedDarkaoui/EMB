import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T16:47:59.625+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 54 tests
 * <br>
 * Covered targets: 3028
 * <br>
 * Used time: 10h 4m 8s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.genome_nexus.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/annotation/summary/9:ga2U994291C%3ET?" + 
                        "isoformOverrideSource=_EM_42068_XYZa&" + 
                        "projection=ALL");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/nucleotide_context/6:ga1U0453U16A%3ET");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"10\", " + 
                        " \"start\": 89099957, " + 
                        " \"end\": 89632437, " + 
                        " \"referenceAllele\": \"_EM_1205_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_942_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"10.0\", " + 
                        " \"start\": 89886386, " + 
                        " \"end\": 89624243, " + 
                        " \"referenceAllele\": \"AA\", " + 
                        " \"variantAllele\": \"-\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/annotation/genomic?" + 
                        "isoformOverrideSource=_EM_1204_XYZ_&" + 
                        "token=&" + 
                        "fields=_EM_941_XYZ_&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .contentType("application/json")
                    .body(" [ " + 
                        " { " + 
                        " \"chromosome\": \"7\", " + 
                        " \"start\": 138356169, " + 
                        " \"end\": 139928905, " + 
                        " \"referenceAllele\": \"_EM_22519_XYZ_\", " + 
                        " \"variantAllele\": \"_EM_22520_XYZ_\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"17\", " + 
                        " \"start\": 37912988, " + 
                        " \"end\": 37880220, " + 
                        " \"referenceAllele\": \"T\", " + 
                        " \"variantAllele\": \"C\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_1255_XYZ_\", " + 
                        " \"start\": 36831218, " + 
                        " \"end\": 4325362, " + 
                        " \"referenceAllele\": \"-\", " + 
                        " \"variantAllele\": \"dL03mrg\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"12\", " + 
                        " \"start\": 25380271, " + 
                        " \"end\": 25380271, " + 
                        " \"referenceAllele\": \"C\", " + 
                        " \"variantAllele\": \"T\" " + 
                        " }, " + 
                        " { " + 
                        " \"chromosome\": \"_EM_22521_XYZ_\", " + 
                        " \"start\": 89692940, " + 
                        " \"end\": 89692948, " + 
                        " \"referenceAllele\": \"_EM_22522_XYZ_\", " + 
                        " \"variantAllele\": \"T\" " + 
                        " } " + 
                        " ] ")
                    .post(baseUrlOfSut + "/cancer_hotspots/genomic");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/%5CZrl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/curious_cases/WUN_276U5UXY%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/%5C%5EMJU3566UZY%5BU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:ob22893:%3C1aUU894U8UdekTAT%5CU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pdb/header/1wg%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_UU_506U0_%5CYZg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/recB%5CJgZUNw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/transcript/_EM_46426_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/6%5CkpsdDd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/hgvs/ATjZB%5CUIC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/gB%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/summary/%5C3H?" + 
                    "isoformOverrideSource=ensembl&" + 
                    "projection=CANONICAL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_68_XYZ_")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=nTZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'nTZ' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/xrefs/_EM_86_XYZ_?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID '_EM_86_XYZ_' not found\"}"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"_EM_9362_XYZ_\", " + 
                    " \"_EM_9363_XYZ_\", " + 
                    " \"_EM_9364_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/summary?" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_9365_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3441_XYZ_")
                .get(baseUrlOfSut + "/annotation/summary/_EM_4164_XYZ_?" + 
                    "isoformOverrideSource=_EM_3439_XYZ_&" + 
                    "projection=EVOMASTER&" + 
                    "EMextraParam123=_EM_3440_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/cancer_hotspots/transcript/;")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9357_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental?EMextraParam123=_EM_9356_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"j[pKW\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \"roM{\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=uniprot")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/pfam/domain/_EM_50_XYZ_?EMextraParam123=_EM_51_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: _EM_50_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/_EM_9_XYZ_?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/search?" + 
                    "keyword=5NEYz8Mqr4Ap.cuk&" + 
                    "limit=-638839262")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/695?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " \"330\", " + 
                    " \"_EM_4251_XYZ_\", " + 
                    " \"_EM_4252_XYZ_\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:ob22893:%3C1aUU894U8UdekTATTU?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ca32893385a32893389delTATTC")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:pb22893:%3C1aUU894U8UdekTATTU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:nb22893:%3C1aUU894U8UdekTATTU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:rb22893:%3C1aUU894%5D8UdekTATTU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/12:mb22893:%3C1aUU894U8UdekTATXU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/cancer_hotspots/genomic/7,140453193,14045319a,T,C")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/10:ga89624230_89624:31delAC?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/00:ga89624230_89624231delAC")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/_EM_3_XYZ_?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/signal/mutation/hgvs/13:ga32893385a32893389delTATTC")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/_EM_5_XYZ_?" + 
                    "isoformOverrideSource=uniprot&" + 
                    "EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: _EM_5_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " \":\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/nucleotide_context")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_49_XYZ_")
                .get(baseUrlOfSut + "/pdb/header/USd3NdgEowxsQzCe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id USd3NdgEowxsQzCe: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at files.rcsb.org Port 80</address>\n</body></html>\n"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_61_XYZ_")
                .get(baseUrlOfSut + "/curious_cases/_EM_59_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/annotation/genomic/_EM_18_XYZ_?" + 
                    "isoformOverrideSource=KMlF97&" + 
                    "token=_EM_19_XYZ_&" + 
                    "fields=_EM_20_XYZ_&fields=_EM_21_XYZ_&fields=_EM_22_XYZ_&fields=_EM_23_XYZ_&fields=_EM_24_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/pdb/header/%23njp?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB header not found: #njp"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_74_XYZ_")
                .get(baseUrlOfSut + "/my_variant_info/variant/_EM_72_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_77_XYZ_")
                .get(baseUrlOfSut + "/nucleotide_context/_EM_75_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2940_XYZ_")
                .get(baseUrlOfSut + "/mutation_assessor/undefined")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: undefined"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/mutation_assessor/_EM_69_XYZ_?EMextraParam123=_EM_70_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Mutation Assessor annotation not found for variant: _EM_69_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \",iiJg_8I2\", " + 
                    " \"start\": 2098530, " + 
                    " \"end\": -8379770, " + 
                    " \"referenceAllele\": \"2Qm9k\", " + 
                    " \"variantAllele\": \"-8\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453136, " + 
                    " \"end\": 140453136, " + 
                    " \"referenceAllele\": \"A\", " + 
                    " \"variantAllele\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"A9nm43UH_1U_sb\", " + 
                    " \"start\": 520, " + 
                    " \"end\": 229, " + 
                    " \"referenceAllele\": \"TvEPefnWJBD\", " + 
                    " \"variantAllele\": \"Z\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=bYip&" + 
                    "token=fm&" + 
                    "fields=annptation_summapy&fields=8IpH9y")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"7\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453193, " + 
                    " \"referenceAllele\": \"_EM_1307_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_1308_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 37880220, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"_EM_2210_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 37617650, " + 
                    " \"referenceAllele\": \"_EM_2211_XYZ_\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 25380263, " + 
                    " \"referenceAllele\": \"\", " + 
                    " \"variantAllele\": \"_EM_2212_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2213_XYZ_\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 0, " + 
                    " \"referenceAllele\": \"sVUcEbfz\", " + 
                    " \"variantAllele\": \"_EM_2214_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2052_XYZ_\", " + 
                    " \"start\": 140453193, " + 
                    " \"end\": 140453201, " + 
                    " \"referenceAllele\": \"gxGVo3t8QNTt\", " + 
                    " \"variantAllele\": \"_EM_1308_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"17\", " + 
                    " \"start\": 8, " + 
                    " \"end\": 21102972, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_2050_XYZ_\", " + 
                    " \"start\": 2097152, " + 
                    " \"end\": 37879282, " + 
                    " \"referenceAllele\": \"G\", " + 
                    " \"variantAllele\": \"RIbA3oWrhGzAcm\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"12\", " + 
                    " \"start\": 0, " + 
                    " \"end\": 25380271, " + 
                    " \"referenceAllele\": \"_EM_2053_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_2051_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"10\", " + 
                    " \"start\": 89692940, " + 
                    " \"end\": 89692940, " + 
                    " \"referenceAllele\": \"_EM_1310_XYZ_\", " + 
                    " \"variantAllele\": \"T\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/cancer_hotspots/genomic?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
