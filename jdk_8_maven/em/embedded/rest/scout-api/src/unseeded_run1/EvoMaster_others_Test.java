import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T07:34:47.700+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 80 tests
 * <br>
 * Covered targets: 658
 * <br>
 * Used time: 2h 0m 18s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","USERS","USER_IDENTITY","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 17381L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Mrnb15ti2\"")
            .and().insertInto("ACTIVITY", 17380L)
            .and().insertInto("ACTIVITY", 17379L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17378L)
                .d("AGE_MAX", "-555")
                .d("AGE_MIN", "-2147483105")
                .d("DATE_CREATED", "\"1903-09-20 16:24:29\"")
                .d("DATE_PUBLISHED", "\"2028-09-16 21:39:13\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"3cAX67j28eT\"")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"gX1PNl\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "true")
                .d("NAME", "\"5XNeiOzg\"")
                .d("PARTICIPANTS_MAX", "-1567")
                .d("PARTICIPANTS_MIN", "552")
                .d("SOURCE", "NULL")
                .d("TIME_MAX", "642")
                .d("TIME_MIN", "434")
                .r("ACTIVITY_ID", 17379L)
                .d("AUTHOR_ID", "3")
                .r("PUBLISHING_ACTIVITY_ID", 17379L)
            .and().insertInto("USERS", 17385L)
                .d("AUTHORIZATION_LEVEL", "195")
                .d("NAME", "\"BuMQuI\"")
            .and().insertInto("ACTIVITY", 17384L)
            .and().insertInto("ACTIVITY", 17383L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17382L)
                .d("AGE_MAX", "-668")
                .d("AGE_MIN", "-2147483203")
                .d("DATE_CREATED", "\"2012-08-22 00:06:55\"")
                .d("DATE_PUBLISHED", "\"2073-12-15 00:25:21\"")
                .d("DATE_UPDATED", "\"2084-09-10 23:06:34\"")
                .d("DESCRIPTION_INTRODUCTION", "\"5ZVt0jSpg\"")
                .d("DESCRIPTION_MAIN", "\"YU8UVvPgCUeAeN2U\"")
                .d("DESCRIPTION_MATERIAL", "\"vq0o\"")
                .d("DESCRIPTION_NOTES", "\"Bkgljj9edcrstja\"")
                .d("DESCRIPTION_PREPARE", "\"rLhTcqjw0Eba\"")
                .d("DESCRIPTION_SAFETY", "\"7X5zXEFzMQp5Rs4m\"")
                .d("FEATURED", "false")
                .d("NAME", "\"7n2c9Lo\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "-1497037369")
                .d("SOURCE", "\"v9hclGj7\"")
                .d("TIME_MAX", "0")
                .d("TIME_MIN", "322")
                .r("ACTIVITY_ID", 17384L)
                .d("AUTHOR_ID", "3")
                .r("PUBLISHING_ACTIVITY_ID", 17383L)
            .and().insertInto("USERS", 17389L)
                .d("AUTHORIZATION_LEVEL", "66311")
                .d("NAME", "\"CsFrkH8LTfaN\"")
            .and().insertInto("ACTIVITY", 17388L)
            .and().insertInto("ACTIVITY", 17387L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17386L)
                .d("AGE_MAX", "-484052162")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "\"1902-10-08 17:07:16\"")
                .d("DATE_PUBLISHED", "\"1941-05-17 20:59:43\"")
                .d("DATE_UPDATED", "\"2043-01-08 17:11:19\"")
                .d("DESCRIPTION_INTRODUCTION", "\"anAp9s0EmLN0Iiv\"")
                .d("DESCRIPTION_MAIN", "\"nI080g3m8x_yf\"")
                .d("DESCRIPTION_MATERIAL", "\"8V1Q4S\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"phOEDZa40k\"")
                .d("PARTICIPANTS_MAX", "131626")
                .d("PARTICIPANTS_MIN", "564")
                .d("SOURCE", "\"P0kl2bfG\"")
                .d("TIME_MAX", "529")
                .d("TIME_MIN", "138")
                .r("ACTIVITY_ID", 17383L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17380L)
            .and().insertInto("USERS", 17393L)
                .d("AUTHORIZATION_LEVEL", "178")
                .d("NAME", "\"_EM_125772_XYZ_\"")
            .and().insertInto("ACTIVITY", 17392L)
            .and().insertInto("ACTIVITY", 17391L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17390L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "\"2075-11-05 23:13:55\"")
                .d("DATE_PUBLISHED", "\"1914-05-07 13:40:57\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"9G6ow784W7bL4U2n\"")
                .d("DESCRIPTION_MAIN", "\"_EM_125773_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "NULL")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"4gCUEkbK0s\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"vdE0Z4gyqD\"")
                .d("PARTICIPANTS_MAX", "-1740391324")
                .d("PARTICIPANTS_MIN", "183")
                .d("SOURCE", "\"uLZI\"")
                .d("TIME_MAX", "-65240")
                .d("TIME_MIN", "NULL")
                .r("ACTIVITY_ID", 17379L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17391L)
            .and().insertInto("ACTIVITY", 17395L)
            .and().insertInto("ACTIVITY_DERIVED", 17394L)
                .r("ACTIVITY_ID", 17391L)
                .d("FAVOURITES_COUNT", "196")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "509")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("ACTIVITY", 17397L)
            .and().insertInto("ACTIVITY_DERIVED", 17396L)
                .r("ACTIVITY_ID", 17383L)
                .d("FAVOURITES_COUNT", "-1242851130081307474")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "212")
                .d("RATINGS_SUM", "276")
            .and().insertInto("ACTIVITY", 17399L)
            .and().insertInto("ACTIVITY_DERIVED", 17398L)
                .r("ACTIVITY_ID", 17399L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "0.028364544413075232")
                .d("RATINGS_COUNT", "-883831812")
                .d("RATINGS_SUM", "631684041")
            .and().insertInto("ACTIVITY", 17401L)
            .and().insertInto("ACTIVITY_DERIVED", 17400L)
                .r("ACTIVITY_ID", 17395L)
                .d("FAVOURITES_COUNT", "733")
                .d("RATINGS_AVG", "0.6")
                .d("RATINGS_COUNT", "66223")
                .d("RATINGS_SUM", "0")
            .and().insertInto("ACTIVITY", 16294L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "ages=_EM_62321_XYZ_&" + 
                    "ratings_count_min=766&" + 
                    "ratings_average_min=1.291574721015416&" + 
                    "random=228&" + 
                    "favourites=56")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system/roles")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission_levels'.'category_edit'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_create'", numberMatches(10.0))
                .body("'permission_levels'.'reference_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'system_message_read'", numberMatches(-100.0))
                .body("'permission_levels'.'auth_role_list'", numberMatches(20.0))
                .body("'permission_levels'.'reference_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_create'", numberMatches(20.0))
                .body("'permission_levels'.'activity_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'comment_create'", numberMatches(0.0))
                .body("'permission_levels'.'category_create'", numberMatches(10.0))
                .body("'permission_levels'.'activity_edit'", numberMatches(10.0))
                .body("'permission_levels'.'reference_create'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_edit'", numberMatches(20.0))
                .body("'permission_levels'.'auth_profile_edit'", numberMatches(0.0))
                .body("'permission_levels'.'comment_edit'", numberMatches(10.0))
                .body("'permission_levels'.'system_message_manage'", numberMatches(20.0))
                .body("'permission_levels'.'mediaitem_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assignown'", numberMatches(10.0))
                .body("'permission_levels'.'rating_set_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assign'", numberMatches(20.0))
                .body("'permission_levels'.'comment_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'activity_create'", numberMatches(0.0))
                .body("'role_levels'.'administrator'", numberMatches(20.0))
                .body("'role_levels'.'moderator'", numberMatches(10.0))
                .body("'role_levels'.'limited_user'", numberMatches(-1.0))
                .body("'role_levels'.'user'", numberMatches(0.0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"3zYK_OX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("3zYK_OX"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_2.extract().body().path("id").toString();
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile?ratings_count_min=pLkwP&random=_EM_125776_XYZ_&ratings_average_min=k&participants=fBOM2CTuHrB0D5&group=T&categories=G%3Dr&uri=EjQhC&time_1=itif6vMxmXGjdc&key=wYS&favourites=2104FSZ&ages=QtES1zFbQfP"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("3zYK_OX"))
                .body("'email_address'", nullValue())
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=EVOMASTER&" + 
                    "attrs=_EM_7468_XYZ_&" + 
                    "EMextraParam123=_EM_7469_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_135_XYZ_&" + 
                    "age_1=_EM_139_XYZ_&" + 
                    "age_2=_EM_140_XYZ_&" + 
                    "time_2=_EM_143_XYZ_&" + 
                    "ratings_average_min=0.5797313669556209&" + 
                    "random=373&" + 
                    "favourites=278")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 17381L)
                .d("AUTHORIZATION_LEVEL", "270")
                .d("NAME", "\"TABLE\"")
            .and().insertInto("ACTIVITY", 17380L)
            .and().insertInto("ACTIVITY", 17379L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17378L)
                .d("AGE_MAX", "-1073742030")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"1967-09-20 20:16:12\"")
                .d("DATE_PUBLISHED", "\"1911-01-08 11:55:05\"")
                .d("DATE_UPDATED", "\"1936-01-01 11:28:00\"")
                .d("DESCRIPTION_INTRODUCTION", "\"3cAX67j28eT\"")
                .d("DESCRIPTION_MAIN", "\"SxHvjeAU\"")
                .d("DESCRIPTION_MATERIAL", "\"S\"")
                .d("DESCRIPTION_NOTES", "\"L_Q6`cC`C\"")
                .d("DESCRIPTION_PREPARE", "\"\"")
                .d("DESCRIPTION_SAFETY", "\"6297508\"")
                .d("FEATURED", "false")
                .d("NAME", "\"5XNeiOzg\"")
                .d("PARTICIPANTS_MAX", "450")
                .d("PARTICIPANTS_MIN", "552")
                .d("SOURCE", "\"\"")
                .d("TIME_MAX", "668")
                .d("TIME_MIN", "-128")
                .r("ACTIVITY_ID", 17380L)
                .d("AUTHOR_ID", "2")
                .r("PUBLISHING_ACTIVITY_ID", 17379L)
            .and().insertInto("USERS", 17385L)
                .d("AUTHORIZATION_LEVEL", "50083")
                .d("NAME", "\"_EM_129613_XYZ_\"")
            .and().insertInto("ACTIVITY", 17384L)
            .and().insertInto("ACTIVITY", 17383L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17382L)
                .d("AGE_MAX", "84")
                .d("AGE_MIN", "-2147482675")
                .d("DATE_CREATED", "\"2030-06-18 08:06:59\"")
                .d("DATE_PUBLISHED", "\"1943-12-19 00:25:17\"")
                .d("DATE_UPDATED", "\"2084-09-11 19:06:34\"")
                .d("DESCRIPTION_INTRODUCTION", "\"5VVt0jSpff\"")
                .d("DESCRIPTION_MAIN", "\"NAME5_13_\"")
                .d("DESCRIPTION_MATERIAL", "\"vt1o2\"")
                .d("DESCRIPTION_NOTES", "\"_EM_129689_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"rLhUUqjw0EbU\"")
                .d("DESCRIPTION_SAFETY", "\"NhgS_G1UcrfH5i0\"")
                .d("FEATURED", "true")
                .d("NAME", "\"AUTHOR\"")
                .d("PARTICIPANTS_MAX", "NULL")
                .d("PARTICIPANTS_MIN", "-1497037370")
                .d("SOURCE", "\"6371362\"")
                .d("TIME_MAX", "-7666")
                .d("TIME_MIN", "322")
                .r("ACTIVITY_ID", 17384L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17384L)
            .and().insertInto("USERS", 17389L)
                .d("AUTHORIZATION_LEVEL", "543")
                .d("NAME", "\"0UOfEK\"")
            .and().insertInto("ACTIVITY", 17388L)
            .and().insertInto("ACTIVITY", 17387L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17386L)
                .d("AGE_MAX", "-1073741774")
                .d("AGE_MIN", "-707")
                .d("DATE_CREATED", "\"1902-10-08 17:07:16\"")
                .d("DATE_PUBLISHED", "\"1937-07-25 23:27:43\"")
                .d("DATE_UPDATED", "\"2043-04-08 17:43:15\"")
                .d("DESCRIPTION_INTRODUCTION", "\"anAp9s0EmLN0Iiv\"")
                .d("DESCRIPTION_MAIN", "\"_EM_149239_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "\"8V1Q43\"")
                .d("DESCRIPTION_NOTES", "\"531HjKCd0P81\"")
                .d("DESCRIPTION_PREPARE", "\"rgWgZwx_0ZkF\"")
                .d("DESCRIPTION_SAFETY", "\"U\"")
                .d("FEATURED", "false")
                .d("NAME", "\"phOEDZa40U\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "628")
                .d("SOURCE", "\"_EM_149578_XYZ_\"")
                .d("TIME_MAX", "761")
                .d("TIME_MIN", "134")
                .r("ACTIVITY_ID", 17384L)
                .d("AUTHOR_ID", "2")
                .r("PUBLISHING_ACTIVITY_ID", 17380L)
            .and().insertInto("USERS", 17393L)
                .d("AUTHORIZATION_LEVEL", "-8")
                .d("NAME", "\"oWQy3\"")
            .and().insertInto("ACTIVITY", 17392L)
            .and().insertInto("ACTIVITY", 17391L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17390L)
                .d("AGE_MAX", "-1073749934")
                .d("AGE_MIN", "-1")
                .d("DATE_CREATED", "\"2075-11-05 23:13:55\"")
                .d("DATE_PUBLISHED", "\"1946-09-22 13:38:57\"")
                .d("DATE_UPDATED", "\"2063-06-14 21:10:16\"")
                .d("DESCRIPTION_INTRODUCTION", "\"531HjKCd0P81\"")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"_EM_129707_XYZ_\"")
                .d("DESCRIPTION_NOTES", "\"_EM_129708_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"6gCUEkbK0sQ\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_129417_XYZ_\"")
                .d("FEATURED", "false")
                .d("NAME", "\"%UJ%\"")
                .d("PARTICIPANTS_MAX", "-1740390813")
                .d("PARTICIPANTS_MIN", "32951")
                .d("SOURCE", "\"uLZUwO\"")
                .d("TIME_MAX", "382")
                .d("TIME_MIN", "-264")
                .r("ACTIVITY_ID", 17391L)
                .r("AUTHOR_ID", 17385L)
                .r("PUBLISHING_ACTIVITY_ID", 17392L)
            .and().insertInto("ACTIVITY", 17395L)
            .and().insertInto("ACTIVITY_DERIVED", 17394L)
                .r("ACTIVITY_ID", 17380L)
                .d("FAVOURITES_COUNT", "292")
                .d("RATINGS_AVG", "0.812896")
                .d("RATINGS_COUNT", "508")
                .d("RATINGS_SUM", "-2327860942350076461")
            .and().insertInto("ACTIVITY", 17397L)
            .and().insertInto("ACTIVITY_DERIVED", 17396L)
                .r("ACTIVITY_ID", 17384L)
                .d("FAVOURITES_COUNT", "-1242851130081308625")
                .d("RATINGS_AVG", "0.0")
                .d("RATINGS_COUNT", "0")
                .d("RATINGS_SUM", "496")
            .and().insertInto("ACTIVITY", 17399L)
            .and().insertInto("ACTIVITY_DERIVED", 17398L)
                .r("ACTIVITY_ID", 17392L)
                .d("FAVOURITES_COUNT", "488")
                .d("RATINGS_AVG", "-0.15776388942527533")
                .d("RATINGS_COUNT", "-883847682")
                .d("RATINGS_SUM", "631679945")
            .and().insertInto("ACTIVITY", 17401L)
            .and().insertInto("ACTIVITY_DERIVED", 17400L)
                .r("ACTIVITY_ID", 17388L)
                .d("FAVOURITES_COUNT", "733")
                .d("RATINGS_AVG", "16.682444735973846")
                .d("RATINGS_COUNT", "-64849")
                .d("RATINGS_SUM", "16987")
            .and().insertInto("MEDIA_FILE", 30357L)
                .d("AUTHOR", "\"S\"")
                .d("CAPTURE_DATE", "\"1902-12-24 01:14:02\"")
                .d("COPY_RIGHT", "\"_EM_129709_XYZ_\"")
                .d("MIME_TYPE", "\"TIME_MAX\"")
                .d("NAME", "\"ID1_7_\"")
                .d("URI", "\"DESCRIPTION_MATERIAL\"")
            .and().insertInto("MEDIA_FILE", 30358L)
                .d("AUTHOR", "\"PvhF\"")
                .d("CAPTURE_DATE", "\"2099-08-18 11:29:57\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"\"")
                .d("NAME", "\"_EM_126497_XYZ_c\"")
                .d("URI", "\"\"")
            .and().insertInto("MEDIA_FILE", 30359L)
                .d("AUTHOR", "\"Al1Q_3G\"")
                .d("CAPTURE_DATE", "\"2074-02-16 02:05:33\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_150040_XYZ_\"")
                .d("NAME", "\"-7\"")
                .d("URI", "\"_EM_129419_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 30365L)
                .d("URI", "\"_EM_138537_XYZ_\"")
            .and().insertInto("USERS", 30364L)
                .d("AUTHORIZATION_LEVEL", "373")
                .d("NAME", "\"U8Y\"")
            .and().insertInto("ACTIVITY", 30363L)
            .and().insertInto("ACTIVITY", 30362L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30361L)
                .r("ACTIVITY_ID", 17380L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 30360L)
                .r("ACTIVITY_PROPERTIES_ID", 17390L)
                .r("MEDIA_FILE_ID", 30365L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 30371L)
                .d("URI", "\"RELATIONS0_\"")
            .and().insertInto("USERS", 30370L)
                .d("AUTHORIZATION_LEVEL", "-16108")
                .d("NAME", "\"_EM_129691_XYZ_\"")
            .and().insertInto("ACTIVITY", 30369L)
            .and().insertInto("ACTIVITY", 30368L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30367L)
                .r("ACTIVITY_ID", 17380L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 30366L)
                .r("ACTIVITY_PROPERTIES_ID", 17378L)
                .r("MEDIA_FILE_ID", 30371L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 30377L)
                .d("URI", "\"Cq_QQeRRsZ6\"")
            .and().insertInto("USERS", 30376L)
                .d("AUTHORIZATION_LEVEL", "16")
                .d("NAME", "\"_EM_129619_XYZ_\"")
            .and().insertInto("ACTIVITY", 30375L)
            .and().insertInto("ACTIVITY", 30374L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30373L)
                .r("ACTIVITY_ID", 30362L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 30372L)
                .r("ACTIVITY_PROPERTIES_ID", 30373L)
                .r("MEDIA_FILE_ID", 30358L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 30383L)
                .d("URI", "\"_EM_129620_XYZ_\"")
            .and().insertInto("USERS", 30382L)
                .d("AUTHORIZATION_LEVEL", "-1617")
                .d("NAME", "\"i\"")
            .and().insertInto("ACTIVITY", 30381L)
            .and().insertInto("ACTIVITY", 30380L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30379L)
                .r("ACTIVITY_ID", 17392L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 30378L)
                .r("ACTIVITY_PROPERTIES_ID", 30379L)
                .r("MEDIA_FILE_ID", 30371L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 30389L)
                .d("URI", "\"_EM_127942_XYZ_\"")
            .and().insertInto("USERS", 30388L)
                .d("AUTHORIZATION_LEVEL", "-8060")
                .d("NAME", "\"qgWgZwx^0ZkF\"")
            .and().insertInto("ACTIVITY", 30387L)
            .and().insertInto("ACTIVITY", 30386L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30385L)
                .r("ACTIVITY_ID", 17395L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 30384L)
                .r("ACTIVITY_PROPERTIES_ID", 30367L)
                .r("MEDIA_FILE_ID", 30358L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 30973L)
                .d("AUTHORIZATION_LEVEL", "371")
                .d("NAME", "\"_EM_12U943_XYZ]\"")
            .and().insertInto("ACTIVITY", 30972L)
            .and().insertInto("ACTIVITY", 30971L)
            .and().insertInto("ACTIVITY_RELATION", 30970L)
                .r("ACTIVITY_1_ID", 17388L)
                .r("ACTIVITY_2_ID", 17397L)
                .r("OWNER_ID", 30364L)
            .and().insertInto("MEDIA_FILE", 30980L)
                .d("URI", "\"ZIWmsGC\"")
            .and().insertInto("TAG", 30979L)
                .d("GRP", "\"_\"")
                .d("NAME", "\"0UOfEK\"")
            .and().insertInto("USERS", 30978L)
                .d("AUTHORIZATION_LEVEL", "138")
                .d("NAME", "\"Zs7LIP_3M\"")
            .and().insertInto("ACTIVITY", 30977L)
            .and().insertInto("ACTIVITY", 30976L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30975L)
                .r("ACTIVITY_ID", 30972L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 30974L)
                .r("ACTIVITY_PROPERTIES_ID", 30361L)
                .r("TAG_ID", 30979L)
            .and().insertInto("MEDIA_FILE", 30987L)
                .d("URI", "\"5gCUEkbK0s\"")
            .and().insertInto("TAG", 30986L)
                .d("GRP", "\"eWQLCW4Yv\"")
                .d("NAME", "\"BUghjj9edcpsUja\"")
            .and().insertInto("USERS", 30985L)
                .d("AUTHORIZATION_LEVEL", "-768")
                .d("NAME", "\"ppNRkSn\"")
            .and().insertInto("ACTIVITY", 30984L)
            .and().insertInto("ACTIVITY", 30983L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30982L)
                .r("ACTIVITY_ID", 17384L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 30981L)
                .r("ACTIVITY_PROPERTIES_ID", 17386L)
                .r("TAG_ID", 30979L)
            .and().insertInto("MEDIA_FILE", 30994L)
                .d("URI", "\"8yV\"")
            .and().insertInto("TAG", 30993L)
                .d("GRP", "\"6359323\"")
                .d("NAME", "\"ZZcqvhdI\"")
            .and().insertInto("USERS", 30992L)
                .d("AUTHORIZATION_LEVEL", "706")
                .d("NAME", "\"mk\"")
            .and().insertInto("ACTIVITY", 30991L)
            .and().insertInto("ACTIVITY", 30990L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30989L)
                .r("ACTIVITY_ID", 17388L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 30988L)
                .r("ACTIVITY_PROPERTIES_ID", 30373L)
                .r("TAG_ID", 30986L)
            .and().insertInto("MEDIA_FILE", 31001L)
                .d("URI", "\"_EM_138538_XYZ_\"")
            .and().insertInto("TAG", 31000L)
                .d("GRP", "\"a4SULUfGctk\"")
                .d("NAME", "\"wr1U2\"")
            .and().insertInto("USERS", 30999L)
                .d("AUTHORIZATION_LEVEL", "498")
                .d("NAME", "\"_EM_138539_XYZ_\"")
            .and().insertInto("ACTIVITY", 30998L)
            .and().insertInto("ACTIVITY", 30997L)
            .and().insertInto("ACTIVITY_PROPERTIES", 30996L)
                .r("ACTIVITY_ID", 17401L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 30995L)
                .r("ACTIVITY_PROPERTIES_ID", 17386L)
                .r("TAG_ID", 30986L)
            .and().insertInto("MEDIA_FILE", 38593L)
                .d("URI", "\"9HIDqJhz_\"")
            .and().insertInto("TAG", 38592L)
                .d("GRP", "\"WoIbeyW5t\"")
                .d("NAME", "\"_EM_150041_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 38591L)
                .r("TAG_ID", 30979L)
                .d("ACTIVITIES_COUNT", "535")
            .and().insertInto("MEDIA_FILE", 38596L)
                .d("URI", "\"s3FBwntnYI45zW3\"")
            .and().insertInto("TAG", 38595L)
                .d("GRP", "\"LE6HlBKlE4J\"")
                .d("NAME", "\"\"")
            .and().insertInto("TAG_DERIVED", 38594L)
                .r("TAG_ID", 31000L)
                .d("ACTIVITIES_COUNT", "814")
            .and().insertInto("MEDIA_FILE", 38599L)
                .d("URI", "\"PvhF\"")
            .and().insertInto("TAG", 38598L)
                .d("GRP", "\"MdebYqM\"")
                .d("NAME", "\"C2mSh\"")
            .and().insertInto("TAG_DERIVED", 38597L)
                .r("TAG_ID", 30993L)
                .d("ACTIVITIES_COUNT", "493")
            .and().insertInto("MEDIA_FILE", 38602L)
                .d("URI", "\"U\"")
            .and().insertInto("TAG", 38601L)
                .d("GRP", "\"AGeIiCPSFI6ofsN\"")
                .d("NAME", "\"YNGR7sloW6m\"")
            .and().insertInto("TAG_DERIVED", 38600L)
                .r("TAG_ID", 38595L)
                .d("ACTIVITIES_COUNT", "533")
            .and().insertInto("MEDIA_FILE", 38605L)
                .d("URI", "\"IEZ\"")
            .and().insertInto("TAG", 38604L)
                .d("GRP", "\"F0aI7P_KWq_D4c89\"")
                .d("NAME", "\"INl\"")
            .and().insertInto("TAG_DERIVED", 38603L)
                .r("TAG_ID", 38604L)
                .d("ACTIVITIES_COUNT", "708")
            .and().insertInto("SYSTEM_MESSAGE", 38653L)
                .d("KEY", "\"xSgb\"")
                .d("VALID_FROM", "\"2050-01-23 15:25:20\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"l9fa0zBgl5oKDEyo\"")
            .and().insertInto("USERS", 38768L)
                .d("AUTHORIZATION_LEVEL", "738")
                .d("NAME", "\"14UiLg\"")
            .and().insertInto("ACTIVITY", 38767L)
            .and().insertInto("ACTIVITY_RATING", 38766L)
                .r("ACTIVITY_ID", 17397L)
                .r("USER_ID", 38768L)
                .d("FAVOURITE", "false")
                .d("RATING", "263")
            .and().insertInto("USERS", 38771L)
                .d("AUTHORIZATION_LEVEL", "132")
                .d("NAME", "\"Rng\"")
            .and().insertInto("ACTIVITY", 38770L)
            .and().insertInto("ACTIVITY_RATING", 38769L)
                .r("ACTIVITY_ID", 30977L)
                .r("USER_ID", 30388L)
                .d("FAVOURITE", "true")
                .d("RATING", "597")
            .and().insertInto("USERS", 38774L)
                .d("AUTHORIZATION_LEVEL", "683")
                .d("NAME", "\"3BAgrE\"")
            .and().insertInto("ACTIVITY", 38773L)
            .and().insertInto("ACTIVITY_RATING", 38772L)
                .r("ACTIVITY_ID", 38767L)
                .r("USER_ID", 30376L)
                .d("FAVOURITE", "true")
                .d("RATING", "392")
            .and().insertInto("USERS", 38777L)
                .d("AUTHORIZATION_LEVEL", "945")
                .d("NAME", "\"PkohU\"")
            .and().insertInto("ACTIVITY", 38776L)
            .and().insertInto("ACTIVITY_RATING", 38775L)
                .r("ACTIVITY_ID", 17384L)
                .r("USER_ID", 30985L)
                .d("FAVOURITE", "false")
                .d("RATING", "188")
            .and().insertInto("USERS", 38780L)
                .d("AUTHORIZATION_LEVEL", "152")
                .d("NAME", "\"ikVJaGGAUzbhPx\"")
            .and().insertInto("ACTIVITY", 38779L)
            .and().insertInto("ACTIVITY_RATING", 38778L)
                .r("ACTIVITY_ID", 30380L)
                .r("USER_ID", 17393L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("ACTIVITY", 16294L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=QwNX&" + 
                    "name=%2F&" + 
                    "featured=true&" + 
                    "durations=_EM_62323_XYZ_&" + 
                    "ratings_count_min=0&" + 
                    "ratings_average_min=1.291574721015416&" + 
                    "random=50&" + 
                    "favourites=23")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 459L)
            .and().insertInto("ACTIVITY", 460L)
            .and().insertInto("ACTIVITY", 461L)
            .and().insertInto("ACTIVITY", 462L)
            .and().insertInto("ACTIVITY", 463L)
            .and().insertInto("MEDIA_FILE", 11664L)
                .d("URI", "\"j\"")
            .and().insertInto("TAG", 11663L)
                .d("GRP", "\"_EM_47986_XYZ_\"")
                .d("NAME", "\"apOV\"")
            .and().insertInto("USERS", 11662L)
                .d("AUTHORIZATION_LEVEL", "665")
                .d("NAME", "\"UUWUPWU9Z`UZf\"")
            .and().insertInto("ACTIVITY", 11661L)
            .and().insertInto("ACTIVITY", 11660L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11659L)
                .r("ACTIVITY_ID", 462L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11658L)
                .r("ACTIVITY_PROPERTIES_ID", 11659L)
                .r("TAG_ID", 11663L)
            .and().insertInto("MEDIA_FILE", 11671L)
                .d("URI", "\"d\"")
            .and().insertInto("TAG", 11670L)
                .d("GRP", "\"SBKbmS7Lq_fvD\"")
                .d("NAME", "\"_EM_120273_XYZ_\"")
            .and().insertInto("USERS", 11669L)
                .d("AUTHORIZATION_LEVEL", "-7922")
                .d("NAME", "\"_EM_47988_XYZ_\"")
            .and().insertInto("ACTIVITY", 11668L)
            .and().insertInto("ACTIVITY", 11667L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11666L)
                .r("ACTIVITY_ID", 11668L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11665L)
                .r("ACTIVITY_PROPERTIES_ID", 11659L)
                .r("TAG_ID", 11670L)
            .and().insertInto("MEDIA_FILE", 11678L)
                .d("URI", "\"gEM_4U96U_XYZU\"")
            .and().insertInto("TAG", 11677L)
                .d("GRP", "\"ljC4_ltomW\"")
                .d("NAME", "\"\"")
            .and().insertInto("USERS", 11676L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"vUP0\"")
            .and().insertInto("ACTIVITY", 11675L)
            .and().insertInto("ACTIVITY", 11674L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11673L)
                .r("ACTIVITY_ID", 460L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11672L)
                .r("ACTIVITY_PROPERTIES_ID", 11666L)
                .r("TAG_ID", 11670L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=FTrK&" + 
                    "name=JX&" + 
                    "text=qA5npAhqQb&" + 
                    "participants=3UJ12jRTl7Wrj&" + 
                    "time_1=4udcgW2XOj_iz&" + 
                    "id=&" + 
                    "favourites=1000&" + 
                    "min_activities_count=&" + 
                    "group=&" + 
                    "valid=dKV5N&" + 
                    "ages=Z2q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 4658L)
                .d("URI", "\"cOg\"")
            .and().insertInto("TAG", 4657L)
                .d("GRP", "\"OH8kv4iHz5J_OU\"")
                .d("NAME", "\"CRI3ej\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 4660L)
                .d("URI", "\"gGOp2So6YSpBb\"")
            .and().insertInto("TAG", 4659L)
                .d("GRP", "\"xgeJksjxCgHWZh\"")
                .d("NAME", "\"uI30F\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=CkHqc3&" + 
                    "featured=true&" + 
                    "categories=6&" + 
                    "age_2=&" + 
                    "time_1=A2huPwB6&" + 
                    "time_2=nw&" + 
                    "id=anpbR9Wqnx&" + 
                    "ratings_count_min=783")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 970, " + 
                    " \"date_published\": \"2078-13-08T22:60:46\", " + 
                    " \"date_created\": \"1999-03-18T-1:33:45\", " + 
                    " \"date_updated\": \"1971-03-17T24:31:15\", " + 
                    " \"description_prepare\": \"_EM_2012_XYZ_\", " + 
                    " \"description_safety\": \"WbBsho\", " + 
                    " \"age_min\": -351, " + 
                    " \"age_max\": -99, " + 
                    " \"participants_min\": 117, " + 
                    " \"participants_max\": 217, " + 
                    " \"time_max\": -1952663675, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"L0nZJtISBLi\", " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_2027_XYZ_\", " + 
                    " \"email_address\": \"_EM_2028_XYZ_\", " + 
                    " \"authorization_level\": 72 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 686, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 766 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/970")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_11773_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 222, " + 
                    " \"value\": \"_EM_11771_XYZ_\", " + 
                    " \"valid_from\": \"1929-08-10T22:07:56\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 2985L)
                .d("KEY", "\"_EM_120986_XYZ_\"")
                .d("VALID_FROM", "\"2095-10-16 02:46:25\"")
                .d("VALID_TO", "\"2067-02-04 13:29:00\"")
                .d("VALUE", "\"5978153\"")
            .and().insertInto("SYSTEM_MESSAGE", 2986L)
                .d("KEY", "\"E\"")
                .d("VALID_FROM", "\"1924-08-27 12:38:59\"")
                .d("VALID_TO", "\"2026-05-18 19:29:29\"")
                .d("VALUE", "\"BUUfDUsKUUdimU\"")
            .and().insertInto("MEDIA_FILE", 27823L)
                .d("URI", "\"ZtKrsVlFf9\"")
            .and().insertInto("USERS", 27822L)
                .d("AUTHORIZATION_LEVEL", "323")
                .d("NAME", "\"1904-05-08 13:19:50\"")
            .and().insertInto("ACTIVITY", 27821L)
            .and().insertInto("ACTIVITY", 27820L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27819L)
                .r("ACTIVITY_ID", 27820L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 27818L)
                .r("ACTIVITY_PROPERTIES_ID", 27819L)
                .r("MEDIA_FILE_ID", 27823L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 27829L)
                .d("URI", "\"_EM_120602_XYZ_\"")
            .and().insertInto("USERS", 27828L)
                .d("AUTHORIZATION_LEVEL", "8826")
                .d("NAME", "\"TZMeNTb8dfV\"")
            .and().insertInto("ACTIVITY", 27827L)
            .and().insertInto("ACTIVITY", 27826L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27825L)
                .r("ACTIVITY_ID", 27820L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 27824L)
                .r("ACTIVITY_PROPERTIES_ID", 27825L)
                .r("MEDIA_FILE_ID", 27823L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 27831L)
                .d("URI", "\"O25l8dy\"")
            .and().insertInto("TAG", 27830L)
                .d("GRP", "\"rDy2xZUKiaUdUUyZ\"")
                .d("NAME", "\"UqM3IAE1m__z\"")
                .r("MEDIA_FILE_ID", 27829L)
            .and().insertInto("MEDIA_FILE", 27838L)
                .d("URI", "\"_EM_120590_XYZ_\"")
            .and().insertInto("TAG", 27837L)
                .d("GRP", "\"\"")
                .d("NAME", "\"UF_cwzv2Q8Qb_xG\"")
            .and().insertInto("USERS", 27836L)
                .d("AUTHORIZATION_LEVEL", "-64958")
                .d("NAME", "\"p\"")
            .and().insertInto("ACTIVITY", 27835L)
            .and().insertInto("ACTIVITY", 27834L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27833L)
                .r("ACTIVITY_ID", 27834L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 27832L)
                .r("ACTIVITY_PROPERTIES_ID", 27819L)
                .r("TAG_ID", 27837L)
            .and().insertInto("MEDIA_FILE", 27845L)
                .d("URI", "\"CONSTANTS\"")
            .and().insertInto("TAG", 27844L)
                .d("GRP", "\"FAVOURITE\"")
                .d("NAME", "\"_EM_120987_XYZ_\"")
            .and().insertInto("USERS", 27843L)
                .d("AUTHORIZATION_LEVEL", "-31991")
                .d("NAME", "\"5997572\"")
            .and().insertInto("ACTIVITY", 27842L)
            .and().insertInto("ACTIVITY", 27841L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27840L)
                .r("ACTIVITY_ID", 27827L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 27839L)
                .r("ACTIVITY_PROPERTIES_ID", 27819L)
                .r("TAG_ID", 27830L)
            .and().insertInto("MEDIA_FILE", 27852L)
                .d("URI", "\"hF2\"")
            .and().insertInto("TAG", 27851L)
                .d("GRP", "\"LuFNnvShmm5Mv\"")
                .d("NAME", "\"2r63abc\"")
            .and().insertInto("USERS", 27850L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"dMTzIaqqCG9\"")
            .and().insertInto("ACTIVITY", 27849L)
            .and().insertInto("ACTIVITY", 27848L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27847L)
                .r("ACTIVITY_ID", 27826L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 27846L)
                .r("ACTIVITY_PROPERTIES_ID", 27840L)
                .r("TAG_ID", 27837L)
            .and().insertInto("MEDIA_FILE", 27859L)
                .d("URI", "\"_EM_120988_XYZ_\"")
            .and().insertInto("TAG", 27858L)
                .d("GRP", "\"f3\"")
                .d("NAME", "\"_EM_120741_XYZ_\"")
            .and().insertInto("USERS", 27857L)
                .d("AUTHORIZATION_LEVEL", "936")
                .d("NAME", "\"cGJphRb01xm\"")
            .and().insertInto("ACTIVITY", 27856L)
            .and().insertInto("ACTIVITY", 27855L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27854L)
                .r("ACTIVITY_ID", 27826L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 27853L)
                .r("ACTIVITY_PROPERTIES_ID", 27840L)
                .r("TAG_ID", 27844L)
            .and().insertInto("MEDIA_FILE", 27866L)
                .d("URI", "\"GfXQn\\Ke5J\"")
            .and().insertInto("TAG", 27865L)
                .d("GRP", "\"mLqiBP\"")
                .d("NAME", "\"GzQa5nh\"")
            .and().insertInto("USERS", 27864L)
                .d("AUTHORIZATION_LEVEL", "1397")
                .d("NAME", "\"_EM_120593_XYZ_\"")
            .and().insertInto("ACTIVITY", 27863L)
            .and().insertInto("ACTIVITY", 27862L)
            .and().insertInto("ACTIVITY_PROPERTIES", 27861L)
                .r("ACTIVITY_ID", 27842L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 27860L)
                .r("ACTIVITY_PROPERTIES_ID", 27861L)
                .r("TAG_ID", 27851L)
            .and().insertInto("MEDIA_FILE", 55586L)
                .d("URI", "\"9Si\"")
            .and().insertInto("TAG", 55585L)
                .d("GRP", "\"S\"")
                .d("NAME", "\"GS_zjJthlkrGWJ5\"")
            .and().insertInto("TAG_DERIVED", 55584L)
                .r("TAG_ID", 27844L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -3521, " + 
                    " \"key\": \"YUQCfE\", " + 
                    " \"value\": \"vV7AS7l3O1\", " + 
                    " \"valid_to\": \"1998-02-05T19:10:56\", " + 
                    " \"valid_from\": \"1906-09-10T19:27:53\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_10255_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 890, " + 
                    " \"name\": \"_EM_10249_XYZ_\", " + 
                    " \"email_address\": \"_EM_10250_XYZ_\", " + 
                    " \"authorization_level\": 582, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 460 " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"date_created\": \"2092-10-32T19:26:36\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_10254_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 7260L)
                .d("AUTHOR", "\"_EM_36190_XYZ_\"")
                .d("CAPTURE_DATE", "\"2045-08-02 09:29:22\"")
                .d("COPY_RIGHT", "\"utZP2pAN\"")
                .d("MIME_TYPE", "\"_EM_66293_XYZ_\"")
                .d("NAME", "\"YYmYyrODG1HNhl\"")
                .d("URI", "\"_EM_66294_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 107, " + 
                    " \"mime_type\": \"_EM_36189_XYZ_\", " + 
                    " \"uri\": \"_EM_3668_XYZ_\", " + 
                    " \"capture_date\": \"2017-02-06T11:33:05\", " + 
                    " \"copy_right\": \"8f\", " + 
                    " \"author\": \"_EM_3670_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/-1941")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_9631_XYZ_\", " + 
                    " \"authorization_level\": 737, " + 
                    " \"identities\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_9633_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 161, " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_9634_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/188668504")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 5295L)
                .d("AUTHORIZATION_LEVEL", "161")
                .d("DATE_CREATED", "\"2001-07-02 11:29:17\"")
                .d("EMAIL_ADDRESS", "\"\"")
                .d("NAME", "\"_EM_28614_XYZ_\"")
            .and().insertInto("USERS", 5296L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "\"_EM_28615_XYZ_\"")
                .d("NAME", "\"mN07CE\"")
            .and().insertInto("USERS", 5297L)
                .d("AUTHORIZATION_LEVEL", "8389603")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"_EM_28616_XYZ_\"")
            .and().insertInto("USERS", 5298L)
                .d("AUTHORIZATION_LEVEL", "791")
                .d("DATE_CREATED", "\"2083-04-12 11:27:20\"")
                .d("EMAIL_ADDRESS", "\"_EM_28617_XYZ_\"")
                .d("NAME", "\"zw3vK\"")
            .and().insertInto("USERS", 5299L)
                .d("AUTHORIZATION_LEVEL", "67109071")
                .d("DATE_CREATED", "\"2077-10-25 04:02:59\"")
                .d("EMAIL_ADDRESS", "\"fPObp0bwgu\"")
                .d("NAME", "\"f66QpagG1t\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 134218320, " + 
                    " \"mime_type\": \"Lzyvj88Axw14i1I\", " + 
                    " \"uri\": \"khv0bDu`89FR6b\", " + 
                    " \"name\": \"P-Y9qcu\", " + 
                    " \"capture_date\": \"1925-06-22T08:24:03\", " + 
                    " \"copy_right\": \"E_rA\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 384L)
                .d("URI", "\"_EM_8473_XYZ_\"")
            .and().insertInto("TAG", 383L)
                .d("GRP", "\"RIt\"")
                .d("NAME", "\"q43SVSKB\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 386L)
                .d("URI", "\"xJPhqdRx99GYPj\"")
            .and().insertInto("TAG", 385L)
                .d("GRP", "\"25dK_WJn1a\"")
                .d("NAME", "\"_EM_8474_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 497, " + 
                    " \"group\": \"_EM_3725_XYZ_\", " + 
                    " \"name\": \"_EM_3726_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 1447808590, " + 
                    " \"uri\": \"_EM_3728_XYZ_\", " + 
                    " \"capture_date\": \"2012-10-25T21:21:55\", " + 
                    " \"copy_right\": \"_EM_3729_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 617 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/33265?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 588L)
                .d("URI", "\"NZ\"")
            .and().insertInto("TAG", 587L)
                .d("GRP", "\"kiu1\"")
                .d("NAME", "\"_EM_9676_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 590L)
                .d("URI", "\"fcpY6du_6\"")
            .and().insertInto("TAG", 589L)
                .d("GRP", "\"STgBOOTMnFForB\"")
                .d("NAME", "\"2jqEWNT\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 592L)
                .d("URI", "\"MpEE3kXa\"")
            .and().insertInto("TAG", 591L)
                .d("GRP", "\"_EM_9677_XYZ_\"")
                .d("NAME", "\"_EM_9678_XYZ_\"")
                .r("MEDIA_FILE_ID", 590L)
            .and().insertInto("MEDIA_FILE", 594L)
                .d("URI", "\"_EM_9679_XYZ_\"")
            .and().insertInto("TAG", 593L)
                .d("GRP", "\"5wlQH6K\"")
                .d("NAME", "\"mUTEYa732bVrBO\"")
                .r("MEDIA_FILE_ID", 590L)
            .and().insertInto("MEDIA_FILE", 596L)
                .d("URI", "\"_EM_9680_XYZ_\"")
            .and().insertInto("TAG", 595L)
                .d("GRP", "\"B3oCq\"")
                .d("NAME", "\"Np48X8SeKQNCGZ\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5113_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 634, " + 
                    " \"group\": \"_EM_5105_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_5107_XYZ_\", " + 
                    " \"uri\": \"_EM_5108_XYZ_\", " + 
                    " \"name\": \"_EM_5109_XYZ_\", " + 
                    " \"capture_date\": \"1901-01-09T14:59:24\", " + 
                    " \"copy_right\": \"_EM_5110_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 698 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_5112_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_25303_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 775, " + 
                    " \"group\": \"_EM_25298_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 915, " + 
                    " \"uri\": \"WtM0l\", " + 
                    " \"name\": \"_EM_25301_XYZ_\", " + 
                    " \"capture_date\": \"2022-01-00T25:47:14\", " + 
                    " \"copy_right\": \"_EM_25302_XYZ_\", " + 
                    " \"author\": \"CEC3Q8\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2977L)
                .d("URI", "\"tq\"")
            .and().insertInto("TAG", 2976L)
                .d("GRP", "\"_3LfXVAkT\"")
                .d("NAME", "\"_EM_18471_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_12611_XYZ_\", " + 
                    " \"name\": \"_EM_12612_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 1224198656, " + 
                    " \"uri\": \"_EM_12614_XYZ_\", " + 
                    " \"name\": \"_EM_12615_XYZ_\", " + 
                    " \"capture_date\": \"2000-03-07T02:13:02\", " + 
                    " \"copy_right\": \"_EM_12616_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/487?EMextraParam123=_EM_12618_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 571, " + 
                    " \"name\": \"EYV9V4w67E\", " + 
                    " \"description_prepare\": \"9iRmtgDEFm\", " + 
                    " \"age_max\": -768, " + 
                    " \"time_min\": 148, " + 
                    " \"time_max\": 473, " + 
                    " \"source\": \"Oed\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 343, " + 
                    " \"group\": \"2S\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"\", " + 
                    " \"copy_right\": \"z9s25GiZdfYhKuCa\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 16 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -60221102744017925, " + 
                    " \"media_file\": { " + 
                    " \"id\": 305, " + 
                    " \"mime_type\": \"oSkTTfSh3I\", " + 
                    " \"uri\": \"\", " + 
                    " \"name\": \"\", " + 
                    " \"capture_date\": \"2084-08-00T09:45:36\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 328, " + 
                    " \"activities_count\": 152 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 908, " + 
                    " \"group\": \"qMcVQAhJ2fl\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"iCyJcxLhc8INy5\", " + 
                    " \"capture_date\": \"2057-13-26T23:16:11\", " + 
                    " \"author\": \"Ng5\" " + 
                    " }, " + 
                    " \"activities_count\": 283 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -3364857550630086239, " + 
                    " \"capture_date\": \"2016-12-14T19:52:08\", " + 
                    " \"author\": \"3939TPC2HpO\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/571")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_25203_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 16, " + 
                    " \"name\": \"aZx\", " + 
                    " \"description_introduction\": \"HjSJkygw3vKen\", " + 
                    " \"description_prepare\": \"_EM_25152_XYZ_\", " + 
                    " \"description_main\": \"_EM_25153_XYZ_\", " + 
                    " \"description_safety\": \"UXquIeH\", " + 
                    " \"description_notes\": \"\", " + 
                    " \"age_min\": -675, " + 
                    " \"age_max\": -2147483049, " + 
                    " \"participants_max\": 10, " + 
                    " \"time_min\": 67109096, " + 
                    " \"time_max\": 183, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_25156_XYZ_\", " + 
                    " \"name\": \"_EM_25157_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 664, " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_25166_XYZ_\", " + 
                    " \"name\": \"_EM_25167_XYZ_\", " + 
                    " \"capture_date\": \"1923-11-07T09:44:20\", " + 
                    " \"author\": \"_EM_25169_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"id\": 949, " + 
                    " \"mime_type\": \"_EM_25172_XYZ_\", " + 
                    " \"uri\": \"_EM_25173_XYZ_\", " + 
                    " \"copy_right\": \"_EM_25174_XYZ_\", " + 
                    " \"author\": \"_EM_25175_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 69, " + 
                    " \"group\": \"_EM_25176_XYZ_\", " + 
                    " \"activities_count\": 801 " + 
                    " }, " + 
                    " {} " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 704, " + 
                    " \"mime_type\": \"_EM_25187_XYZ_\", " + 
                    " \"uri\": \"_EM_25188_XYZ_\", " + 
                    " \"name\": \"_EM_26586_XYZ_\", " + 
                    " \"capture_date\": \"1958-10-31T20:32:45\", " + 
                    " \"copy_right\": \"h0RMMy\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 799, " + 
                    " \"uri\": \"_EM_25193_XYZ_\", " + 
                    " \"name\": \"_EM_25194_XYZ_\", " + 
                    " \"capture_date\": \"2061-01-30T10:20:34\", " + 
                    " \"copy_right\": \"_EM_25195_XYZ_\", " + 
                    " \"author\": \"NW4R\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 945, " + 
                    " \"name\": \"MpcOVU\", " + 
                    " \"capture_date\": \"2098-09-26T09:48:10\", " + 
                    " \"copy_right\": \"_EM_25199_XYZ_\", " + 
                    " \"author\": \"_EM_25200_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_25201_XYZ_\", " + 
                    " \"email_address\": \"j7mvby8l5B5gG4\", " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 576, " + 
                    " \"ratings_average\": -7507752.004846111, " + 
                    " \"favourites_count\": -411, " + 
                    " \"ratings_count\": 568 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3367_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_3329_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_3331_XYZ_\", " + 
                    " \"description_safety\": \"_EM_3334_XYZ_\", " + 
                    " \"age_min\": -612, " + 
                    " \"participants_min\": 272, " + 
                    " \"time_min\": 675, " + 
                    " \"time_max\": 184, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 676, " + 
                    " \"group\": \"_EM_3337_XYZ_\", " + 
                    " \"name\": \"_EM_3338_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_3339_XYZ_\", " + 
                    " \"name\": \"_EM_3341_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 526 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_3344_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -1874247806, " + 
                    " \"uri\": \"_EM_3346_XYZ_\", " + 
                    " \"capture_date\": \"2083-05-32T15:38:46\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 747, " + 
                    " \"uri\": \"_EM_3351_XYZ_\", " + 
                    " \"name\": \"_EM_3352_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_3356_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"Fp\", " + 
                    " \"name\": \"mkIhFYEp\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_3363_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"related\": [ " + 
                    " 65, " + 
                    " 167, " + 
                    " 807 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/71039155640344229?EMextraParam123=_EM_3366_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 8961562768895835184, " + 
                    " \"name\": \"_EM_145696_XYZ_\", " + 
                    " \"description_introduction\": \"DZDI\", " + 
                    " \"description_prepare\": \"4668031\", " + 
                    " \"description_main\": \"kjVl52w\", " + 
                    " \"description_safety\": \"4676114\", " + 
                    " \"description_notes\": \"4676289\", " + 
                    " \"age_min\": -201817674, " + 
                    " \"age_max\": -2142392, " + 
                    " \"participants_min\": 0, " + 
                    " \"participants_max\": 2141018144, " + 
                    " \"time_min\": -4095, " + 
                    " \"time_max\": 2147483647, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"4675984\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -154, " + 
                    " \"group\": \"_EM_145578_XYZ_\", " + 
                    " \"name\": \"j8@j6AC\\\\l\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_144450_XYZ_\", " + 
                    " \"uri\": \"ca4fTzGOLHbYuO\", " + 
                    " \"name\": \"KIBEKeoC9\", " + 
                    " \"capture_date\": \"2010-09-18T12:26:30\", " + 
                    " \"copy_right\": \"0Y086ht6mw\", " + 
                    " \"author\": \"yLSEj4sezivGupqvy\" " + 
                    " }, " + 
                    " \"activities_count\": 130 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_144451_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 560, " + 
                    " \"mime_type\": \"t8\", " + 
                    " \"author\": \"UfC674X_ghGSdz\" " + 
                    " }, " + 
                    " \"activities_count\": 370 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"Q0WvwTnnjcU\", " + 
                    " \"uri\": \"https://_EM_103940_XYZ_:570/_EM_103941_XYZ_/\", " + 
                    " \"name\": \"abI@2RQGVa\", " + 
                    " \"capture_date\": \"2000-07-09T25:16:13\", " + 
                    " \"copy_right\": \"xzZ\", " + 
                    " \"author\": \"_EM_146148_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 4971973988617053184, " + 
                    " \"mime_type\": \"_EM^14129U_WYZ\", " + 
                    " \"uri\": \"bEqMVVv2Lf_JA3\", " + 
                    " \"name\": \"fT\", " + 
                    " \"capture_date\": \"2000-12-16T08:25:-1\", " + 
                    " \"copy_right\": \"_EM_145605_XYZ_\", " + 
                    " \"author\": \"TUJNswg6Ed7F6\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"_EM_144779_XYZ_\", " + 
                    " \"name\": \"4ttu7zimYR\", " + 
                    " \"capture_date\": \"1995-13-16T18:33:44\", " + 
                    " \"copy_right\": \"_EM_141501_XYZ_\", " + 
                    " \"author\": \"2wKsZ\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 867, " + 
                    " \"mime_type\": \"iEM_145579_ZYZ_\", " + 
                    " \"uri\": \"Y{TnVulTy7XZs\", " + 
                    " \"name\": \"_EM_145580_XYZ_\", " + 
                    " \"capture_date\": \"2037-06-22T22:33:59\", " + 
                    " \"author\": \"zSKdP4IVOk\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -1008806316531287424, " + 
                    " \"name\": \"YT\", " + 
                    " \"email_address\": \"CdlAuCyBzcal\", " + 
                    " \"authorization_level\": 1073735816, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 6052837899182340095, " + 
                    " \"date_created\": \"1907-10-14T12:-1:29\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"e1Z\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 678, " + 
                    " \"date_created\": \"2048-11-16T03:36:45\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"CTTUp5ryQHJ9iu\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 7638104968018558464, " + 
                    " \"date_created\": \"2000-06-13T07:54:54\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"OTqcuhW626pD\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 0, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.0, " + 
                    " \"favourites_count\": 6269010681299077120, " + 
                    " \"ratings_sum\": 1020434, " + 
                    " \"ratings_count\": 5188146770731145216, " + 
                    " \"related\": [ " + 
                    " 5764607522941855744, " + 
                    " 4611686018055774168 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 8664845598542384128, " + 
                    " \"name\": \"_EM_101382_XYZ_\", " + 
                    " \"description_material\": \"4676151\", " + 
                    " \"description_introduction\": \"H\", " + 
                    " \"description_main\": \"_EM_97791_XYZ_\", " + 
                    " \"description_notes\": \"4676289\", " + 
                    " \"age_min\": -403633372, " + 
                    " \"age_max\": -641370630, " + 
                    " \"participants_min\": 807189787, " + 
                    " \"participants_max\": 2147483647, " + 
                    " \"time_min\": -458460573, " + 
                    " \"time_max\": 2140225933, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"4675984\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -2587465932865610751, " + 
                    " \"group\": \"_EM_102174_XYZ_\", " + 
                    " \"name\": \"9vmGJePm\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -262123, " + 
                    " \"mime_type\": \"tD\", " + 
                    " \"uri\": \"_EM_104670_XYZ_\", " + 
                    " \"name\": \"_EM_104671_XYZ_\", " + 
                    " \"capture_date\": \"2031-12-19T23:34:05\", " + 
                    " \"copy_right\": \"_EM_104672_XYZ_\", " + 
                    " \"author\": \"h7UxhuGkFG9eC\" " + 
                    " }, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 1441151880758650368, " + 
                    " \"mime_type\": \"_EM_104673_XYZ_\", " + 
                    " \"uri\": \"http://GVJP2h_lWvQS9:32767/\", " + 
                    " \"name\": \"_EM_101375_XYZ_\", " + 
                    " \"capture_date\": \"1991-07-25T14:16:58\", " + 
                    " \"copy_right\": \"_EM_104674_XYZ_\", " + 
                    " \"author\": \"6K_ehMGjz\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1441151880758785536, " + 
                    " \"mime_type\": \"_Kca6lbi3AlD\", " + 
                    " \"uri\": \"UUUF864TOlva\", " + 
                    " \"name\": \"g\", " + 
                    " \"capture_date\": \"1906-12-00T08:25:-1\", " + 
                    " \"copy_right\": \"Zs5szKP\", " + 
                    " \"author\": \"_EM_102176_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5332261958806785024, " + 
                    " \"mime_type\": \"e2\", " + 
                    " \"uri\": \"UL\", " + 
                    " \"name\": \"_EM_102177_XYZ_\", " + 
                    " \"capture_date\": \"2003-13-16T18:33:44\", " + 
                    " \"copy_right\": \"HnjQM9\", " + 
                    " \"author\": \"yF9ovPu3ds\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 7205759403792200704, " + 
                    " \"name\": \"tn8Gyrh7V\", " + 
                    " \"email_address\": \"_EL_97773_XYZ\", " + 
                    " \"authorization_level\": 1073486921, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"1907-10-16T20:30:14\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"e2\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 124032, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 6629298651486496768, " + 
                    " \"ratings_sum\": 1016340, " + 
                    " \"ratings_count\": 4611686018427920384, " + 
                    " \"related\": [ " + 
                    " 2305843008656272640, " + 
                    " -739031306, " + 
                    " 4611686018055773696 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 511, " + 
                    " \"description_prepare\": \"VP6j2hgF\", " + 
                    " \"participants_max\": 821, " + 
                    " \"time_max\": 207, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"beA54qi6SU0Pjp_\", " + 
                    " \"tags\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 463, " + 
                    " \"group\": \"_EM_6256_XYZ_\", " + 
                    " \"name\": \"_EM_6257_XYZ_\", " + 
                    " \"activities_count\": 337 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_6264_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 910, " + 
                    " \"copy_right\": \"_EM_6267_XYZ_\", " + 
                    " \"author\": \"_EM_6268_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 687 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_6269_XYZ_\", " + 
                    " \"name\": \"_EM_6270_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 214, " + 
                    " \"mime_type\": \"_EM_6271_XYZ_\", " + 
                    " \"uri\": \"IgOUEyNhcnI\", " + 
                    " \"name\": \"_EM_6272_XYZ_\", " + 
                    " \"copy_right\": \"_EM_6273_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_6274_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 3139479541196594306, " + 
                    " \"uri\": \"_EM_6277_XYZ_\", " + 
                    " \"copy_right\": \"_EM_6279_XYZ_\", " + 
                    " \"author\": \"_EM_6280_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 413, " + 
                    " \"uri\": \"_EM_6282_XYZ_\", " + 
                    " \"capture_date\": \"1953-11-16T19:03:52\", " + 
                    " \"copy_right\": \"_EM_6284_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 363, " + 
                    " \"mime_type\": \"_EM_6286_XYZ_\", " + 
                    " \"name\": \"_EM_6287_XYZ_\", " + 
                    " \"author\": \"_EM_6289_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/155/rating?EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/985")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/550?" + 
                    "verify_unused=false&" + 
                    "EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_51_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/361?EMextraParam123=_EM_50_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/tags/328")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_62_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/-219469854")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_64_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/161?EMextraParam123=_EM_63_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/-28244615?EMextraParam123=_EM_102_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/824")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "name=_EM_131_XYZ_&" + 
                    "attrs=_EM_132_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/activities/7930981806517445393/rating?EMextraParam123=_EM_152_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_155_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/1834732148/rating?EMextraParam123=_EM_154_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/8496153099816730973")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_65_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 677, " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"date_published\": \"2098-06-25T08:24:16\", " + 
                    " \"description_safety\": \"_EM_75_XYZ_\", " + 
                    " \"age_min\": -2147483407, " + 
                    " \"age_max\": -173, " + 
                    " \"participants_min\": 258, " + 
                    " \"time_min\": 989, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_78_XYZ_\", " + 
                    " \"name\": \"_EM_79_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_81_XYZ_\", " + 
                    " \"name\": \"_EM_82_XYZ_\", " + 
                    " \"capture_date\": \"2088-00-24T15:41:07\", " + 
                    " \"copy_right\": \"_EM_83_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 501 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/677?EMextraParam123=_EM_100_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 41, " + 
                    " \"name\": \"_EM_220_XYZ_\", " + 
                    " \"activities_count\": 631 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_257_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_208_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"BxmR7HJhK0DLo\", " + 
                    " \"date_created\": \"2037-11-04T02:37:38\", " + 
                    " \"description_material\": \"45FkR8mDW0s\", " + 
                    " \"description_prepare\": \"_EM_157_XYZ_\", " + 
                    " \"description_notes\": \"_EM_160_XYZ_\", " + 
                    " \"age_max\": -2147483496, " + 
                    " \"participants_min\": 956, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"gm2Z9qfj7GAZH\", " + 
                    " \"name\": \"_EM_161_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_167_XYZ_\", " + 
                    " \"name\": \"_EM_168_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 171, " + 
                    " \"uri\": \"_EM_170_XYZ_\", " + 
                    " \"copy_right\": \"_EM_171_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 969 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -9013127944085351978, " + 
                    " \"name\": \"_EM_174_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 874, " + 
                    " \"mime_type\": \"_EM_180_XYZ_\", " + 
                    " \"name\": \"_EM_182_XYZ_\", " + 
                    " \"capture_date\": \"2037-05-01T16:11:11\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 769, " + 
                    " \"mime_type\": \"_EM_185_XYZ_\", " + 
                    " \"name\": \"_EM_187_XYZ_\", " + 
                    " \"capture_date\": \"1960-10-10T06:12:40\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_192_XYZ_\", " + 
                    " \"capture_date\": \"2003-08-03T05:38:10\", " + 
                    " \"author\": \"kB9G\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 790, " + 
                    " \"name\": \"_EM_195_XYZ_\", " + 
                    " \"capture_date\": \"2072-01-07T13:27:29\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_198_XYZ_\", " + 
                    " \"name\": \"_EM_200_XYZ_\", " + 
                    " \"copy_right\": \"_EM_201_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 439, " + 
                    " \"email_address\": \"_EM_204_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 321, " + 
                    " \"ratings_sum\": -429715428 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_214_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_265_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_397_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_356_XYZ_\", " + 
                    " \"description_safety\": \"_EM_361_XYZ_\", " + 
                    " \"participants_max\": 160, " + 
                    " \"time_max\": 143, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"_EM_377_XYZ_\", " + 
                    " \"uri\": \"_EM_378_XYZ_\", " + 
                    " \"author\": \"_EM_381_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -1473388083, " + 
                    " \"mime_type\": \"d0DkFy\", " + 
                    " \"uri\": \"_EM_382_XYZ_\", " + 
                    " \"name\": \"_EM_383_XYZ_\", " + 
                    " \"capture_date\": \"1914-11-31T00:46:02\", " + 
                    " \"copy_right\": \"_EM_384_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -8545859207255268229, " + 
                    " \"uri\": \"_EM_387_XYZ_\", " + 
                    " \"copy_right\": \"_EM_389_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/65")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"knGtufrzFd_aE5Mf\", " + 
                    " \"capture_date\": \"1958-12-07T02:09:03\", " + 
                    " \"author\": \"_EM_401_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/506?EMextraParam123=_EM_402_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/723")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/553")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_417_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/443?EMextraParam123=_EM_416_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_447_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -831542187, " + 
                    " \"date_published\": \"1902-03-16T06:22:10\", " + 
                    " \"date_created\": \"2005-12-24T11:56:26\", " + 
                    " \"description_introduction\": \"_EM_419_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_420_XYZ_\", " + 
                    " \"description_main\": \"_EM_421_XYZ_\", " + 
                    " \"participants_min\": 394, " + 
                    " \"time_min\": -1071874970, " + 
                    " \"time_max\": 147, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 109, " + 
                    " \"group\": \"Z3RKFHLtD5yvu0ja\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 602, " + 
                    " \"uri\": \"_EM_432_XYZ_\", " + 
                    " \"capture_date\": \"2051-12-23T08:14:45\", " + 
                    " \"copy_right\": \"_EM_434_XYZ_\", " + 
                    " \"author\": \"_EM_435_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_437_XYZ_\", " + 
                    " \"author\": \"_EM_440_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 342, " + 
                    " \"related\": [ " + 
                    " 3, " + 
                    " 599 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/-831542187?EMextraParam123=_EM_446_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_456_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/211")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1712_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/671?verify_unused=false")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1717_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/600?EMextraParam123=_EM_1716_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/1111714805")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1729_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/518?attrs=_EM_1727_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/748")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2043_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/103")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=_EM_1872_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1880_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_1879_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/887?EMextraParam123=_EM_2038_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/868")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1766_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/104?EMextraParam123=_EM_1765_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/528")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1706_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/951?EMextraParam123=_EM_1705_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/464")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 255L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/-5528427693837095382")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1925_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1919_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1924_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_5783_XYZ_\", " + 
                    " \"authorization_level\": 495 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/529")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"GfZkY\", " + 
                    " \"authorization_level\": 223, " + 
                    " \"identities\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 96L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"0_NgSEYZwsW\"")
                .d("MIME_TYPE", "\"s5lPPVoy_CKZuM5_\"")
                .d("NAME", "NULL")
                .d("URI", "\"jC\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_6635_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 96, " + 
                    " \"uri\": \"jC\", " + 
                    " \"copy_right\": \"0_NgSEYZwsW\", " + 
                    " \"author\": \"y7XPE5G_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_6634_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2120_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 294, " + 
                    " \"activities_count\": 120 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/294?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2051_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 216, " + 
                    " \"group\": \"_EM_2044_XYZ_\", " + 
                    " \"name\": \"_EM_2045_XYZ_\", " + 
                    " \"activities_count\": 613 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/216")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_prepare\": \"_EM_37624_XYZ_\", " + 
                    " \"description_main\": \"_EM_37625_XYZ_\", " + 
                    " \"description_notes\": \"_EM_37627_XYZ_\", " + 
                    " \"age_min\": -2147483440, " + 
                    " \"participants_min\": 830, " + 
                    " \"time_min\": 294, " + 
                    " \"featured\": false, " + 
                    " \"activity\": { " + 
                    " \"id\": 396, " + 
                    " \"favourites_count\": 528, " + 
                    " \"ratings_count\": -1130452292 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/932")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 17381L)
                .d("AUTHORIZATION_LEVEL", "504")
                .d("NAME", "\"_EM_108887_XYZ_\"")
            .and().insertInto("ACTIVITY", 17380L)
            .and().insertInto("ACTIVITY", 17379L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17378L)
                .d("AGE_MAX", "-1073741774")
                .d("AGE_MIN", "-2147483105")
                .d("DATE_CREATED", "\"1903-05-20 16:24:29\"")
                .d("DATE_PUBLISHED", "\"1911-01-08 20:55:05\"")
                .d("DATE_UPDATED", "\"1952-06-16 13:27:00\"")
                .d("DESCRIPTION_INTRODUCTION", "\"_EM_106985_XYZ_\"")
                .d("DESCRIPTION_MAIN", "\"UxHwheAU\"")
                .d("DESCRIPTION_MATERIAL", "\"Sec\"")
                .d("DESCRIPTION_NOTES", "\"_EM_124501_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"_EM_106986_XYZ_\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_124502_XYZ_\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"5XNeiOzg\"")
                .d("PARTICIPANTS_MAX", "-16384")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"\"")
                .d("TIME_MAX", "0")
                .d("TIME_MIN", "435")
                .r("ACTIVITY_ID", 17380L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17380L)
            .and().insertInto("USERS", 17385L)
                .d("AUTHORIZATION_LEVEL", "291")
                .d("NAME", "\"BuMSuIV\"")
            .and().insertInto("ACTIVITY", 17384L)
            .and().insertInto("ACTIVITY", 17383L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17382L)
                .d("AGE_MAX", "-412")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"2044-07-16 00:06:55\"")
                .d("DATE_PUBLISHED", "\"2073-12-15 00:25:21\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"_EM_108889_XYZ_\"")
                .d("DESCRIPTION_MAIN", "\"_EM_108890_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "\"_EM_108891_XYZ_\"")
                .d("DESCRIPTION_NOTES", "\"_EM_106967_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"rLhTcqjw0Eb\"")
                .d("DESCRIPTION_SAFETY", "\"0WTOoBiNpTEGZbN\"")
                .d("FEATURED", "false")
                .d("NAME", "\"6n2c9Lo\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "-1497037370")
                .d("SOURCE", "\"v9hclGj7\"")
                .d("TIME_MAX", "578")
                .d("TIME_MIN", "-8192")
                .r("ACTIVITY_ID", 17379L)
                .r("AUTHOR_ID", 17381L)
                .r("PUBLISHING_ACTIVITY_ID", 17384L)
            .and().insertInto("USERS", 17389L)
                .d("AUTHORIZATION_LEVEL", "807")
                .d("NAME", "\"_EM_106968_XYZ_\"")
            .and().insertInto("ACTIVITY", 17388L)
            .and().insertInto("ACTIVITY", 17387L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17386L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-723")
                .d("DATE_CREATED", "\"1900-10-10 18:07:16\"")
                .d("DATE_PUBLISHED", "\"1939-06-09 20:59:43\"")
                .d("DATE_UPDATED", "\"2075-04-06 21:11:35\"")
                .d("DESCRIPTION_INTRODUCTION", "\"_EM_108892_XYZ_\"")
                .d("DESCRIPTION_MAIN", "\"_EM_108893_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "\"UTIDYBy3a3\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"_EM_106988_XYZ_\"")
                .d("DESCRIPTION_SAFETY", "\"jSqI1qx8njj\"")
                .d("FEATURED", "false")
                .d("NAME", "\"phOEDZa40kB\"")
                .d("PARTICIPANTS_MAX", "4394")
                .d("PARTICIPANTS_MIN", "628")
                .d("SOURCE", "\"P0kl2bfG\"")
                .d("TIME_MAX", "66049")
                .d("TIME_MIN", "NULL")
                .r("ACTIVITY_ID", 17380L)
                .d("AUTHOR_ID", "2")
                .r("PUBLISHING_ACTIVITY_ID", 17383L)
            .and().insertInto("USERS", 17393L)
                .d("AUTHORIZATION_LEVEL", "2194")
                .d("NAME", "\"_EM_106989_XYZ_\"")
            .and().insertInto("ACTIVITY", 17392L)
            .and().insertInto("ACTIVITY", 17391L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17390L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-1")
                .d("DATE_CREATED", "\"2000-11-05 11:13:47\"")
                .d("DATE_PUBLISHED", "\"1914-07-05 21:08:57\"")
                .d("DATE_UPDATED", "\"2063-10-15 23:10:24\"")
                .d("DESCRIPTION_INTRODUCTION", "\"9G6ow784W7bL4U2n\"")
                .d("DESCRIPTION_MAIN", "\"5751651\"")
                .d("DESCRIPTION_MATERIAL", "\"Q3cxfjfFeILm\"")
                .d("DESCRIPTION_NOTES", "\"_EM_124503_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "\"B2Fqtyhvxwd7s\"")
                .d("FEATURED", "true")
                .d("NAME", "\"_EM_124504_XYZ_\"")
                .d("PARTICIPANTS_MAX", "-1740391308")
                .d("PARTICIPANTS_MIN", "179")
                .d("SOURCE", "\"_EM_124505_XYZ_\"")
                .d("TIME_MAX", "296")
                .d("TIME_MIN", "303")
                .r("ACTIVITY_ID", 17380L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17388L)
            .and().insertInto("ACTIVITY", 17395L)
            .and().insertInto("ACTIVITY_DERIVED", 17394L)
                .r("ACTIVITY_ID", 17391L)
                .d("FAVOURITES_COUNT", "256")
                .d("RATINGS_AVG", "2.0582224872426624")
                .d("RATINGS_COUNT", "517")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("ACTIVITY", 17397L)
            .and().insertInto("ACTIVITY_DERIVED", 17396L)
                .r("ACTIVITY_ID", 17397L)
                .d("FAVOURITES_COUNT", "-1242851130081303378")
                .d("RATINGS_AVG", "0.5295442720202379")
                .d("RATINGS_COUNT", "1244")
                .d("RATINGS_SUM", "524564")
            .and().insertInto("ACTIVITY", 17399L)
            .and().insertInto("ACTIVITY_DERIVED", 17398L)
                .r("ACTIVITY_ID", 17380L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "0.028")
                .d("RATINGS_COUNT", "0")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("ACTIVITY", 17401L)
            .and().insertInto("ACTIVITY_DERIVED", 17400L)
                .r("ACTIVITY_ID", 17392L)
                .d("FAVOURITES_COUNT", "733")
                .d("RATINGS_AVG", "0.5665841280306629")
                .d("RATINGS_COUNT", "0")
                .d("RATINGS_SUM", "1")
            .and().insertInto("MEDIA_FILE", 22874L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2000-12-31 07:29:29\"")
                .d("COPY_RIGHT", "\"_EM_106969_XYZ_\"")
                .d("MIME_TYPE", "\"Utx1ApviKx\"")
                .d("NAME", "\"_EM_106991_XYZ_\"")
                .d("URI", "\"_EM_106970_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 22875L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1903-04-09 14:58:16\"")
                .d("COPY_RIGHT", "\"4NXTJQRQha5rLGN7\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_EM_124506_XYZ_\"")
                .d("URI", "\"_EM_124507_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 22881L)
                .d("URI", "\"_EM_106971_XYZ_\"")
            .and().insertInto("USERS", 22880L)
                .d("AUTHORIZATION_LEVEL", "-262093")
                .d("NAME", "\"OBZmKY08IU\"")
            .and().insertInto("ACTIVITY", 22879L)
            .and().insertInto("ACTIVITY", 22878L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22877L)
                .r("ACTIVITY_ID", 17395L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 22876L)
                .r("ACTIVITY_PROPERTIES_ID", 17378L)
                .r("MEDIA_FILE_ID", 22874L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 22887L)
                .d("URI", "\"dTprv7MYXTEN\"")
            .and().insertInto("USERS", 22886L)
                .d("AUTHORIZATION_LEVEL", "936")
                .d("NAME", "\"rCahqTgk\"")
            .and().insertInto("ACTIVITY", 22885L)
            .and().insertInto("ACTIVITY", 22884L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22883L)
                .r("ACTIVITY_ID", 17395L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 22882L)
                .r("ACTIVITY_PROPERTIES_ID", 17386L)
                .r("MEDIA_FILE_ID", 22887L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 22893L)
                .d("URI", "\"_EM_106972_XYZ_\"")
            .and().insertInto("USERS", 22892L)
                .d("AUTHORIZATION_LEVEL", "725")
                .d("NAME", "\"jbDevjDxYn\"")
            .and().insertInto("ACTIVITY", 22891L)
            .and().insertInto("ACTIVITY", 22890L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22889L)
                .r("ACTIVITY_ID", 17401L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 22888L)
                .r("ACTIVITY_PROPERTIES_ID", 17390L)
                .r("MEDIA_FILE_ID", 22881L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 22899L)
                .d("URI", "\"urWN4JX\"")
            .and().insertInto("USERS", 22898L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_106992_XYZ_\"")
            .and().insertInto("ACTIVITY", 22897L)
            .and().insertInto("ACTIVITY", 22896L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22895L)
                .r("ACTIVITY_ID", 17395L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 22894L)
                .r("ACTIVITY_PROPERTIES_ID", 22889L)
                .r("MEDIA_FILE_ID", 22887L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 22905L)
                .d("URI", "\"_EM_106973_XYZ_\"")
            .and().insertInto("USERS", 22904L)
                .d("AUTHORIZATION_LEVEL", "359")
                .d("NAME", "\"3ENrgTUCC\"")
            .and().insertInto("ACTIVITY", 22903L)
            .and().insertInto("ACTIVITY", 22902L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22901L)
                .r("ACTIVITY_ID", 22878L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 22900L)
                .r("ACTIVITY_PROPERTIES_ID", 17390L)
                .r("MEDIA_FILE_ID", 22874L)
                .d("FEATURED", "false")
            .and().insertInto("ACTIVITY", 16294L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/1?" + 
                    "verify_unused=true&" + 
                    "my_favourites=oWthc&" + 
                    "time_1=p_&" + 
                    "age_2=ACbxyezUXlB_km&" + 
                    "text=NS5p4FSI9Wbc&" + 
                    "categories=wrWme4&" + 
                    "time_2=o7405W&" + 
                    "attrs=FhPyka7P")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(409.0))
                .body("'message'", containsString("Will not delete because media file is in use"));
        
    }


}
