import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T07:34:47.786+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 674
 * <br>
 * Used time: 2h 0m 18s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","USERS","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USER_IDENTITY","ACTIVITY","ACTIVITY_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_8308_XYZ_&" + 
                    "featured=true&" + 
                    "age_1=_EM_8311_XYZ_&" + 
                    "age_2=_EM_8312_XYZ_&" + 
                    "time_1=_EM_8314_XYZ_&" + 
                    "id=_EM_8316_XYZ_&" + 
                    "my_favourites=false&" + 
                    "ratings_count_min=769&" + 
                    "random=716&" + 
                    "favourites=200")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/v1/ActivityResourceV1_75_all
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("API currently does not support filtering on your own favourites."));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/601/rating?attrs=_EM_1654_XYZ_")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityRating$Key_90_<init>
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_24849_XYZ_\", " + 
                    " \"uri\": \"data:text/plain;base64,Sm1xNnlYS0F3RDNwN2Ry\", " + 
                    " \"name\": \"_EM_24851_XYZ_\", " + 
                    " \"author\": \"_EM_24852_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_135_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("HTTP 500 Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_14042_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 2439579728149027467, " + 
                    " \"name\": \"X\", " + 
                    " \"description_material\": \"_EM_14026_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_14027_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_14028_XYZ_\", " + 
                    " \"description_main\": \"_EM_14029_XYZ_\", " + 
                    " \"description_safety\": \"_EM_14030_XYZ_\", " + 
                    " \"description_notes\": \"ufOTElhDNCr8Mj\", " + 
                    " \"age_min\": -1073878140, " + 
                    " \"age_max\": -124, " + 
                    " \"participants_min\": -8383582, " + 
                    " \"participants_max\": 402655091, " + 
                    " \"time_min\": 771, " + 
                    " \"time_max\": 143, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 3146157, " + 
                    " \"group\": \"_EM_48395_XYZ_\", " + 
                    " \"name\": \"_EM_14034_XYZ_\", " + 
                    " \"activities_count\": 869 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -974150718, " + 
                    " \"uri\": \"svR7elTVSFFN6\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 355, " + 
                    " \"email_address\": \"r_jqaspsnUMdRZG\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 950, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.9651248864562795, " + 
                    " \"favourites_count\": 914, " + 
                    " \"ratings_sum\": 544, " + 
                    " \"ratings_count\": 243, " + 
                    " \"related\": [ " + 
                    " -709671721, " + 
                    " 1332, " + 
                    " 407 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=_EM_14041_XYZ_")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityPropertiesMediaFile_72_hashCode
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 17381L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Mrnb15ti2\"")
            .and().insertInto("ACTIVITY", 17380L)
            .and().insertInto("ACTIVITY", 17379L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17378L)
                .d("AGE_MAX", "-555")
                .d("AGE_MIN", "-2147483105")
                .d("DATE_CREATED", "\"1903-09-20 16:24:29\"")
                .d("DATE_PUBLISHED", "\"2028-09-16 21:39:13\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"3cAX67j28eT\"")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"gX1PNl\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "true")
                .d("NAME", "\"5XNeiOzg\"")
                .d("PARTICIPANTS_MAX", "-1567")
                .d("PARTICIPANTS_MIN", "552")
                .d("SOURCE", "NULL")
                .d("TIME_MAX", "642")
                .d("TIME_MIN", "434")
                .r("ACTIVITY_ID", 17379L)
                .d("AUTHOR_ID", "3")
                .r("PUBLISHING_ACTIVITY_ID", 17379L)
            .and().insertInto("USERS", 17385L)
                .d("AUTHORIZATION_LEVEL", "195")
                .d("NAME", "\"BuMQuI\"")
            .and().insertInto("ACTIVITY", 17384L)
            .and().insertInto("ACTIVITY", 17383L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17382L)
                .d("AGE_MAX", "-668")
                .d("AGE_MIN", "-2147483203")
                .d("DATE_CREATED", "\"2012-08-22 00:06:55\"")
                .d("DATE_PUBLISHED", "\"2073-12-15 00:25:21\"")
                .d("DATE_UPDATED", "\"2084-09-10 23:06:34\"")
                .d("DESCRIPTION_INTRODUCTION", "\"5ZVt0jSpg\"")
                .d("DESCRIPTION_MAIN", "\"YU8UVvPgCUeAeN2U\"")
                .d("DESCRIPTION_MATERIAL", "\"vq0o\"")
                .d("DESCRIPTION_NOTES", "\"Bkgljj9edcrstja\"")
                .d("DESCRIPTION_PREPARE", "\"rLhTcqjw0Eba\"")
                .d("DESCRIPTION_SAFETY", "\"7X5zXEFzMQp5Rs4m\"")
                .d("FEATURED", "false")
                .d("NAME", "\"7n2c9Lo\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "-1497037369")
                .d("SOURCE", "\"v9hclGj7\"")
                .d("TIME_MAX", "0")
                .d("TIME_MIN", "322")
                .r("ACTIVITY_ID", 17384L)
                .d("AUTHOR_ID", "3")
                .r("PUBLISHING_ACTIVITY_ID", 17383L)
            .and().insertInto("USERS", 17389L)
                .d("AUTHORIZATION_LEVEL", "66311")
                .d("NAME", "\"CsFrkH8LTfaN\"")
            .and().insertInto("ACTIVITY", 17388L)
            .and().insertInto("ACTIVITY", 17387L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17386L)
                .d("AGE_MAX", "-484052162")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "\"1902-10-08 17:07:16\"")
                .d("DATE_PUBLISHED", "\"1941-05-17 20:59:43\"")
                .d("DATE_UPDATED", "\"2043-01-08 17:11:19\"")
                .d("DESCRIPTION_INTRODUCTION", "\"anAp9s0EmLN0Iiv\"")
                .d("DESCRIPTION_MAIN", "\"nI080g3m8x_yf\"")
                .d("DESCRIPTION_MATERIAL", "\"8V1Q4S\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"phOEDZa40k\"")
                .d("PARTICIPANTS_MAX", "131626")
                .d("PARTICIPANTS_MIN", "564")
                .d("SOURCE", "\"P0kl2bfG\"")
                .d("TIME_MAX", "529")
                .d("TIME_MIN", "138")
                .r("ACTIVITY_ID", 17383L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17380L)
            .and().insertInto("USERS", 17393L)
                .d("AUTHORIZATION_LEVEL", "178")
                .d("NAME", "\"_EM_125772_XYZ_\"")
            .and().insertInto("ACTIVITY", 17392L)
            .and().insertInto("ACTIVITY", 17391L)
            .and().insertInto("ACTIVITY_PROPERTIES", 17390L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "\"2075-11-05 23:13:55\"")
                .d("DATE_PUBLISHED", "\"1914-05-07 13:40:57\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"9G6ow784W7bL4U2n\"")
                .d("DESCRIPTION_MAIN", "\"_EM_125773_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "NULL")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"4gCUEkbK0s\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"vdE0Z4gyqD\"")
                .d("PARTICIPANTS_MAX", "-1740391324")
                .d("PARTICIPANTS_MIN", "183")
                .d("SOURCE", "\"uLZI\"")
                .d("TIME_MAX", "-65240")
                .d("TIME_MIN", "NULL")
                .r("ACTIVITY_ID", 17379L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 17391L)
            .and().insertInto("ACTIVITY", 17395L)
            .and().insertInto("ACTIVITY_DERIVED", 17394L)
                .r("ACTIVITY_ID", 17391L)
                .d("FAVOURITES_COUNT", "196")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "509")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("ACTIVITY", 17397L)
            .and().insertInto("ACTIVITY_DERIVED", 17396L)
                .r("ACTIVITY_ID", 17383L)
                .d("FAVOURITES_COUNT", "-1242851130081307474")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "212")
                .d("RATINGS_SUM", "276")
            .and().insertInto("ACTIVITY", 17399L)
            .and().insertInto("ACTIVITY_DERIVED", 17398L)
                .r("ACTIVITY_ID", 17399L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "0.028364544413075232")
                .d("RATINGS_COUNT", "-883831812")
                .d("RATINGS_SUM", "631684041")
            .and().insertInto("ACTIVITY", 17401L)
            .and().insertInto("ACTIVITY_DERIVED", 17400L)
                .r("ACTIVITY_ID", 17395L)
                .d("FAVOURITES_COUNT", "733")
                .d("RATINGS_AVG", "0.6")
                .d("RATINGS_COUNT", "66223")
                .d("RATINGS_SUM", "0")
            .and().insertInto("ACTIVITY", 16294L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "ages=_EM_62321_XYZ_&" + 
                    "ratings_count_min=766&" + 
                    "ratings_average_min=1.291574721015416&" + 
                    "random=228&" + 
                    "favourites=56")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system/roles")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission_levels'.'category_edit'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_create'", numberMatches(10.0))
                .body("'permission_levels'.'reference_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'system_message_read'", numberMatches(-100.0))
                .body("'permission_levels'.'auth_role_list'", numberMatches(20.0))
                .body("'permission_levels'.'reference_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_create'", numberMatches(20.0))
                .body("'permission_levels'.'activity_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'comment_create'", numberMatches(0.0))
                .body("'permission_levels'.'category_create'", numberMatches(10.0))
                .body("'permission_levels'.'activity_edit'", numberMatches(10.0))
                .body("'permission_levels'.'reference_create'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_edit'", numberMatches(20.0))
                .body("'permission_levels'.'auth_profile_edit'", numberMatches(0.0))
                .body("'permission_levels'.'comment_edit'", numberMatches(10.0))
                .body("'permission_levels'.'system_message_manage'", numberMatches(20.0))
                .body("'permission_levels'.'mediaitem_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assignown'", numberMatches(10.0))
                .body("'permission_levels'.'rating_set_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assign'", numberMatches(20.0))
                .body("'permission_levels'.'comment_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'activity_create'", numberMatches(0.0))
                .body("'role_levels'.'administrator'", numberMatches(20.0))
                .body("'role_levels'.'moderator'", numberMatches(10.0))
                .body("'role_levels'.'limited_user'", numberMatches(-1.0))
                .body("'role_levels'.'user'", numberMatches(0.0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"3zYK_OX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("3zYK_OX"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_2.extract().body().path("id").toString();
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile?ratings_count_min=pLkwP&random=_EM_125776_XYZ_&ratings_average_min=k&participants=fBOM2CTuHrB0D5&group=T&categories=G%3Dr&uri=EjQhC&time_1=itif6vMxmXGjdc&key=wYS&favourites=2104FSZ&ages=QtES1zFbQfP"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("3zYK_OX"))
                .body("'email_address'", nullValue())
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


}
