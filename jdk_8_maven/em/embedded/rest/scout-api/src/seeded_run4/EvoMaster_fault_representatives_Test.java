import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-01T12:08:11.952+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 729
 * <br>
 * Used time: 2h 0m 51s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_16469_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/674")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/UserResource_100_update
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 17406L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"_EM_72323_XYZ_\"")
                .d("MIME_TYPE", "\"SETTINGS\"")
                .d("NAME", "\"_EM_72325_XYZ_\"")
                .d("URI", "\"ET\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 524424, " + 
                    " \"mime_type\": \"_EM_72318_XYZ_\", " + 
                    " \"uri\": \"data:,ZmVzMFRYMXFWTmlmQ3Rz\", " + 
                    " \"author\": \"HnEeDZXrTRi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_135_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("HTTP 500 Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 224L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1975-01-09 19:09:56\"")
                .d("COPY_RIGHT", "\"_EM_56705_XYZ_\"")
                .d("MIME_TYPE", "\"m82QhuhygpivOsXH\"")
                .d("NAME", "\"EBqGTacNLA9\"")
                .d("URI", "\"j41\"")
            .and().insertInto("MEDIA_FILE", 225L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2000-06-29 11:10:45\"")
                .d("COPY_RIGHT", "\"_EM_56706_XYZ_\"")
                .d("MIME_TYPE", "\"4Qs\"")
                .d("NAME", "\"_EM_23165_XYZ_\"")
                .d("URI", "\"_WTvUPnNY1x4f\"")
            .and().insertInto("MEDIA_FILE", 226L)
                .d("AUTHOR", "\"5612156\"")
                .d("CAPTURE_DATE", "\"1922-06-30 12:29:29\"")
                .d("COPY_RIGHT", "\"p9fz\"")
                .d("MIME_TYPE", "\"5612089\"")
                .d("NAME", "NULL")
                .d("URI", "\"RATINGS_3_1_4_\"")
            .and().insertInto("MEDIA_FILE", 227L)
                .d("AUTHOR", "\"5668231\"")
                .d("CAPTURE_DATE", "\"1978-03-09 05:24:13\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_23167_XYZ_\"")
                .d("NAME", "\"_EM_23168_XYZ_\"")
                .d("URI", "\"2055-06-18 18:00:35\"")
            .and().insertInto("MEDIA_FILE", 2038L)
                .d("URI", "\"_EM_56707_XYZ_\"")
            .and().insertInto("USERS", 2037L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_23170_XYZ_\"")
            .and().insertInto("ACTIVITY", 2036L)
            .and().insertInto("ACTIVITY", 2035L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2034L)
                .r("ACTIVITY_ID", 2036L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2033L)
                .r("ACTIVITY_PROPERTIES_ID", 2034L)
                .r("MEDIA_FILE_ID", 227L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2044L)
                .d("URI", "\"U\"")
            .and().insertInto("USERS", 2043L)
                .d("AUTHORIZATION_LEVEL", "134217758")
                .d("NAME", "\"_EM_56708_XYZ_\"")
            .and().insertInto("ACTIVITY", 2042L)
            .and().insertInto("ACTIVITY", 2041L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2040L)
                .r("ACTIVITY_ID", 2035L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2039L)
                .r("ACTIVITY_PROPERTIES_ID", 2034L)
                .r("MEDIA_FILE_ID", 226L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 2050L)
                .d("URI", "\"_EM_56709_XYZ_\"")
            .and().insertInto("USERS", 2049L)
                .d("AUTHORIZATION_LEVEL", "451")
                .d("NAME", "\"_EM_23172_XYZ_\"")
            .and().insertInto("ACTIVITY", 2048L)
            .and().insertInto("ACTIVITY", 2047L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2046L)
                .r("ACTIVITY_ID", 2035L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2045L)
                .r("ACTIVITY_PROPERTIES_ID", 2046L)
                .r("MEDIA_FILE_ID", 225L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 2056L)
                .d("URI", "\"L92dMYySg9M\"")
            .and().insertInto("USERS", 2055L)
                .d("AUTHORIZATION_LEVEL", "1857")
                .d("NAME", "\"_EM_56710_XYZ_\"")
            .and().insertInto("ACTIVITY", 2054L)
            .and().insertInto("ACTIVITY", 2053L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2052L)
                .r("ACTIVITY_ID", 2048L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2051L)
                .r("ACTIVITY_PROPERTIES_ID", 2046L)
                .r("MEDIA_FILE_ID", 2044L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 13915L)
                .d("AUTHORIZATION_LEVEL", "437")
                .d("NAME", "\"ezwz\"")
            .and().insertInto("USER_IDENTITY", 13914L)
                .d("DATE_CREATED", "\"2071-07-08 03:02:47\"")
                .d("TYPE", "\"_EM_56711_XYZ_\"")
                .d("VALUE", "\"AIrA\"")
                .r("USER_ID", 2037L)
            .and().insertInto("USERS", 13917L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"QORC25\"")
            .and().insertInto("USER_IDENTITY", 13916L)
                .d("DATE_CREATED", "NULL")
                .d("TYPE", "\"GOOGLE\"")
                .d("VALUE", "\"Uts6r\"")
                .r("USER_ID", 2049L)
            .and().insertInto("USERS", 13919L)
                .d("AUTHORIZATION_LEVEL", "25")
                .d("NAME", "\"E\"")
            .and().insertInto("USER_IDENTITY", 13918L)
                .d("DATE_CREATED", "NULL")
                .d("TYPE", "\"_EM_56712_XYZ_\"")
                .d("VALUE", "\"0kgDkALcQYV\"")
                .r("USER_ID", 2043L)
            .and().insertInto("USERS", 13921L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"O56CpaJwRNRub\"")
            .and().insertInto("USER_IDENTITY", 13920L)
                .d("DATE_CREATED", "\"1921-04-25 17:43:34\"")
                .d("TYPE", "\"GOOGLE\"")
                .d("VALUE", "\"_EM_56713_XYZ_\"")
                .d("USER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 910, " + 
                    " \"uri\": \"KdvU7T7yO\", " + 
                    " \"copy_right\": \"S3KcYcypp\", " + 
                    " \"author\": \"G\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_109_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files?uri=KdvU7T7yO%C2%81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files/0/file?" + 
                    "size=715&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_260_downloadFile
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"fP4sdjjlRhAo\", " + 
                    " \"identities\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fP4sdjjlRhAo"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_3.extract().body().path("id").toString();
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fP4sdjjlRhAo"))
                .body("'email_address'", nullValue())
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_4.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_4972_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/136?" + 
                    "verify_unused=true&" + 
                    "EMextraParam123=_EM_4971_XYZ_")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/MediaFileDao_64_delete
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -4611686018444224512, " + 
                    " \"description_material\": \"_EM_93595_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_93597_XYZ_\", " + 
                    " \"description_prepare\": \"lnRIMIOZa3hT\", " + 
                    " \"description_main\": \"_EM_89498_XYZ_\", " + 
                    " \"description_notes\": \"_G1HkvQJYXsA83NY\", " + 
                    " \"age_min\": -2147442963, " + 
                    " \"age_max\": -1603236685, " + 
                    " \"participants_min\": -2099980763, " + 
                    " \"participants_max\": 4838, " + 
                    " \"time_max\": -176, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"EJ1NwE\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"xosuJAog2q\", " + 
                    " \"name\": \"aWBwyvk93e\", " + 
                    " \"author\": \"xzIAsF6vyf1\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 631, " + 
                    " \"name\": \"b\", " + 
                    " \"email_address\": \"BMeHLevPl_ymNLP\", " + 
                    " \"authorization_level\": 535 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": -15914, " + 
                    " \"ratings_count\": 743, " + 
                    " \"ratings_average\": 0.589002912186221 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityPropertiesMediaFile_72_hashCode
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 9808L)
                .d("URI", "\"rTpnm2Y\"")
            .and().insertInto("TAG", 9807L)
                .d("GRP", "\"_EM_44702_XYZ_\"")
                .d("NAME", "\"_EM_44703_XYZ_\"")
                .r("MEDIA_FILE_ID", 9808L)
            .and().insertInto("MEDIA_FILE", 9810L)
                .d("URI", "\"Cba\"")
            .and().insertInto("TAG", 9809L)
                .d("GRP", "\"JBsqT\"")
                .d("NAME", "\"_EM_44704_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 9812L)
                .d("URI", "\"RYAlCQkdIZg\"")
            .and().insertInto("TAG", 9811L)
                .d("GRP", "\"_EM_44705_XYZ_\"")
                .d("NAME", "\"_EM_44706_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 9814L)
                .d("URI", "\"bOP\"")
            .and().insertInto("TAG", 9813L)
                .d("GRP", "\"_EM_44707_XYZ_\"")
                .d("NAME", "\"_EM_44708_XYZ_\"")
                .r("MEDIA_FILE_ID", 9810L)
            .and().insertInto("MEDIA_FILE", 9816L)
                .d("URI", "\"uXOTE6nkVwT4Hwjr\"")
            .and().insertInto("TAG", 9815L)
                .d("GRP", "\"tj\"")
                .d("NAME", "\"H0xgyCl\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -134217530, " + 
                    " \"name\": \"4iIK\", " + 
                    " \"description_material\": \"_EM_21808_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_21810_XYZ_\", " + 
                    " \"description_main\": \"e\", " + 
                    " \"description_notes\": \"_EM_21813_XYZ_\", " + 
                    " \"age_min\": -163, " + 
                    " \"age_max\": -270, " + 
                    " \"participants_min\": 16777985, " + 
                    " \"participants_max\": 145, " + 
                    " \"time_min\": 170, " + 
                    " \"time_max\": 131475, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 405, " + 
                    " \"group\": \"FKAiajseHzHL\", " + 
                    " \"activities_count\": -7494298857555513877 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_21821_XYZ_\", " + 
                    " \"name\": \"_EM_21822_XYZ_\", " + 
                    " \"activities_count\": 435 " + 
                    " }, " + 
                    " {} " + 
                    " ], " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_21835_XYZ_\", " + 
                    " \"authorization_level\": 413, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 514, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 204, " + 
                    " \"ratings_average\": 0.9325886669046526, " + 
                    " \"favourites_count\": 325 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/TagDao_59_find
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
