import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-01T12:08:11.929+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 79 tests
 * <br>
 * Covered targets: 598
 * <br>
 * Used time: 2h 0m 51s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","USERS","USER_IDENTITY","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_7129_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_7126_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "EMextraParam123=_EM_7128_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 10499L)
                .d("AUTHOR", "\"WiOg\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"gC\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_EM_47242_XYZ_\"")
                .d("URI", "\"02\"")
            .and().insertInto("MEDIA_FILE", 10500L)
                .d("AUTHOR", "\"rMWkY\"")
                .d("CAPTURE_DATE", "\"2055-01-26 23:34:29\"")
                .d("COPY_RIGHT", "\"_EM_47243_XYZ_\"")
                .d("MIME_TYPE", "\"_EM_47244_XYZ_\"")
                .d("NAME", "\"5IBMzGuI49\"")
                .d("URI", "\"_EM_47245_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 10501L)
                .d("AUTHOR", "\"mzCVEx\"")
                .d("CAPTURE_DATE", "\"2022-07-09 02:28:56\"")
                .d("COPY_RIGHT", "\"vsCipu4FZ8nSKM7\"")
                .d("MIME_TYPE", "\"\"")
                .d("NAME", "NULL")
                .d("URI", "\"nez09\"")
            .and().insertInto("MEDIA_FILE", 10502L)
                .d("AUTHOR", "\"1m\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"XhVWmAJ\"")
                .d("MIME_TYPE", "\"_EM_47246_XYZ_\"")
                .d("NAME", "\"sPVJDpEvtlDIdex\"")
                .d("URI", "\"X4YME3V\"")
            .and().insertInto("MEDIA_FILE", 10503L)
                .d("AUTHOR", "\"jg\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_EM_47247_XYZ_\"")
                .d("URI", "\"AH\"")
            .and().insertInto("MEDIA_FILE", 10509L)
                .d("URI", "\"G828\"")
            .and().insertInto("USERS", 10508L)
                .d("AUTHORIZATION_LEVEL", "731")
                .d("NAME", "\"n36en9B8A1SnP\"")
            .and().insertInto("ACTIVITY", 10507L)
            .and().insertInto("ACTIVITY", 10506L)
            .and().insertInto("ACTIVITY_PROPERTIES", 10505L)
                .r("ACTIVITY_ID", 10506L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 10504L)
                .r("ACTIVITY_PROPERTIES_ID", 10505L)
                .r("MEDIA_FILE_ID", 10500L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 10515L)
                .d("URI", "\"f0s5dkhIW3KqPsqf\"")
            .and().insertInto("USERS", 10514L)
                .d("AUTHORIZATION_LEVEL", "757")
                .d("NAME", "\"_EM_47248_XYZ_\"")
            .and().insertInto("ACTIVITY", 10513L)
            .and().insertInto("ACTIVITY", 10512L)
            .and().insertInto("ACTIVITY_PROPERTIES", 10511L)
                .r("ACTIVITY_ID", 10507L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 10510L)
                .r("ACTIVITY_PROPERTIES_ID", 10511L)
                .r("MEDIA_FILE_ID", 10515L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 10749L)
                .d("AUTHORIZATION_LEVEL", "171")
                .d("NAME", "\"00XC4GaC\"")
            .and().insertInto("ACTIVITY", 10748L)
            .and().insertInto("ACTIVITY", 10747L)
            .and().insertInto("ACTIVITY_RELATION", 10746L)
                .r("ACTIVITY_1_ID", 10747L)
                .r("ACTIVITY_2_ID", 10506L)
                .r("OWNER_ID", 10749L)
            .and().insertInto("USERS", 10753L)
                .d("AUTHORIZATION_LEVEL", "416")
                .d("NAME", "\"WW4IlUgbsQdvC\"")
            .and().insertInto("ACTIVITY", 10752L)
            .and().insertInto("ACTIVITY", 10751L)
            .and().insertInto("ACTIVITY_RELATION", 10750L)
                .r("ACTIVITY_1_ID", 10506L)
                .r("ACTIVITY_2_ID", 10751L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 10757L)
                .d("AUTHORIZATION_LEVEL", "524591")
                .d("NAME", "\"_EM_47249_XYZ_\"")
            .and().insertInto("ACTIVITY", 10756L)
            .and().insertInto("ACTIVITY", 10755L)
            .and().insertInto("ACTIVITY_RELATION", 10754L)
                .r("ACTIVITY_1_ID", 10507L)
                .r("ACTIVITY_2_ID", 10756L)
                .r("OWNER_ID", 10757L)
            .and().insertInto("USERS", 10761L)
                .d("AUTHORIZATION_LEVEL", "251")
                .d("NAME", "\"q1\"")
            .and().insertInto("ACTIVITY", 10760L)
            .and().insertInto("ACTIVITY", 10759L)
            .and().insertInto("ACTIVITY_RELATION", 10758L)
                .r("ACTIVITY_1_ID", 10752L)
                .r("ACTIVITY_2_ID", 10752L)
                .r("OWNER_ID", 10749L)
            .and().insertInto("USERS", 10765L)
                .d("AUTHORIZATION_LEVEL", "287")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 10764L)
            .and().insertInto("ACTIVITY", 10763L)
            .and().insertInto("ACTIVITY_RELATION", 10762L)
                .r("ACTIVITY_1_ID", 10512L)
                .r("ACTIVITY_2_ID", 10752L)
                .d("OWNER_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_6870_XYZ_")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=h_czXwoRGo&" + 
                    "text=FPyll3gis8h&" + 
                    "participants=30&" + 
                    "id=5xMYZ11ZEMGHl6M8&" + 
                    "ratings_count_min=964&" + 
                    "ratings_average_min=-1024.0&" + 
                    "random=525&" + 
                    "uri=05AT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_10748_XYZ_&" + 
                    "text=_EM_10750_XYZ_&" + 
                    "featured=false&" + 
                    "age_2=0&" + 
                    "time_1=w6nFAZc5W14&" + 
                    "id=_EM_10757_XYZ_&" + 
                    "ratings_count_min=776&" + 
                    "random=14937&" + 
                    "favourites=-33554350")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=gI&" + 
                    "name=MA9x93f7eoYC_E2m&" + 
                    "id=UDCOP6HlUKIecAf&" + 
                    "ratings_count_min=212&" + 
                    "ratings_average_min=0.5911411620227439&" + 
                    "random=35&" + 
                    "favourites=229&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2056_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_2053_XYZ_\", " + 
                    " \"valid_to\": \"1945-05-12T18:59:10\", " + 
                    " \"valid_from\": \"1940-10-02T10:23:60\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/392?EMextraParam123=_EM_2055_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1695_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 995, " + 
                    " \"date_created\": \"1967-12-01T22:34:32\", " + 
                    " \"date_updated\": \"2034-06-24T10:56:12\", " + 
                    " \"description_material\": \"_EM_1655_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1657_XYZ_\", " + 
                    " \"description_main\": \"_EM_1658_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1659_XYZ_\", " + 
                    " \"age_max\": -2147482861, " + 
                    " \"participants_max\": 465, " + 
                    " \"time_min\": 261, " + 
                    " \"featured\": false, " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_1691_XYZ_\", " + 
                    " \"authorization_level\": 667 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/995")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_10320_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 6081920432511902899, " + 
                    " \"date_published\": \"1977-06-30T10:03:30\", " + 
                    " \"date_created\": \"1977-00-08T13:55:10\", " + 
                    " \"description_material\": \"_EM_10273_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_10274_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_10275_XYZ_\", " + 
                    " \"description_main\": \"_EM_10276_XYZ_\", " + 
                    " \"description_notes\": \"_EM_10278_XYZ_\", " + 
                    " \"age_min\": -2147483289, " + 
                    " \"age_max\": -2147483134, " + 
                    " \"participants_min\": 600, " + 
                    " \"participants_max\": 370, " + 
                    " \"time_min\": 530, " + 
                    " \"time_max\": 149, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -197604938443965885, " + 
                    " \"uri\": \"_EM_10315_XYZ_\", " + 
                    " \"name\": \"_EM_10316_XYZ_\", " + 
                    " \"copy_right\": \"e\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_10317_XYZ_\", " + 
                    " \"email_address\": \"kRiTCQ7oF\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 9047828213432142450, " + 
                    " \"date_created\": \"1942-06-12T19:08:10\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"qyphqAsU5nfkK\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 96, " + 
                    " \"date_created\": \"1992-13-29T00:28:17\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/6081920432511902899?EMextraParam123=_EM_10319_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_6651_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -420412242, " + 
                    " \"name\": \"B8OCMOpptXf8TWe\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2094-03-12T19:53:43\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1978-11-13T24:41:34\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1990-09-13T03:09:20\", " + 
                    " \"value\": \"T\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 348, " + 
                    " \"date_created\": \"1913-06-12T25:13:03\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1856_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_1853_XYZ_\", " + 
                    " \"value\": \"_EM_1854_XYZ_\", " + 
                    " \"valid_to\": \"2078-06-10T18:39:21\", " + 
                    " \"valid_from\": \"1955-05-25T16:09:60\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5319_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -134470855, " + 
                    " \"name\": \"_EM_5314_XYZ_\", " + 
                    " \"authorization_level\": 462, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2096-05-22T15:37:06\", " + 
                    " \"value\": \"_EM_5316_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2008-10-05T19:07:-1\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_5317_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/-134470855?EMextraParam123=_EM_5318_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_9328_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 665, " + 
                    " \"uri\": \"_EM_9323_XYZ_\", " + 
                    " \"name\": \"_EM_9324_XYZ_\", " + 
                    " \"capture_date\": \"2021-13-16T25:50:32\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1403L)
            .and().insertInto("ACTIVITY", 1404L)
            .and().insertInto("ACTIVITY", 1405L)
            .and().insertInto("ACTIVITY", 1406L)
            .and().insertInto("MEDIA_FILE", 1407L)
                .d("AUTHOR", "\"Y3iOPruQkzx8\"")
                .d("CAPTURE_DATE", "\"1968-01-24 08:59:17\"")
                .d("COPY_RIGHT", "\"qiyy\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"moderator\"")
                .d("URI", "\"5716872\"")
            .and().insertInto("MEDIA_FILE", 1408L)
                .d("AUTHOR", "\"_EM_41947_XYZ_\"")
                .d("CAPTURE_DATE", "\"2007-07-10 06:46:47\"")
                .d("COPY_RIGHT", "\"kfbIUyrCd6\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_EM_86608_XYZ_\"")
                .d("URI", "\"5777807\"")
            .and().insertInto("MEDIA_FILE", 1409L)
                .d("AUTHOR", "\"_EM_34234_XYZ_\"")
                .d("CAPTURE_DATE", "\"2006-07-23 13:40:44\"")
                .d("COPY_RIGHT", "\"KwNc\"")
                .d("MIME_TYPE", "\"v1NJ\"")
                .d("NAME", "\"5609184\"")
                .d("URI", "\"_EM_11990_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1410L)
                .d("AUTHOR", "\"_EM_86609_XYZ_\"")
                .d("CAPTURE_DATE", "\"2045-10-25 03:00:29\"")
                .d("COPY_RIGHT", "\"nkIH5gl1\"")
                .d("MIME_TYPE", "\"RATINGS_AVG\"")
                .d("NAME", "\"zk9n\"")
                .d("URI", "\"TABLE_TYPE\"")
            .and().insertInto("MEDIA_FILE", 1411L)
                .d("AUTHOR", "\"U`YEIEZxWL4jU\"")
                .d("CAPTURE_DATE", "\"2066-01-14 00:51:25\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"xlmdP7\"")
                .d("NAME", "\"5767818\"")
                .d("URI", "\"D\"")
            .and().insertInto("SYSTEM_MESSAGE", 6928L)
                .d("KEY", "\"H\"")
                .d("VALID_FROM", "\"2000-06-19 11:43:29\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_86605_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 6929L)
                .d("KEY", "\"_EM_41951_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1963-10-02 23:03:14\"")
                .d("VALUE", "\"_EM_34239_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 6930L)
                .d("KEY", "\"_EM_34240_XYZ_\"")
                .d("VALID_FROM", "\"1967-02-04 20:44:23\"")
                .d("VALID_TO", "\"2020-06-14 04:17:13\"")
                .d("VALUE", "\"_EM_86606_XYZ_\"")
            .and().insertInto("USERS", 9031L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_86610_XYZ_\"")
            .and().insertInto("ACTIVITY", 9030L)
            .and().insertInto("ACTIVITY_RATING", 9029L)
                .r("ACTIVITY_ID", 1406L)
                .r("USER_ID", 9031L)
                .d("FAVOURITE", "false")
                .d("RATING", "823")
            .and().insertInto("USERS", 9034L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"GfZsu8qpd\"")
            .and().insertInto("ACTIVITY", 9033L)
            .and().insertInto("ACTIVITY_RATING", 9032L)
                .r("ACTIVITY_ID", 1404L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "809")
            .and().insertInto("USERS", 9037L)
                .d("AUTHORIZATION_LEVEL", "874")
                .d("NAME", "\"2098-05-28 00:25:16\"")
            .and().insertInto("ACTIVITY", 9036L)
            .and().insertInto("ACTIVITY_RATING", 9035L)
                .r("ACTIVITY_ID", 9030L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "-32647")
            .and().insertInto("USERS", 9040L)
                .d("AUTHORIZATION_LEVEL", "-740220417")
                .d("NAME", "\"iJTPJK7zHQX4osRC\"")
            .and().insertInto("ACTIVITY", 9039L)
            .and().insertInto("ACTIVITY_RATING", 9038L)
                .r("ACTIVITY_ID", 9030L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 9043L)
                .d("AUTHORIZATION_LEVEL", "536")
                .d("NAME", "\"Z\"")
            .and().insertInto("ACTIVITY", 9042L)
            .and().insertInto("ACTIVITY_RATING", 9041L)
                .r("ACTIVITY_ID", 9036L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "246")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 311, " + 
                    " \"mime_type\": \"_EM_8995_XYZ_\", " + 
                    " \"uri\": \"data:,clhNV2I2c1hCSA\u003d\u003d\", " + 
                    " \"name\": \"_EM_8997_XYZ_\", " + 
                    " \"capture_date\": \"1937-10-18T17:48:38\", " + 
                    " \"author\": \"CKX3OVoQ9QPWRmCE\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/262144")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_39756_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_39748_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 3847308437693085540, " + 
                    " \"mime_type\": \"_EM_39750_XYZ_\", " + 
                    " \"uri\": \"_EM_39751_XYZ_\", " + 
                    " \"capture_date\": \"2084-06-23T20:21:47\", " + 
                    " \"author\": \"_EM_39754_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": -4842649099099514060 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_39755_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_19265_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_19261_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 157, " + 
                    " \"mime_type\": \"t1BH9booo\", " + 
                    " \"uri\": \"_EM_19263_XYZ_\", " + 
                    " \"capture_date\": \"1964-07-00T05:14:11\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/411")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 779L)
                .d("URI", "\"VNNPuWVc\"")
            .and().insertInto("TAG", 778L)
                .d("GRP", "\"hqu\"")
                .d("NAME", "\"nZ5ea\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 781L)
                .d("URI", "\"6x6L7R\"")
            .and().insertInto("TAG", 780L)
                .d("GRP", "\"kehXagVn\"")
                .d("NAME", "\"\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"PdmoW0m8CrHBG1t\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 57, " + 
                    " \"uri\": \"B\", " + 
                    " \"name\": \"eBMRJpxkvc3\", " + 
                    " \"capture_date\": \"1940-03-26T19:57:-1\" " + 
                    " }, " + 
                    " \"activities_count\": 767 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/325")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_14932_XYZ_\", " + 
                    " \"name\": \"_EM_14933_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_14934_XYZ_\", " + 
                    " \"uri\": \"_EM_14935_XYZ_\", " + 
                    " \"name\": \"epWD97e\", " + 
                    " \"capture_date\": \"2027-13-32T02:47:30\", " + 
                    " \"copy_right\": \"Ul4qmIdNr2wW3\" " + 
                    " }, " + 
                    " \"activities_count\": 511 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 5633L)
            .and().insertInto("ACTIVITY", 5634L)
            .and().insertInto("ACTIVITY", 5635L)
            .and().insertInto("ACTIVITY", 5636L)
            .and().insertInto("ACTIVITY", 5637L)
            .and().insertInto("ACTIVITY", 5623L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_28038_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_28004_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_28005_XYZ_\", " + 
                    " \"description_main\": \"_EM_28006_XYZ_\", " + 
                    " \"age_min\": -2147483103, " + 
                    " \"time_max\": 330, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_28007_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 627, " + 
                    " \"mime_type\": \"_EM_28015_XYZ_\", " + 
                    " \"copy_right\": \"_EM_28017_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 247, " + 
                    " \"capture_date\": \"2078-10-07T08:28:22\", " + 
                    " \"author\": \"_EM_28023_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_28026_XYZ_\", " + 
                    " \"copy_right\": \"_EM_28027_XYZ_\", " + 
                    " \"author\": \"_EM_28028_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"0rdYbx3jComm6W\", " + 
                    " \"name\": \"_EM_28029_XYZ_\", " + 
                    " \"capture_date\": \"1917-09-08T19:26:48\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/5623?EMextraParam123=_EM_28037_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2111_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 186, " + 
                    " \"name\": \"_EM_2071_XYZ_\", " + 
                    " \"description_material\": \"_EM_2072_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_2074_XYZ_\", " + 
                    " \"description_safety\": \"_EM_2075_XYZ_\", " + 
                    " \"age_max\": -882, " + 
                    " \"participants_max\": 349, " + 
                    " \"time_min\": 289, " + 
                    " \"featured\": false, " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_2104_XYZ_\", " + 
                    " \"email_address\": \"_EM_2105_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 1644346617399468037 " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2080-04-22T20:36:00\", " + 
                    " \"value\": \"_EM_2107_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 950 " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2038-01-31T00:21:24\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_2109_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/186?EMextraParam123=_EM_2110_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Zpx\", " + 
                    " \"description_material\": \"9umrq\", " + 
                    " \"description_introduction\": \"Dv2\", " + 
                    " \"description_prepare\": \"M0ABUYnOp1\", " + 
                    " \"description_main\": \"9umrq\", " + 
                    " \"description_safety\": \"9umrq\", " + 
                    " \"description_notes\": \"9umrq\", " + 
                    " \"age_max\": -2147483503, " + 
                    " \"participants_max\": 307, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": 167, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_37199_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 322, " + 
                    " \"name\": \"_EM_28261_XYZ_\", " + 
                    " \"activities_count\": 879 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 423, " + 
                    " \"name\": \"_EM_28268_XYZ_\", " + 
                    " \"activities_count\": 86 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 67109160, " + 
                    " \"group\": \"_EM_28273_XYZ_\", " + 
                    " \"name\": \"3VZCzDvId6swTYxe\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 68, " + 
                    " \"mime_type\": \"_EM_28274_XYZ_\", " + 
                    " \"capture_date\": \"2061-07-19T15:53:60\", " + 
                    " \"copy_right\": \"_EM_28277_XYZ_\", " + 
                    " \"author\": \"XH5dv\" " + 
                    " }, " + 
                    " \"activities_count\": 371 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 435, " + 
                    " \"mime_type\": \"_EM_42290_XYZ_\", " + 
                    " \"name\": \"_EM_28281_XYZ_\", " + 
                    " \"copy_right\": \"_EM_28282_XYZ_\", " + 
                    " \"author\": \"H]6\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 82, " + 
                    " \"name\": \"_EM_28285_XYZ_\", " + 
                    " \"capture_date\": \"2031-07-27T23:06:60\", " + 
                    " \"copy_right\": \"LlGBZH0Dd\", " + 
                    " \"author\": \"_EM_28287_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 919, " + 
                    " \"mime_type\": \"_EM_28288_XYZ_\", " + 
                    " \"uri\": \"_EM_28289_XYZ_\", " + 
                    " \"name\": \"Mq\", " + 
                    " \"copy_right\": \"BNLBh\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 305, " + 
                    " \"email_address\": \"_EM_28293_XYZ_\", " + 
                    " \"authorization_level\": 150, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.8502451982438715, " + 
                    " \"favourites_count\": 2039247547, " + 
                    " \"related\": [ " + 
                    " 516, " + 
                    " 306 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4611686018427392000, " + 
                    " \"name\": \"6DUbpe;UU\", " + 
                    " \"description_material\": \"H\u003ch\", " + 
                    " \"description_introduction\": \"4uUY8r4CI11Oqk\", " + 
                    " \"description_prepare\": \"_EM_84598_XYZ_\", " + 
                    " \"description_main\": \"_EM_84797_XYZ_\", " + 
                    " \"description_safety\": \"R2IelG3yUWUYW\", " + 
                    " \"description_notes\": \"2B2ZPGy237mqF\", " + 
                    " \"age_min\": -40597077, " + 
                    " \"age_max\": -867403, " + 
                    " \"participants_min\": -1059805842, " + 
                    " \"participants_max\": -805291884, " + 
                    " \"time_min\": 1442469115, " + 
                    " \"time_max\": 2147483647, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"tagvGXMxY\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -3458764513820540673, " + 
                    " \"group\": \"T3U_4UU.U`UpjZURT\", " + 
                    " \"name\": \"AjfJOPHWi\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 488, " + 
                    " \"mime_type\": \"mS\", " + 
                    " \"uri\": \"_EM_79730_XYZ_\", " + 
                    " \"name\": \"Dz0SBlc\", " + 
                    " \"capture_date\": \"1923-06-32T10:31:17\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"_EM_84306_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"QuNg2p_\", " + 
                    " \"name\": \"6koM1wTck2orcqI\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 4611686018427383808, " + 
                    " \"mime_type\": \"WsZlYizauWH\", " + 
                    " \"uri\": \"aBXm\", " + 
                    " \"name\": \"pRbtgOVKlwTU\", " + 
                    " \"capture_date\": \"2000-00-00T16:51:42\", " + 
                    " \"copy_right\": \"dzqwJk3yAL7lXO\", " + 
                    " \"author\": \"_EIU80423_XUZ_R\" " + 
                    " }, " + 
                    " \"activities_count\": -262144 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 2305843009213694976, " + 
                    " \"group\": \"_EM_81347_XYZU\", " + 
                    " \"name\": \"lV\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_81348_XYZ_\", " + 
                    " \"uri\": \"2k1D\", " + 
                    " \"capture_date\": \"2077-10-08T09:15:21\", " + 
                    " \"copy_right\": \"FvCd4YAOIhkdfg\", " + 
                    " \"author\": \"_EM_84307_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 347 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 799, " + 
                    " \"group\": \"KX8WTrU3\", " + 
                    " \"name\": \"eNHGcEG\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 954, " + 
                    " \"capture_date\": \"2088-00-19T03:56:17\" " + 
                    " }, " + 
                    " \"activities_count\": -582238642 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 4611686018426868736, " + 
                    " \"mime_type\": \"_EM_81345_XYZ_\", " + 
                    " \"uri\": \"ULPU7U\u003eU4_X`Z_DE\", " + 
                    " \"name\": \"wLQE1QWm9Grdk\", " + 
                    " \"capture_date\": \"2080-09-16T02:42:51\", " + 
                    " \"copy_right\": \"_EM_84640_XYZ_\", " + 
                    " \"author\": \"WjGKpp\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5764607523034238976, " + 
                    " \"mime_type\": \"_EM_84197_XYZ_\", " + 
                    " \"uri\": \"iIaf2OB0YW4L6A7Ve\", " + 
                    " \"name\": \"n7WViTaxnIuHSVTA\", " + 
                    " \"capture_date\": \"1950-06-29T19:53:03\", " + 
                    " \"copy_right\": \"UEfoY02]2sX][`\", " + 
                    " \"author\": \"SlQuhGUsUUUUqp\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 576460752303581167, " + 
                    " \"name\": \"_EM_84714_XYZ_\", " + 
                    " \"email_address\": \"_EM_84649_XYZ_\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": -4611686018072163840, " + 
                    " \"date_created\": \"1923-03-07T13:45:45\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"OKlWFUQ\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": -8191, " + 
                    " \"ratings_count\": 5188146770732949504, " + 
                    " \"ratings_sum\": 6356277275717602272, " + 
                    " \"ratings_average\": 41589.79886517031, " + 
                    " \"favourites_count\": 0, " + 
                    " \"related\": [ " + 
                    " 2048, " + 
                    " -16368, " + 
                    " -1572290, " + 
                    " 661299758422674672 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 5022L)
            .and().insertInto("ACTIVITY", 5023L)
            .and().insertInto("ACTIVITY", 5024L)
            .and().insertInto("ACTIVITY", 5025L)
            .and().insertInto("ACTIVITY", 5026L)
            .and().insertInto("MEDIA_FILE", 5028L)
                .d("URI", "\"59NEnUfjl0kvLU3\"")
            .and().insertInto("TAG", 5027L)
                .d("GRP", "\"\"")
                .d("NAME", "\"_EM_54334_XYZ_\"")
                .r("MEDIA_FILE_ID", 5028L)
            .and().insertInto("MEDIA_FILE", 5030L)
                .d("URI", "\"4LqX\"")
            .and().insertInto("TAG", 5029L)
                .d("GRP", "\"pijhSM9d5wGY\"")
                .d("NAME", "\"Q8rd_gxY\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"tro\", " + 
                    " \"description_introduction\": \"_EM_54331_XYZ_\", " + 
                    " \"description_main\": \"_EM_54332_XYZ_\", " + 
                    " \"description_safety\": \"oCxyK3ShL5\", " + 
                    " \"description_notes\": \"M\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -401, " + 
                    " \"participants_min\": 687, " + 
                    " \"time_max\": 841, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"L\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 646, " + 
                    " \"group\": \"mlrHJLf0I\", " + 
                    " \"name\": \"1GDgncxGxRNpvCe\", " + 
                    " \"activities_count\": 500 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 797, " + 
                    " \"capture_date\": \"1945-03-19T05:46:43\", " + 
                    " \"author\": \"ZaA5Z1EDO\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 720, " + 
                    " \"name\": \"XC\", " + 
                    " \"capture_date\": \"1982-11-19T02:04:27\", " + 
                    " \"copy_right\": \"_oZoTHbRxuBVf\", " + 
                    " \"author\": \"Lz6MB0\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"33\", " + 
                    " \"uri\": \"GSXT18IRj\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 886, " + 
                    " \"uri\": \"RUUV_JjSt\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"MvHTuKc\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 512, " + 
                    " \"name\": \"_EM_54333_XYZ_\", " + 
                    " \"email_address\": \"s\", " + 
                    " \"authorization_level\": 2097402, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": -6976806742772608540, " + 
                    " \"date_created\": \"1972-11-14T21:51:56\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"peLq45IR8yvAWOg\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 663, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"G2Mgre9sigsA9u3M\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -167827916, " + 
                    " \"type\": \"API\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2097-04-08T06:44:49\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"4\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 17327L)
                .d("URI", "\"_EM_71629_XYZ_\"")
            .and().insertInto("TAG", 17326L)
                .d("GRP", "\"_EM_87457_XYZ_\"")
                .d("NAME", "\"O]mwHpOq4\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("USERS", 21984L)
                .d("AUTHORIZATION_LEVEL", "1033")
                .d("NAME", "\"G\"")
            .and().insertInto("ACTIVITY", 21983L)
            .and().insertInto("ACTIVITY", 21982L)
            .and().insertInto("ACTIVITY_PROPERTIES", 21981L)
                .d("AGE_MAX", "-262264")
                .d("AGE_MIN", "-283")
                .d("DATE_CREATED", "\"1948-09-20 06:03:11\"")
                .d("DATE_PUBLISHED", "\"1964-06-10 00:40:10\"")
                .d("DATE_UPDATED", "\"1922-01-13 08:27:59\"")
                .d("DESCRIPTION_INTRODUCTION", "\"LvFm23vAsVlxnc\"")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "NULL")
                .d("DESCRIPTION_NOTES", "\"oRcfivPHB2l3D\"")
                .d("DESCRIPTION_PREPARE", "\"c6dKMr6VWl7\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_87458_XYZ_\"")
                .d("FEATURED", "true")
                .d("NAME", "NULL")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"Oic8\"")
                .d("TIME_MAX", "-64660")
                .d("TIME_MIN", "NULL")
                .r("ACTIVITY_ID", 21983L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 21982L)
            .and().insertInto("USERS", 21988L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"5tQvrmX\"")
            .and().insertInto("ACTIVITY", 21987L)
            .and().insertInto("ACTIVITY", 21986L)
            .and().insertInto("ACTIVITY_PROPERTIES", 21985L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-432")
                .d("DATE_CREATED", "\"1914-11-05 02:12:24\"")
                .d("DATE_PUBLISHED", "\"2017-04-16 02:42:18\"")
                .d("DATE_UPDATED", "\"1937-05-16 21:46:46\"")
                .d("DESCRIPTION_INTRODUCTION", "\"_EM_87474_XYZ_\"")
                .d("DESCRIPTION_MAIN", "\"zsXGa\"")
                .d("DESCRIPTION_MATERIAL", "\"EDlPyWTD\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"xlgvKNAg2dHR\"")
                .d("DESCRIPTION_SAFETY", "\"aX_GBU6IiDf7Tn\"")
                .d("FEATURED", "false")
                .d("NAME", "\"entUCTaibvQuSidK\"")
                .d("PARTICIPANTS_MAX", "NULL")
                .d("PARTICIPANTS_MIN", "218")
                .d("SOURCE", "\"W400gG5\"")
                .d("TIME_MAX", "808")
                .d("TIME_MIN", "669")
                .r("ACTIVITY_ID", 21982L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 21986L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -3458764513820540928, " + 
                    " \"name\": \"VXg87\", " + 
                    " \"description_material\": \"bO\", " + 
                    " \"description_prepare\": \"_EM_87472_XYZ_\", " + 
                    " \"age_min\": -414, " + 
                    " \"age_max\": 32768, " + 
                    " \"participants_min\": 1973865583, " + 
                    " \"time_min\": 307, " + 
                    " \"time_max\": 658 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_6499_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_6500_XYZ_\", " + 
                    " \"description_main\": \"_EM_6501_XYZ_\", " + 
                    " \"description_notes\": \"_EM_6503_XYZ_\", " + 
                    " \"age_min\": 1286134, " + 
                    " \"participants_min\": 254, " + 
                    " \"participants_max\": 348, " + 
                    " \"time_max\": 376, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_6504_XYZ_\", " + 
                    " \"activity\": { " + 
                    " \"id\": 560, " + 
                    " \"favourites_count\": -7192676986062669318, " + 
                    " \"related\": [ " + 
                    " -129978373, " + 
                    " 558 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "attrs=id%2Cidentities&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/6?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 5, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 2, " + 
                    " 4 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/-28244615?EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/824")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/1834732148/rating?EMextraParam123=_EM_150_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"Don\u0027t care about the name\", " + 
                    " \"authorization_level\": 99, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"new user\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"A New Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:07\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"Introduction\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"location\", " + 
                    " \"name\": \"At home\", " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif - Duplicate which should not be persisted\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"G\", " + 
                    " \"name\": \"N\", " + 
                    " \"activities_count\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/profile-bob.gif\", " + 
                    " \"name\": \"Bob\u0027s Profile Picture\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/jpeg\", " + 
                    " \"uri\": \"http://example.com/profile-alice.jpg\", " + 
                    " \"name\": \"Alice\u0027s Profile Picture\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_255_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 964, " + 
                    " \"name\": \"_EM_218_XYZ_\", " + 
                    " \"date_published\": \"1938-08-00T09:26:43\", " + 
                    " \"description_safety\": \"_EM_223_XYZ_\", " + 
                    " \"description_notes\": \"_EM_224_XYZ_\", " + 
                    " \"age_min\": -2147483599, " + 
                    " \"age_max\": -2147483630, " + 
                    " \"participants_min\": 864, " + 
                    " \"participants_max\": 852, " + 
                    " \"time_min\": 866, " + 
                    " \"time_max\": 629, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_241_XYZ_\", " + 
                    " \"name\": \"_EM_242_XYZ_\", " + 
                    " \"capture_date\": \"1907-11-08T16:14:01\", " + 
                    " \"copy_right\": \"_EM_243_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 688, " + 
                    " \"mime_type\": \"_EM_245_XYZ_\", " + 
                    " \"name\": \"_EM_247_XYZ_\", " + 
                    " \"author\": \"_EM_249_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"ratings_count\": -8723264556812760181, " + 
                    " \"ratings_average\": 0.1287892329070489 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"An Updated Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"The Introduction Has Been Updated\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"A Patched Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 677, " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"date_published\": \"2098-06-25T08:24:16\", " + 
                    " \"description_safety\": \"_EM_75_XYZ_\", " + 
                    " \"age_min\": -2147483407, " + 
                    " \"age_max\": -173, " + 
                    " \"participants_min\": 258, " + 
                    " \"time_min\": 989, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_77_XYZ_\", " + 
                    " \"name\": \"_EM_78_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_80_XYZ_\", " + 
                    " \"name\": \"_EM_81_XYZ_\", " + 
                    " \"capture_date\": \"2088-00-24T15:41:07\", " + 
                    " \"copy_right\": \"_EM_82_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 501 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/677?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 2478237951562178561 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_419_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 978, " + 
                    " \"group\": \"_EM_411_XYZ_\", " + 
                    " \"name\": \"_EM_412_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 47, " + 
                    " \"uri\": \"_EM_414_XYZ_\", " + 
                    " \"copy_right\": \"_EM_416_XYZ_\", " + 
                    " \"author\": \"_EM_417_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/978")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_469_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/332?EMextraParam123=_EM_468_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_470_XYZ_\", " + 
                    " \"name\": \"_EM_471_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 347, " + 
                    " \"mime_type\": \"_EM_472_XYZ_\", " + 
                    " \"name\": \"_EM_474_XYZ_\", " + 
                    " \"capture_date\": \"1910-02-01T01:57:07\", " + 
                    " \"author\": \"_EM_476_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 623 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/904?EMextraParam123=_EM_477_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1702_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/47?" + 
                    "verify_unused=true&" + 
                    "EMextraParam123=_EM_1701_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/590")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1714_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/tags/103?EMextraParam123=_EM_1713_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/5866408168840275873?attrs=_EM_1715_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1719_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/384")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2052_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/592?EMextraParam123=_EM_2051_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/5245066193562311794?EMextraParam123=_EM_2063_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_15893_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/-2060858871872223507?EMextraParam123=_EM_15892_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1697_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/78?EMextraParam123=_EM_1696_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/173")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/241")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/767")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1929_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/574?EMextraParam123=_EM_2044_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/186")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2120_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/893")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_25052_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/483")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1848_XYZ_\", " + 
                    " \"author\": \"_EM_1850_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"n3SBO\", " + 
                    " \"authorization_level\": 962 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_7085_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 164, " + 
                    " \"name\": \"_EM_7083_XYZ_\", " + 
                    " \"authorization_level\": 755, " + 
                    " \"identities\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/113")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1865_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 550, " + 
                    " \"mime_type\": \"_EM_1859_XYZ_\", " + 
                    " \"uri\": \"_EM_1860_XYZ_\", " + 
                    " \"name\": \"_EM_1861_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1862_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 763 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
