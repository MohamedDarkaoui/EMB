import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T01:44:37.255+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 681
 * <br>
 * Used time: 2h 0m 55s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/694/rating")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityRating$Key_90_<init>
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        String location_media_files = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"h\", " + 
                    " \"uri\": \"http://194.191.173.56/Gff1n/RLeE\", " + 
                    " \"name\": \"_EM_65804_XYZ_\", " + 
                    " \"copy_right\": \"_EM_65805_XYZ_\", " + 
                    " \"author\": \"2elm8vrAyOYTf38s\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("h"))
                .body("'uri'", containsString("http://194.191.173.56/Gff1n/RLeE"))
                .body("'name'", containsString("_EM_65804_XYZ_"))
                .body("'copy_right'", containsString("_EM_65805_XYZ_"))
                .body("'author'", containsString("2elm8vrAyOYTf38s"));
        location_media_files = "/api/v1/media_files" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_media_files, baseUrlOfSut + "/api/v1/media_files/0/file"))
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_279_downloadFile
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("HTTP 500 Internal Server Error"));
        
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 31996L)
                .d("AUTHORIZATION_LEVEL", "112")
                .d("NAME", "\"o1b0PwpporAxRv\"")
            .and().insertInto("USER_IDENTITY", 31995L)
                .d("DATE_CREATED", "NULL")
                .d("TYPE", "\"GOOGLE\"")
                .d("VALUE", "\"FZ_\"")
                .d("USER_ID", "NULL")
            .and().insertInto("USERS", 31998L)
                .d("AUTHORIZATION_LEVEL", "658")
                .d("NAME", "\"ZEGFUp\"")
            .and().insertInto("USER_IDENTITY", 31997L)
                .d("DATE_CREATED", "\"1909-04-05 15:23:54\"")
                .d("TYPE", "\"API\"")
                .d("VALUE", "\"VDnoKxkbLzm\"")
                .d("USER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"2074-12-19T19:49:54\", " + 
                    " \"description_introduction\": \"G6aAUSAURTQ3\", " + 
                    " \"description_prepare\": \"ziBFyPaYggpPP\", " + 
                    " \"description_main\": \"1m1j5Z\", " + 
                    " \"description_safety\": \"OmxVM6Ju_a1z3W\", " + 
                    " \"age_max\": -2147482998, " + 
                    " \"participants_max\": 421, " + 
                    " \"source\": \"Ixb\", " + 
                    " \"author\": { " + 
                    " \"name\": \"8c_f\", " + 
                    " \"authorization_level\": 974, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 535, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"jmJtTs8QX2\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -4595627400777766254, " + 
                    " \"date_created\": \"2059-08-23T10:27:35\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 98, " + 
                    " \"date_created\": \"2065-00-04T06:06:19\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 236, " + 
                    " \"ratings_sum\": 160, " + 
                    " \"ratings_count\": 529, " + 
                    " \"related\": [ " + 
                    " 503, " + 
                    " 648, " + 
                    " 415 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=HjZZz7v&" + 
                    "name=&" + 
                    "ratings_average_min=0.08554877272409422&" + 
                    "random=881")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/ActivityDao_68_lambda$all$2
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"l\", " + 
                    " \"email_address\": \"MDUyKUZkTy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("l"))
                .body("'email_address'", containsString("MDUyKUZkTy"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_2.extract().body().path("id").toString();
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile?my_favourites=VLRxp8Am&ratings_count_min=4mB0&random=ryxa4AJ2rPD8MNjK&ratings_average_min=dffD&name=l&categories=YsTjs145ce"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("l"))
                .body("'email_address'", containsString("MDUyKUZkTy"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_14433_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 364, " + 
                    " \"description_prepare\": \"_EM_14418_XYZ_\", " + 
                    " \"description_main\": \"_EM_14419_XYZ_\", " + 
                    " \"description_notes\": \"_EM_14420_XYZ_\", " + 
                    " \"age_min\": -900, " + 
                    " \"age_max\": -2147483475, " + 
                    " \"time_max\": 249, " + 
                    " \"source\": \"_EM_14421_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 622, " + 
                    " \"group\": \"_EM_14422_XYZ_\", " + 
                    " \"name\": \"dkljH\", " + 
                    " \"activities_count\": 629 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -6717931931240957202, " + 
                    " \"email_address\": \"_EM_14429_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.7794209083060648 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/ActivityResourceV2_114_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3347L)
                .d("AUTHOR", "\"5DZYA1\"")
                .d("CAPTURE_DATE", "\"1936-03-13 00:27:59\"")
                .d("COPY_RIGHT", "\"309691\"")
                .d("MIME_TYPE", "\"Prz4S7Q\"")
                .d("NAME", "\"%UTRR9RB7P%\"")
                .d("URI", "\"_EM_41410_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 3348L)
                .d("AUTHOR", "\"I9YryG\"")
                .d("CAPTURE_DATE", "\"2063-04-26 00:00:05\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"4f5FPKLcz93\"")
                .d("NAME", "\"sIbAXv\"")
                .d("URI", "\"zIBPpsTlrXiVN6W\"")
            .and().insertInto("MEDIA_FILE", 3349L)
                .d("AUTHOR", "\"zRQ\"")
                .d("CAPTURE_DATE", "\"2083-09-05 11:33:36\"")
                .d("COPY_RIGHT", "\"_EM_21108_XYZ_L\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_hzBr7KIl8R\"")
                .d("URI", "\"35\"")
            .and().insertInto("MEDIA_FILE", 3350L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2000-03-17 11:29:59\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"DfrewB1ukbpVXtl\"")
                .d("NAME", "\"_c9av\"")
                .d("URI", "\"230588\"")
            .and().insertInto("MEDIA_FILE", 3351L)
                .d("AUTHOR", "\"KvSUvt\"")
                .d("CAPTURE_DATE", "\"1908-04-05 11:13:29\"")
                .d("COPY_RIGHT", "\"_EM_50154_XYZ_\"")
                .d("MIME_TYPE", "\"d_3GP33rPpA\"")
                .d("NAME", "NULL")
                .d("URI", "\"UU4BUJ161R\"")
            .and().insertInto("MEDIA_FILE", 3357L)
                .d("URI", "\"AGE_MAX\"")
            .and().insertInto("USERS", 3356L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"199807\"")
            .and().insertInto("ACTIVITY", 3355L)
            .and().insertInto("ACTIVITY", 3354L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3353L)
                .r("ACTIVITY_ID", 3354L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3352L)
                .r("ACTIVITY_PROPERTIES_ID", 3353L)
                .r("MEDIA_FILE_ID", 3350L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3363L)
                .d("URI", "\"_EM_41412_XYZ_\"")
            .and().insertInto("USERS", 3362L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 3361L)
            .and().insertInto("ACTIVITY", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3359L)
                .r("ACTIVITY_ID", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3358L)
                .r("ACTIVITY_PROPERTIES_ID", 3353L)
                .r("MEDIA_FILE_ID", 3363L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 3369L)
                .d("URI", "\"299903\"")
            .and().insertInto("USERS", 3368L)
                .d("AUTHORIZATION_LEVEL", "-65536")
                .d("NAME", "\"_EM_50149_XYZ_\"")
            .and().insertInto("ACTIVITY", 3367L)
            .and().insertInto("ACTIVITY", 3366L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3365L)
                .r("ACTIVITY_ID", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3364L)
                .r("ACTIVITY_PROPERTIES_ID", 3365L)
                .r("MEDIA_FILE_ID", 3350L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 3372L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"FAVOURITE\"")
            .and().insertInto("ACTIVITY", 3371L)
            .and().insertInto("ACTIVITY_RATING", 3370L)
                .r("ACTIVITY_ID", 3354L)
                .r("USER_ID", 3372L)
                .d("FAVOURITE", "false")
                .d("RATING", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -909481193, " + 
                    " \"name\": \"NOXCqfegJE\", " + 
                    " \"description_material\": \"F5XEF3g\", " + 
                    " \"description_introduction\": \"tU\", " + 
                    " \"description_prepare\": \"hY7hRHx0Q\", " + 
                    " \"description_main\": \"F5XEF3g\", " + 
                    " \"description_notes\": \"F5XEF3g\", " + 
                    " \"age_min\": -2147483153, " + 
                    " \"age_max\": -2147483153, " + 
                    " \"participants_min\": 346, " + 
                    " \"participants_max\": 346, " + 
                    " \"time_max\": -15306312, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"KQivirJOTY3AJ4a\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 873, " + 
                    " \"group\": \"TceA47cAYgFOOOj\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 701, " + 
                    " \"activities_count\": 429 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -6746718266739767783, " + 
                    " \"media_file\": { " + 
                    " \"id\": 838, " + 
                    " \"uri\": \"MUvt\" " + 
                    " }, " + 
                    " \"activities_count\": 1497047680 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -222382984, " + 
                    " \"mime_type\": \"N40355L\", " + 
                    " \"name\": \"r_QvoztWNfdgF\", " + 
                    " \"copy_right\": \"eduDG42v\", " + 
                    " \"author\": \"9So_Y31\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"sMSv39nD25\", " + 
                    " \"email_address\": \"2Ujje4xjpg\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 471, " + 
                    " \"ratings_average\": 0.859051336074867, " + 
                    " \"ratings_sum\": 9112239712841454446, " + 
                    " \"ratings_count\": 445 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityPropertiesMediaFile_72_hashCode
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
