import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T01:44:37.224+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 79 tests
 * <br>
 * Covered targets: 595
 * <br>
 * Used time: 2h 0m 55s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","USERS","USER_IDENTITY","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_8575_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_8572_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "attrs=_EM_8573_XYZ_&" + 
                    "EMextraParam123=_EM_8574_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_1761_XYZ_&" + 
                    "name=_EM_8302_XYZ_&" + 
                    "featured=true&" + 
                    "age_1=_EM_1764_XYZ_&" + 
                    "participants=5t&" + 
                    "time_1=_EM_1767_XYZ_&" + 
                    "ratings_count_min=752&" + 
                    "ratings_average_min=0.8708909750355311&" + 
                    "favourites=-1282312882&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1519L)
            .and().insertInto("ACTIVITY", 1520L)
            .and().insertInto("ACTIVITY", 1521L)
            .and().insertInto("ACTIVITY", 1522L)
            .and().insertInto("MEDIA_FILE", 12484L)
                .d("AUTHOR", "\"\"")
                .d("CAPTURE_DATE", "\"2091-09-24 13:45:07\"")
                .d("COPY_RIGHT", "\"_EM_54605_XYZ_\"")
                .d("MIME_TYPE", "\"VIS4TDFzYqiuLW\"")
                .d("NAME", "\"381950\"")
                .d("URI", "\"7ftrM_oUU\"")
            .and().insertInto("USERS", 13719L)
                .d("AUTHORIZATION_LEVEL", "-32709")
                .d("NAME", "\"XpNG0HmjHOTz5\"")
            .and().insertInto("ACTIVITY", 13718L)
            .and().insertInto("ACTIVITY", 13717L)
            .and().insertInto("ACTIVITY_PROPERTIES", 13716L)
                .d("AGE_MAX", "-457")
                .d("AGE_MIN", "-44")
                .d("DATE_CREATED", "\"2094-08-31 17:05:14\"")
                .d("DATE_PUBLISHED", "\"2034-05-02 11:29:02\"")
                .d("DATE_UPDATED", "\"2054-09-23 17:00:52\"")
                .d("DESCRIPTION_INTRODUCTION", "\"Sd9VpVj7gVQ85BW\"")
                .d("DESCRIPTION_MAIN", "\"zmy_a4igN5RTdF_V\"")
                .d("DESCRIPTION_MATERIAL", "\"cHNKn\"")
                .d("DESCRIPTION_NOTES", "\"EGDOsz\"")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"C9m\"")
                .d("PARTICIPANTS_MAX", "856")
                .d("PARTICIPANTS_MIN", "282")
                .d("SOURCE", "\"Gk7zeRCjKWVy\"")
                .d("TIME_MAX", "596423860")
                .d("TIME_MIN", "-107340004")
                .r("ACTIVITY_ID", 1521L)
                .d("AUTHOR_ID", "3")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("USERS", 13723L)
                .d("AUTHORIZATION_LEVEL", "824")
                .d("NAME", "\"42O7Zn6dHHrd0\"")
            .and().insertInto("ACTIVITY", 13722L)
            .and().insertInto("ACTIVITY", 13721L)
            .and().insertInto("ACTIVITY_PROPERTIES", 13720L)
                .d("AGE_MAX", "19")
                .d("AGE_MIN", "-2147482954")
                .d("DATE_CREATED", "NULL")
                .d("DATE_PUBLISHED", "\"2006-07-16 02:39:39\"")
                .d("DATE_UPDATED", "\"2002-05-10 08:00:42\"")
                .d("DESCRIPTION_INTRODUCTION", "\"zEQ1k1QFIKn5\"")
                .d("DESCRIPTION_MAIN", "\"tcEtGsnTnNHAcgyA\"")
                .d("DESCRIPTION_MATERIAL", "NULL")
                .d("DESCRIPTION_NOTES", "\"UWO\"")
                .d("DESCRIPTION_PREPARE", "\"EnZ3RvRWqiV4f40\"")
                .d("DESCRIPTION_SAFETY", "\"u10GmTismjMg1kwfm\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"_EM_54606_XYZ_\"")
                .d("PARTICIPANTS_MAX", "239")
                .d("PARTICIPANTS_MIN", "569")
                .d("SOURCE", "\"2e10\"")
                .d("TIME_MAX", "707")
                .d("TIME_MIN", "1301826294")
                .r("ACTIVITY_ID", 13722L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 13722L)
            .and().insertInto("ACTIVITY", 13725L)
            .and().insertInto("ACTIVITY_DERIVED", 13724L)
                .r("ACTIVITY_ID", 1522L)
                .d("FAVOURITES_COUNT", "44")
                .d("RATINGS_AVG", "0.22458612434228675")
                .d("RATINGS_COUNT", "481")
                .d("RATINGS_SUM", "907")
            .and().insertInto("ACTIVITY", 13727L)
            .and().insertInto("ACTIVITY_DERIVED", 13726L)
                .r("ACTIVITY_ID", 13725L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "0.1676033261117561")
                .d("RATINGS_COUNT", "3163225694716165963")
                .d("RATINGS_SUM", "1321853703")
            .and().insertInto("ACTIVITY", 13729L)
            .and().insertInto("ACTIVITY_DERIVED", 13728L)
                .r("ACTIVITY_ID", 13721L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "941")
                .d("RATINGS_SUM", "157")
            .and().insertInto("MEDIA_FILE", 32853L)
                .d("URI", "\"Z\"")
            .and().insertInto("TAG", 32852L)
                .d("GRP", "\"\"")
                .d("NAME", "\"_i3II5Ln\"")
            .and().insertInto("TAG_DERIVED", 32851L)
                .r("TAG_ID", 32852L)
                .d("ACTIVITIES_COUNT", "763")
            .and().insertInto("MEDIA_FILE", 32856L)
                .d("URI", "\"LBTw7EM\"")
            .and().insertInto("TAG", 32855L)
                .d("GRP", "\"3hk\"")
                .d("NAME", "\"H3RThC2eNsy\"")
            .and().insertInto("TAG_DERIVED", 32854L)
                .r("TAG_ID", 32855L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("MEDIA_FILE", 32859L)
                .d("URI", "\"tDYilMT_ZNl\"")
            .and().insertInto("TAG", 32858L)
                .d("GRP", "\"HuGy3J\"")
                .d("NAME", "\"\"")
            .and().insertInto("TAG_DERIVED", 32857L)
                .r("TAG_ID", 32858L)
                .d("ACTIVITIES_COUNT", "804")
            .and().insertInto("MEDIA_FILE", 32862L)
                .d("URI", "\"AqC\"")
            .and().insertInto("TAG", 32861L)
                .d("GRP", "\"06\"")
                .d("NAME", "\"H\"")
            .and().insertInto("TAG_DERIVED", 32860L)
                .r("TAG_ID", 32861L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("USERS", 32895L)
                .d("AUTHORIZATION_LEVEL", "620")
                .d("NAME", "\"HRaw\"")
            .and().insertInto("ACTIVITY", 32894L)
            .and().insertInto("ACTIVITY_RATING", 32893L)
                .r("ACTIVITY_ID", 13722L)
                .r("USER_ID", 32895L)
                .d("FAVOURITE", "false")
                .d("RATING", "548")
            .and().insertInto("USERS", 32898L)
                .d("AUTHORIZATION_LEVEL", "13")
                .d("NAME", "\"hSx1O3cnbKmWr_\"")
            .and().insertInto("ACTIVITY", 32897L)
            .and().insertInto("ACTIVITY_RATING", 32896L)
                .r("ACTIVITY_ID", 32897L)
                .r("USER_ID", 13719L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 32901L)
                .d("AUTHORIZATION_LEVEL", "222")
                .d("NAME", "\"V4GuRfKw\"")
            .and().insertInto("ACTIVITY", 32900L)
            .and().insertInto("ACTIVITY_RATING", 32899L)
                .r("ACTIVITY_ID", 1521L)
                .r("USER_ID", 32895L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 32904L)
                .d("AUTHORIZATION_LEVEL", "312")
                .d("NAME", "\"XkzRzr99\"")
            .and().insertInto("ACTIVITY", 32903L)
            .and().insertInto("ACTIVITY_RATING", 32902L)
                .r("ACTIVITY_ID", 1521L)
                .r("USER_ID", 32904L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "featured=false&" + 
                    "categories=9&" + 
                    "ages=QYTyaR9ZWRF&" + 
                    "participants=EGhf2efH1RIC9Es&" + 
                    "durations=gQ0n_mBw88fkP4Sv&" + 
                    "ratings_count_min=249&" + 
                    "ratings_average_min=0.9211511435571516&" + 
                    "random=898&" + 
                    "favourites=473")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=_EM_7379_XYZ_&" + 
                    "name=mCh31aXgFeJ&" + 
                    "text=LARU&" + 
                    "featured=true&" + 
                    "id=_EM_7382_XYZ_&" + 
                    "ratings_count_min=-6446517461007141590&" + 
                    "favourites=83&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=_EM_5161_XYZ_&" + 
                    "time_1=_EM_5166_XYZ_&" + 
                    "time_2=_EM_5167_XYZ_&" + 
                    "ratings_count_min=37&" + 
                    "ratings_average_min=0.7024926991290772&" + 
                    "random=236&" + 
                    "favourites=115&" + 
                    "EMextraParam123=_EM_5169_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3879_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 349, " + 
                    " \"valid_from\": \"1963-00-01T01:07:47\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/349")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1140L)
                .d("AUTHOR", "\"_EM_39326_XYZ_\"")
                .d("CAPTURE_DATE", "\"1946-11-26 21:00:31\"")
                .d("COPY_RIGHT", "\"Zp9UElDKwKj\"")
                .d("MIME_TYPE", "\"pkUWbKI\"")
                .d("NAME", "\"ACTIVITY_DERIVED\"")
                .d("URI", "\"mMU1UyVXu5\"")
            .and().insertInto("MEDIA_FILE", 1141L)
                .d("AUTHOR", "\"XfCqTMj\"")
                .d("CAPTURE_DATE", "\"1985-07-21 00:35:29\"")
                .d("COPY_RIGHT", "\"v\"")
                .d("MIME_TYPE", "\"195921\"")
                .d("NAME", "\"Ze\"")
                .d("URI", "\"-1\"")
            .and().insertInto("MEDIA_FILE", 1142L)
                .d("AUTHOR", "\"_EM_39327_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"8P6xzgZ7pUXsNIEb\"")
                .d("MIME_TYPE", "\"_EM_39328_XYZ_\"")
                .d("NAME", "\"193706\"")
                .d("URI", "\"_EM_39134_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1143L)
                .d("AUTHOR", "\"n\"")
                .d("CAPTURE_DATE", "\"1956-05-12 20:38:29\"")
                .d("COPY_RIGHT", "\"126403\"")
                .d("MIME_TYPE", "\"126578\"")
                .d("NAME", "\"SHa3g\"")
                .d("URI", "\"_EM_39329_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1144L)
                .d("AUTHOR", "\"TsPmRDKOo\"")
                .d("CAPTURE_DATE", "\"2028-08-29 14:46:40\"")
                .d("COPY_RIGHT", "\"CROSS\"")
                .d("MIME_TYPE", "\"_EM_39330_XYZ_\"")
                .d("NAME", "\"\"")
                .d("URI", "\"6841\"")
            .and().insertInto("MEDIA_FILE", 1146L)
                .d("URI", "\"1908-02-10 02:16:00\"")
            .and().insertInto("TAG", 1145L)
                .d("GRP", "\"2032-09-29 19:17:34\"")
                .d("NAME", "\"_EM_39331_XYZ_\"")
                .r("MEDIA_FILE_ID", 1146L)
            .and().insertInto("MEDIA_FILE", 1148L)
                .d("URI", "\"1rRPw_IDu4Z1\"")
            .and().insertInto("TAG", 1147L)
                .d("GRP", "\"LU1\"")
                .d("NAME", "\"_EM_12722_XYZ_\"")
                .r("MEDIA_FILE_ID", 1142L)
            .and().insertInto("MEDIA_FILE", 1150L)
                .d("URI", "\"_EM_19795_XYZ_\"")
            .and().insertInto("TAG", 1149L)
                .d("GRP", "\"_EM_19796_XYZ_\"")
                .d("NAME", "\"8LuU5DNxKZFS\"")
                .r("MEDIA_FILE_ID", 1150L)
            .and().insertInto("MEDIA_FILE", 1152L)
                .d("URI", "\"2666i\"")
            .and().insertInto("TAG", 1151L)
                .d("GRP", "\"_EM_19797_XYZ_\"")
                .d("NAME", "\"_EM_39332_XYZ_\"")
                .r("MEDIA_FILE_ID", 1152L)
            .and().insertInto("MEDIA_FILE", 1154L)
                .d("URI", "\"-24\"")
            .and().insertInto("TAG", 1153L)
                .d("GRP", "\"RATINGS_3_1_4_\"")
                .d("NAME", "\"6549\"")
                .r("MEDIA_FILE_ID", 1152L)
            .and().insertInto("ACTIVITY", 1155L)
            .and().insertInto("SYSTEM_MESSAGE", 1156L)
                .d("KEY", "\"SCHEMATA\"")
                .d("VALID_FROM", "\"1904-10-26 00:33:31\"")
                .d("VALID_TO", "\"2000-06-16 21:52:12\"")
                .d("VALUE", "\"QNFHoU_UAbM\"")
            .and().insertInto("SYSTEM_MESSAGE", 1157L)
                .d("KEY", "\"\"")
                .d("VALID_FROM", "\"1987-03-16 00:43:44\"")
                .d("VALID_TO", "\"1900-10-24 09:29:00\"")
                .d("VALUE", "\"_EM_19800_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 1158L)
                .d("KEY", "\"D49WZ\"")
                .d("VALID_FROM", "\"2007-08-25 07:13:29\"")
                .d("VALID_TO", "\"2100-07-22 04:00:36\"")
                .d("VALUE", "\"ztWRbAksxZuU\"")
            .and().insertInto("SYSTEM_MESSAGE", 1159L)
                .d("KEY", "\"RYNlN_YVld3\"")
                .d("VALID_FROM", "\"2008-03-07 11:29:29\"")
                .d("VALID_TO", "\"1908-06-10 00:16:14\"")
                .d("VALUE", "\"_EM_39333_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 1160L)
                .d("KEY", "\"(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_BACD66F8_7CAB_474C_B5A3_0E27F781AB08)\"")
                .d("VALID_FROM", "\"2013-07-15 18:25:20\"")
                .d("VALID_TO", "\"2096-03-27 05:11:15\"")
                .d("VALUE", "\"_EM_39334_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 336, " + 
                    " \"name\": \"phs9vo7WrBBXw\", " + 
                    " \"date_published\": \"1977-01-01T06:60:51\", " + 
                    " \"date_updated\": \"2006-11-01T12:40:40\", " + 
                    " \"description_material\": \"RzpeB\", " + 
                    " \"description_introduction\": \"FS2U9pfgV3\", " + 
                    " \"description_prepare\": \"_EM_39314_XYZ_\", " + 
                    " \"participants_min\": 307, " + 
                    " \"participants_max\": 74, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"VYznKANzqg\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"name\": \"Nomn\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"pC\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 89, " + 
                    " \"name\": \"UJwSPvLuiO\", " + 
                    " \"copy_right\": \"c0wSnZ6L\", " + 
                    " \"author\": \"B8Xze\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"B4jdG0sKPmYf35Y\", " + 
                    " \"uri\": \"8FwSJ0EjML\", " + 
                    " \"name\": \"\", " + 
                    " \"author\": \"8eRk\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -1066683059, " + 
                    " \"uri\": \"na2PGzt\", " + 
                    " \"copy_right\": \"wDxo3UCjaj3\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 4755, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 3.2722217007616483, " + 
                    " \"ratings_sum\": 3040124578429558232, " + 
                    " \"related\": [ " + 
                    " -8082300053050770296 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/208")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2170_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3186863864942974651, " + 
                    " \"name\": \"ccq89x_uQ4Ytm6tn\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"sF\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/3186863864942974651")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3347L)
                .d("AUTHOR", "\"5DZYA1\"")
                .d("CAPTURE_DATE", "\"1936-03-13 00:27:59\"")
                .d("COPY_RIGHT", "\"309691\"")
                .d("MIME_TYPE", "\"Prz4S7Q\"")
                .d("NAME", "\"%UTRR9RB7P%\"")
                .d("URI", "\"_EM_41410_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 3348L)
                .d("AUTHOR", "\"I9YryG\"")
                .d("CAPTURE_DATE", "\"2063-04-26 00:00:05\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"4f5FPKLcz93\"")
                .d("NAME", "\"sIbAXv\"")
                .d("URI", "\"zIBPpsTlrXiVN6W\"")
            .and().insertInto("MEDIA_FILE", 3349L)
                .d("AUTHOR", "\"zRQ\"")
                .d("CAPTURE_DATE", "\"2083-09-05 11:33:36\"")
                .d("COPY_RIGHT", "\"_EM_21108_XYZ_L\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_hzBr7KIl8R\"")
                .d("URI", "\"35\"")
            .and().insertInto("MEDIA_FILE", 3350L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2000-03-17 11:29:59\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"DfrewB1ukbpVXtl\"")
                .d("NAME", "\"_c9av\"")
                .d("URI", "\"230588\"")
            .and().insertInto("MEDIA_FILE", 3351L)
                .d("AUTHOR", "\"KvSUvt\"")
                .d("CAPTURE_DATE", "\"1908-04-05 11:13:29\"")
                .d("COPY_RIGHT", "\"_EM_50154_XYZ_\"")
                .d("MIME_TYPE", "\"d_3GP33rPpA\"")
                .d("NAME", "NULL")
                .d("URI", "\"UU4BUJ161R\"")
            .and().insertInto("MEDIA_FILE", 3357L)
                .d("URI", "\"AGE_MAX\"")
            .and().insertInto("USERS", 3356L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"199807\"")
            .and().insertInto("ACTIVITY", 3355L)
            .and().insertInto("ACTIVITY", 3354L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3353L)
                .r("ACTIVITY_ID", 3354L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3352L)
                .r("ACTIVITY_PROPERTIES_ID", 3353L)
                .r("MEDIA_FILE_ID", 3350L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3363L)
                .d("URI", "\"_EM_41412_XYZ_\"")
            .and().insertInto("USERS", 3362L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 3361L)
            .and().insertInto("ACTIVITY", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3359L)
                .r("ACTIVITY_ID", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3358L)
                .r("ACTIVITY_PROPERTIES_ID", 3353L)
                .r("MEDIA_FILE_ID", 3363L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 3369L)
                .d("URI", "\"299903\"")
            .and().insertInto("USERS", 3368L)
                .d("AUTHORIZATION_LEVEL", "-65536")
                .d("NAME", "\"_EM_50149_XYZ_\"")
            .and().insertInto("ACTIVITY", 3367L)
            .and().insertInto("ACTIVITY", 3366L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3365L)
                .r("ACTIVITY_ID", 3360L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3364L)
                .r("ACTIVITY_PROPERTIES_ID", 3365L)
                .r("MEDIA_FILE_ID", 3350L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 3372L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"FAVOURITE\"")
            .and().insertInto("ACTIVITY", 3371L)
            .and().insertInto("ACTIVITY_RATING", 3370L)
                .r("ACTIVITY_ID", 3354L)
                .r("USER_ID", 3372L)
                .d("FAVOURITE", "false")
                .d("RATING", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"WI\", " + 
                    " \"value\": \"_EM_50146_XYZ_Q\", " + 
                    " \"valid_to\": \"2000-10-16T25:02:56\", " + 
                    " \"valid_from\": \"2028-04-18T06:55:08\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1235, " + 
                    " \"email_address\": \"L4TPxeUwfD0x\", " + 
                    " \"authorization_level\": 474, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 775 " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_11700_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2098-01-00T03:12:03\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_11701_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_11702_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1556455722, " + 
                    " \"uri\": \"_EM_5242_XYZ_\", " + 
                    " \"capture_date\": \"1970-04-03T10:01:50\", " + 
                    " \"copy_right\": \"AhFWu0N6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_5245_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_9036_XYZ_\", " + 
                    " \"uri\": \"_EM_9037_XYZ_\", " + 
                    " \"name\": \"1z\", " + 
                    " \"capture_date\": \"2039-03-30T23:29:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/49?EMextraParam123=_EM_9039_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_12191_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 310, " + 
                    " \"group\": \"_EM_12183_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_12186_XYZ_\", " + 
                    " \"name\": \"_EM_12187_XYZ_\", " + 
                    " \"capture_date\": \"2080-01-17T-1:30:20\" " + 
                    " }, " + 
                    " \"activities_count\": 3562010575475771138 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/310?EMextraParam123=_EM_12190_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 940, " + 
                    " \"name\": \"_EM_38075_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 3166668233890849710, " + 
                    " \"mime_type\": \"8Ca5DMvWDd_\", " + 
                    " \"uri\": \"v{L\", " + 
                    " \"name\": \"9fLd\", " + 
                    " \"capture_date\": \"2089-07-11T04:04:51\", " + 
                    " \"copy_right\": \"p8\", " + 
                    " \"author\": \"AIp\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 551, " + 
                    " \"group\": \"_EM_37474_XYZ_\", " + 
                    " \"name\": \"_EM_37475_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 939, " + 
                    " \"uri\": \"_EM_37476_XYZ_\", " + 
                    " \"name\": \"_EM_37477_XYZ_\", " + 
                    " \"capture_date\": \"2010-05-25T20:38:44\", " + 
                    " \"copy_right\": \"_EM_37478_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/551?EMextraParam123=_EM_37480_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 6132L)
                .d("URI", "\"eAoxYPoMq8v\"")
            .and().insertInto("TAG", 6131L)
                .d("GRP", "\"_EM_27158_XYZ_\"")
                .d("NAME", "\"158154\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 6134L)
                .d("URI", "\"PpxXG\"")
            .and().insertInto("TAG", 6133L)
                .d("GRP", "\"_EM_27159_XYZ_\"")
                .d("NAME", "\"_EM_34910_XYZ_\"")
                .r("MEDIA_FILE_ID", 6132L)
            .and().insertInto("MEDIA_FILE", 6136L)
                .d("URI", "\"1.4.196\"")
            .and().insertInto("TAG", 6135L)
                .d("GRP", "\"6EcVzUn\"")
                .d("NAME", "\"_EM_27161_XYZ_\"")
                .r("MEDIA_FILE_ID", 6132L)
            .and().insertInto("MEDIA_FILE", 6138L)
                .d("URI", "\"u3nHByPN8s8IX9\"")
            .and().insertInto("TAG", 6137L)
                .d("GRP", "\"_EM_34911_XYZ_\"")
                .d("NAME", "\"_EM_24U12_XYZU\"")
                .r("MEDIA_FILE_ID", 6138L)
            .and().insertInto("MEDIA_FILE", 6140L)
                .d("URI", "\"_EM_27162_XYZ_\"")
            .and().insertInto("TAG", 6139L)
                .d("GRP", "\"_EM_34913_XYZ_\"")
                .d("NAME", "\"d\"")
                .r("MEDIA_FILE_ID", 6138L)
            .and().insertInto("SYSTEM_MESSAGE", 6141L)
                .d("KEY", "\"_EM_34914_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2000-11-27 00:31:29\"")
                .d("VALUE", "\"_EM_34918_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 6142L)
                .d("KEY", "\"teKe\"")
                .d("VALID_FROM", "\"1924-11-03 14:42:29\"")
                .d("VALID_TO", "\"2011-06-19 00:25:29\"")
                .d("VALUE", "\"4\"")
            .and().insertInto("SYSTEM_MESSAGE", 6143L)
                .d("KEY", "\"_EM_27164_XYZ_\"")
                .d("VALID_FROM", "\"1979-08-05 11:19:50\"")
                .d("VALID_TO", "\"1999-07-18 09:22:29\"")
                .d("VALUE", "\"Irz9aWRPeI\"")
            .and().insertInto("ACTIVITY", 8481L)
            .and().insertInto("ACTIVITY", 8482L)
            .and().insertInto("ACTIVITY", 8483L)
            .and().insertInto("ACTIVITY", 8484L)
            .and().insertInto("ACTIVITY", 8485L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 131518, " + 
                    " \"group\": \"_EM_34916_XYZ_\", " + 
                    " \"name\": \"_EM_34917_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 243, " + 
                    " \"mime_type\": \"_EM_34907_XYZ_\", " + 
                    " \"uri\": \"5\", " + 
                    " \"name\": \"_EM_18113_XYZ_\", " + 
                    " \"capture_date\": \"2080-01-31T18:41:60\", " + 
                    " \"author\": \"_EM_18115_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": -582092437 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2207_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 432, " + 
                    " \"name\": \"_EM_2171_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_2173_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_2174_XYZ_\", " + 
                    " \"description_safety\": \"_EM_2176_XYZ_\", " + 
                    " \"description_notes\": \"_EM_2177_XYZ_\", " + 
                    " \"age_min\": -2147483318, " + 
                    " \"age_max\": -2147483046, " + 
                    " \"time_max\": 687, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 143, " + 
                    " \"date_created\": \"1994-06-06T24:19:10\", " + 
                    " \"value\": \"_EM_2202_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1939-06-28T25:20:30\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_2203_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2055-02-08T10:22:48\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"_EM_2205_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 8120805166755096121, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 895, " + 
                    " \"ratings_count\": 6, " + 
                    " \"related\": [ " + 
                    " 572, " + 
                    " 672, " + 
                    " 427 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/432?EMextraParam123=_EM_2206_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1845_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1800_XYZ_\", " + 
                    " \"description_material\": \"_EM_1801_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1803_XYZ_\", " + 
                    " \"description_main\": \"_EM_1804_XYZ_\", " + 
                    " \"description_notes\": \"p4t9nr4rJ\", " + 
                    " \"age_min\": -113, " + 
                    " \"participants_max\": 301, " + 
                    " \"time_min\": 674, " + 
                    " \"time_max\": 321, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 910, " + 
                    " \"group\": \"_EM_1807_XYZ_\", " + 
                    " \"name\": \"_EM_1808_XYZ_\", " + 
                    " \"activities_count\": 733 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 185, " + 
                    " \"group\": \"_EM_1814_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1817_XYZ_\", " + 
                    " \"copy_right\": \"V\" " + 
                    " }, " + 
                    " \"activities_count\": 678 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_1821_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_1822_XYZ_\", " + 
                    " \"name\": \"_EM_1824_XYZ_\", " + 
                    " \"capture_date\": \"1974-06-29T22:28:38\", " + 
                    " \"author\": \"_EM_1826_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 194, " + 
                    " \"group\": \"_EM_1827_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1830_XYZ_\", " + 
                    " \"capture_date\": \"1930-00-09T06:16:26\", " + 
                    " \"copy_right\": \"_EM_1832_XYZ_\", " + 
                    " \"author\": \"_EM_1833_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 835 " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_1836_XYZ_\", " + 
                    " \"uri\": \"_EM_1837_XYZ_\", " + 
                    " \"name\": \"_EM_1838_XYZ_\", " + 
                    " \"capture_date\": \"2060-06-28T21:31:28\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 888, " + 
                    " \"name\": \"_EM_1840_XYZ_\", " + 
                    " \"email_address\": \"_EM_1841_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2087-12-28T12:37:26\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_1842_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 377, " + 
                    " \"date_created\": \"2032-09-27T22:53:11\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 432, " + 
                    " \"ratings_average\": 0.7427779808407016 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/807?EMextraParam123=_EM_1844_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 22625L)
                .d("URI", "\".2aUT2W\"")
            .and().insertInto("TAG", 22624L)
                .d("GRP", "\"_WM]USS55_WU\\T]Wja\"")
                .d("NAME", "\"Wiv6mdV\"")
            .and().insertInto("USERS", 22623L)
                .d("AUTHORIZATION_LEVEL", "-618")
                .d("NAME", "\"KTXnvs6FOR\"")
            .and().insertInto("ACTIVITY", 22622L)
            .and().insertInto("ACTIVITY", 22621L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22620L)
                .r("ACTIVITY_ID", 22621L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 22619L)
                .r("ACTIVITY_PROPERTIES_ID", 22620L)
                .r("TAG_ID", 22624L)
            .and().insertInto("MEDIA_FILE", 22632L)
                .d("URI", "\"1611907\"")
            .and().insertInto("TAG", 22631L)
                .d("GRP", "\"U\"")
                .d("NAME", "\"AbSU5`RK[`5omQ\"")
            .and().insertInto("USERS", 22630L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"cXSh7t|^,WK\"")
            .and().insertInto("ACTIVITY", 22629L)
            .and().insertInto("ACTIVITY", 22628L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22627L)
                .r("ACTIVITY_ID", 22621L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1152921504606846912, " + 
                    " \"name\": \"P2U\\\\Vneu9yIEVZm\", " + 
                    " \"description_material\": \"_SL]UTU55]WS^\", " + 
                    " \"description_introduction\": \"VSUTh\", " + 
                    " \"description_prepare\": \"QUXolSLpOeyU\", " + 
                    " \"description_main\": \"VyUWTV0lU\", " + 
                    " \"description_safety\": \"caIU70V7TVUYv\", " + 
                    " \"description_notes\": \"CUiVTQXTM9\", " + 
                    " \"age_min\": -1073741833, " + 
                    " \"age_max\": -50331300, " + 
                    " \"participants_min\": -2147211147, " + 
                    " \"participants_max\": 2147482635, " + 
                    " \"time_min\": -40, " + 
                    " \"time_max\": 2147483647, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"Vh_YvGVwbURFV2UT\", " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"JwhWRrTLTCX\", " + 
                    " \"uri\": \"gt_BcC\", " + 
                    " \"name\": \"0UULUUUT/Ul\", " + 
                    " \"capture_date\": \"1936-03-24T19:44:27\", " + 
                    " \"copy_right\": \"W\", " + 
                    " \"author\": \"3M\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 776, " + 
                    " \"mime_type\": \"sZlTnIg\", " + 
                    " \"uri\": \"5hU96nbbCafJaTyGK\", " + 
                    " \"name\": \"q4UwcMYGcUUq4wrUK\", " + 
                    " \"capture_date\": \"2007-00-12T06:29:29\", " + 
                    " \"copy_right\": \"rRqju8TS\", " + 
                    " \"author\": \"d\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 136, " + 
                    " \"name\": \"zU`OXeUniU2etNd5sPL\", " + 
                    " \"email_address\": \"U`BVUUp\", " + 
                    " \"authorization_level\": -130, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 1031, " + 
                    " \"date_created\": \"1988-09-01T14:29:58\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"mU8DC9pa\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 0, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 4611686018427387776, " + 
                    " \"ratings_average\": 187.24752078578314, " + 
                    " \"ratings_sum\": 0, " + 
                    " \"ratings_count\": 0, " + 
                    " \"related\": [ " + 
                    " -32, " + 
                    " 0 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 41, " + 
                    " \"name\": \"ZNPo_toVVQ\", " + 
                    " \"description_prepare\": \"zsJIfTMTes5\", " + 
                    " \"description_main\": \"_EM_24415_XYZ_\", " + 
                    " \"description_notes\": \"2ZOlSuFW\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -2147483363, " + 
                    " \"participants_min\": 226, " + 
                    " \"participants_max\": 226, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": -2147482593, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"bovM\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_24416_XYZ_\", " + 
                    " \"name\": \"_EM_24417_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_24418_XYZ_\", " + 
                    " \"uri\": \"_EM_24419_XYZ_\", " + 
                    " \"copy_right\": \"_EM_24420_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 181 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_24422_XYZ_\", " + 
                    " \"name\": \"TyHb8wR_Pci7ok\", " + 
                    " \"activities_count\": 33 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 333, " + 
                    " \"group\": \"_EM_24429_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"f\", " + 
                    " \"capture_date\": \"2055-07-30T03:36:24\", " + 
                    " \"copy_right\": \"_EM_24433_XYZ_\", " + 
                    " \"author\": \"v3VofnOhSODoHST\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_24434_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 370, " + 
                    " \"uri\": \"_EM_24437_XYZ_\", " + 
                    " \"copy_right\": \"_EM_24439_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 140, " + 
                    " \"mime_type\": \"_EM_51495_XYZ_\", " + 
                    " \"uri\": \"_EM_24440_XYZ_\", " + 
                    " \"name\": \"_EM_51496_XYZ_\", " + 
                    " \"capture_date\": \"2038-04-29T07:18:52\", " + 
                    " \"copy_right\": \"_EM_24442_XYZ_\", " + 
                    " \"author\": \"_EM_24443_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_51497_XYZ_\", " + 
                    " \"name\": \"18rwFKS\", " + 
                    " \"capture_date\": \"2099-13-02T03:28:33\", " + 
                    " \"copy_right\": \"_EM_24447_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_24450_XYZ_\", " + 
                    " \"name\": \"\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 8483828318456682755, " + 
                    " \"name\": \"_EM_24453_XYZ_\", " + 
                    " \"authorization_level\": 310 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"ratings_count\": 628 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 2829L)
            .and().insertInto("ACTIVITY", 2830L)
            .and().insertInto("ACTIVITY", 2831L)
            .and().insertInto("USERS", 27646L)
                .d("AUTHORIZATION_LEVEL", "371")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 27645L)
            .and().insertInto("ACTIVITY", 27644L)
            .and().insertInto("ACTIVITY_RELATION", 27643L)
                .r("ACTIVITY_1_ID", 2831L)
                .r("ACTIVITY_2_ID", 2829L)
                .d("OWNER_ID", "3")
            .and().insertInto("USERS", 27650L)
                .d("AUTHORIZATION_LEVEL", "759")
                .d("NAME", "\"GiQerOw3hAvsUsb\"")
            .and().insertInto("ACTIVITY", 27649L)
            .and().insertInto("ACTIVITY", 27648L)
            .and().insertInto("ACTIVITY_RELATION", 27647L)
                .r("ACTIVITY_1_ID", 27644L)
                .r("ACTIVITY_2_ID", 27645L)
                .d("OWNER_ID", "3")
            .and().insertInto("USERS", 27654L)
                .d("AUTHORIZATION_LEVEL", "42")
                .d("NAME", "\"tG4XAidwgbiU\"")
            .and().insertInto("ACTIVITY", 27653L)
            .and().insertInto("ACTIVITY", 27652L)
            .and().insertInto("ACTIVITY_RELATION", 27651L)
                .r("ACTIVITY_1_ID", 27648L)
                .r("ACTIVITY_2_ID", 27652L)
                .d("OWNER_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"p\", " + 
                    " \"description_material\": \"WwDVkr_Qv8Bc54\", " + 
                    " \"description_introduction\": \"djq2sO5\", " + 
                    " \"description_prepare\": \"l\", " + 
                    " \"description_notes\": \"1Si7rLzeL_1\", " + 
                    " \"age_max\": -413025425, " + 
                    " \"participants_min\": 991, " + 
                    " \"participants_max\": 604, " + 
                    " \"time_min\": 225, " + 
                    " \"time_max\": 385, " + 
                    " \"source\": \"Ql9dkvpXKqB_b\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -1104978054, " + 
                    " \"group\": \"2iC7\", " + 
                    " \"name\": \"\", " + 
                    " \"activities_count\": 498 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 293 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"sm\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 454, " + 
                    " \"group\": \"\", " + 
                    " \"activities_count\": 178 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 695, " + 
                    " \"uri\": \"211zO8AfG\", " + 
                    " \"capture_date\": \"2099-10-03T06:33:27\", " + 
                    " \"author\": \"Zu\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 336, " + 
                    " \"name\": \"zzWFD2YM5\", " + 
                    " \"copy_right\": \"Tef2_mg6pDjhA\", " + 
                    " \"author\": \"QA\" " + 
                    " }, " + 
                    " { " + 
                    " \"capture_date\": \"1931-06-05T15:02:40\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 903, " + 
                    " \"name\": \"q1V1DQQpEZJ\", " + 
                    " \"copy_right\": \"5nTD60yfWR9JMRo\", " + 
                    " \"author\": \"UwcwAka\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 410, " + 
                    " \"name\": \"\", " + 
                    " \"email_address\": \"IhLODY3\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/496?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 22625L)
                .d("URI", "\".2aUT2W\"")
            .and().insertInto("TAG", 22624L)
                .d("GRP", "\"_WM]USU55_WU\\T]Wja\"")
                .d("NAME", "\"P2U\\Vneu9yIETZm\"")
            .and().insertInto("USERS", 22623L)
                .d("AUTHORIZATION_LEVEL", "-683")
                .d("NAME", "\"LTXnvs5FOR\"")
            .and().insertInto("ACTIVITY", 22622L)
            .and().insertInto("ACTIVITY", 22621L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22620L)
                .r("ACTIVITY_ID", 22621L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 22619L)
                .r("ACTIVITY_PROPERTIES_ID", 22620L)
                .r("TAG_ID", 22624L)
            .and().insertInto("MEDIA_FILE", 22632L)
                .d("URI", "\"1611907\"")
            .and().insertInto("TAG", 22631L)
                .d("GRP", "\"f\"")
                .d("NAME", "\"AbSU6`RK[`5omP\"")
            .and().insertInto("USERS", 22630L)
                .d("AUTHORIZATION_LEVEL", "64")
                .d("NAME", "\"eXUh6t|^,WI\"")
            .and().insertInto("ACTIVITY", 22629L)
            .and().insertInto("ACTIVITY", 22628L)
            .and().insertInto("ACTIVITY_PROPERTIES", 22627L)
                .r("ACTIVITY_ID", 22629L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1152921504606847023, " + 
                    " \"name\": \"P2U\\\\Vneu9yIETZm\", " + 
                    " \"description_material\": \"_RL]URV75]WS^\", " + 
                    " \"description_introduction\": \"VSUUh\", " + 
                    " \"description_prepare\": \"QUXolSLpOeyU\", " + 
                    " \"description_main\": \"VyUWTV0lU\", " + 
                    " \"description_safety\": \"caIU90V7TVUYv\", " + 
                    " \"description_notes\": \"CUiVUQXTM9\", " + 
                    " \"age_min\": -1073741921, " + 
                    " \"age_max\": -12582687, " + 
                    " \"participants_min\": -2147212015, " + 
                    " \"participants_max\": 2147483647, " + 
                    " \"time_min\": -40, " + 
                    " \"time_max\": 2147483519, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"Vh_YvGVwcURFV2\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 71, " + 
                    " \"group\": \"H5LfC\", " + 
                    " \"name\": \"tMgkzZ97ko3yK\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 455, " + 
                    " \"name\": \"3ZCmuizn18X\" " + 
                    " }, " + 
                    " \"activities_count\": 944 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"JwhWRrTLVCX\", " + 
                    " \"uri\": \"gt_BcC\", " + 
                    " \"name\": \"0UULUUUT/Ul\", " + 
                    " \"capture_date\": \"1936-06-24T19:22:27\", " + 
                    " \"copy_right\": \"X\", " + 
                    " \"author\": \"3M\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 776, " + 
                    " \"mime_type\": \"sZlTnIg\", " + 
                    " \"uri\": \"5hU96nbbCafJaT{GK\", " + 
                    " \"name\": \"q4SwcMYGcUUq4wrUK\", " + 
                    " \"capture_date\": \"2007-00-12T06:29:29\", " + 
                    " \"copy_right\": \"rRqju8TS\", " + 
                    " \"author\": \"d\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 136, " + 
                    " \"name\": \"zU`OXeUniU2evNd5sPL\", " + 
                    " \"email_address\": \"U`BVUUp\", " + 
                    " \"authorization_level\": -130, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 1031, " + 
                    " \"date_created\": \"1988-09-01T14:29:58\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"mU8DC9pa\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 34, " + 
                    " \"favourites_count\": 4611686018427387512, " + 
                    " \"ratings_average\": -152.0, " + 
                    " \"ratings_sum\": 256, " + 
                    " \"ratings_count\": -4, " + 
                    " \"related\": [ " + 
                    " -32, " + 
                    " 0 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1519L)
            .and().insertInto("ACTIVITY", 1520L)
            .and().insertInto("ACTIVITY", 1521L)
            .and().insertInto("ACTIVITY", 1522L)
            .and().insertInto("MEDIA_FILE", 12484L)
                .d("AUTHOR", "\"wWET16Oe8GybJ1\"")
                .d("CAPTURE_DATE", "\"2091-09-24 11:29:07\"")
                .d("COPY_RIGHT", "\"62RUrP9egvHPv\"")
                .d("MIME_TYPE", "\"VIS4TDFzYqiuLW\"")
                .d("NAME", "\"_EM_47197_XYZ_\"")
                .d("URI", "\"7ftrM_oUU\"")
            .and().insertInto("USERS", 13484L)
                .d("AUTHORIZATION_LEVEL", "240")
                .d("NAME", "\"7EVZx8\"")
            .and().insertInto("ACTIVITY", 13483L)
            .and().insertInto("ACTIVITY_RATING", 13482L)
                .r("ACTIVITY_ID", 1519L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "837")
            .and().insertInto("USERS", 13487L)
                .d("AUTHORIZATION_LEVEL", "172")
                .d("NAME", "\"jb\"")
            .and().insertInto("ACTIVITY", 13486L)
            .and().insertInto("ACTIVITY_RATING", 13485L)
                .r("ACTIVITY_ID", 13486L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "927")
            .and().insertInto("USERS", 13490L)
                .d("AUTHORIZATION_LEVEL", "616")
                .d("NAME", "\"0{JUV\"")
            .and().insertInto("ACTIVITY", 13489L)
            .and().insertInto("ACTIVITY_RATING", 13488L)
                .r("ACTIVITY_ID", 1519L)
                .r("USER_ID", 13484L)
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 13493L)
                .d("AUTHORIZATION_LEVEL", "28")
                .d("NAME", "\"_EM_54900_XYZ_\"")
            .and().insertInto("ACTIVITY", 13492L)
            .and().insertInto("ACTIVITY_RATING", 13491L)
                .r("ACTIVITY_ID", 13489L)
                .r("USER_ID", 13487L)
                .d("FAVOURITE", "true")
                .d("RATING", "204")
            .and().insertInto("USERS", 13496L)
                .d("AUTHORIZATION_LEVEL", "-523774")
                .d("NAME", "\"uKjgLN9ubaq30m\"")
            .and().insertInto("ACTIVITY", 13495L)
            .and().insertInto("ACTIVITY_RATING", 13494L)
                .r("ACTIVITY_ID", 1521L)
                .r("USER_ID", 13490L)
                .d("FAVOURITE", "true")
                .d("RATING", "-8650558")
            .and().insertInto("MEDIA_FILE", 13827L)
                .d("URI", "\"QrOKQyrqm\"")
            .and().insertInto("TAG", 13826L)
                .d("GRP", "\"YwZ4Cj_YLGw\"")
                .d("NAME", "\"_EM_54901_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 13829L)
                .d("URI", "\"VMAjSsu6NM\"")
            .and().insertInto("TAG", 13828L)
                .d("GRP", "\"_EM_54902_XYZ_\"")
                .d("NAME", "\"hk\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("ACTIVITY", 72L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 7135923241098126217, " + 
                    " \"description_prepare\": \"iUa\", " + 
                    " \"description_main\": \"Hhvnmbd\", " + 
                    " \"description_notes\": \"k10C2I7WDeKswH\", " + 
                    " \"age_min\": 102022, " + 
                    " \"age_max\": -273, " + 
                    " \"participants_min\": 343, " + 
                    " \"participants_max\": 843, " + 
                    " \"time_max\": 386, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"aCQRkVPD5w\", " + 
                    " \"author\": { " + 
                    " \"authorization_level\": 104 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 16, " + 
                    " \"related\": [ " + 
                    " -1474919827 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/155/rating?EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/1499999240560127977?EMextraParam123=_EM_47_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/475?EMextraParam123=_EM_52_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/245?EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/79")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/374?attrs=_EM_67_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/88")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/789")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/305?EMextraParam123=_EM_133_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?name=_EM_157_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_175_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 70, " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/70/rating?EMextraParam123=_EM_174_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/-4380558480533454697/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_310_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/8496153099816730973?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"copy_right\": \"8hH1kKI12IcWB\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_72_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_128_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/765159908?EMextraParam123=_EM_127_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_173_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_172_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=_EM_221_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 902, " + 
                    " \"key\": \"_EM_229_XYZ_\", " + 
                    " \"valid_to\": \"1904-02-15T05:18:41\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": -1682293841, " + 
                    " \"author\": \"_EM_238_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_239_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_246_XYZ_\", " + 
                    " \"date_published\": \"2016-11-08T14:04:44\", " + 
                    " \"description_introduction\": \"_EM_248_XYZ_\", " + 
                    " \"description_main\": \"_EM_250_XYZ_\", " + 
                    " \"age_min\": -765, " + 
                    " \"participants_min\": 390, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_253_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_299_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_446_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/924")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_453_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_447_XYZ_\", " + 
                    " \"uri\": \"_EM_448_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/698?EMextraParam123=_EM_452_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"o\", " + 
                    " \"value\": \"_EM_454_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/331?EMextraParam123=_EM_455_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_465_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 298, " + 
                    " \"activities_count\": 428 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/298")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 695, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"1961-02-10T04:37:16\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_468_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/695")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_504_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"2039-08-16T04:17:30\", " + 
                    " \"date_created\": \"2100-13-14T18:56:47\", " + 
                    " \"description_introduction\": \"_EM_473_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_474_XYZ_\", " + 
                    " \"description_safety\": \"_EM_475_XYZ_\", " + 
                    " \"participants_min\": 966, " + 
                    " \"time_min\": 761, " + 
                    " \"source\": \"0\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 1377545174, " + 
                    " \"mime_type\": \"_EM_484_XYZ_\", " + 
                    " \"uri\": \"_EM_485_XYZ_\", " + 
                    " \"capture_date\": \"2033-05-17T08:34:57\", " + 
                    " \"copy_right\": \"_EM_487_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_489_XYZ_\", " + 
                    " \"uri\": \"W\", " + 
                    " \"copy_right\": \"_EM_491_XYZ_\", " + 
                    " \"author\": \"_EM_492_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 10, " + 
                    " \"uri\": \"k2ClQaM9w\", " + 
                    " \"author\": \"_EM_496_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_497_XYZ_\", " + 
                    " \"name\": \"_EM_499_XYZ_\", " + 
                    " \"capture_date\": \"1989-04-22T14:59:25\", " + 
                    " \"author\": \"mmzE\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 9, " + 
                    " \"email_address\": \"_EM_502_XYZ_\", " + 
                    " \"authorization_level\": 1620278870 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/509")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/6724186047871204045?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/378?" + 
                    "attrs=_EM_1865_XYZ_&" + 
                    "EMextraParam123=_EM_1866_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1852_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/983?" + 
                    "verify_unused=false&" + 
                    "EMextraParam123=_EM_1851_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1856_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/770")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/643616977")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1869_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/-9044761607917737624?EMextraParam123=_EM_1868_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_2018_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/864")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/452")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/1667659394?EMextraParam123=_EM_2167_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3895_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/436?EMextraParam123=_EM_3894_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1847_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/406")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/198?EMextraParam123=_EM_1917_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/814?EMextraParam123=_EM_1921_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/770?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/468?EMextraParam123=_EM_2149_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/10?EMextraParam123=_EM_2215_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 7794L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_33556_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/7794?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/271?EMextraParam123=_EM_9129_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_2001_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_5257_XYZ_\", " + 
                    " \"email_address\": \"_EM_5258_XYZ_\", " + 
                    " \"authorization_level\": 878 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_5261_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2063_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 418, " + 
                    " \"mime_type\": \"_EM_2058_XYZ_\", " + 
                    " \"copy_right\": \"BDu6PIWJIpx\" " + 
                    " }, " + 
                    " \"activities_count\": 410 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
