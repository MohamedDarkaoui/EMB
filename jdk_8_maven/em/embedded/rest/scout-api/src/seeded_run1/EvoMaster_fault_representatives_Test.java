import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T04:52:45.793+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 555
 * <br>
 * Used time: 2h 0m 44s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USERS","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","ACTIVITY","ACTIVITY_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_5276_XYZ_\", " + 
                    " \"email_address\": \"_EM_5277_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/-1913373753520913176?EMextraParam123=_EM_5282_XYZ_")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/UserResource_100_update
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"y_r2\", " + 
                    " \"email_address\": \"x_AXUZLhBg2F7w7S\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 84415752, " + 
                    " \"value\": \"7Aa840\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/UserDao_40_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 8650L)
                .d("URI", "\"zUhfOOqltaJ\"")
            .and().insertInto("TAG", 8649L)
                .d("GRP", "\"MEDIAFILE0_\"")
                .d("NAME", "\"zUhfOOqltb\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8652L)
                .d("URI", "\"DS6SUPYvUq\"")
            .and().insertInto("TAG", 8651L)
                .d("GRP", "\"dRV2WDzAWVNITf\"")
                .d("NAME", "\"CAumg\"")
                .r("MEDIA_FILE_ID", 8650L)
            .and().insertInto("MEDIA_FILE", 8654L)
                .d("URI", "\"qwr9TcRp\"")
            .and().insertInto("TAG", 8653L)
                .d("GRP", "\"_EM_P52I__YW_\"")
                .d("NAME", "\"_EM_51164_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8656L)
                .d("URI", "\"RrpmC8\"")
            .and().insertInto("TAG", 8655L)
                .d("GRP", "\"2S3gD\"")
                .d("NAME", "\"5Tte\"")
                .r("MEDIA_FILE_ID", 8652L)
            .and().insertInto("MEDIA_FILE", 8658L)
                .d("URI", "\"rpbwpEVKsuKKD\"")
            .and().insertInto("TAG", 8657L)
                .d("GRP", "\"jU8UbAUc6UQ\"")
                .d("NAME", "\"Ik\"")
                .r("MEDIA_FILE_ID", 8658L)
            .and().insertInto("MEDIA_FILE", 8812L)
                .d("URI", "\"_EM_48886_XYZ_\"")
            .and().insertInto("USERS", 8811L)
                .d("AUTHORIZATION_LEVEL", "11")
                .d("NAME", "\"286769\"")
            .and().insertInto("ACTIVITY", 8810L)
            .and().insertInto("ACTIVITY", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8808L)
                .r("ACTIVITY_ID", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8807L)
                .r("ACTIVITY_PROPERTIES_ID", 8808L)
                .r("MEDIA_FILE_ID", 8658L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 8818L)
                .d("URI", "\"_EM_51165_XYZ_\"")
            .and().insertInto("USERS", 8817L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"493W\"")
            .and().insertInto("ACTIVITY", 8816L)
            .and().insertInto("ACTIVITY", 8815L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8814L)
                .r("ACTIVITY_ID", 8810L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8813L)
                .r("ACTIVITY_PROPERTIES_ID", 8814L)
                .r("MEDIA_FILE_ID", 8652L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 8824L)
                .d("URI", "\"_EM_51166_XYZ_\"")
            .and().insertInto("USERS", 8823L)
                .d("AUTHORIZATION_LEVEL", "-1543995566")
                .d("NAME", "\"OCJ_x\"")
            .and().insertInto("ACTIVITY", 8822L)
            .and().insertInto("ACTIVITY", 8821L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8820L)
                .r("ACTIVITY_ID", 8821L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8819L)
                .r("ACTIVITY_PROPERTIES_ID", 8820L)
                .r("MEDIA_FILE_ID", 8824L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 9404L)
                .d("URI", "\"MwvlATAWjNxR7EP\"")
            .and().insertInto("TAG", 9403L)
                .d("GRP", "\"777eLMJnMij8NJ\"")
                .d("NAME", "\"\"")
            .and().insertInto("USERS", 9402L)
                .d("AUTHORIZATION_LEVEL", "525")
                .d("NAME", "\"7sC\"")
            .and().insertInto("ACTIVITY", 9401L)
            .and().insertInto("ACTIVITY", 9400L)
            .and().insertInto("ACTIVITY_PROPERTIES", 9399L)
                .r("ACTIVITY_ID", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 9398L)
                .r("ACTIVITY_PROPERTIES_ID", 9399L)
                .r("TAG_ID", 8657L)
            .and().insertInto("MEDIA_FILE", 9411L)
                .d("URI", "\"_EM_51167_XYZ_\"")
            .and().insertInto("TAG", 9410L)
                .d("GRP", "\"PnQaXNFN2XNJLW\"")
                .d("NAME", "\"SRzuNfWIB\"")
            .and().insertInto("USERS", 9409L)
                .d("AUTHORIZATION_LEVEL", "-33553742")
                .d("NAME", "\"_EM_51168_XYZ_\"")
            .and().insertInto("ACTIVITY", 9408L)
            .and().insertInto("ACTIVITY", 9407L)
            .and().insertInto("ACTIVITY_PROPERTIES", 9406L)
                .r("ACTIVITY_ID", 9400L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 9405L)
                .r("ACTIVITY_PROPERTIES_ID", 9406L)
                .r("TAG_ID", 9403L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"description_introduction\": \"pP7FDYiacJAR\", " + 
                    " \"description_prepare\": \"LDoFf\", " + 
                    " \"description_main\": \"_EM_48920_XYZ_\", " + 
                    " \"description_safety\": \"nu\", " + 
                    " \"description_notes\": \"UrAPIGVX\", " + 
                    " \"age_min\": -251, " + 
                    " \"age_max\": -1073741774, " + 
                    " \"participants_min\": 970, " + 
                    " \"participants_max\": 0, " + 
                    " \"time_min\": 0, " + 
                    " \"time_max\": 1073741910, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"CkZDL4d\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 894, " + 
                    " \"group\": \"xhlIfaW\", " + 
                    " \"name\": \"zSftA\", " + 
                    " \"activities_count\": 608 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 1326299443346888027, " + 
                    " \"uri\": \"\", " + 
                    " \"copy_right\": \"m4M9niMEJl\", " + 
                    " \"author\": \"ieUVc_BV0rrr4iU\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"m0arbJKojd\", " + 
                    " \"name\": \"Bgw3qTGM3C1QFl\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 870, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.3168951715332372, " + 
                    " \"favourites_count\": 2305843009213692928, " + 
                    " \"ratings_sum\": 0, " + 
                    " \"ratings_count\": 0 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/MediaFileDao_38_find
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_22983_XYZ_\", " + 
                    " \"identities\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_22983_XYZ_"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_0.extract().body().path("id").toString();
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_22983_XYZ_"))
                .body("'email_address'", nullValue())
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


}
