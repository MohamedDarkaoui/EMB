import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-29T04:52:45.755+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 82 tests
 * <br>
 * Covered targets: 687
 * <br>
 * Used time: 2h 0m 44s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USERS","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","ACTIVITY","ACTIVITY_DERIVED","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3027L)
                .d("AUTHORIZATION_LEVEL", "301")
                .d("DATE_CREATED", "\"1934-04-22 07:27:14\"")
                .d("EMAIL_ADDRESS", "\"relX\"")
                .d("NAME", "\"E8rq6PKPul\"")
            .and().insertInto("USERS", 3028L)
                .d("AUTHORIZATION_LEVEL", "619")
                .d("DATE_CREATED", "\"1941-08-04 12:20:09\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"_EM_35769_XYZ_\"")
            .and().insertInto("USERS", 3029L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("DATE_CREATED", "\"1906-03-27 16:06:56\"")
                .d("EMAIL_ADDRESS", "\"__8hD4sImVsckKY\"")
                .d("NAME", "\"cTQkYGumpf\"")
            .and().insertInto("USERS", 3030L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("DATE_CREATED", "\"1941-07-04 04:29:27\"")
                .d("EMAIL_ADDRESS", "\"_EM_35770_XYZ_\"")
                .d("NAME", "\"_EM_35771_XYZ_\"")
            .and().insertInto("USERS", 3031L)
                .d("AUTHORIZATION_LEVEL", "469")
                .d("DATE_CREATED", "\"2049-09-25 21:21:00\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"_EM_35772_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 5948L)
                .d("URI", "\"_EM_35773_XYZ_\"")
            .and().insertInto("TAG", 5947L)
                .d("GRP", "\"0Zkxe2yz\"")
                .d("NAME", "\"_EM_35774_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 5946L)
                .r("TAG_ID", 5947L)
                .d("ACTIVITIES_COUNT", "450")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_35768_XYZ_\", " + 
                    " \"name\": \"DMw4rB\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"AI\", " + 
                    " \"name\": \"up_0ag\", " + 
                    " \"capture_date\": \"2095-05-31T05:33:21\", " + 
                    " \"copy_right\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=_EM_35768_XYZ_&" + 
                    "name=DMw4rB&" + 
                    "min_activities_count=697&" + 
                    "attrs=wOjmlkemVpRD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 21288L)
                .d("KEY", "\"HB\"")
                .d("VALID_FROM", "\"1986-02-12 20:47:10\"")
                .d("VALID_TO", "\"2015-12-14 21:27:34\"")
                .d("VALUE", "\"_EM_91465_XYZ_\"")
            .and().insertInto("USERS", 21290L)
                .d("AUTHORIZATION_LEVEL", "558")
                .d("NAME", "\"_EM_91466_XYZ_\"")
            .and().insertInto("USER_IDENTITY", 21289L)
                .d("DATE_CREATED", "\"1901-01-06 10:33:44\"")
                .d("TYPE", "\"wM4LDyfxaL95R\"")
                .d("VALUE", "\"JN8wh\"")
                .d("USER_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 21291L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1977-04-25 20:15:30\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_91469_XYZ_\"")
                .d("NAME", "\"p\"")
                .d("URI", "\"_EM_91470_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_media_files = "";
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages/-145895296?" + 
                    "attrs=kkw&" + 
                    "name=&" + 
                    "group=S&" + 
                    "my_favourites=UlNprf3azo&" + 
                    "time_1=_EM_91467_XYZ_&" + 
                    "age_1=&" + 
                    "id=21289")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"ku2syFVZaArn\", " + 
                    " \"name\": \"\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"pGJMWAoPt8b6C\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("ku2syFVZaArn"))
                .body("'name'", containsString(""))
                .body("'copy_right'", containsString(""))
                .body("'author'", containsString("pGJMWAoPt8b6C"));
        location_media_files = "/api/v1/media_files" + "/" + res_1.extract().body().path("id").toString();
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"IN\", " + 
                    " \"uri\": \"ku2syFVZaArn\", " + 
                    " \"copy_right\": \"whCqBMD47ZXgViA9\" " + 
                    " } ")
                .put(resolveLocation(location_media_files, baseUrlOfSut + "/api/v1/media_files/-145895296?attrs=kkw&featured=7He1BDdVeoXbi"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("IN"))
                .body("'uri'", containsString("ku2syFVZaArn"))
                .body("'copy_right'", containsString(""))
                .body("'author'", containsString("pGJMWAoPt8b6C"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"S\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 318624407, " + 
                    " \"uri\": \"\", " + 
                    " \"name\": \"K1r5D3OHX8Z\", " + 
                    " \"capture_date\": \"2096-05-06T25:50:52\", " + 
                    " \"copy_right\": \"8zvn\", " + 
                    " \"author\": \"124Z1gUOpeFReB\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "min_activities_count=280&" + 
                    "attrs=kkw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=8mPiAGjjH6M&" + 
                    "valid=EVOMASTER&" + 
                    "EMextraParam123=_EM_6790_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_16322_XYZ_")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=_EM_34108_XYZ_&" + 
                    "name=_EM_34109_XYZ_&" + 
                    "text=9zQMjKAus9&" + 
                    "featured=false&" + 
                    "categories=6&" + 
                    "participants=_EM_34110_XYZ_&" + 
                    "durations=_EM_16319_XYZ_&" + 
                    "id=d7DOP2m9w&" + 
                    "random=153&" + 
                    "favourites=41943683&" + 
                    "EMextraParam123=_EM_16321_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 26101L)
                .d("AUTHORIZATION_LEVEL", "-6")
                .d("NAME", "\"4SaqB6Gv_OQf\"")
            .and().insertInto("ACTIVITY", 26100L)
            .and().insertInto("ACTIVITY", 26099L)
            .and().insertInto("ACTIVITY_PROPERTIES", 26098L)
                .d("AGE_MAX", "-558")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "\"2091-07-16 17:29:29\"")
                .d("DATE_PUBLISHED", "\"2100-08-02 13:58:41\"")
                .d("DATE_UPDATED", "\"1906-02-16 11:41:46\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"7bZTC7E2\"")
                .d("DESCRIPTION_NOTES", "\"MvJUi\"")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "NULL")
                .d("PARTICIPANTS_MAX", "NULL")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"u_JT6M\"")
                .d("TIME_MAX", "827")
                .d("TIME_MIN", "-3647")
                .r("ACTIVITY_ID", 26100L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 26100L)
            .and().insertInto("USERS", 26105L)
                .d("AUTHORIZATION_LEVEL", "-548175444")
                .d("NAME", "\"_EM_115198_XYZ_\"")
            .and().insertInto("ACTIVITY", 26104L)
            .and().insertInto("ACTIVITY", 26103L)
            .and().insertInto("ACTIVITY_PROPERTIES", 26102L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-577")
                .d("DATE_CREATED", "\"2093-07-24 09:40:07\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "\"2029-01-01 22:47:54\"")
                .d("DESCRIPTION_INTRODUCTION", "\"rJFBJJ\"")
                .d("DESCRIPTION_MAIN", "\"w04boi0Ha\"")
                .d("DESCRIPTION_MATERIAL", "NULL")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"LK4VlC2Z6em\"")
                .d("DESCRIPTION_SAFETY", "\"u_dooQNMoUFYh\"")
                .d("FEATURED", "true")
                .d("NAME", "NULL")
                .d("PARTICIPANTS_MAX", "-110")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"nKhvD1DOBk\"")
                .d("TIME_MAX", "917")
                .d("TIME_MIN", "883")
                .r("ACTIVITY_ID", 26103L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 26104L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=FL9UdOazm&" + 
                    "name=3HAJ46TWRgc1x&" + 
                    "featured=true&" + 
                    "ages=35&" + 
                    "durations=gmuQzNk&" + 
                    "id=_EM_106625_XYZ_&" + 
                    "random=532&" + 
                    "time_1=2tTGD&" + 
                    "age_1=HtAXIV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_16177_XYZ_")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_16166_XYZ_&" + 
                    "text=_EM_16168_XYZ_&" + 
                    "featured=true&" + 
                    "time_2=_EM_16174_XYZ_&" + 
                    "id=_EM_16175_XYZ_&" + 
                    "ratings_count_min=240&" + 
                    "random=799&" + 
                    "favourites=925")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_16102_XYZ_&" + 
                    "name=_EM_16103_XYZ_&" + 
                    "featured=true&" + 
                    "id=_EM_16109_XYZ_&" + 
                    "ratings_average_min=0.9050995048818016")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3669_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_3667_XYZ_\", " + 
                    " \"valid_to\": \"2014-07-05T17:13:52\", " + 
                    " \"valid_from\": \"2056-11-03T04:19:33\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/489")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 970, " + 
                    " \"date_published\": \"2078-13-08T22:60:46\", " + 
                    " \"date_created\": \"1999-03-18T-1:33:45\", " + 
                    " \"date_updated\": \"1971-03-17T24:31:15\", " + 
                    " \"description_prepare\": \"_EM_2011_XYZ_\", " + 
                    " \"description_safety\": \"WbBsho\", " + 
                    " \"age_min\": -351, " + 
                    " \"age_max\": -99, " + 
                    " \"participants_min\": 117, " + 
                    " \"participants_max\": 217, " + 
                    " \"time_max\": -1952663675, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"L0nZJtISBLi\", " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_2026_XYZ_\", " + 
                    " \"email_address\": \"_EM_2027_XYZ_\", " + 
                    " \"authorization_level\": 72 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 686, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 766 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/970")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4154410281981655264, " + 
                    " \"name\": \"_EM_13309_XYZ_\", " + 
                    " \"authorization_level\": 562, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 53, " + 
                    " \"date_created\": \"1923-13-08T16:51:10\", " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1919-00-29T04:38:21\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_13312_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2082-00-10T17:07:59\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_13313_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1937-12-01T12:22:48\", " + 
                    " \"value\": \"_EM_13314_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 8650L)
                .d("URI", "\"zUhfOOqltaJ\"")
            .and().insertInto("TAG", 8649L)
                .d("GRP", "\"MEDIAFILE0_\"")
                .d("NAME", "\"zUhfOOqltb\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8652L)
                .d("URI", "\"DS6SUPYvUq\"")
            .and().insertInto("TAG", 8651L)
                .d("GRP", "\"dRV2WDzAWVNITf\"")
                .d("NAME", "\"CAumg\"")
                .r("MEDIA_FILE_ID", 8650L)
            .and().insertInto("MEDIA_FILE", 8654L)
                .d("URI", "\"qwr9TcRp\"")
            .and().insertInto("TAG", 8653L)
                .d("GRP", "\"_EM_P52I__YW_\"")
                .d("NAME", "\"_EM_51164_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8656L)
                .d("URI", "\"RrpmC8\"")
            .and().insertInto("TAG", 8655L)
                .d("GRP", "\"2S3gD\"")
                .d("NAME", "\"5Tte\"")
                .r("MEDIA_FILE_ID", 8652L)
            .and().insertInto("MEDIA_FILE", 8658L)
                .d("URI", "\"rpbwpEVKsuKKD\"")
            .and().insertInto("TAG", 8657L)
                .d("GRP", "\"jU8UbAUc6UQ\"")
                .d("NAME", "\"Ik\"")
                .r("MEDIA_FILE_ID", 8658L)
            .and().insertInto("MEDIA_FILE", 8812L)
                .d("URI", "\"_EM_48886_XYZ_\"")
            .and().insertInto("USERS", 8811L)
                .d("AUTHORIZATION_LEVEL", "11")
                .d("NAME", "\"286769\"")
            .and().insertInto("ACTIVITY", 8810L)
            .and().insertInto("ACTIVITY", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8808L)
                .r("ACTIVITY_ID", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8807L)
                .r("ACTIVITY_PROPERTIES_ID", 8808L)
                .r("MEDIA_FILE_ID", 8658L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 8818L)
                .d("URI", "\"_EM_51165_XYZ_\"")
            .and().insertInto("USERS", 8817L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"493W\"")
            .and().insertInto("ACTIVITY", 8816L)
            .and().insertInto("ACTIVITY", 8815L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8814L)
                .r("ACTIVITY_ID", 8810L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8813L)
                .r("ACTIVITY_PROPERTIES_ID", 8814L)
                .r("MEDIA_FILE_ID", 8652L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 8824L)
                .d("URI", "\"_EM_51166_XYZ_\"")
            .and().insertInto("USERS", 8823L)
                .d("AUTHORIZATION_LEVEL", "-1543995566")
                .d("NAME", "\"OCJ_x\"")
            .and().insertInto("ACTIVITY", 8822L)
            .and().insertInto("ACTIVITY", 8821L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8820L)
                .r("ACTIVITY_ID", 8821L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8819L)
                .r("ACTIVITY_PROPERTIES_ID", 8820L)
                .r("MEDIA_FILE_ID", 8824L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 9404L)
                .d("URI", "\"MwvlATAWjNxR7EP\"")
            .and().insertInto("TAG", 9403L)
                .d("GRP", "\"777eLMJnMij8NJ\"")
                .d("NAME", "\"\"")
            .and().insertInto("USERS", 9402L)
                .d("AUTHORIZATION_LEVEL", "525")
                .d("NAME", "\"7sC\"")
            .and().insertInto("ACTIVITY", 9401L)
            .and().insertInto("ACTIVITY", 9400L)
            .and().insertInto("ACTIVITY_PROPERTIES", 9399L)
                .r("ACTIVITY_ID", 8809L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 9398L)
                .r("ACTIVITY_PROPERTIES_ID", 9399L)
                .r("TAG_ID", 8657L)
            .and().insertInto("MEDIA_FILE", 9411L)
                .d("URI", "\"_EM_51167_XYZ_\"")
            .and().insertInto("TAG", 9410L)
                .d("GRP", "\"PnQaXNFN2XNJLW\"")
                .d("NAME", "\"SRzuNfWIB\"")
            .and().insertInto("USERS", 9409L)
                .d("AUTHORIZATION_LEVEL", "-33553742")
                .d("NAME", "\"_EM_51168_XYZ_\"")
            .and().insertInto("ACTIVITY", 9408L)
            .and().insertInto("ACTIVITY", 9407L)
            .and().insertInto("ACTIVITY_PROPERTIES", 9406L)
                .r("ACTIVITY_ID", 9400L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 9405L)
                .r("ACTIVITY_PROPERTIES_ID", 9406L)
                .r("TAG_ID", 9403L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"wTayhW1UPVXtQTB7\", " + 
                    " \"value\": \"_EM_51163_XYZ_\", " + 
                    " \"valid_from\": \"2093-09-19T09:59:50\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2697L)
                .d("URI", "\"CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_F9A78664_028A_4C8A_A2ED_1CE23F4A8218 START WITH 1 BELONGS_TO_TABLE\"")
            .and().insertInto("TAG", 2696L)
                .d("GRP", "\"COPY_RIG4_7_\"")
                .d("NAME", "\"vkC4S1R77\"")
                .r("MEDIA_FILE_ID", 2697L)
            .and().insertInto("MEDIA_FILE", 2699L)
                .d("URI", "\"_EM_48092_XYZ_\"")
            .and().insertInto("TAG", 2698L)
                .d("GRP", "\"1.4.196\"")
                .d("NAME", "\"pCoW133bmBljIG5WR\"")
                .r("MEDIA_FILE_ID", 2699L)
            .and().insertInto("MEDIA_FILE", 2701L)
                .d("URI", "\"3hRFhS6U8MidhMk\"")
            .and().insertInto("TAG", 2700L)
                .d("GRP", "\"UCUfUUUUa\"")
                .d("NAME", "\"IMqMBNKm3\"")
                .r("MEDIA_FILE_ID", 2699L)
            .and().insertInto("MEDIA_FILE", 2703L)
                .d("URI", "\"_EM_112300_XYZ_\"")
            .and().insertInto("TAG", 2702L)
                .d("GRP", "\"_EM_48229_XYZ_\"")
                .d("NAME", "\"_EM_35124_XYZ_\"")
                .r("MEDIA_FILE_ID", 2703L)
            .and().insertInto("ACTIVITY", 2704L)
            .and().insertInto("ACTIVITY", 2705L)
            .and().insertInto("ACTIVITY", 2706L)
            .and().insertInto("ACTIVITY", 2707L)
            .and().insertInto("ACTIVITY", 2708L)
            .and().insertInto("MEDIA_FILE", 2711L)
                .d("URI", "\"AiXoHK1t\"")
            .and().insertInto("TAG", 2710L)
                .d("GRP", "\"_EM_48230_XYZ_\"")
                .d("NAME", "\"241912\"")
            .and().insertInto("TAG_DERIVED", 2709L)
                .r("TAG_ID", 2710L)
                .d("ACTIVITIES_COUNT", "33276")
            .and().insertInto("MEDIA_FILE", 2714L)
                .d("URI", "\"X\"")
            .and().insertInto("TAG", 2713L)
                .d("GRP", "\"vAo8Q6O\"")
                .d("NAME", "\"1a\"")
            .and().insertInto("TAG_DERIVED", 2712L)
                .r("TAG_ID", 2702L)
                .d("ACTIVITIES_COUNT", "4063232")
            .and().insertInto("MEDIA_FILE", 2717L)
                .d("URI", "\"266090\"")
            .and().insertInto("TAG", 2716L)
                .d("GRP", "\"_EM_48106_XYZ_\"")
                .d("NAME", "\"6\"")
            .and().insertInto("TAG_DERIVED", 2715L)
                .r("TAG_ID", 2700L)
                .d("ACTIVITIES_COUNT", "-466272872")
            .and().insertInto("MEDIA_FILE", 2720L)
                .d("URI", "\"uNCTAqm0Hcg_b3\"")
            .and().insertInto("TAG", 2719L)
                .d("GRP", "\"_EM_48231_XYZ_\"")
                .d("NAME", "\"QI9UjLuN1MDnmU\"")
            .and().insertInto("TAG_DERIVED", 2718L)
                .r("TAG_ID", 2698L)
                .d("ACTIVITIES_COUNT", "-6396107812206357578")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 774, " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"c\", " + 
                    " \"capture_date\": \"1926-11-18T14:44:34\", " + 
                    " \"author\": \"TjtSSz8zNKx9_eT\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_12479_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_12475_XYZ_\", " + 
                    " \"authorization_level\": 602, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_12476_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 290, " + 
                    " \"date_created\": \"2034-02-11T21:01:39\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_12477_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/981")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2038_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"rqeun\", " + 
                    " \"uri\": \"_EM_2034_XYZ_\", " + 
                    " \"name\": \"_EM_2035_XYZ_\", " + 
                    " \"capture_date\": \"2000-13-21T24:40:10\", " + 
                    " \"copy_right\": \"_EM_2036_XYZ_\", " + 
                    " \"author\": \"Jd8Hj02T\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/0?EMextraParam123=_EM_2037_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 278L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"2x5O3jNIhMpLtQ\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"gcNfQPOXt2B_Is_e\", " + 
                    " \"capture_date\": \"1940-13-12T19:08:06\", " + 
                    " \"author\": \"vMId\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/164")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 131, " + 
                    " \"media_file\": { " + 
                    " \"id\": 1866839070349394339, " + 
                    " \"mime_type\": \"_EM_33493_XYZ_\", " + 
                    " \"uri\": \"_EM_33494_XYZ_\", " + 
                    " \"capture_date\": \"2036-01-06T05:05:25\", " + 
                    " \"author\": \"_EM_33497_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_33498_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_35768_XYZ_\", " + 
                    " \"name\": \"DMw4rB\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"AI\", " + 
                    " \"name\": \"up_0ag\", " + 
                    " \"capture_date\": \"2095-05-31T05:33:21\", " + 
                    " \"copy_right\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 808, " + 
                    " \"group\": \"_EM_8117_XYZ_\", " + 
                    " \"name\": \"_EM_5317_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -1363225472, " + 
                    " \"mime_type\": \"JuyLQFougxuaZx\", " + 
                    " \"uri\": \"_EM_5318_XYZ_\", " + 
                    " \"capture_date\": \"1951-00-19T08:03:43\", " + 
                    " \"copy_right\": \"_EM_8118_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/808?EMextraParam123=_EM_5322_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 524L)
            .and().insertInto("ACTIVITY", 525L)
            .and().insertInto("USERS", 712L)
                .d("AUTHORIZATION_LEVEL", "164")
                .d("NAME", "\"_EM_17501_XYZ_\"")
            .and().insertInto("ACTIVITY", 711L)
            .and().insertInto("ACTIVITY_RATING", 710L)
                .r("ACTIVITY_ID", 525L)
                .r("USER_ID", 712L)
                .d("FAVOURITE", "true")
                .d("RATING", "375")
            .and().insertInto("USERS", 715L)
                .d("AUTHORIZATION_LEVEL", "2097718")
                .d("NAME", "\"oolsEtUBx_Qjxe\"")
            .and().insertInto("ACTIVITY", 714L)
            .and().insertInto("ACTIVITY_RATING", 713L)
                .r("ACTIVITY_ID", 711L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "523794")
            .and().insertInto("USERS", 718L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"2\"")
            .and().insertInto("ACTIVITY", 717L)
            .and().insertInto("ACTIVITY_RATING", 716L)
                .r("ACTIVITY_ID", 525L)
                .r("USER_ID", 718L)
                .d("FAVOURITE", "false")
                .d("RATING", "885")
            .and().insertInto("USERS", 721L)
                .d("AUTHORIZATION_LEVEL", "80")
                .d("NAME", "\"_EM_17502_XYZ_\"")
            .and().insertInto("ACTIVITY", 720L)
            .and().insertInto("ACTIVITY_RATING", 719L)
                .r("ACTIVITY_ID", 714L)
                .r("USER_ID", 715L)
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 724L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_26915_XYZ_\"")
            .and().insertInto("ACTIVITY", 723L)
            .and().insertInto("ACTIVITY_RATING", 722L)
                .r("ACTIVITY_ID", 717L)
                .r("USER_ID", 715L)
                .d("FAVOURITE", "false")
                .d("RATING", "478")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"nFR\", " + 
                    " \"description_introduction\": \"Fqwj6VfXMzM6Q\", " + 
                    " \"description_prepare\": \"RZKRI\", " + 
                    " \"description_safety\": \"kzKxo\", " + 
                    " \"description_notes\": \"0LHkG3B\", " + 
                    " \"age_min\": -238, " + 
                    " \"age_max\": -2147483435, " + 
                    " \"participants_min\": 499, " + 
                    " \"time_max\": 750, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"6JOoIDnw765bC\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"\", " + 
                    " \"capture_date\": \"2088-10-26T24:00:04\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"iTaOUPUR\", " + 
                    " \"capture_date\": \"2065-09-22T21:42:08\", " + 
                    " \"author\": \"6tpO9wbDCjQk\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"lWqqCQlvoRF\", " + 
                    " \"capture_date\": \"2057-10-24T-1:02:49\", " + 
                    " \"copy_right\": \"RhXj48jYwj\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 670, " + 
                    " \"name\": \"2gWo8u\", " + 
                    " \"email_address\": \"n0bPGogK6eGt\", " + 
                    " \"identities\": [] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/964")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1512L)
                .d("URI", "\"L\"")
            .and().insertInto("TAG", 1511L)
                .d("GRP", "\"_EM_50290_XYZ_\"")
                .d("NAME", "\"59771\"")
                .r("MEDIA_FILE_ID", 1512L)
            .and().insertInto("MEDIA_FILE", 9182L)
                .d("URI", "\"N3JSF6b2x\"")
            .and().insertInto("TAG", 9181L)
                .d("GRP", "\"oIol\"")
                .d("NAME", "\"_EM_50291_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 9180L)
                .r("TAG_ID", 1511L)
                .d("ACTIVITIES_COUNT", "995")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"GwrU_\", " + 
                    " \"description_prepare\": \"XUoI\", " + 
                    " \"age_min\": -2147482735, " + 
                    " \"participants_min\": 401, " + 
                    " \"participants_max\": 65, " + 
                    " \"time_min\": 645, " + 
                    " \"source\": \"2NblfB3QspiD1y\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"62U_a_w_hyAfl\", " + 
                    " \"name\": \"L_17pSFBqC17Hi\", " + 
                    " \"capture_date\": \"1978-13-23T22:29:35\", " + 
                    " \"copy_right\": \"WvQYK2fvga7RC\" " + 
                    " }, " + 
                    " \"activities_count\": 320 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/648?attrs=_YYJOr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 6637690124232559618, " + 
                    " \"description_material\": \"-5\", " + 
                    " \"description_introduction\": \"OWNER_ID\", " + 
                    " \"description_prepare\": \"2W2pAXT37\", " + 
                    " \"description_safety\": \":GNBs0SuYMp\", " + 
                    " \"description_notes\": \"_EM_102515_XYZ_\", " + 
                    " \"age_min\": -751686388, " + 
                    " \"age_max\": -525123516, " + 
                    " \"participants_min\": 220548336, " + 
                    " \"participants_max\": 2147483647, " + 
                    " \"time_min\": -662863909, " + 
                    " \"time_max\": 2147387815, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"MQvnbOqTQXof\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 24576, " + 
                    " \"group\": \"gjU0_\u003eBtxFIggAFD\", " + 
                    " \"name\": \"_EM_104869_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 8192, " + 
                    " \"mime_type\": \"_EM_104200_XYZ\", " + 
                    " \"name\": \"_EM_104681_XYZ_\", " + 
                    " \"capture_date\": \"1953-08-13T-1:33:48\", " + 
                    " \"copy_right\": \"_EM_3U03_XYZ_\", " + 
                    " \"author\": \"_EM_104201_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 7151716208264289280 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -106497, " + 
                    " \"group\": \"_EM_105003_XYZ_\", " + 
                    " \"name\": \"RyDb\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -3177457238669836562, " + 
                    " \"mime_type\": \"wpeYJqH\", " + 
                    " \"uri\": \"OnVdpKhFw8P9\", " + 
                    " \"name\": \"U\", " + 
                    " \"capture_date\": \"2092-09-16T07:25:07\", " + 
                    " \"copy_right\": \"2WhktD2\", " + 
                    " \"author\": \"o\" " + 
                    " }, " + 
                    " \"activities_count\": 6341068275337578496 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -2305843009213679615, " + 
                    " \"group\": \"1ZVHfCTCRSL\", " + 
                    " \"name\": \"_EM_1/4203_XYZ\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -8063, " + 
                    " \"mime_type\": \"_EM_103664_XYZ_\", " + 
                    " \"uri\": \"pGY2rhbHE7A\", " + 
                    " \"name\": \"me3qbJPFCnUnaI\", " + 
                    " \"capture_date\": \"1916-06-08T00:33:37\", " + 
                    " \"copy_right\": \"rtJ2cX9yQQYtr4\", " + 
                    " \"author\": \"UY\" " + 
                    " }, " + 
                    " \"activities_count\": 6341068275337809936 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 234, " + 
                    " \"group\": \"mSw8ghs\", " + 
                    " \"activities_count\": 7 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -4064, " + 
                    " \"mime_type\": \"YsSS8\", " + 
                    " \"uri\": \"_EM_104451_XYZ_\", " + 
                    " \"name\": \"_EM_104452_XYZ_\", " + 
                    " \"capture_date\": \"2092-03-16T17:27:29\", " + 
                    " \"copy_right\": \"D_nm2YaSPWVeia\", " + 
                    " \"author\": \"1L29pQAR\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 176, " + 
                    " \"mime_type\": \"F060\", " + 
                    " \"uri\": \"X\u003dDguOaYxY\", " + 
                    " \"name\": \"Pj\", " + 
                    " \"capture_date\": \"1981-09-24T-1:29:15\", " + 
                    " \"copy_right\": \"TF\", " + 
                    " \"author\": \"_EM_104465_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 7133701809754865662, " + 
                    " \"name\": \"_EM_105474_XYZ_\", " + 
                    " \"email_address\": \"_EM_104997_XYZ_\", " + 
                    " \"authorization_level\": 268495618, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 4611686018427396160, " + 
                    " \"date_created\": \"1955-08-15T12:-1:19\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"i\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1280, " + 
                    " \"date_created\": \"2039-08-01T05:44:54\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_105064_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 131584, " + 
                    " \"date_created\": \"2068-10-05T11:13:05\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"gjoUv[]N4Y\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 51, " + 
                    " \"date_created\": \"1983-10-32T18:53:00\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"m7h[\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 24610, " + 
                    " \"ratings_average\": -8.988465674311579E307, " + 
                    " \"favourites_count\": 4611686018427388926, " + 
                    " \"ratings_sum\": 6917529027641325568, " + 
                    " \"ratings_count\": 0, " + 
                    " \"related\": [ " + 
                    " 2305843009213693952 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -3656922897424820224, " + 
                    " \"description_material\": \"-5\", " + 
                    " \"description_introduction\": \"OWNER_ID\", " + 
                    " \"description_prepare\": \"_EM_`03[25_V]ZU\", " + 
                    " \"description_safety\": \"_EM_105542_XYZ_\", " + 
                    " \"description_notes\": \"fBZhh\", " + 
                    " \"age_min\": -375845183, " + 
                    " \"age_max\": -393750322, " + 
                    " \"participants_min\": 403196681, " + 
                    " \"participants_max\": 1744534141, " + 
                    " \"time_min\": 742308987, " + 
                    " \"time_max\": 2147483647, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"a9iHKc8cUblT61\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -106496, " + 
                    " \"group\": \"_EM_105213_XYZ_\", " + 
                    " \"name\": \"_EM_304X80[XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 8192, " + 
                    " \"mime_type\": \"_EM_104200_XYZ\", " + 
                    " \"name\": \"_EM_104681_XYZ_\", " + 
                    " \"capture_date\": \"1953-08-13T-1:33:48\", " + 
                    " \"copy_right\": \"_EM_3U03_XYZ_\", " + 
                    " \"author\": \"_EM_104201_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 6341068275337578496 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 3458764513820523520, " + 
                    " \"group\": \"_EM_105543_XYZ_\", " + 
                    " \"name\": \"_EM_105347_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -3177457238669836562, " + 
                    " \"mime_type\": \"wpeYJqH\", " + 
                    " \"uri\": \"OnVdpKhFw8P9\", " + 
                    " \"name\": \"U\", " + 
                    " \"capture_date\": \"2092-09-16T07:25:07\", " + 
                    " \"copy_right\": \"_EM_101988_XYZ_\", " + 
                    " \"author\": \"q\" " + 
                    " }, " + 
                    " \"activities_count\": 6341068275337578496 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"_EM_105597_XYZ_\", " + 
                    " \"name\": \"_EM_1U4243_XYZn\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"_EM_103664_XYZ_\", " + 
                    " \"uri\": \"UGY2rhbHU7U\", " + 
                    " \"name\": \"leUhbFMFCUfnaI\", " + 
                    " \"capture_date\": \"2022-00-14T03:33:37\", " + 
                    " \"copy_right\": \"_EM_104325_XYZ_\", " + 
                    " \"author\": \"_EM_105544_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 7782220156096209920 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"_EM_105342_XYZ_\", " + 
                    " \"name\": \"aZE\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 338, " + 
                    " \"mime_type\": \"jiG6Rtiw\", " + 
                    " \"uri\": \"S8C8Vr0w6\", " + 
                    " \"name\": \"EwvOJDtrwcFLVFVU\", " + 
                    " \"copy_right\": \"TFvx826gpR1\", " + 
                    " \"author\": \"cbrJJp_xPBq\" " + 
                    " }, " + 
                    " \"activities_count\": -1024 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"YsSS8\", " + 
                    " \"uri\": \"_EM_104451_XYZ_\", " + 
                    " \"name\": \"_EM_104452_XYZ_\", " + 
                    " \"capture_date\": \"2092-03-16T17:27:29\", " + 
                    " \"copy_right\": \"D_nm2YaSPWVeia\", " + 
                    " \"author\": \"1L29pQAR\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 177, " + 
                    " \"mime_type\": \"HObgPZkmVP\", " + 
                    " \"uri\": \"_EM_105598_XYZ_\", " + 
                    " \"name\": \"gvduvR1Y7kWPr_gk\", " + 
                    " \"capture_date\": \"1981-09-24T-1:29:15\", " + 
                    " \"copy_right\": \"TF\", " + 
                    " \"author\": \"mw8\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 8214565720323788800, " + 
                    " \"name\": \"_EM_104682_XYZ_\", " + 
                    " \"email_address\": \"`EM_104453_XYZ\", " + 
                    " \"authorization_level\": 268495426, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 4611686018427396096, " + 
                    " \"date_created\": \"1955-08-15T12:30:11\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"ycIqFE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1280, " + 
                    " \"date_created\": \"2039-08-01T05:48:54\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_104454_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 131088, " + 
                    " \"date_created\": \"2068-10-05T11:13:05\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"gjoUv[]N4Y\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 43, " + 
                    " \"date_created\": \"1983-08-00T13:53:00\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_105417_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 24546, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.0, " + 
                    " \"favourites_count\": 4611686018427356160, " + 
                    " \"ratings_sum\": 2882303761517109184, " + 
                    " \"ratings_count\": 6052837899185946624, " + 
                    " \"related\": [ " + 
                    " 5764607523034214400, " + 
                    " 892 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -113789, " + 
                    " \"name\": \"2051-05-16 19:28:45\", " + 
                    " \"description_prepare\": \"KJ\", " + 
                    " \"description_main\": \"4801\", " + 
                    " \"description_safety\": \"S:ej_\", " + 
                    " \"description_notes\": \"_EM_112064_XYZ_\", " + 
                    " \"age_min\": -674876299, " + 
                    " \"age_max\": -1168509672, " + 
                    " \"participants_min\": -1701719417, " + 
                    " \"participants_max\": -1388690181, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": 1749056413, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_112067_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 2918332558536096768, " + 
                    " \"group\": \"TwXnOAB\", " + 
                    " \"name\": \"j\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 967, " + 
                    " \"mime_type\": \"s0w2gsUlPHKU7C\", " + 
                    " \"uri\": \"_EM_112052_XYZ_\", " + 
                    " \"name\": \"_EM_111591_XYZ_\", " + 
                    " \"capture_date\": \"2080-07-25T08:60:44\", " + 
                    " \"author\": \"RCCztI9MiQCpi\" " + 
                    " }, " + 
                    " \"activities_count\": -1221 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 3819052484010193408, " + 
                    " \"group\": \"_EM_111385_XYZ_\", " + 
                    " \"name\": \"go\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 507, " + 
                    " \"mime_type\": \"`EnHMf1034_VYZ__\", " + 
                    " \"uri\": \"_EM_112065_XYZ_\", " + 
                    " \"name\": \"_EM_111349_XYZ_\", " + 
                    " \"capture_date\": \"1958-13-12T12:32:47\", " + 
                    " \"copy_right\": \"_EM_112066_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 1837 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -6917529027641116672, " + 
                    " \"mime_type\": \"jtCU]UeZsk\", " + 
                    " \"uri\": \"https://:604/7WXwxFj\", " + 
                    " \"name\": \"._U0\", " + 
                    " \"capture_date\": \"1928-10-00T-1:25:26\", " + 
                    " \"copy_right\": \"7ISvyvbJdHRDB\", " + 
                    " \"author\": \"_EM_111120_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 5188146770730811385, " + 
                    " \"name\": \"_EM_111350_XYZ_\", " + 
                    " \"email_address\": \"XZxqdWqmeO\", " + 
                    " \"authorization_level\": 98720, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 3458764513820557312, " + 
                    " \"date_created\": \"1922-06-16T-1:29:29\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_110525_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": -29695, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 2836.3621099910642, " + 
                    " \"favourites_count\": -8761, " + 
                    " \"ratings_sum\": -131063, " + 
                    " \"ratings_count\": 4, " + 
                    " \"related\": [ " + 
                    " 3026418949593074176 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 524L)
            .and().insertInto("ACTIVITY", 525L)
            .and().insertInto("USERS", 712L)
                .d("AUTHORIZATION_LEVEL", "-16777216")
                .d("NAME", "\"_EM_17501_XYZ_\"")
            .and().insertInto("ACTIVITY", 711L)
            .and().insertInto("ACTIVITY_RATING", 710L)
                .r("ACTIVITY_ID", 525L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "17826167")
            .and().insertInto("USERS", 715L)
                .d("AUTHORIZATION_LEVEL", "566")
                .d("NAME", "\"ACTIVITY_ID\"")
            .and().insertInto("ACTIVITY", 714L)
            .and().insertInto("ACTIVITY_RATING", 713L)
                .r("ACTIVITY_ID", 524L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "-33262")
            .and().insertInto("USERS", 718L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_56864_XYZ_\"")
            .and().insertInto("ACTIVITY", 717L)
            .and().insertInto("ACTIVITY_RATING", 716L)
                .r("ACTIVITY_ID", 711L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "-64651")
            .and().insertInto("USERS", 721L)
                .d("AUTHORIZATION_LEVEL", "76")
                .d("NAME", "\"wYq\"")
            .and().insertInto("ACTIVITY", 720L)
            .and().insertInto("ACTIVITY_RATING", 719L)
                .r("ACTIVITY_ID", 525L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "208")
            .and().insertInto("USERS", 724L)
                .d("AUTHORIZATION_LEVEL", "130024015")
                .d("NAME", "\"_EM_26712_XYZ_\"")
            .and().insertInto("ACTIVITY", 723L)
            .and().insertInto("ACTIVITY_RATING", 722L)
                .r("ACTIVITY_ID", 525L)
                .r("USER_ID", 712L)
                .d("FAVOURITE", "false")
                .d("RATING", "16761310")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Mkgn_ah2Stj\", " + 
                    " \"description_material\": \"_EM_26706_XYZ_\", " + 
                    " \"description_introduction\": \"\", " + 
                    " \"description_prepare\": \"_EM_50512_XYZ_\", " + 
                    " \"description_main\": \"_EM_26708_XYZ_\", " + 
                    " \"description_safety\": \"A6NvLm\", " + 
                    " \"description_notes\": \"_EM_50513_XYZ_\", " + 
                    " \"age_min\": -532, " + 
                    " \"age_max\": -2147483646, " + 
                    " \"participants_min\": 386, " + 
                    " \"time_min\": -1073807030, " + 
                    " \"time_max\": 1140850694, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"7flC5Q8Z\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -3232574868187781042, " + 
                    " \"group\": \"PM2eAMc7JJRiyVRl\", " + 
                    " \"name\": \"OM5NE2DhbRytWe2\", " + 
                    " \"media_file\": { " + 
                    " \"copy_right\": \"WV\", " + 
                    " \"author\": \"44k\" " + 
                    " }, " + 
                    " \"activities_count\": 939 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 62, " + 
                    " \"name\": \"NSUAA3SD52\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"LGEQ_ZZj\", " + 
                    " \"capture_date\": \"1997-13-15T-1:29:44\", " + 
                    " \"copy_right\": \"RPDZUtl\", " + 
                    " \"author\": \"q_0BpwatoC5n\" " + 
                    " }, " + 
                    " \"activities_count\": 305 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"LS\", " + 
                    " \"name\": \"PbwPOLD\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 388, " + 
                    " \"uri\": \"8MVuR9AbC4\", " + 
                    " \"capture_date\": \"1969-13-01T19:57:15\", " + 
                    " \"author\": \"_1\" " + 
                    " }, " + 
                    " \"activities_count\": 159 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 854562574, " + 
                    " \"mime_type\": \"W0pmpBjITzw\", " + 
                    " \"uri\": \"x0ULoER\", " + 
                    " \"name\": \"HDZG\", " + 
                    " \"author\": \"8U2nfVbS10lnw4\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 370, " + 
                    " \"capture_date\": \"2038-12-21T00:54:55\", " + 
                    " \"copy_right\": \"G4QKJ0A\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 17, " + 
                    " \"name\": \"s\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"eVqn4EFzPA\", " + 
                    " \"email_address\": \"IrAVu4U\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2024-13-04T13:23:54\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"yt\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 904, " + 
                    " \"type\": \"API\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 41, " + 
                    " \"value\": \"NgdotsR\" " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_r\", " + 
                    " \"description_material\": \"_EM_1886_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_1887_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1888_XYZ_\", " + 
                    " \"description_main\": \"_EM_1889_XYZ_\", " + 
                    " \"description_safety\": \"_EM_20207_XYZ_\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"participants_min\": 4324999, " + 
                    " \"participants_max\": 1048711, " + 
                    " \"time_min\": 301989960, " + 
                    " \"time_max\": 802, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_1891_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"activities_count\": 478 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 428, " + 
                    " \"name\": \"_EM_1899_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 915, " + 
                    " \"copy_right\": \"_EM_1903_XYZ_\", " + 
                    " \"author\": \"_EM_1904_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 699 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_20208_XYZ_\", " + 
                    " \"name\": \"_EM_20209_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -3177457238669852946, " + 
                    " \"name\": \"_EM_1909_XYZ_\", " + 
                    " \"capture_date\": \"2037-09-03T11:25:11\", " + 
                    " \"author\": \"_EM_1911_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"id\": 424, " + 
                    " \"name\": \"_EM_1912_XYZ_\", " + 
                    " \"authorization_level\": 950 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 893, " + 
                    " \"ratings_average\": 0.28578821456570613, " + 
                    " \"favourites_count\": 250, " + 
                    " \"ratings_sum\": 816, " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 511, " + 
                    " \"description_prepare\": \"VP6j2hgF\", " + 
                    " \"participants_max\": 821, " + 
                    " \"time_max\": 207, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"beA54qi6SU0Pjp_\", " + 
                    " \"tags\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 463, " + 
                    " \"group\": \"_EM_6259_XYZ_\", " + 
                    " \"name\": \"_EM_6260_XYZ_\", " + 
                    " \"activities_count\": 337 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_6266_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 910, " + 
                    " \"copy_right\": \"_EM_6270_XYZ_\", " + 
                    " \"author\": \"_EM_6271_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 687 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_6272_XYZ_\", " + 
                    " \"name\": \"_EM_6273_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 214, " + 
                    " \"mime_type\": \"_EM_6274_XYZ_\", " + 
                    " \"uri\": \"IgOUEyNhcnI\", " + 
                    " \"name\": \"N3W6vz\", " + 
                    " \"copy_right\": \"_EM_6275_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_6277_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 3139479541196594306, " + 
                    " \"uri\": \"_EM_6280_XYZ_\", " + 
                    " \"copy_right\": \"_EM_6282_XYZ_\", " + 
                    " \"author\": \"_EM_6283_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 413, " + 
                    " \"uri\": \"_EM_6285_XYZ_\", " + 
                    " \"capture_date\": \"1953-11-16T19:03:52\", " + 
                    " \"copy_right\": \"IBAXrL\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 363, " + 
                    " \"mime_type\": \"_EM_6288_XYZ_\", " + 
                    " \"name\": \"_EM_6290_XYZ_\", " + 
                    " \"author\": \"_EM_6292_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3362_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_3324_XYZ_\", " + 
                    " \"description_material\": \"_EM_3325_XYZ_\", " + 
                    " \"description_introduction\": \"\", " + 
                    " \"description_safety\": \"QFe6Z_unywQA\", " + 
                    " \"age_min\": -612, " + 
                    " \"participants_min\": 1048848, " + 
                    " \"participants_max\": 594, " + 
                    " \"time_min\": 1049251, " + 
                    " \"time_max\": 184, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 676, " + 
                    " \"group\": \"_EM_3332_XYZ_\", " + 
                    " \"name\": \"_EM_3333_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_3334_XYZ_\", " + 
                    " \"name\": \"_EM_3336_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 526 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 747, " + 
                    " \"uri\": \"_EM_3346_XYZ_\", " + 
                    " \"name\": \"_EM_3347_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"aH8\", " + 
                    " \"capture_date\": \"2068-10-12T11:28:08\", " + 
                    " \"copy_right\": \"_EM_3353_XYZ_\", " + 
                    " \"author\": \"_EM_3354_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 844, " + 
                    " \"mime_type\": \"Fp\", " + 
                    " \"uri\": \"_EM_3355_XYZ_\", " + 
                    " \"name\": \"_EM_11959_XYZ_\", " + 
                    " \"author\": \"_EM_3356_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_3357_XYZ_\", " + 
                    " \"email_address\": \"_EM_11960_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 75, " + 
                    " \"date_created\": \"1962-10-18T13:26:11\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 439, " + 
                    " \"value\": \"_EM_3360_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 595, " + 
                    " \"value\": \"7gR6\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.35490764079494364, " + 
                    " \"favourites_count\": 92, " + 
                    " \"related\": [ " + 
                    " 65, " + 
                    " 167, " + 
                    " 807 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/71039155640376997?EMextraParam123=_EM_3361_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "attrs=id%2Cidentities&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/6?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 5, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 2, " + 
                    " 4 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/824")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_155_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/1834732148/rating?EMextraParam123=_EM_154_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"Don\u0027t care about the name\", " + 
                    " \"authorization_level\": 99, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"new user\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"A New Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:07\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"Introduction\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"location\", " + 
                    " \"name\": \"At home\", " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif - Duplicate which should not be persisted\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"G\", " + 
                    " \"name\": \"N\", " + 
                    " \"activities_count\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/profile-bob.gif\", " + 
                    " \"name\": \"Bob\u0027s Profile Picture\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/jpeg\", " + 
                    " \"uri\": \"http://example.com/profile-alice.jpg\", " + 
                    " \"name\": \"Alice\u0027s Profile Picture\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"An Updated Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"The Introduction Has Been Updated\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"A Patched Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 677, " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"date_published\": \"2098-06-25T08:24:16\", " + 
                    " \"description_safety\": \"_EM_75_XYZ_\", " + 
                    " \"age_min\": -2147483407, " + 
                    " \"age_max\": -173, " + 
                    " \"participants_min\": 258, " + 
                    " \"time_min\": 989, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_78_XYZ_\", " + 
                    " \"name\": \"_EM_79_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_81_XYZ_\", " + 
                    " \"name\": \"_EM_82_XYZ_\", " + 
                    " \"capture_date\": \"2088-00-24T15:41:07\", " + 
                    " \"copy_right\": \"_EM_83_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 501 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/677?EMextraParam123=_EM_100_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_257_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_265_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/553")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_447_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -831542187, " + 
                    " \"date_published\": \"1902-03-16T06:22:10\", " + 
                    " \"date_created\": \"2005-12-24T11:56:26\", " + 
                    " \"description_introduction\": \"_EM_419_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_420_XYZ_\", " + 
                    " \"description_main\": \"_EM_421_XYZ_\", " + 
                    " \"participants_min\": 394, " + 
                    " \"time_min\": -1071874970, " + 
                    " \"time_max\": 147, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 109, " + 
                    " \"group\": \"Z3RKFHLtD5yvu0ja\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 602, " + 
                    " \"uri\": \"_EM_432_XYZ_\", " + 
                    " \"capture_date\": \"2051-12-23T08:14:45\", " + 
                    " \"copy_right\": \"_EM_434_XYZ_\", " + 
                    " \"author\": \"_EM_435_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_437_XYZ_\", " + 
                    " \"author\": \"_EM_440_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 342, " + 
                    " \"related\": [ " + 
                    " 3, " + 
                    " 599 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/-831542187?EMextraParam123=_EM_446_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_456_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/211")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1729_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/518?attrs=_EM_1727_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1712_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/671?verify_unused=false")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1717_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/600?EMextraParam123=_EM_1716_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/1111714805")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/748")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1880_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_1879_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/887?EMextraParam123=_EM_2037_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2042_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/103")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/868")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1766_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/104?EMextraParam123=_EM_1765_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/528")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1706_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/951?EMextraParam123=_EM_1705_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/-3052475104907375679?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 197L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/0?EMextraParam123=_EM_8062_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1664L)
                .d("URI", "\"acfXRMyD0N\"")
            .and().insertInto("TAG", 1663L)
                .d("GRP", "\"_EM_16574_XYZ_\"")
                .d("NAME", "\"JYQz46\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1666L)
                .d("URI", "\"Jy3DD95aONmjv\"")
            .and().insertInto("TAG", 1665L)
                .d("GRP", "\"ycGv1f3dYScv\"")
                .d("NAME", "\"BvdRZ\"")
                .r("MEDIA_FILE_ID", 1666L)
            .and().insertInto("MEDIA_FILE", 1668L)
                .d("URI", "\"gF38UH8\"")
            .and().insertInto("TAG", 1667L)
                .d("GRP", "\"_EM_16575_XYZ_\"")
                .d("NAME", "\"\"")
                .r("MEDIA_FILE_ID", 1668L)
            .and().insertInto("MEDIA_FILE", 1670L)
                .d("URI", "\"_EM_16576_XYZ_\"")
            .and().insertInto("TAG", 1669L)
                .d("GRP", "\"nXX9mODg\"")
                .d("NAME", "\"BVW\"")
                .r("MEDIA_FILE_ID", 1666L)
            .and().insertInto("MEDIA_FILE", 1672L)
                .d("URI", "\"_EM_16577_XYZ_\"")
            .and().insertInto("TAG", 1671L)
                .d("GRP", "\"AP\"")
                .d("NAME", "\"goGs7678Dh76A5Gg\"")
                .r("MEDIA_FILE_ID", 1672L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/720?favourites=xOd")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1925_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1919_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1924_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 8650L)
                .d("URI", "\"9wJ8MP_7RB\"")
            .and().insertInto("TAG", 8649L)
                .d("GRP", "\"lkh\"")
                .d("NAME", "\"zUhfOOqlta\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8652L)
                .d("URI", "\"DS6SUPYvUq\"")
            .and().insertInto("TAG", 8651L)
                .d("GRP", "\"dRV2WDzAWVNITf\"")
                .d("NAME", "\"gv1hEs\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8654L)
                .d("URI", "\"pwr9TcRp\"")
            .and().insertInto("TAG", 8653L)
                .d("GRP", "\"7j27q8\"")
                .d("NAME", "\"FgcWPfhbCe\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8656L)
                .d("URI", "\"RrpmC8\"")
            .and().insertInto("TAG", 8655L)
                .d("GRP", "\"2S3fD\"")
                .d("NAME", "\"f3o\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 8658L)
                .d("URI", "\"PFptvjTtTAL8sQPM\"")
            .and().insertInto("TAG", 8657L)
                .d("GRP", "\"jA8XbA5c6mU\"")
                .d("NAME", "\"Ik\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1203167680, " + 
                    " \"value\": \"i_VQoM\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_5780_XYZ_\", " + 
                    " \"authorization_level\": 495 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/529")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2118_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 294, " + 
                    " \"activities_count\": 120 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/294?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 872, " + 
                    " \"uri\": \"o8aqPxHjubRL64\", " + 
                    " \"name\": \"JoohuJgsm0rk\", " + 
                    " \"copy_right\": \"bidQp4_r14Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2050_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 216, " + 
                    " \"group\": \"_EM_2043_XYZ_\", " + 
                    " \"name\": \"_EM_2044_XYZ_\", " + 
                    " \"activities_count\": 613 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/216")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1093L)
                .d("AUTHOR", "\"WxHzgLxSvcredA\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"AZ\"")
                .d("NAME", "\"_EM_13363_XYZ_\"")
                .d("URI", "\"_EM_83470_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1094L)
                .d("AUTHOR", "\"_EM_83471_XYZ_\"")
                .d("CAPTURE_DATE", "\"2057-12-29 17:08:14\"")
                .d("COPY_RIGHT", "\"4m4D7fNJrUAhVe\"")
                .d("MIME_TYPE", "\"_EM_83472_XYZ_\"")
                .d("NAME", "\"vFHoed\"")
                .d("URI", "\"_EM_13365_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1095L)
                .d("AUTHOR", "\"ExdLpucowotEA\"")
                .d("CAPTURE_DATE", "\"2009-12-26 12:35:58\"")
                .d("COPY_RIGHT", "\"CmBYphib74UAog\"")
                .d("MIME_TYPE", "\"aPgH\"")
                .d("NAME", "\"Kydu9\"")
                .d("URI", "\"fLh4srmW9V8rOeC\"")
            .and().insertInto("MEDIA_FILE", 1101L)
                .d("URI", "\"_EM_83473_XYZ_\"")
            .and().insertInto("USERS", 1100L)
                .d("AUTHORIZATION_LEVEL", "25")
                .d("NAME", "\"_EM_13367_XYZ_\"")
            .and().insertInto("ACTIVITY", 1099L)
            .and().insertInto("ACTIVITY", 1098L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1097L)
                .r("ACTIVITY_ID", 1098L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1096L)
                .r("ACTIVITY_PROPERTIES_ID", 1097L)
                .r("MEDIA_FILE_ID", 1101L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 1107L)
                .d("URI", "\"_EM_13368_XYZ_\"")
            .and().insertInto("USERS", 1106L)
                .d("AUTHORIZATION_LEVEL", "523")
                .d("NAME", "\"_EM_83474_XYZ_\"")
            .and().insertInto("ACTIVITY", 1105L)
            .and().insertInto("ACTIVITY", 1104L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1103L)
                .r("ACTIVITY_ID", 1098L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1102L)
                .r("ACTIVITY_PROPERTIES_ID", 1097L)
                .r("MEDIA_FILE_ID", 1094L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 1113L)
                .d("URI", "\"_EM_83475_XYZ_\"")
            .and().insertInto("USERS", 1112L)
                .d("AUTHORIZATION_LEVEL", "884")
                .d("NAME", "\"_EM_13369_XYZ_\"")
            .and().insertInto("ACTIVITY", 1111L)
            .and().insertInto("ACTIVITY", 1110L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1109L)
                .r("ACTIVITY_ID", 1105L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1108L)
                .r("ACTIVITY_PROPERTIES_ID", 1109L)
                .r("MEDIA_FILE_ID", 1113L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 1119L)
                .d("URI", "\"WU\"")
            .and().insertInto("USERS", 1118L)
                .d("AUTHORIZATION_LEVEL", "1604535829")
                .d("NAME", "\"_EM_83476_XYZ_\"")
            .and().insertInto("ACTIVITY", 1117L)
            .and().insertInto("ACTIVITY", 1116L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1115L)
                .r("ACTIVITY_ID", 1099L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1114L)
                .r("ACTIVITY_PROPERTIES_ID", 1109L)
                .r("MEDIA_FILE_ID", 1093L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 1125L)
                .d("URI", "\"_EM_13370_XYZ_\"")
            .and().insertInto("USERS", 1124L)
                .d("AUTHORIZATION_LEVEL", "443")
                .d("NAME", "\"c\"")
            .and().insertInto("ACTIVITY", 1123L)
            .and().insertInto("ACTIVITY", 1122L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1121L)
                .r("ACTIVITY_ID", 1122L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1120L)
                .r("ACTIVITY_PROPERTIES_ID", 1115L)
                .r("MEDIA_FILE_ID", 1093L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 17851L)
                .d("AUTHORIZATION_LEVEL", "242")
                .d("NAME", "\"_EM_83477_XYZ_\"")
            .and().insertInto("USER_IDENTITY", 17850L)
                .d("DATE_CREATED", "NULL")
                .d("TYPE", "\"API\"")
                .d("VALUE", "\"N_P4vm3AOXHV\"")
                .d("USER_ID", "NULL")
            .and().insertInto("USERS", 17853L)
                .d("AUTHORIZATION_LEVEL", "620")
                .d("NAME", "\"e1ZlWF0cVAyh\"")
            .and().insertInto("USER_IDENTITY", 17852L)
                .d("DATE_CREATED", "\"2054-01-01 13:47:06\"")
                .d("TYPE", "\"API\"")
                .d("VALUE", "\"X73P5\"")
                .r("USER_ID", 1100L)
            .and().insertInto("USERS", 17855L)
                .d("AUTHORIZATION_LEVEL", "348")
                .d("NAME", "\"_EM_83478_XYZ_\"")
            .and().insertInto("USER_IDENTITY", 17854L)
                .d("DATE_CREATED", "\"1912-07-11 10:52:06\"")
                .d("TYPE", "\"API\"")
                .d("VALUE", "\"KQidkP\"")
                .r("USER_ID", 1112L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"3yWrC96_muHZSo\", " + 
                    " \"email_address\": \"\", " + 
                    " \"authorization_level\": 594, " + 
                    " \"identities\": [ " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
