import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-01T21:19:15.247+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 543
 * <br>
 * Used time: 2h 0m 12s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/5866408168840275873?attrs=_EM_1716_XYZ_")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/UserDao_30_readUserByIdentity
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/895/rating")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityRating$Key_90_<init>
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3010L)
                .d("AUTHOR", "\"_EM_19898_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"_EM_59035_XYZ_\"")
                .d("MIME_TYPE", "\"ENN4Kaa\"")
                .d("NAME", "\"_QLgyc38QdFkgal\"")
                .d("URI", "\"UUKBUzuN\"")
            .and().insertInto("MEDIA_FILE", 3011L)
                .d("AUTHOR", "\"SK6\"")
                .d("CAPTURE_DATE", "\"1963-11-01 18:21:07\"")
                .d("COPY_RIGHT", "\"_EM_19899_XYZ_\"")
                .d("MIME_TYPE", "\"0D0no8KmTCEJ3U\"")
                .d("NAME", "\"_EM_59071_XYZ_\"")
                .d("URI", "\"z\"")
            .and().insertInto("MEDIA_FILE", 3012L)
                .d("AUTHOR", "\"_EM_59036_XYZ_\"")
                .d("CAPTURE_DATE", "\"1953-11-09 06:35:14\"")
                .d("COPY_RIGHT", "\"\"")
                .d("MIME_TYPE", "\"_EM_59037_XYZ_\"")
                .d("NAME", "\"_EM_59072_XYZ_\"")
                .d("URI", "\"9280606\"")
            .and().insertInto("MEDIA_FILE", 3013L)
                .d("AUTHOR", "\"_EM_59073_XYZ_\"")
                .d("CAPTURE_DATE", "\"2013-07-06 06:53:19\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"743w4uvnc\"")
                .d("NAME", "\"_EM_59038_XYZ_\"")
                .d("URI", "\"8949066\"")
            .and().insertInto("MEDIA_FILE", 3014L)
                .d("AUTHOR", "\"_EM_19903_XYZ_\"")
                .d("CAPTURE_DATE", "\"2000-03-16 10:29:20\"")
                .d("COPY_RIGHT", "\"DpMVzM\"")
                .d("MIME_TYPE", "\"_EM_59039_XYZ_\"")
                .d("NAME", "\"_EM_19904_XYZ_\"")
                .d("URI", "\"gOOiivHYado6O\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1048248, " + 
                    " \"mime_type\": \"_EM_11992_XYZ_\", " + 
                    " \"uri\": \"data:;base64,ODg2RUxFNXo\u003d\", " + 
                    " \"name\": \"PUBLIC\", " + 
                    " \"copy_right\": \"8913292\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_135_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("HTTP 500 Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 64226L)
                .d("URI", "\"ixRuU\"")
            .and().insertInto("TAG", 64225L)
                .d("GRP", "\"m\"")
                .d("NAME", "\"xke7wY\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 64228L)
                .d("URI", "\"1J\"")
            .and().insertInto("TAG", 64227L)
                .d("GRP", "\"PhjGyEIgHovz9x2\"")
                .d("NAME", "\"_ZqgcO2Wr\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 64230L)
                .d("URI", "\"XM\"")
            .and().insertInto("TAG", 64229L)
                .d("GRP", "\"pZTVgrnr\"")
                .d("NAME", "\"CMtCv8tbE3Re45\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 64232L)
                .d("URI", "\"8FXZqdi\"")
            .and().insertInto("TAG", 64231L)
                .d("GRP", "\"TGvuyuwQ2D\"")
                .d("NAME", "\"wB7F1\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 64234L)
                .d("URI", "\"4O1N\"")
            .and().insertInto("TAG", 64233L)
                .d("GRP", "\"4DvpCM3Z\"")
                .d("NAME", "\"tGN02OTlOLg_o\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 798, " + 
                    " \"description_material\": \"7BhjAj\", " + 
                    " \"description_introduction\": \"Wp0\", " + 
                    " \"description_safety\": \"fB9_2O3\", " + 
                    " \"description_notes\": \"R\", " + 
                    " \"participants_min\": 649, " + 
                    " \"participants_max\": 319, " + 
                    " \"time_min\": 202, " + 
                    " \"time_max\": 530, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"\", " + 
                    " \"name\": \"L_9\", " + 
                    " \"activities_count\": 53 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"Z\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 4019754916819010958, " + 
                    " \"mime_type\": \"y31Q2MzyZ8deY1z\", " + 
                    " \"uri\": \"yaus\", " + 
                    " \"name\": \"aTcDzVBM7b\", " + 
                    " \"author\": \"KfwE\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"activities_count\": 99 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"7iidSRd0YwwjfY3\", " + 
                    " \"copy_right\": \"28u\", " + 
                    " \"author\": \"pGm11CothOF1d\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"j7L\", " + 
                    " \"uri\": \"s9vFwpqjJwW\", " + 
                    " \"copy_right\": \"yZXXh\", " + 
                    " \"author\": \"Ei11pc7ZIIN_Dh\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"OGStGjyihzrF0yp\", " + 
                    " \"authorization_level\": 485, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"ratings_sum\": 973, " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/TagDao_64_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
