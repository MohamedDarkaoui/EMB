import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-06-01T21:19:15.228+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 61 tests
 * <br>
 * Covered targets: 822
 * <br>
 * Used time: 2h 0m 12s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1767L)
            .and().insertInto("ACTIVITY", 1768L)
            .and().insertInto("ACTIVITY", 1769L)
            .and().insertInto("ACTIVITY", 1770L)
            .and().insertInto("USERS", 38898L)
                .d("AUTHORIZATION_LEVEL", "119")
                .d("NAME", "\"5oLVTCzOoASb26\"")
            .and().insertInto("ACTIVITY", 38897L)
            .and().insertInto("ACTIVITY_RATING", 38896L)
                .r("ACTIVITY_ID", 1769L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 38901L)
                .d("AUTHORIZATION_LEVEL", "66284")
                .d("NAME", "\"7bZ\"")
            .and().insertInto("ACTIVITY", 38900L)
            .and().insertInto("ACTIVITY_RATING", 38899L)
                .r("ACTIVITY_ID", 1767L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "175")
            .and().insertInto("USERS", 38904L)
                .d("AUTHORIZATION_LEVEL", "795")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 38903L)
            .and().insertInto("ACTIVITY_RATING", 38902L)
                .r("ACTIVITY_ID", 38903L)
                .r("USER_ID", 38898L)
                .d("FAVOURITE", "true")
                .d("RATING", "0")
            .and().insertInto("MEDIA_FILE", 39009L)
                .d("AUTHOR", "\"U8pGisntCH3kEUY\"")
                .d("CAPTURE_DATE", "\"1922-01-31 05:42:03\"")
                .d("COPY_RIGHT", "\"ZN7d39ndfsoKf\"")
                .d("MIME_TYPE", "\"3Pl\"")
                .d("NAME", "\"g\"")
                .d("URI", "\"_dltu8DiV\"")
            .and().insertInto("MEDIA_FILE", 39010L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"aOzlrf\"")
                .d("URI", "\"bdia\"")
            .and().insertInto("MEDIA_FILE", 39011L)
                .d("AUTHOR", "\"4DYARmfhY4DyV\"")
                .d("CAPTURE_DATE", "\"2028-03-06 18:54:25\"")
                .d("COPY_RIGHT", "\"q0QP5D1\"")
                .d("MIME_TYPE", "\"4YBp\"")
                .d("NAME", "\"UwywDM[r\"")
                .d("URI", "\"_EM_124312_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 39012L)
                .d("AUTHOR", "\"a\"")
                .d("CAPTURE_DATE", "\"1989-06-05 11:07:23\"")
                .d("COPY_RIGHT", "\"UAE\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"bwkVGu\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_activities = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"d4t5Uhl2X\", " + 
                    " \"description_prepare\": \"uLrolfy_T7Vxr1T6\", " + 
                    " \"description_notes\": \"vLXzgF\", " + 
                    " \"age_max\": -2147483267, " + 
                    " \"participants_min\": 1097686598, " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'name'", containsString("d4t5Uhl2X"))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-06-01T21:19:03.871Z"))
                .body("'properties_revisions'[0].'description_prepare'", containsString("uLrolfy_T7Vxr1T6"))
                .body("'properties_revisions'[0].'description_notes'", containsString("vLXzgF"))
                .body("'properties_revisions'[0].'age_max'", numberMatches(-2.147483267E9))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(1.097686598E9))
                .body("'properties_revisions'[0].'tags'.size()", equalTo(0))
                .body("'properties_revisions'[0].'media_files'.size()", equalTo(0))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'properties'.'name'", containsString("d4t5Uhl2X"))
                .body("'properties'.'date_created'", containsString("2024-06-01T21:19:03.871Z"))
                .body("'properties'.'description_prepare'", containsString("uLrolfy_T7Vxr1T6"))
                .body("'properties'.'description_notes'", containsString("vLXzgF"))
                .body("'properties'.'age_max'", numberMatches(-2.147483267E9))
                .body("'properties'.'participants_min'", numberMatches(1.097686598E9))
                .body("'properties'.'tags'.size()", equalTo(0))
                .body("'properties'.'media_files'.size()", equalTo(0));
        location_activities = "/api/v2/activities" + "/" + res_1.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": -1388038375, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(resolveLocation(location_activities, baseUrlOfSut + "/api/v2/activities/-845875969041090791/rating"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_activities, baseUrlOfSut + "/api/v2/activities/-845875969041090791/rating?min_activities_count=b%5BmkRt9fv&attrs=lP4k03iSW_&group=R_pKlEL"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files/259?" + 
                    "my_favourites=wfmMb&" + 
                    "random=xQJhicuJ&" + 
                    "name=KNP29Z9J7Yj9qh&" + 
                    "ages=1LL6OnS&" + 
                    "categories=dvip42&" + 
                    "id=wz&" + 
                    "min_activities_count=TNRPz5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_8272_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 194L)
                .d("URI", "\"UtybmH6l\"")
            .and().insertInto("TAG", 193L)
                .d("GRP", "\"k9dHnJ\"")
                .d("NAME", "\"ren2PTGLFEVun\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 196L)
                .d("URI", "\"Em4qYhvp\"")
            .and().insertInto("TAG", 195L)
                .d("GRP", "\"nlt4BrjhX5\"")
                .d("NAME", "\"hOn4dWc0tdc\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 198L)
                .d("URI", "\"Jm\"")
            .and().insertInto("TAG", 197L)
                .d("GRP", "\"JWJPqni\"")
                .d("NAME", "\"KYIxnbMr4\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 200L)
                .d("URI", "\"1PFPjBSoJeZ290Y\"")
            .and().insertInto("TAG", 199L)
                .d("GRP", "\"10G8QsVfj\"")
                .d("NAME", "\"r\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 202L)
                .d("URI", "\"HdAh15KWo\"")
            .and().insertInto("TAG", 201L)
                .d("GRP", "\"Fb3pSwQwjXG_5H\"")
                .d("NAME", "\"LOu3iTDALAHjjr6a\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=oU2o3&" + 
                    "name=Z&" + 
                    "text=VG2VI69GH2&" + 
                    "featured=true&" + 
                    "categories=iBlEP64O5u0MC9E6&" + 
                    "age_1=Krrvz_GM5bM9Pm38&" + 
                    "participants=a45orcj&" + 
                    "time_2=4gtqW_Pjg&" + 
                    "ratings_average_min=0.3404955000921175&" + 
                    "random=819&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_44968_XYZ_")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_x8B&" + 
                    "name=XB9vDb13yI&" + 
                    "text=aF3EEV5bTQ4K&" + 
                    "featured=false&" + 
                    "categories=18&" + 
                    "age_1=_EM_44961_XYZ_&" + 
                    "id=_EM_44966_XYZ_&" + 
                    "ratings_count_min=892&" + 
                    "ratings_average_min=0.5412971028447023&" + 
                    "favourites=445&" + 
                    "EMextraParam123=_EM_44967_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "text=_EM_1615_XYZ_&" + 
                    "featured=false&" + 
                    "time_1=_EM_1620_XYZ_&" + 
                    "random=944&" + 
                    "favourites=845726406")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=nquqnz6&" + 
                    "text=R40&" + 
                    "featured=false&" + 
                    "participants=7&" + 
                    "id=ADqYAJPkkvn&" + 
                    "favourites=11&" + 
                    "min_activities_count=wgcZFXV8vAHiQ8LU&" + 
                    "group=OUE_j&" + 
                    "uri=2mth9dUdxZ8PLtlm&" + 
                    "time_1=xPz2d7&" + 
                    "age_2=kCu&" + 
                    "age_1=K8vQVWxWXABo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 729L)
            .and().insertInto("ACTIVITY", 730L)
            .and().insertInto("ACTIVITY", 731L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5029_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_updated\": \"1904-13-30T24:49:12\", " + 
                    " \"description_main\": \"_EM_4993_XYZ_\", " + 
                    " \"description_notes\": \"Ps4kBWt\", " + 
                    " \"age_max\": -2147483036, " + 
                    " \"participants_min\": 821, " + 
                    " \"source\": \"_EM_4995_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 119, " + 
                    " \"mime_type\": \"_EM_5002_XYZ_\", " + 
                    " \"copy_right\": \"8xKE\", " + 
                    " \"author\": \"_EM_5005_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 256, " + 
                    " \"uri\": \"_EM_5007_XYZ_\", " + 
                    " \"capture_date\": \"1907-00-22T24:59:39\", " + 
                    " \"copy_right\": \"_EM_5009_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_5011_XYZ_\", " + 
                    " \"name\": \"tlJzBC1Jt5z\", " + 
                    " \"copy_right\": \"_EM_5013_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_5016_XYZ_\", " + 
                    " \"name\": \"_EM_5017_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_5020_XYZ_\", " + 
                    " \"uri\": \"_EM_5021_XYZ_\", " + 
                    " \"capture_date\": \"1917-03-28T04:08:48\", " + 
                    " \"copy_right\": \"_EM_5023_XYZ_\", " + 
                    " \"author\": \"yv6R\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_5024_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 726, " + 
                    " \"properties_revisions\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/269?EMextraParam123=_EM_5028_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1857_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_1854_XYZ_\", " + 
                    " \"value\": \"_EM_1855_XYZ_\", " + 
                    " \"valid_to\": \"2078-06-10T18:39:21\", " + 
                    " \"valid_from\": \"1955-05-25T16:09:60\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5313_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -134470855, " + 
                    " \"name\": \"_EM_5308_XYZ_\", " + 
                    " \"authorization_level\": 462, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2096-05-22T15:37:06\", " + 
                    " \"value\": \"_EM_5310_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2008-10-05T19:07:-1\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_5311_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/-134470855?EMextraParam123=_EM_5312_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 718, " + 
                    " \"uri\": \"Ar2SXOZ\", " + 
                    " \"capture_date\": \"2040-10-13T22:06:07\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1271L)
                .d("AUTHOR", "\"_EM_12503_XYZ_\"")
                .d("CAPTURE_DATE", "\"2047-10-09 10:34:47\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"_EM_12506_XYZ_\"")
                .d("URI", "\"_EM_12507_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 623, " + 
                    " \"mime_type\": \"_EM_12508_XYZ_\", " + 
                    " \"uri\": \"_EM_12509_XYZ_\", " + 
                    " \"name\": \"_EM_12510_XYZ_\", " + 
                    " \"capture_date\": \"1937-10-08T20:36:10\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/1271?EMextraParam123=_EM_12513_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_13841_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_13835_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_13837_XYZ_\", " + 
                    " \"name\": \"_EM_13838_XYZ_\", " + 
                    " \"capture_date\": \"1994-03-31T05:46:60\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_13840_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1013L)
                .d("URI", "\"_EM_11581_XYZ_\"")
            .and().insertInto("TAG", 1012L)
                .d("GRP", "\"_EM_11582_XYZ_\"")
                .d("NAME", "\"_EM_11583_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 872, " + 
                    " \"group\": \"_EM_11584_XYZ_\", " + 
                    " \"name\": \"_EM_11585_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_11587_XYZ_\", " + 
                    " \"name\": \"_EM_11588_XYZ_\", " + 
                    " \"capture_date\": \"1940-02-27T18:29:13\", " + 
                    " \"author\": \"_EM_11590_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/1012")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1570L)
                .d("URI", "\"LpHx9Ub9Td6FAk\"")
            .and().insertInto("TAG", 1569L)
                .d("GRP", "\"_EM_13982_XYZ_\"")
                .d("NAME", "\"7_vkPEa\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1572L)
                .d("URI", "\"_EM_13983_XYZ_\"")
            .and().insertInto("TAG", 1571L)
                .d("GRP", "\"\"")
                .d("NAME", "\"_EM_13984_XYZ_\"")
                .r("MEDIA_FILE_ID", 1570L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1551806506, " + 
                    " \"group\": \"YacZP0DwAqU\", " + 
                    " \"name\": \"_EM_13981_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 429, " + 
                    " \"mime_type\": \"_EM_9199_XYZ_\", " + 
                    " \"uri\": \"_EM_9200_XYZ_\", " + 
                    " \"capture_date\": \"2044-12-05T02:57:01\" " + 
                    " }, " + 
                    " \"activities_count\": 796 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/-1551814698")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 12527L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 629, " + 
                    " \"description_material\": \"_EM_58551_XYZ_\", " + 
                    " \"description_main\": \"_EM_58554_XYZ_\", " + 
                    " \"age_min\": -2147483571, " + 
                    " \"participants_min\": 394, " + 
                    " \"time_min\": 174, " + 
                    " \"time_max\": 675, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_58557_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 718, " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_58560_XYZ_\", " + 
                    " \"uri\": \"_EM_58561_XYZ_\", " + 
                    " \"name\": \"\", " + 
                    " \"capture_date\": \"2034-01-15T12:53:54\", " + 
                    " \"copy_right\": \"_EM_58562_XYZ_\", " + 
                    " \"author\": \"_EM_58563_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"jJkvJ37vwdvL\", " + 
                    " \"activities_count\": 171 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -7365123019432105642, " + 
                    " \"email_address\": \"x0Bemz_oWY\", " + 
                    " \"authorization_level\": -480888329, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2028-10-23T15:16:09\", " + 
                    " \"value\": \"_EM_58585_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2081-09-28T25:03:17\", " + 
                    " \"value\": \"_EM_58586_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_58587_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 33 " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"7tPzp7PtGAzapZ\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 811, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 343, " + 
                    " \"favourites_count\": 864, " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/12527")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 6, " + 
                    " \"description_material\": \"_EM_74616_XYZ_\", " + 
                    " \"description_safety\": \"_EM_74616_XYZ_\", " + 
                    " \"description_notes\": \"_EM_74616_XYZ_\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -2147483648, " + 
                    " \"participants_max\": -2096330, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": -112, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_63435_XYZ_\", " + 
                    " \"name\": \"oSjtarNcl9eMD\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_63436_XYZ_\", " + 
                    " \"copy_right\": \"_EM_63438_XYZ_\", " + 
                    " \"author\": \"_EM_63439_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 506, " + 
                    " \"name\": \"_EM_63441_XYZ_\", " + 
                    " \"activities_count\": 845 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_63446_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"capture_date\": \"1939-11-14T21:05:16\", " + 
                    " \"copy_right\": \"_EM_63450_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 633, " + 
                    " \"group\": \"_EM_63452_XYZ_\", " + 
                    " \"name\": \"_EM_63453_XYZ_\", " + 
                    " \"activities_count\": 206 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 7279558106455819002, " + 
                    " \"uri\": \"_EM_63459_XYZ_\", " + 
                    " \"name\": \"_EM_63460_XYZ_\", " + 
                    " \"author\": \"_EM_63462_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5271431082128122571, " + 
                    " \"uri\": \"_EM_63464_XYZ_\", " + 
                    " \"name\": \"_EM_63465_XYZ_\", " + 
                    " \"capture_date\": \"2092-03-29T19:12:42\", " + 
                    " \"copy_right\": \"_EM_63466_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 938, " + 
                    " \"uri\": \"_EM_63468_XYZ_\", " + 
                    " \"capture_date\": \"2081-13-26T21:31:45\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_63473_XYZ_\", " + 
                    " \"name\": \"2mO9\", " + 
                    " \"copy_right\": \"j6izK9aYVCa\", " + 
                    " \"author\": \"_EM_63474_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_63475_XYZ_\", " + 
                    " \"uri\": \"_EM_63476_XYZ_\", " + 
                    " \"copy_right\": \"x5AA\", " + 
                    " \"author\": \"1niiG1n1bvBW\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -1671149889, " + 
                    " \"name\": \"tmfId\", " + 
                    " \"email_address\": \"Ia5dkY\", " + 
                    " \"authorization_level\": 5016, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"API\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 870, " + 
                    " \"date_created\": \"2012-06-05T04:19:24\", " + 
                    " \"value\": \"_EM_63479_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2055-04-14T17:45:13\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_63480_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 188, " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_63481_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 26, " + 
                    " \"ratings_count\": 972, " + 
                    " \"ratings_average\": 0.5115020351990863, " + 
                    " \"favourites_count\": 848, " + 
                    " \"related\": [ " + 
                    " 8645096681191223474, " + 
                    " 545 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 219, " + 
                    " \"description_material\": \"_EM_25530_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_25531_XYZ_\", " + 
                    " \"description_main\": \"_EM_25533_XYZ_\", " + 
                    " \"description_safety\": \"_EM_25534_XYZ_\", " + 
                    " \"description_notes\": \"_EM_25535_XYZ_\", " + 
                    " \"age_min\": -23, " + 
                    " \"age_max\": -131, " + 
                    " \"time_min\": 334, " + 
                    " \"time_max\": 575, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 839, " + 
                    " \"uri\": \"_EM_25537_XYZ_\", " + 
                    " \"name\": \"_EM_25538_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_25540_XYZ_\", " + 
                    " \"uri\": \"_EM_25541_XYZ_\", " + 
                    " \"name\": \"_EM_25542_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -7801914081999983975, " + 
                    " \"authorization_level\": 465, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 431, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_25546_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1903-02-08T12:49:12\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_25547_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": -7343883086822397002, " + 
                    " \"ratings_sum\": 792, " + 
                    " \"favourites_count\": 918, " + 
                    " \"related\": [ " + 
                    " 949, " + 
                    " 87, " + 
                    " -329927891, " + 
                    " 4778702788532661151 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/219?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 6629L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_37016_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 665, " + 
                    " \"name\": \"_EM_36963_XYZ_\", " + 
                    " \"description_material\": \"_EM_36964_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_36965_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_36966_XYZ_\", " + 
                    " \"description_main\": \"sNiE\", " + 
                    " \"description_safety\": \"_EM_36968_XYZ_\", " + 
                    " \"description_notes\": \"_EM_36969_XYZ_\", " + 
                    " \"age_max\": -412, " + 
                    " \"participants_min\": 120, " + 
                    " \"participants_max\": 883, " + 
                    " \"time_min\": 79, " + 
                    " \"time_max\": 389, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_36971_XYZ_\", " + 
                    " \"name\": \"_EM_36972_XYZ_\", " + 
                    " \"activities_count\": 876 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_36979_XYZ_\", " + 
                    " \"activities_count\": 349 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 186, " + 
                    " \"group\": \"_EM_36985_XYZ_\", " + 
                    " \"name\": \"_EM_36986_XYZ_\", " + 
                    " \"activities_count\": 962 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"name\": \"RXOhq\", " + 
                    " \"author\": \"_EM_36993_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1285, " + 
                    " \"uri\": \"FIXG2^Qz\", " + 
                    " \"name\": \"_EM_36996_XYZ_\", " + 
                    " \"capture_date\": \"2043-01-28T23:18:58\", " + 
                    " \"copy_right\": \"xhFk2\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 246, " + 
                    " \"uri\": \"_EM_39975_XYZ_\", " + 
                    " \"name\": \"_EM_37000_XYZ_\", " + 
                    " \"capture_date\": \"2033-03-03T13:33:37\", " + 
                    " \"copy_right\": \"_EM_37001_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_37003_XYZ_\", " + 
                    " \"copy_right\": \"_EM_37005_XYZ_\", " + 
                    " \"author\": \"_EM_37006_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 507132300, " + 
                    " \"mime_type\": \"_EM_37007_XYZ_\", " + 
                    " \"uri\": \"_EM_37008_XYZ_\", " + 
                    " \"copy_right\": \"_EM_37009_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 2137043580, " + 
                    " \"email_address\": \"_EM_37011_XYZ_\", " + 
                    " \"authorization_level\": 347, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 151, " + 
                    " \"date_created\": \"1946-05-01T11:47:41\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 614439747, " + 
                    " \"value\": \"_EM_37013_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 572, " + 
                    " \"date_created\": \"2090-12-32T16:52:36\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"ratings_sum\": 264, " + 
                    " \"ratings_average\": 0.07011452276138219 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/6629")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_6495_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_6496_XYZ_\", " + 
                    " \"description_main\": \"_EM_6497_XYZ_\", " + 
                    " \"description_notes\": \"_EM_6499_XYZ_\", " + 
                    " \"age_min\": 165652258, " + 
                    " \"participants_min\": 254, " + 
                    " \"participants_max\": 348, " + 
                    " \"time_max\": 376, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_6500_XYZ_\", " + 
                    " \"activity\": { " + 
                    " \"id\": 560, " + 
                    " \"favourites_count\": -7192676986062669318, " + 
                    " \"related\": [ " + 
                    " -129978373, " + 
                    " 558 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"epn_UCm1yjOkib0L\", " + 
                    " \"description_main\": \"epn_UCm1yjOkib0L\", " + 
                    " \"description_safety\": \"epn_UCm1yjOkib0L\", " + 
                    " \"description_notes\": \"epn_UCm1yjOkib0L\", " + 
                    " \"age_max\": 33728, " + 
                    " \"participants_min\": 1912117747, " + 
                    " \"time_min\": 33728, " + 
                    " \"time_max\": -2147483340, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"SeWsUz\", " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"authorization_level\": 185 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"favourites_count\": -6302184460865179679 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_265_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_264_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_63_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/-219469854")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/155/rating?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_60_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/tags/328")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_65_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/161?EMextraParam123=_EM_64_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/-28244615?EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/824")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "name=_EM_126_XYZ_&" + 
                    "attrs=_EM_127_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/activities/7930981806517445393/rating?EMextraParam123=_EM_148_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/1834732148/rating?EMextraParam123=_EM_150_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_147_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/8496153099816730973")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_66_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 677, " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"date_published\": \"2098-06-25T08:24:16\", " + 
                    " \"description_safety\": \"_EM_75_XYZ_\", " + 
                    " \"age_min\": -2147483407, " + 
                    " \"age_max\": -173, " + 
                    " \"participants_min\": 258, " + 
                    " \"time_min\": 989, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_77_XYZ_\", " + 
                    " \"name\": \"_EM_78_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_80_XYZ_\", " + 
                    " \"name\": \"_EM_81_XYZ_\", " + 
                    " \"capture_date\": \"2088-00-24T15:41:07\", " + 
                    " \"copy_right\": \"_EM_82_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 501 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/677?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 2478237951562178561 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_152_XYZ_\", " + 
                    " \"date_updated\": \"1916-06-24T24:27:40\", " + 
                    " \"description_material\": \"_EM_153_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_154_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_155_XYZ_\", " + 
                    " \"description_safety\": \"_EM_156_XYZ_\", " + 
                    " \"description_notes\": \"_EM_157_XYZ_\", " + 
                    " \"age_max\": -2147483625, " + 
                    " \"participants_min\": 556, " + 
                    " \"participants_max\": 943, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 402, " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_161_XYZ_\", " + 
                    " \"capture_date\": \"1906-00-12T17:05:55\", " + 
                    " \"copy_right\": \"_EM_164_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 314 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 5890452084601090775, " + 
                    " \"name\": \"_EM_167_XYZ_\", " + 
                    " \"activities_count\": 753 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_173_XYZ_\", " + 
                    " \"name\": \"1uRDFXAcE_lRQV\", " + 
                    " \"activities_count\": 1902492497039948271 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_178_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 631, " + 
                    " \"mime_type\": \"_EM_179_XYZ_\", " + 
                    " \"author\": \"_EM_183_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"name\": \"_EM_186_XYZ_\", " + 
                    " \"capture_date\": \"1906-12-18T15:02:41\", " + 
                    " \"copy_right\": \"_EM_187_XYZ_\", " + 
                    " \"author\": \"_EM_188_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 9118749280833600193, " + 
                    " \"copy_right\": \"_EM_190_XYZ_\", " + 
                    " \"author\": \"_EM_191_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 562, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 606, " + 
                    " \"related\": [ " + 
                    " 38 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=_EM_194_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_202_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 11, " + 
                    " \"name\": \"_EM_198_XYZ_\", " + 
                    " \"capture_date\": \"1957-10-00T07:30:23\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_201_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"Vl9iZQUrlXLlB\", " + 
                    " \"valid_to\": \"1933-09-10T14:32:02\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_213_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_207_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 909, " + 
                    " \"name\": \"_EM_210_XYZ_\", " + 
                    " \"capture_date\": \"1997-00-27T17:59:49\", " + 
                    " \"copy_right\": \"_EM_211_XYZ_\", " + 
                    " \"author\": \"vpCpw2Enc\" " + 
                    " }, " + 
                    " \"activities_count\": 290 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_212_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_217_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_255_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 964, " + 
                    " \"name\": \"_EM_218_XYZ_\", " + 
                    " \"date_published\": \"1938-08-00T09:26:43\", " + 
                    " \"description_safety\": \"_EM_223_XYZ_\", " + 
                    " \"description_notes\": \"_EM_224_XYZ_\", " + 
                    " \"age_min\": -2147483599, " + 
                    " \"age_max\": -2147483630, " + 
                    " \"participants_min\": 864, " + 
                    " \"participants_max\": 852, " + 
                    " \"time_min\": 866, " + 
                    " \"time_max\": 629, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_241_XYZ_\", " + 
                    " \"name\": \"_EM_242_XYZ_\", " + 
                    " \"capture_date\": \"1907-11-08T16:14:01\", " + 
                    " \"copy_right\": \"_EM_243_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 688, " + 
                    " \"mime_type\": \"_EM_245_XYZ_\", " + 
                    " \"name\": \"_EM_247_XYZ_\", " + 
                    " \"author\": \"_EM_249_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"ratings_count\": -8723264556812760181, " + 
                    " \"ratings_average\": 0.1287892329070489 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 131, " + 
                    " \"name\": \"_EM_374_XYZ_\", " + 
                    " \"date_published\": \"1930-04-21T09:25:48\", " + 
                    " \"date_created\": \"1908-02-15T09:11:56\", " + 
                    " \"date_updated\": \"1903-11-27T25:09:31\", " + 
                    " \"description_material\": \"E\", " + 
                    " \"description_introduction\": \"_EM_375_XYZ_\", " + 
                    " \"description_main\": \"_EM_376_XYZ_\", " + 
                    " \"age_min\": -290, " + 
                    " \"participants_min\": 589, " + 
                    " \"participants_max\": 659, " + 
                    " \"time_max\": 851, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 490, " + 
                    " \"group\": \"_EM_380_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"capture_date\": \"2070-09-14T02:10:16\", " + 
                    " \"author\": \"_EM_386_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 938, " + 
                    " \"name\": \"_EM_391_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 455, " + 
                    " \"ratings_average\": 0.5283783319058694 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/131?EMextraParam123=_EM_398_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_402_XYZ_\", " + 
                    " \"capture_date\": \"1934-12-01T16:24:30\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/78")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_410_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 900, " + 
                    " \"key\": \"_EM_407_XYZ_\", " + 
                    " \"valid_from\": \"1963-03-29T12:39:08\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/900?EMextraParam123=_EM_409_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_419_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 978, " + 
                    " \"group\": \"_EM_411_XYZ_\", " + 
                    " \"name\": \"_EM_412_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 47, " + 
                    " \"uri\": \"_EM_414_XYZ_\", " + 
                    " \"copy_right\": \"_EM_416_XYZ_\", " + 
                    " \"author\": \"_EM_417_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/978")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_425_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/269?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_469_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/332?EMextraParam123=_EM_468_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_470_XYZ_\", " + 
                    " \"name\": \"_EM_471_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 347, " + 
                    " \"mime_type\": \"_EM_472_XYZ_\", " + 
                    " \"name\": \"_EM_474_XYZ_\", " + 
                    " \"capture_date\": \"1910-02-01T01:57:07\", " + 
                    " \"author\": \"_EM_476_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 623 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/904?EMextraParam123=_EM_477_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1698_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/78?EMextraParam123=_EM_1697_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1703_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/47?" + 
                    "verify_unused=true&" + 
                    "EMextraParam123=_EM_1702_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/590")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/113")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_7219_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/-8409602502008740335?EMextraParam123=_EM_7218_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 6846L)
                .d("AUTHORIZATION_LEVEL", "253")
                .d("DATE_CREATED", "\"1929-05-24 22:18:20\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"\"")
            .and().insertInto("USERS", 6847L)
                .d("AUTHORIZATION_LEVEL", "94")
                .d("DATE_CREATED", "\"1952-11-29 12:09:04\"")
                .d("EMAIL_ADDRESS", "\"cp0s\"")
                .d("NAME", "\"_EM_109410_XYZ_\"")
            .and().insertInto("USERS", 6848L)
                .d("AUTHORIZATION_LEVEL", "988")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"ONr\"")
            .and().insertInto("USERS", 6849L)
                .d("AUTHORIZATION_LEVEL", "-65170")
                .d("DATE_CREATED", "\"1960-02-08 01:40:56\"")
                .d("EMAIL_ADDRESS", "\"s_vN2w2LDvri8f\"")
                .d("NAME", "\"_EM_38310_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 6851L)
                .d("URI", "\"P5sksUhigkQ\"")
            .and().insertInto("TAG", 6850L)
                .d("GRP", "\"_EM_38311_XYZ_\"")
                .d("NAME", "\"_EM_109411_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 6853L)
                .d("URI", "\"H36R1XeZ9okNC\"")
            .and().insertInto("TAG", 6852L)
                .d("GRP", "\"CZpQ\"")
                .d("NAME", "\"tcuUU7z6QheEwP\"")
                .r("MEDIA_FILE_ID", 6851L)
            .and().insertInto("ACTIVITY", 6854L)
            .and().insertInto("ACTIVITY", 6855L)
            .and().insertInto("USERS", 6858L)
                .d("AUTHORIZATION_LEVEL", "726")
                .d("NAME", "\"LzuOOT6B69\"")
            .and().insertInto("ACTIVITY", 6857L)
            .and().insertInto("ACTIVITY_RATING", 6856L)
                .r("ACTIVITY_ID", 6854L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "856")
            .and().insertInto("USERS", 6861L)
                .d("AUTHORIZATION_LEVEL", "747")
                .d("NAME", "\"_EM_38312_XYZ_\"")
            .and().insertInto("ACTIVITY", 6860L)
            .and().insertInto("ACTIVITY_RATING", 6859L)
                .r("ACTIVITY_ID", 6860L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 6864L)
                .d("AUTHORIZATION_LEVEL", "327")
                .d("NAME", "\"_EM_109412_XYZ_\"")
            .and().insertInto("ACTIVITY", 6863L)
            .and().insertInto("ACTIVITY_RATING", 6862L)
                .r("ACTIVITY_ID", 6863L)
                .r("USER_ID", 6848L)
                .d("FAVOURITE", "false")
                .d("RATING", "59")
            .and().insertInto("SYSTEM_MESSAGE", 6929L)
                .d("KEY", "\"_EM_109413_XYZ_\"")
                .d("VALID_FROM", "\"2032-02-13 11:59:47\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"lE_vOqpbgEdmwx\"")
            .and().insertInto("SYSTEM_MESSAGE", 6930L)
                .d("KEY", "\"_EM_38315_XYZ_\"")
                .d("VALID_FROM", "\"1900-01-22 19:54:39\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"6ZH4_vzchpSEpLj\"")
            .and().insertInto("SYSTEM_MESSAGE", 6931L)
                .d("KEY", "\"WuqA6U\"")
                .d("VALID_FROM", "\"1910-02-11 10:07:15\"")
                .d("VALID_TO", "\"2014-05-06 15:39:08\"")
                .d("VALUE", "\"lz47O33XUAg0LM\"")
            .and().insertInto("SYSTEM_MESSAGE", 6932L)
                .d("KEY", "\"hc\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1963-06-19 17:20:44\"")
                .d("VALUE", "\"_EM_38316_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 6933L)
                .d("KEY", "\"IPUiP=\"")
                .d("VALID_FROM", "\"2060-10-05 07:47:41\"")
                .d("VALID_TO", "\"2044-10-29 08:55:08\"")
                .d("VALUE", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/544")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/0?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_3187_XYZ_\", " + 
                    " \"authorization_level\": 356 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1849_XYZ_\", " + 
                    " \"author\": \"_EM_1851_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1866_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 550, " + 
                    " \"mime_type\": \"_EM_1860_XYZ_\", " + 
                    " \"uri\": \"_EM_1861_XYZ_\", " + 
                    " \"name\": \"_EM_1862_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1863_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 763 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
