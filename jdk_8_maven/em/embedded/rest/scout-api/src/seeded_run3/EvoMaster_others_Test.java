import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T20:55:31.822+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 79 tests
 * <br>
 * Covered targets: 778
 * <br>
 * Used time: 2h 1m 5s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 185L)
            .and().insertInto("ACTIVITY", 186L)
            .and().insertInto("ACTIVITY", 187L)
            .and().insertInto("ACTIVITY", 188L)
            .and().insertInto("USERS", 6418L)
                .d("AUTHORIZATION_LEVEL", "-4193503")
                .d("DATE_CREATED", "\"2004-09-03 09:41:48\"")
                .d("EMAIL_ADDRESS", "\"_EM_32671_XYZ_\"")
                .d("NAME", "\"2AdDc3jR90MRivB\"")
            .and().insertInto("USERS", 6419L)
                .d("AUTHORIZATION_LEVEL", "490")
                .d("DATE_CREATED", "\"1946-06-19 09:39:14\"")
                .d("EMAIL_ADDRESS", "\"_EM_32672_XYZ_\"")
                .d("NAME", "\"GzZH\"")
            .and().insertInto("USERS", 6420L)
                .d("AUTHORIZATION_LEVEL", "33554855")
                .d("DATE_CREATED", "\"1919-08-06 17:37:39\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"WRl2BJpgT\"")
            .and().insertInto("USERS", 6421L)
                .d("AUTHORIZATION_LEVEL", "732")
                .d("DATE_CREATED", "\"1978-03-18 04:34:19\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"a3VVCFaCG\"")
            .and().insertInto("MEDIA_FILE", 6422L)
                .d("AUTHOR", "\"dzG8nel\"")
                .d("CAPTURE_DATE", "\"1907-10-15 15:57:57\"")
                .d("COPY_RIGHT", "\"_EM_32673_XYZ_\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"BYnQBhGloL6tWh\"")
            .and().insertInto("MEDIA_FILE", 6423L)
                .d("AUTHOR", "\"4MY8I\"")
                .d("CAPTURE_DATE", "\"2043-08-28 06:53:28\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_32674_XYZ_\"")
                .d("NAME", "NULL")
                .d("URI", "\"FT68\"")
            .and().insertInto("MEDIA_FILE", 6424L)
                .d("AUTHOR", "\"HJbtnecWehIVW\"")
                .d("CAPTURE_DATE", "\"2040-10-30 12:16:50\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"JzwXpPLHwH\"")
                .d("NAME", "NULL")
                .d("URI", "\"D\"")
            .and().insertInto("MEDIA_FILE", 6425L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2004-06-25 23:48:55\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"knT\"")
                .d("NAME", "\"_EM_32675_XYZ_\"")
                .d("URI", "\"G\"")
            .and().insertInto("MEDIA_FILE", 6426L)
                .d("AUTHOR", "\"PFf_4TYAGom0\"")
                .d("CAPTURE_DATE", "\"2021-05-17 13:54:58\"")
                .d("COPY_RIGHT", "\"_EM_32676_XYZ_\"")
                .d("MIME_TYPE", "\"_EM_32677_XYZ_\"")
                .d("NAME", "\"_EM_32678_XYZ_\"")
                .d("URI", "\"2QISr\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_users = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4611686018426339328, " + 
                    " \"mime_type\": \"4cnUqPh3mc_fDd88\", " + 
                    " \"name\": \"kenWx4rGChN\", " + 
                    " \"capture_date\": \"2030-03-09T07:31:19\", " + 
                    " \"copy_right\": \"dngbRpY4pqiymjKH\", " + 
                    " \"author\": \"Vy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/559?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"yq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("yq"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_2.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/417?EMextraParam123=42&attrs=GlUOsxlzbowM8QX"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_15260_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_15257_XYZ_&" + 
                    "valid=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=vqUfj0wq_AEQL5&" + 
                    "name=Bz5D0JB5VcMV10&" + 
                    "text=_EM_92504_XYZ_&" + 
                    "featured=true&" + 
                    "categories=3&" + 
                    "age_1=MJ1s2H&" + 
                    "participants=jNEAs&" + 
                    "time_1=G7wIDo&" + 
                    "id=&" + 
                    "ratings_count_min=857&" + 
                    "random=340")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=_EM_30409_XYZ_&" + 
                    "name=_EM_30410_XYZ_&" + 
                    "featured=true&" + 
                    "participants=1&" + 
                    "durations=_EM_30413_XYZ_&" + 
                    "id=_EM_30414_XYZ_&" + 
                    "favourites=786&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_12176_XYZ_&" + 
                    "name=MA9x93f7eoYC_E2m&" + 
                    "id=UDCOP6HlUKIecAf&" + 
                    "ratings_count_min=212&" + 
                    "ratings_average_min=0.5911411620227439&" + 
                    "random=35&" + 
                    "favourites=229&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2020_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_2018_XYZ_\", " + 
                    " \"valid_to\": \"1945-05-12T18:59:10\", " + 
                    " \"valid_from\": \"1940-10-02T10:23:60\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/392?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1673_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 995, " + 
                    " \"date_created\": \"1967-12-01T22:34:32\", " + 
                    " \"date_updated\": \"2034-06-24T10:56:12\", " + 
                    " \"description_material\": \"_EM_1636_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1637_XYZ_\", " + 
                    " \"description_main\": \"_EM_1638_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1639_XYZ_\", " + 
                    " \"age_max\": -2147482861, " + 
                    " \"participants_max\": 465, " + 
                    " \"time_min\": 261, " + 
                    " \"featured\": false, " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_1668_XYZ_\", " + 
                    " \"authorization_level\": 667 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/995")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"CS5QP02j\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"1987-13-03T05:38:15\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_73469_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 2115237190, " + 
                    " \"date_created\": \"2076-11-29T21:15:17\", " + 
                    " \"value\": \"_EM_73470_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 284, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_73471_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -5819368051517115027, " + 
                    " \"value\": \"\" " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5278_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -134470855, " + 
                    " \"name\": \"_EM_5273_XYZ_\", " + 
                    " \"authorization_level\": 462, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2096-05-22T15:37:06\", " + 
                    " \"value\": \"_EM_5275_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2008-10-05T19:07:-1\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_5276_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/-134470855?EMextraParam123=_EM_5277_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 3617L)
                .d("KEY", "\"_EM_21920_XYZ_\"")
                .d("VALID_FROM", "\"2027-04-15 20:43:26\"")
                .d("VALID_TO", "\"2049-04-12 17:15:34\"")
                .d("VALUE", "\"wtlE1YxF6CZrM\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 299, " + 
                    " \"key\": \"cy3Ug\", " + 
                    " \"value\": \"uomfA6JUpCJkO\", " + 
                    " \"valid_to\": \"1966-09-00T08:43:46\", " + 
                    " \"valid_from\": \"1928-01-22T21:30:28\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 621, " + 
                    " \"uri\": \"y9wsZbp\", " + 
                    " \"capture_date\": \"1916-01-18T13:38:32\", " + 
                    " \"copy_right\": \"DBmIq\", " + 
                    " \"author\": \"cow42SVUNi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 809L)
                .d("AUTHOR", "\"_EM_10401_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"_EM_10402_XYZ_\"")
                .d("MIME_TYPE", "\"_EM_10403_XYZ_\"")
                .d("NAME", "\"_EM_10404_XYZ_\"")
                .d("URI", "\"_EM_10405_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 119, " + 
                    " \"uri\": \"_EM_10406_XYZ_\", " + 
                    " \"name\": \"_EM_10407_XYZ_\", " + 
                    " \"capture_date\": \"2004-10-24T09:45:50\", " + 
                    " \"author\": \"_EM_10408_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/809")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 67, " + 
                    " \"group\": \"_EM_8192_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_8194_XYZ_\", " + 
                    " \"uri\": \"_EM_8195_XYZ_\", " + 
                    " \"capture_date\": \"2037-00-25T08:58:52\", " + 
                    " \"author\": \"_EM_8197_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_8198_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 297L)
                .d("URI", "\"KTbQCY5iB\"")
            .and().insertInto("TAG", 296L)
                .d("GRP", "\"gEPXS\"")
                .d("NAME", "\"_EM_8173_XYZ_\"")
                .r("MEDIA_FILE_ID", 297L)
            .and().insertInto("MEDIA_FILE", 299L)
                .d("URI", "\"_EM_8174_XYZ_\"")
            .and().insertInto("TAG", 298L)
                .d("GRP", "\"_EM_8175_XYZ_\"")
                .d("NAME", "\"6Z5RAesLut8qU\"")
                .r("MEDIA_FILE_ID", 297L)
            .and().insertInto("MEDIA_FILE", 138L)
                .d("URI", "\"_EM_7456_XYZ_\"")
            .and().insertInto("TAG", 137L)
                .d("GRP", "\"_EM_7457_XYZ_\"")
                .d("NAME", "\"MoQ_XeUv\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"x\", " + 
                    " \"name\": \"_EM_7458_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_7460_XYZ_\", " + 
                    " \"name\": \"_EM_7461_XYZ_\", " + 
                    " \"capture_date\": \"1929-11-13T02:36:30\", " + 
                    " \"copy_right\": \"_EM_7462_XYZ_\", " + 
                    " \"author\": \"_EM_7463_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 277 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/137?EMextraParam123=_EM_7464_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1323L)
                .d("URI", "\"_EM_34888_XYZ_\"")
            .and().insertInto("TAG", 1322L)
                .d("GRP", "\"_EM_34889_XYZ_\"")
                .d("NAME", "\"_EM_34890_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1325L)
                .d("URI", "\"_EM_34891_XYZ_\"")
            .and().insertInto("TAG", 1324L)
                .d("GRP", "\"PT5KjDQykbJ\"")
                .d("NAME", "\"UU0UxdFR\"")
                .r("MEDIA_FILE_ID", 1323L)
            .and().insertInto("MEDIA_FILE", 1327L)
                .d("URI", "\"_EM_34892_XYZ_\"")
            .and().insertInto("TAG", 1326L)
                .d("GRP", "\"pJY2SxBnEf1zWU\"")
                .d("NAME", "\"wpssy9Il_tB\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1329L)
                .d("URI", "\"_EM_34893_XYZ_\"")
            .and().insertInto("TAG", 1328L)
                .d("GRP", "\"_EM_34894_XYZ_\"")
                .d("NAME", "\"_EM_52708_XYZ_\"")
                .r("MEDIA_FILE_ID", 1325L)
            .and().insertInto("MEDIA_FILE", 1331L)
                .d("URI", "\"Y\"")
            .and().insertInto("TAG", 1330L)
                .d("GRP", "\"15I\"")
                .d("NAME", "\"_EM_34895_XYZ_\"")
                .r("MEDIA_FILE_ID", 1329L)
            .and().insertInto("SYSTEM_MESSAGE", 1332L)
                .d("KEY", "\"_EM_52709_XYZ_\"")
                .d("VALID_FROM", "\"1980-04-05 02:28:23\"")
                .d("VALID_TO", "\"1948-05-29 11:45:07\"")
                .d("VALUE", "\"3UUV3HUU\"")
            .and().insertInto("SYSTEM_MESSAGE", 1333L)
                .d("KEY", "\"v1bGmSTRQUi1gJExd\"")
                .d("VALID_FROM", "\"2045-01-16 12:52:18\"")
                .d("VALID_TO", "\"2017-05-03 00:38:18\"")
                .d("VALUE", "\"_EM_34896_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 1334L)
                .d("KEY", "\"_EM_34897_XYZ_\"")
                .d("VALID_FROM", "\"1950-11-22 10:59:00\"")
                .d("VALID_TO", "\"2002-03-06 19:19:18\"")
                .d("VALUE", "\"_EM_34898_XYZ_\"")
            .and().insertInto("ACTIVITY", 1335L)
            .and().insertInto("ACTIVITY", 1336L)
            .and().insertInto("ACTIVITY", 1337L)
            .and().insertInto("ACTIVITY", 1338L)
            .and().insertInto("ACTIVITY", 1339L)
            .and().insertInto("USERS", 7356L)
                .d("AUTHORIZATION_LEVEL", "8389146")
                .d("DATE_CREATED", "\"2069-07-03 08:50:35\"")
                .d("EMAIL_ADDRESS", "\"_EM_52710_XYZ_\"")
                .d("NAME", "\"_EM_52711_XYZ_\"")
            .and().insertInto("USERS", 7357L)
                .d("AUTHORIZATION_LEVEL", "-1048522")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"_EM_52712_XYZ_\"")
            .and().insertInto("USERS", 7358L)
                .d("AUTHORIZATION_LEVEL", "128")
                .d("DATE_CREATED", "\"1926-11-08 09:48:17\"")
                .d("EMAIL_ADDRESS", "\"snwVtK\"")
                .d("NAME", "\"cVSMle\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 131278, " + 
                    " \"name\": \"_EM_34886_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 132207, " + 
                    " \"uri\": \"IXRKGfp8FdPWcZ|K\", " + 
                    " \"name\": \"_EM_11421_XYZ_\", " + 
                    " \"capture_date\": \"2009-13-00T14:57:13\", " + 
                    " \"copy_right\": \"mQP\" " + 
                    " }, " + 
                    " \"activities_count\": 926 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 851, " + 
                    " \"group\": \"_EM_12758_XYZ_\", " + 
                    " \"name\": \"_EM_12759_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 751, " + 
                    " \"mime_type\": \"_EM_12760_XYZ_\", " + 
                    " \"uri\": \"_EM_12761_XYZ_\", " + 
                    " \"capture_date\": \"2063-02-07T-1:01:57\" " + 
                    " }, " + 
                    " \"activities_count\": 3976210334293717445 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_20948_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -807074909, " + 
                    " \"name\": \"_EM_20920_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_20922_XYZ_\", " + 
                    " \"description_main\": \"_EM_20924_XYZ_\", " + 
                    " \"description_safety\": \"_EM_20925_XYZ_\", " + 
                    " \"age_max\": -2147483621, " + 
                    " \"participants_min\": 984, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"capture_date\": \"1909-00-04T17:19:13\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"authorization_level\": 170 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/-807074909?EMextraParam123=_EM_20947_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 224L)
                .d("URI", "\"os3DnwyVmhL\"")
            .and().insertInto("TAG", 223L)
                .d("GRP", "\"_EM_7867_XYZ_\"")
                .d("NAME", "\"0G6An\"")
                .r("MEDIA_FILE_ID", 224L)
            .and().insertInto("MEDIA_FILE", 226L)
                .d("URI", "\"uAMKsyybyqd8\"")
            .and().insertInto("TAG", 225L)
                .d("GRP", "\"_EM_7868_XYZ_\"")
                .d("NAME", "\"_EM_7869_XYZ_\"")
                .r("MEDIA_FILE_ID", 226L)
            .and().insertInto("MEDIA_FILE", 228L)
                .d("URI", "\"_EM_7870_XYZ_\"")
            .and().insertInto("TAG", 227L)
                .d("GRP", "\"_EM_7871_XYZ_\"")
                .d("NAME", "\"cWq\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 230L)
                .d("URI", "\"_EM_7872_XYZ_\"")
            .and().insertInto("TAG", 229L)
                .d("GRP", "\"EVQtxuT\"")
                .d("NAME", "\"_EM_7873_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 232L)
                .d("URI", "\"_EM_7874_XYZ_\"")
            .and().insertInto("TAG", 231L)
                .d("GRP", "\"uF2xgjx7Q\"")
                .d("NAME", "\"_EM_7875_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5347_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 912, " + 
                    " \"group\": \"_EM_7865_XYZ_\", " + 
                    " \"name\": \"_EM_7866_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 397, " + 
                    " \"uri\": \"_EM_5342_XYZ_\", " + 
                    " \"name\": \"_EM_5343_XYZ_\", " + 
                    " \"capture_date\": \"1994-12-02T04:21:56\", " + 
                    " \"copy_right\": \"_EM_5344_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/-33553520?EMextraParam123=_EM_5346_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 4296L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_9824_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"_EM_9787_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_9788_XYZ_\", " + 
                    " \"description_main\": \"_EM_9790_XYZ_\", " + 
                    " \"description_safety\": \"_EM_9791_XYZ_\", " + 
                    " \"description_notes\": \"4gb6o57tSmT\", " + 
                    " \"age_min\": -2147483479, " + 
                    " \"time_min\": 836, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 310, " + 
                    " \"name\": \"_EM_9794_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 956 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_9805_XYZ_\", " + 
                    " \"activities_count\": 848 " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_9813_XYZ_\", " + 
                    " \"uri\": \"_EM_9814_XYZ_\", " + 
                    " \"capture_date\": \"1921-02-18T16:54:40\" " + 
                    " }, " + 
                    " \"activities_count\": 3 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 501, " + 
                    " \"email_address\": \"_EM_9822_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/488?EMextraParam123=_EM_9823_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 13668L)
                .d("URI", "\"_EM_65570_XYZ_\"")
            .and().insertInto("TAG", 13667L)
                .d("GRP", "\"0O3z\"")
                .d("NAME", "\"~_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 13670L)
                .d("URI", "\"ZEFLm4Z\"")
            .and().insertInto("TAG", 13669L)
                .d("GRP", "\"_EM_65571_XYZ_\"")
                .d("NAME", "\"Q4DdxXj2sWFT_\"")
                .r("MEDIA_FILE_ID", 13668L)
            .and().insertInto("MEDIA_FILE", 13672L)
                .d("URI", "\"_EM_65572_XYZ_\"")
            .and().insertInto("TAG", 13671L)
                .d("GRP", "\"lRw4es2XCjm\"")
                .d("NAME", "\"_EM_65573_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 13674L)
                .d("URI", "\"UaoJgpufo\"")
            .and().insertInto("TAG", 13673L)
                .d("GRP", "\"srDyARqv8HiRt\"")
                .d("NAME", "\"DpuGRK\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"\", " + 
                    " \"description_prepare\": \"X3hiiTxqOy9Eyqi\", " + 
                    " \"description_main\": \"\", " + 
                    " \"description_notes\": \"\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"participants_min\": 409, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": 631, " + 
                    " \"source\": \"P3vCZ6H0A\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 131, " + 
                    " \"activities_count\": 5203251062383999915 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 8834, " + 
                    " \"name\": \"_EM_31098_XYZ_\", " + 
                    " \"email_address\": \"w4obN0wj\", " + 
                    " \"authorization_level\": 454, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 182, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_31100_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 772, " + 
                    " \"date_created\": \"2060-06-23T07:54:16\", " + 
                    " \"value\": \"Se6ZXI6MY1YBmQt\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_31101_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 990, " + 
                    " \"favourites_count\": 609, " + 
                    " \"related\": [ " + 
                    " 1048589 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2076_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 186, " + 
                    " \"name\": \"_EM_2034_XYZ_\", " + 
                    " \"description_material\": \"_EM_16574_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_2036_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_16575_XYZ_\", " + 
                    " \"description_main\": \"_EM_2037_XYZ_\", " + 
                    " \"description_safety\": \"_EM_2038_XYZ_\", " + 
                    " \"age_min\": -872, " + 
                    " \"age_max\": -882, " + 
                    " \"participants_max\": 349, " + 
                    " \"time_min\": 0, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 915, " + 
                    " \"group\": \"_EM_2041_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"fHsbeYB7\" " + 
                    " }, " + 
                    " \"activities_count\": 316 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_2046_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 148, " + 
                    " \"mime_type\": \"_EM_2049_XYZ_\", " + 
                    " \"name\": \"_EM_2051_XYZ_\", " + 
                    " \"capture_date\": \"1972-00-23T24:33:27\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -1761684192957408861, " + 
                    " \"mime_type\": \"_EM_2054_XYZ_\", " + 
                    " \"name\": \"_EM_2056_XYZ_\", " + 
                    " \"author\": \"_EM_2058_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_2059_XYZ_\", " + 
                    " \"uri\": \"_EM_2060_XYZ_\", " + 
                    " \"name\": \"_EM_2061_XYZ_\", " + 
                    " \"copy_right\": \"_EM_2062_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"author\": \"_EM_2068_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": -656220673, " + 
                    " \"name\": \"_EM_16576_XYZ_\", " + 
                    " \"email_address\": \"oAFcSJl3SeeS\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 1644346617399468037 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 881, " + 
                    " \"date_created\": \"2000-06-16T20:40:29\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"SKX\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2013-11-31T18:04:22\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2038-01-16T00:21:24\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"0tVsJ9u7Y\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/218")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_6456_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_6457_XYZ_\", " + 
                    " \"description_main\": \"_EM_6458_XYZ_\", " + 
                    " \"description_notes\": \"_EM_6460_XYZ_\", " + 
                    " \"age_min\": 5121734, " + 
                    " \"participants_min\": 254, " + 
                    " \"participants_max\": 348, " + 
                    " \"time_max\": 376, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_6461_XYZ_\", " + 
                    " \"activity\": { " + 
                    " \"id\": 560, " + 
                    " \"favourites_count\": -7192676986062669318, " + 
                    " \"related\": [ " + 
                    " -129978373, " + 
                    " 558 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1766L)
                .d("AUTHOR", "\"7_8\"")
                .d("CAPTURE_DATE", "\"1903-06-17 11:29:50\"")
                .d("COPY_RIGHT", "\"QHXGKPkujPjSxHZx\"")
                .d("MIME_TYPE", "\"R2gNf_xH21o_J6\"")
                .d("NAME", "\"r5\"")
                .d("URI", "\"_EM_56977_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1772L)
                .d("URI", "\"_EM_14916_XYZ_\"")
            .and().insertInto("USERS", 1771L)
                .d("AUTHORIZATION_LEVEL", "530")
                .d("NAME", "\"_EM_14917_XYZ_\"")
            .and().insertInto("ACTIVITY", 1770L)
            .and().insertInto("ACTIVITY", 1769L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1768L)
                .r("ACTIVITY_ID", 1770L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1767L)
                .r("ACTIVITY_PROPERTIES_ID", 1768L)
                .r("MEDIA_FILE_ID", 1766L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 1778L)
                .d("URI", "\"7209DHSWM9RE2YL\"")
            .and().insertInto("USERS", 1777L)
                .d("AUTHORIZATION_LEVEL", "-1")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 1776L)
            .and().insertInto("ACTIVITY", 1775L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1774L)
                .r("ACTIVITY_ID", 1769L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1773L)
                .r("ACTIVITY_PROPERTIES_ID", 1774L)
                .r("MEDIA_FILE_ID", 1766L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 12058L)
                .d("URI", "\"iJU4m\"")
            .and().insertInto("TAG", 12057L)
                .d("GRP", "\"\"")
                .d("NAME", "\"3n7AtfkEZsgZwaSx\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 12060L)
                .d("URI", "\"ivWqzE8q\"")
            .and().insertInto("TAG", 12059L)
                .d("GRP", "\"77fchhe2No0\"")
                .d("NAME", "\"hsDkUUUl\"")
                .r("MEDIA_FILE_ID", 12058L)
            .and().insertInto("MEDIA_FILE", 12067L)
                .d("URI", "\"gxQ\"")
            .and().insertInto("TAG", 12066L)
                .d("GRP", "\"_EM_57319_XYZ_\"")
                .d("NAME", "\"eiSNHjWXg\"")
            .and().insertInto("USERS", 12065L)
                .d("AUTHORIZATION_LEVEL", "-1996680861")
                .d("NAME", "\"oXNI4gyOCSmxzox\"")
            .and().insertInto("ACTIVITY", 12064L)
            .and().insertInto("ACTIVITY", 12063L)
            .and().insertInto("ACTIVITY_PROPERTIES", 12062L)
                .r("ACTIVITY_ID", 12064L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 12061L)
                .r("ACTIVITY_PROPERTIES_ID", 1768L)
                .r("TAG_ID", 12066L)
            .and().insertInto("MEDIA_FILE", 12074L)
                .d("URI", "\"NAT6j\"")
            .and().insertInto("TAG", 12073L)
                .d("GRP", "\"_EM_57320_XYZ_\"")
                .d("NAME", "\"Og\"")
            .and().insertInto("USERS", 12072L)
                .d("AUTHORIZATION_LEVEL", "483")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 12071L)
            .and().insertInto("ACTIVITY", 12070L)
            .and().insertInto("ACTIVITY_PROPERTIES", 12069L)
                .r("ACTIVITY_ID", 12071L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 12068L)
                .r("ACTIVITY_PROPERTIES_ID", 12062L)
                .r("TAG_ID", 12057L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"`U5KQpGaT4XUZR\", " + 
                    " \"description_introduction\": \"JBpx_M8Dufr\", " + 
                    " \"description_main\": \"`U5KQpGaT4XUZR\", " + 
                    " \"description_notes\": \"`U5KQpGaT4XUZR\", " + 
                    " \"age_min\": -2147482984, " + 
                    " \"age_max\": 1965664, " + 
                    " \"participants_max\": 692, " + 
                    " \"time_min\": 1965664, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"5v\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 33152, " + 
                    " \"group\": \"sz08LwHu7XbjPV\", " + 
                    " \"name\": \"_EM_57317_XYZ_\", " + 
                    " \"activities_count\": 822 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 988, " + 
                    " \"mime_type\": \"_EM_56975_XYZ_\", " + 
                    " \"uri\": \"W\", " + 
                    " \"name\": \"vp\", " + 
                    " \"author\": \"_EM_56976_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 259, " + 
                    " \"email_address\": \"_EM_57318_XYZ_\", " + 
                    " \"authorization_level\": -647993109 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": -1082016241, " + 
                    " \"ratings_average\": 0.854, " + 
                    " \"favourites_count\": -8661477197268007485, " + 
                    " \"related\": [ " + 
                    " 33134, " + 
                    " 418, " + 
                    " 853, " + 
                    " 671 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "attrs=id%2Cidentities&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/6?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 5, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 2, " + 
                    " 4 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/-28244615?EMextraParam123=_EM_101_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/824")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/1834732148/rating?EMextraParam123=_EM_150_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"Don\u0027t care about the name\", " + 
                    " \"authorization_level\": 99, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"new user\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"A New Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:07\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"Introduction\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"location\", " + 
                    " \"name\": \"At home\", " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif - Duplicate which should not be persisted\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"G\", " + 
                    " \"name\": \"N\", " + 
                    " \"activities_count\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/profile-bob.gif\", " + 
                    " \"name\": \"Bob\u0027s Profile Picture\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/jpeg\", " + 
                    " \"uri\": \"http://example.com/profile-alice.jpg\", " + 
                    " \"name\": \"Alice\u0027s Profile Picture\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_248_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 964, " + 
                    " \"name\": \"_EM_214_XYZ_\", " + 
                    " \"date_published\": \"1938-08-00T09:26:43\", " + 
                    " \"description_safety\": \"_EM_218_XYZ_\", " + 
                    " \"description_notes\": \"_EM_219_XYZ_\", " + 
                    " \"age_min\": -2147483599, " + 
                    " \"age_max\": -2147483630, " + 
                    " \"participants_min\": 864, " + 
                    " \"participants_max\": 852, " + 
                    " \"time_min\": 866, " + 
                    " \"time_max\": 629, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_234_XYZ_\", " + 
                    " \"name\": \"_EM_235_XYZ_\", " + 
                    " \"capture_date\": \"1907-11-08T16:14:01\", " + 
                    " \"copy_right\": \"_EM_236_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 688, " + 
                    " \"mime_type\": \"_EM_238_XYZ_\", " + 
                    " \"name\": \"_EM_240_XYZ_\", " + 
                    " \"author\": \"_EM_242_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"ratings_count\": -8723264556812760181, " + 
                    " \"ratings_average\": 0.1287892329070489 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"An Updated Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"The Introduction Has Been Updated\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"A Patched Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 677, " + 
                    " \"name\": \"4SAxhh55e_wPtV\", " + 
                    " \"date_published\": \"2098-06-25T08:24:16\", " + 
                    " \"description_safety\": \"_EM_75_XYZ_\", " + 
                    " \"age_min\": -2147483407, " + 
                    " \"age_max\": -173, " + 
                    " \"participants_min\": 258, " + 
                    " \"time_min\": 989, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_78_XYZ_\", " + 
                    " \"name\": \"U82y4aPh\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_80_XYZ_\", " + 
                    " \"name\": \"_EM_81_XYZ_\", " + 
                    " \"capture_date\": \"2088-00-24T15:41:07\", " + 
                    " \"copy_right\": \"_EM_82_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 501 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/677?EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 2478237951562178561 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_417_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 978, " + 
                    " \"group\": \"_EM_409_XYZ_\", " + 
                    " \"name\": \"_EM_410_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 47, " + 
                    " \"uri\": \"_EM_412_XYZ_\", " + 
                    " \"copy_right\": \"_EM_414_XYZ_\", " + 
                    " \"author\": \"_EM_415_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/978")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_465_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/332?EMextraParam123=_EM_464_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_466_XYZ_\", " + 
                    " \"name\": \"_EM_467_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 347, " + 
                    " \"mime_type\": \"_EM_468_XYZ_\", " + 
                    " \"name\": \"_EM_470_XYZ_\", " + 
                    " \"capture_date\": \"1910-02-01T01:57:07\", " + 
                    " \"author\": \"_EM_472_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 623 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/904?EMextraParam123=_EM_473_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1680_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/47?" + 
                    "verify_unused=true&" + 
                    "EMextraParam123=_EM_1679_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/590")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1693_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/tags/103?EMextraParam123=_EM_1692_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/5866408168840275873?attrs=_EM_1694_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/384")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/842")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2017_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/592?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/5245066193562311794?EMextraParam123=_EM_2026_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1675_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/78?EMextraParam123=_EM_1674_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/173")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/241")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1894_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/767")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/574?EMextraParam123=_EM_2010_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/186")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2085_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/893")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_11996_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/498")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 26733L)
                .d("AUTHORIZATION_LEVEL", "-15847")
                .d("DATE_CREATED", "\"2088-11-07 12:50:36\"")
                .d("EMAIL_ADDRESS", "\"A3Q3h36pm0wS7V\"")
                .d("NAME", "\"_EM_112229_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 26734L)
                .d("KEY", "\"BrUw0Km4\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2053-02-01 05:02:33\"")
                .d("VALUE", "\"dS\"")
            .and().insertInto("SYSTEM_MESSAGE", 26735L)
                .d("KEY", "\"_EM_112230_XYZ_\"")
                .d("VALID_FROM", "\"1942-02-13 06:07:01\"")
                .d("VALID_TO", "\"1924-05-31 00:00:30\"")
                .d("VALUE", "\"_EM_112231_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 26736L)
                .d("KEY", "\"63nyVCxs\"")
                .d("VALID_FROM", "\"1983-07-08 18:31:35\"")
                .d("VALID_TO", "\"2011-07-07 10:36:53\"")
                .d("VALUE", "\"_EM_112232_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 26737L)
                .d("KEY", "\"gCKyJNALNUM\"")
                .d("VALID_FROM", "\"1950-08-19 16:03:03\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"EZvGq0Yjn\"")
            .and().insertInto("MEDIA_FILE", 34178L)
                .d("URI", "\"7dYmPy8av\"")
            .and().insertInto("TAG", 34177L)
                .d("GRP", "\"2KJg\"")
                .d("NAME", "\"zyj78NtV\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 34180L)
                .d("URI", "\"NVSL6gVj0Ani\"")
            .and().insertInto("TAG", 34179L)
                .d("GRP", "\"yFD7Zag6B_f2j\"")
                .d("NAME", "\"WvAcAJJ5UtdVV\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 34182L)
                .d("URI", "\"_EM_124563_XYZ_\"")
            .and().insertInto("TAG", 34181L)
                .d("GRP", "\"MgUexENZ2qJe\"")
                .d("NAME", "\"ig_gekqT\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 34184L)
                .d("URI", "\"NN9Dg92COWwGIu\"")
            .and().insertInto("TAG", 34183L)
                .d("GRP", "\"QPynIAQDaMB\"")
                .d("NAME", "\"R5\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 34186L)
                .d("URI", "\"BVo1e03Mc3HYTuQ\"")
            .and().insertInto("TAG", 34185L)
                .d("GRP", "\"OQ4Jmivtmp4\"")
                .d("NAME", "\"IqU1Pf2GeSrJyfXB\"")
                .r("MEDIA_FILE_ID", 34180L)
            .and().insertInto("SYSTEM_MESSAGE", 15472L)
                .d("KEY", "\"Zk8HPhU6PI\"")
                .d("VALID_FROM", "\"1918-06-15 20:56:15\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"QD\"")
            .and().insertInto("USERS", 15474L)
                .d("AUTHORIZATION_LEVEL", "-16138")
                .d("NAME", "\"kf5ZAWcz4acfDr\"")
            .and().insertInto("USER_IDENTITY", 15473L)
                .d("DATE_CREATED", "\"2029-02-23 23:53:16\"")
                .d("TYPE", "\"GOOGLE\"")
                .d("VALUE", "\"Ax_1hzkhdB3j0\"")
                .d("USER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 950, " + 
                    " \"authorization_level\": 229 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?attrs=mkk")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_6606_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -218315899, " + 
                    " \"value\": \"_EM_6604_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/-218315899")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 611, " + 
                    " \"key\": \"_EM_41985_XYZ_\", " + 
                    " \"value\": \"_EM_41986_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"SUHUZ1kDB5\", " + 
                    " \"copy_right\": \"v5n71nqroWDVwRz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1833_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 550, " + 
                    " \"mime_type\": \"_EM_1827_XYZ_\", " + 
                    " \"uri\": \"_EM_1828_XYZ_\", " + 
                    " \"name\": \"_EM_1829_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1830_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 763 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
