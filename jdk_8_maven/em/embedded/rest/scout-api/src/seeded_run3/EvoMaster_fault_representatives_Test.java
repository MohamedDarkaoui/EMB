import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T20:55:31.847+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 541
 * <br>
 * Used time: 2h 1m 5s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USERS","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/UserDao_40_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 500, " + 
                    " \"email_address\": \"\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": -2077702763, " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/UserResource_62_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 21216L)
                .d("AUTHOR", "\"\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"I2g1fYiqq55\"")
                .d("MIME_TYPE", "\"x\"")
                .d("NAME", "\"_EM_96214_XYZ_\"")
                .d("URI", "\"yWNmuUTRZB\"")
            .and().insertInto("MEDIA_FILE", 21217L)
                .d("AUTHOR", "\"mbczfTCs7\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"SRGeLcB6kFx9Z\"")
                .d("MIME_TYPE", "\"_EM_95028_XYZ_C\"")
                .d("NAME", "\"EvV9W2BU\"")
                .d("URI", "\"iW6RzaS\"")
            .and().insertInto("MEDIA_FILE", 21218L)
                .d("AUTHOR", "\"6QMZPRqxtTwwUs\"")
                .d("CAPTURE_DATE", "\"2013-05-14 03:47:21\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"DzpI5YjfxMm\"")
                .d("NAME", "\"_EM_95029_XYZ_\"")
                .d("URI", "\"nBxwMTIb4J2Jv\"")
            .and().insertInto("MEDIA_FILE", 21219L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_95030_XYZ_\"")
                .d("NAME", "\"_EM_96215_XYZ_\"")
                .d("URI", "\"DchhvEE3Dq03q\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 41, " + 
                    " \"name\": \"vWswS2tYhr\", " + 
                    " \"description_material\": \"BTuSpAQyk\", " + 
                    " \"description_introduction\": \"_EM_53484_XYZ_\", " + 
                    " \"description_prepare\": \"cnsnCAuk\", " + 
                    " \"description_safety\": \"AeH9wTmF07fccEL\", " + 
                    " \"description_notes\": \"Q\", " + 
                    " \"age_max\": -2147483548, " + 
                    " \"participants_min\": 704, " + 
                    " \"participants_max\": 2487, " + 
                    " \"time_max\": -523768, " + 
                    " \"source\": \"Xmx3Ul6O\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"aBYLrWnFp\", " + 
                    " \"name\": \"CY8ZmPtdbDXuw0V\", " + 
                    " \"activities_count\": 539 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -32197, " + 
                    " \"mime_type\": \"5EIuQb\", " + 
                    " \"uri\": \"pp\", " + 
                    " \"author\": \"IKXFlmrXbE\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"uOwuaanOl7xNjb\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"rHg\", " + 
                    " \"name\": \"fSbrVN1jPX8IqWG\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"\", " + 
                    " \"authorization_level\": -15319 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 282, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 732, " + 
                    " \"ratings_average\": 1.899423818937125, " + 
                    " \"related\": [ " + 
                    " 317, " + 
                    " 486, " + 
                    " 232, " + 
                    " 16, " + 
                    " 432 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/MediaFileDao_19_all
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
