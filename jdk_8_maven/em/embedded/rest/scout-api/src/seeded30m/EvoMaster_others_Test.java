import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T22:03:35.545+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 78 tests
 * <br>
 * Covered targets: 513
 * <br>
 * Used time: 0h 30m 17s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","USERS","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USER_IDENTITY","ACTIVITY","ACTIVITY_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_143_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_140_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "attrs=_EM_141_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=foof&" + 
                    "categories=42&" + 
                    "ages=foo&" + 
                    "participants=foo&" + 
                    "durations=fpo&" + 
                    "id=fon&" + 
                    "ratings_count_min=0&" + 
                    "ratings_average_min=0.0&" + 
                    "favourites=0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1233L)
            .and().insertInto("ACTIVITY", 1234L)
            .and().insertInto("ACTIVITY", 1235L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=NBpY&" + 
                    "name=HPv1jerd5&" + 
                    "text=lqCkj&" + 
                    "ages=2&" + 
                    "participants=8C&" + 
                    "id=iBcQQTReoVN&" + 
                    "ratings_count_min=306")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_10965_XYZ_")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "text=_EM_10956_XYZ_&" + 
                    "time_1=_EM_10961_XYZ_&" + 
                    "id=_EM_10963_XYZ_&" + 
                    "ratings_average_min=0.8004615065009517")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=foof&" + 
                    "durations=42&" + 
                    "id=fon&" + 
                    "ratings_count_min=0&" + 
                    "ratings_average_min=0.0&" + 
                    "favourites=0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_created\": \"2028-12-32T16:11:18\", " + 
                    " \"description_material\": \"_EM_1836_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1838_XYZ_\", " + 
                    " \"description_main\": \"_EM_1839_XYZ_\", " + 
                    " \"age_min\": -2147483112, " + 
                    " \"time_min\": 244, " + 
                    " \"time_max\": 397, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"m9vKw2EPh6vAC\", " + 
                    " \"name\": \"SCSKhkARhRrlKjO5\", " + 
                    " \"author\": \"_EM_1879_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_1881_XYZ_\", " + 
                    " \"identities\": [] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/734")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1847583689, " + 
                    " \"key\": \"_EM_5105_XYZ_\", " + 
                    " \"valid_to\": \"2079-00-02T15:35:60\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=_EM_5107_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5315_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1210857727, " + 
                    " \"key\": \"_EM_5312_XYZ_\", " + 
                    " \"valid_from\": \"1992-08-09T15:56:16\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1210857727")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1922L)
            .and().insertInto("ACTIVITY", 1923L)
            .and().insertInto("ACTIVITY", 1924L)
            .and().insertInto("ACTIVITY", 1925L)
            .and().insertInto("MEDIA_FILE", 13860L)
                .d("URI", "\"Dx1c7YJ4D0WN7Gc\"")
            .and().insertInto("TAG", 13859L)
                .d("GRP", "\"65JERxBpkoWa\"")
                .d("NAME", "\"U\"")
            .and().insertInto("TAG_DERIVED", 13858L)
                .r("TAG_ID", 13859L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("MEDIA_FILE", 13863L)
                .d("URI", "\"cgvn\"")
            .and().insertInto("TAG", 13862L)
                .d("GRP", "\"xt9emFuQvr8Hi\"")
                .d("NAME", "\"Y25HxXT9\"")
            .and().insertInto("TAG_DERIVED", 13861L)
                .r("TAG_ID", 13862L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("MEDIA_FILE", 13866L)
                .d("URI", "\"XPNU\"")
            .and().insertInto("TAG", 13865L)
                .d("GRP", "\"Jirn\"")
                .d("NAME", "\"Wglc2lNEl\"")
            .and().insertInto("TAG_DERIVED", 13864L)
                .r("TAG_ID", 13865L)
                .d("ACTIVITIES_COUNT", "852")
            .and().insertInto("USERS", 13954L)
                .d("AUTHORIZATION_LEVEL", "370")
                .d("NAME", "\"z5CpCtCTelBP\"")
            .and().insertInto("ACTIVITY", 13953L)
            .and().insertInto("ACTIVITY_RATING", 13952L)
                .r("ACTIVITY_ID", 1924L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "609")
            .and().insertInto("USERS", 13957L)
                .d("AUTHORIZATION_LEVEL", "298")
                .d("NAME", "\"k56\"")
            .and().insertInto("ACTIVITY", 13956L)
            .and().insertInto("ACTIVITY_RATING", 13955L)
                .r("ACTIVITY_ID", 1923L)
                .r("USER_ID", 13957L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 13960L)
                .d("AUTHORIZATION_LEVEL", "181")
                .d("NAME", "\"I6dfjGMCtlx\"")
            .and().insertInto("ACTIVITY", 13959L)
            .and().insertInto("ACTIVITY_RATING", 13958L)
                .r("ACTIVITY_ID", 13956L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "145")
            .and().insertInto("USERS", 13963L)
                .d("AUTHORIZATION_LEVEL", "412")
                .d("NAME", "\"hitvT6NQMrl\"")
            .and().insertInto("ACTIVITY", 13962L)
            .and().insertInto("ACTIVITY_RATING", 13961L)
                .r("ACTIVITY_ID", 1923L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "696")
            .and().insertInto("USERS", 13966L)
                .d("AUTHORIZATION_LEVEL", "1702118115")
                .d("NAME", "\"\"")
            .and().insertInto("ACTIVITY", 13965L)
            .and().insertInto("ACTIVITY_RATING", 13964L)
                .r("ACTIVITY_ID", 13953L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "323")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 5, " + 
                    " \"name\": \"w_1gEOJ6BS\", " + 
                    " \"date_created\": \"1955-02-13T14:07:45\", " + 
                    " \"date_updated\": \"2087-02-32T16:56:08\", " + 
                    " \"age_max\": -2147483006, " + 
                    " \"time_min\": 504, " + 
                    " \"time_max\": 467, " + 
                    " \"featured\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_3319_XYZ_\", " + 
                    " \"authorization_level\": 686, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": -428159061, " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2035-04-14T22:08:10\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"Ms59VBETiYb\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 543, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_3321_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"0z3pObA\", " + 
                    " \"authorization_level\": 537, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 729, " + 
                    " \"date_created\": \"1979-11-32T14:02:29\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_18367_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 945, " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"iwK7PdFbFF_vN\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"type\": \"API\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 178, " + 
                    " \"date_created\": \"1945-05-22T05:56:40\", " + 
                    " \"value\": \"2ku_Ut6\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/757")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"GOcI55Pf8euikFcW\", " + 
                    " \"name\": \"4tjg0Vl2D2hWqw2\", " + 
                    " \"capture_date\": \"2069-12-08T22:53:34\", " + 
                    " \"copy_right\": \"_EM_20111_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 281 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/655")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3218L)
            .and().insertInto("MEDIA_FILE", 3221L)
                .d("URI", "\"F_dpdUez\"")
            .and().insertInto("TAG", 3220L)
                .d("GRP", "\"FAVOURITE\"")
                .d("NAME", "\"KGYeTM\"")
            .and().insertInto("TAG_DERIVED", 3219L)
                .r("TAG_ID", 3220L)
                .d("ACTIVITIES_COUNT", "525158")
            .and().insertInto("MEDIA_FILE", 3224L)
                .d("URI", "\"M6hxRzGN\"")
            .and().insertInto("TAG", 3223L)
                .d("GRP", "\"L_ydUnrSNw2u\"")
                .d("NAME", "\"n\"")
            .and().insertInto("TAG_DERIVED", 3222L)
                .r("TAG_ID", 3223L)
                .d("ACTIVITIES_COUNT", "0")
            .and().insertInto("MEDIA_FILE", 3227L)
                .d("URI", "\"_EM_16645_XYZ_\"")
            .and().insertInto("TAG", 3226L)
                .d("GRP", "\"_EM_16638_XYZ_\"")
                .d("NAME", "\"_EM_16646_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3225L)
                .r("TAG_ID", 3226L)
                .d("ACTIVITIES_COUNT", "113")
            .and().insertInto("MEDIA_FILE", 3230L)
                .d("URI", "\"R7mk8zWC8tzDyd\"")
            .and().insertInto("TAG", 3229L)
                .d("GRP", "\"_EM_16647_XYZ_\"")
                .d("NAME", "\"PhMN\"")
            .and().insertInto("TAG_DERIVED", 3228L)
                .r("TAG_ID", 3229L)
                .d("ACTIVITIES_COUNT", "636620208")
            .and().insertInto("MEDIA_FILE", 3233L)
                .d("URI", "\"RwxEuBsIHvHZoL\"")
            .and().insertInto("TAG", 3232L)
                .d("GRP", "\"_EM_16648_XYZ_\"")
                .d("NAME", "\"_EM_16640_XYZ_\"")
            .and().insertInto("ACTIVITY", 3209L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -160, " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_15744_XYZ_\", " + 
                    " \"name\": \"_EM_15746_XYZ_\", " + 
                    " \"capture_date\": \"2032-01-02T23:24:59\", " + 
                    " \"copy_right\": \"_EM_15747_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 526 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3218L)
            .and().insertInto("MEDIA_FILE", 3221L)
                .d("URI", "\"F_dpdUez\"")
            .and().insertInto("TAG", 3220L)
                .d("GRP", "\"FAVOURITE\"")
                .d("NAME", "\"KGYeTM\"")
            .and().insertInto("TAG_DERIVED", 3219L)
                .r("TAG_ID", 3220L)
                .d("ACTIVITIES_COUNT", "525158")
            .and().insertInto("MEDIA_FILE", 3224L)
                .d("URI", "\"M6hxRzGN\"")
            .and().insertInto("TAG", 3223L)
                .d("GRP", "\"L_ydUnrSNw2u\"")
                .d("NAME", "\"n\"")
            .and().insertInto("TAG_DERIVED", 3222L)
                .r("TAG_ID", 3223L)
                .d("ACTIVITIES_COUNT", "0")
            .and().insertInto("MEDIA_FILE", 3227L)
                .d("URI", "\"_EM_16645_XYZ_\"")
            .and().insertInto("TAG", 3226L)
                .d("GRP", "\"_EM_16638_XYZ_\"")
                .d("NAME", "\"_EM_16646_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3225L)
                .r("TAG_ID", 3226L)
                .d("ACTIVITIES_COUNT", "113")
            .and().insertInto("MEDIA_FILE", 3230L)
                .d("URI", "\"R7mk8zWC8tzDyd\"")
            .and().insertInto("TAG", 3229L)
                .d("GRP", "\"_EM_16647_XYZ_\"")
                .d("NAME", "\"PhMN\"")
            .and().insertInto("TAG_DERIVED", 3228L)
                .r("TAG_ID", 3229L)
                .d("ACTIVITIES_COUNT", "636620208")
            .and().insertInto("MEDIA_FILE", 3233L)
                .d("URI", "\"RwxEuBsIHvHZoL\"")
            .and().insertInto("TAG", 3232L)
                .d("GRP", "\"_EM_16648_XYZ_\"")
                .d("NAME", "\"_EM_16640_XYZ_\"")
            .and().insertInto("ACTIVITY", 3209L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_15734_XYZ_\", " + 
                    " \"uri\": \"H|3QX2Z\", " + 
                    " \"name\": \"_EM_15735_XYZ_\", " + 
                    " \"capture_date\": \"1930-10-18T07:19:37\", " + 
                    " \"copy_right\": \"_EM_15736_XYZ_\", " + 
                    " \"author\": \"_EM_15737_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?" + 
                    "uri=6k96kAgMzU&" + 
                    "attrs=ZtuGiUlzIaGPs_b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3218L)
            .and().insertInto("MEDIA_FILE", 3419L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 3418L)
                .d("GRP", "\"CMQT\"")
                .d("NAME", "\"_EM_16706_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3417L)
                .r("TAG_ID", 3418L)
                .d("ACTIVITIES_COUNT", "773")
            .and().insertInto("MEDIA_FILE", 3422L)
                .d("URI", "\"9BVSxGDn\"")
            .and().insertInto("TAG", 3421L)
                .d("GRP", "\"hLDqiqacHOi4\"")
                .d("NAME", "\"nHGsImjfR8RKuvGK\"")
            .and().insertInto("TAG_DERIVED", 3420L)
                .r("TAG_ID", 3421L)
                .d("ACTIVITIES_COUNT", "1126829372")
            .and().insertInto("MEDIA_FILE", 3425L)
                .d("URI", "\"U9iCmV0YqsS\"")
            .and().insertInto("TAG", 3424L)
                .d("GRP", "\"_EM_25919_XYZ_\"")
                .d("NAME", "\"_EM_25920_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3423L)
                .r("TAG_ID", 3424L)
                .d("ACTIVITIES_COUNT", "797")
            .and().insertInto("MEDIA_FILE", 3428L)
                .d("URI", "\"_EM_16707_XYZ_\"")
            .and().insertInto("TAG", 3427L)
                .d("GRP", "\"fS9CLLez0sbmSka3\"")
                .d("NAME", "\"Q18SOcf8afI\"")
            .and().insertInto("USERS", 5671L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"B2r6ud\"")
            .and().insertInto("ACTIVITY", 5670L)
            .and().insertInto("ACTIVITY", 5669L)
            .and().insertInto("ACTIVITY_RELATION", 5668L)
                .r("ACTIVITY_1_ID", 5669L)
                .r("ACTIVITY_2_ID", 5669L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 5675L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"cr5cS4GIKdYGC\"")
            .and().insertInto("ACTIVITY", 5674L)
            .and().insertInto("ACTIVITY", 5673L)
            .and().insertInto("ACTIVITY_RELATION", 5672L)
                .r("ACTIVITY_1_ID", 5673L)
                .r("ACTIVITY_2_ID", 3218L)
                .d("OWNER_ID", "2")
            .and().insertInto("USERS", 5679L)
                .d("AUTHORIZATION_LEVEL", "590")
                .d("NAME", "\"_WL3Vrbx9mOCEs\"")
            .and().insertInto("ACTIVITY", 5678L)
            .and().insertInto("ACTIVITY", 5677L)
            .and().insertInto("ACTIVITY_RELATION", 5676L)
                .r("ACTIVITY_1_ID", 5670L)
                .r("ACTIVITY_2_ID", 5678L)
                .r("OWNER_ID", 5675L)
            .and().insertInto("USERS", 5683L)
                .d("AUTHORIZATION_LEVEL", "818")
                .d("NAME", "\"S\"")
            .and().insertInto("ACTIVITY", 5682L)
            .and().insertInto("ACTIVITY", 5681L)
            .and().insertInto("ACTIVITY_RELATION", 5680L)
                .r("ACTIVITY_1_ID", 5674L)
                .r("ACTIVITY_2_ID", 5682L)
                .d("OWNER_ID", "1")
            .and().insertInto("ACTIVITY", 3209L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_15734_XYZ_\", " + 
                    " \"uri\": \"_EM_16703_XYZ_\", " + 
                    " \"name\": \"_EM_15735_XYZ_\", " + 
                    " \"capture_date\": \"1930-10-18T07:19:37\", " + 
                    " \"copy_right\": \"_EM_15736_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?" + 
                    "uri=6k96kAgMzU&" + 
                    "attrs=ZtuGiUlzIaHPs_b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 164L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"_EM_7352_XYZ_\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"_EM_7355_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_7356_XYZ_\", " + 
                    " \"uri\": \"_EM_7357_XYZ_\", " + 
                    " \"name\": \"_EM_7358_XYZ_\", " + 
                    " \"capture_date\": \"2026-03-06T07:06:01\", " + 
                    " \"copy_right\": \"_EM_7359_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/164")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 6449L)
                .d("URI", "\"wZJ\"")
            .and().insertInto("TAG", 6448L)
                .d("GRP", "\"4FmZQcNNMb6w\"")
                .d("NAME", "\"E\"")
                .r("MEDIA_FILE_ID", 6449L)
            .and().insertInto("MEDIA_FILE", 6451L)
                .d("URI", "\"EhbnCxb_kz\"")
            .and().insertInto("TAG", 6450L)
                .d("GRP", "\"3B0wbhPXZ\"")
                .d("NAME", "\"_EM_23706_XYZ_\"")
                .r("MEDIA_FILE_ID", 6451L)
            .and().insertInto("MEDIA_FILE", 88L)
                .d("URI", "\"_EM_6922_XYZ_\"")
            .and().insertInto("TAG", 87L)
                .d("GRP", "\"4BsllZFfSSirBv\"")
                .d("NAME", "\"_EM_6923_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 909, " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_6927_XYZ_\", " + 
                    " \"capture_date\": \"2037-08-12T00:45:49\", " + 
                    " \"copy_right\": \"_EM_6929_XYZ_\", " + 
                    " \"author\": \"_EM_6930_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 4001322942861820644 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/87")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_5109_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 395, " + 
                    " \"mime_type\": \"_EM_5111_XYZ_\", " + 
                    " \"name\": \"_EM_5113_XYZ_\", " + 
                    " \"capture_date\": \"1955-11-14T19:05:33\" " + 
                    " }, " + 
                    " \"activities_count\": -1724088679 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_5115_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 639, " + 
                    " \"name\": \"FC19rlSKbu3IsJK\", " + 
                    " \"description_material\": \"fk6LQ4jB\", " + 
                    " \"description_prepare\": \"H3\", " + 
                    " \"description_main\": \"_EM_1495_XYZ_\", " + 
                    " \"description_safety\": \"_EM_14941_XYZ_\", " + 
                    " \"description_notes\": \"_EM_8914_XYZ_\", " + 
                    " \"age_min\": -2147483187, " + 
                    " \"age_max\": -2113928830, " + 
                    " \"participants_min\": 1075830890, " + 
                    " \"participants_max\": 1073742041, " + 
                    " \"time_min\": -1065795897, " + 
                    " \"time_max\": 224, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"group\": \"BMIUkchS\", " + 
                    " \"name\": \"_EM_1504_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -3751, " + 
                    " \"mime_type\": \"_EM_29310_XYZ_\", " + 
                    " \"uri\": \"_EM_1506_XYZ_\", " + 
                    " \"name\": \"_EM_1507_XYZ_\", " + 
                    " \"capture_date\": \"2082-07-18T20:45:17\", " + 
                    " \"copy_right\": \"_EM_1508_XYZ_\", " + 
                    " \"author\": \"_EM_1509_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 247 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_1510_XYZ_\", " + 
                    " \"name\": \"JC2wgy\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"SgekibiPEVoKaG\", " + 
                    " \"name\": \"_EM_1512_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 26 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 107, " + 
                    " \"group\": \"_EM_1515_XYZ_\", " + 
                    " \"name\": \"_EM_1516_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1138455912, " + 
                    " \"name\": \"_EM_14942_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"oJOqzwd_B\", " + 
                    " \"capture_date\": \"1961-04-18T16:44:60\", " + 
                    " \"author\": \"_EM_1529_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"capture_date\": \"2002-10-25T01:47:35\", " + 
                    " \"copy_right\": \"_EM_1533_XYZ_\", " + 
                    " \"author\": \"_EM_1534_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"ngj\", " + 
                    " \"uri\": \"_EM_1535_XYZ_\", " + 
                    " \"name\": \"_EM_1536_XYZ_\", " + 
                    " \"capture_date\": \"2001-02-19T22:31:01\", " + 
                    " \"copy_right\": \"_EM_1537_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"_EM_14943_XYZ_\", " + 
                    " \"uri\": \"vXm7tWjn_ZBgYiZ\", " + 
                    " \"capture_date\": \"1930-02-17T02:26:51\", " + 
                    " \"copy_right\": \"_EM_1542_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 623, " + 
                    " \"mime_type\": \"skffmU0NU1FjJiQ\", " + 
                    " \"name\": \"_EM_14944_XYZ_\", " + 
                    " \"capture_date\": \"1917-06-24T09:22:-1\", " + 
                    " \"copy_right\": \"_EM_1547_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_1550_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 5271665411066270322, " + 
                    " \"ratings_count\": 4611686018427387904, " + 
                    " \"ratings_sum\": 479, " + 
                    " \"favourites_count\": 0, " + 
                    " \"ratings_average\": 0.0, " + 
                    " \"related\": [ " + 
                    " 717, " + 
                    " -4611686018427387392, " + 
                    " -4611686018427387392 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/4611686018444165122")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_safety\": \"_EM_1910_XYZ_\", " + 
                    " \"description_notes\": \"_EM_1911_XYZ_\", " + 
                    " \"age_max\": -249, " + 
                    " \"participants_min\": 11, " + 
                    " \"participants_max\": 34, " + 
                    " \"time_max\": 540, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 224, " + 
                    " \"group\": \"_EM_1912_XYZ_\", " + 
                    " \"activities_count\": 680 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 9041120563816903019, " + 
                    " \"group\": \"_EM_1918_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 5, " + 
                    " \"mime_type\": \"b\", " + 
                    " \"uri\": \"_EM_1920_XYZ_\", " + 
                    " \"name\": \"_EM_1921_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"F8Ta5OPBJwN\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 516, " + 
                    " \"group\": \"_EM_1930_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 525, " + 
                    " \"name\": \"_EM_1939_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1940_XYZ_\", " + 
                    " \"author\": \"_EM_1941_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"capture_date\": \"1962-01-04T10:22:41\", " + 
                    " \"copy_right\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1765382070, " + 
                    " \"author\": \"_EM_1949_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 134, " + 
                    " \"name\": \"_EM_1950_XYZ_\", " + 
                    " \"email_address\": \"_EM_1951_XYZ_\", " + 
                    " \"authorization_level\": 532, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 398, " + 
                    " \"date_created\": \"1988-07-31T03:00:53\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 106, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_1953_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 515, " + 
                    " \"ratings_count\": 749, " + 
                    " \"ratings_sum\": 558, " + 
                    " \"ratings_average\": 0.39074120913872257, " + 
                    " \"related\": [ " + 
                    " 986, " + 
                    " 1851553339, " + 
                    " 195 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/919")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 7263L)
                .d("URI", "\"_EM_25684_XYZ_\"")
            .and().insertInto("TAG", 7262L)
                .d("GRP", "\"8mV_CMvHwuhCbWp\"")
                .d("NAME", "\"HgidCT\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"\", " + 
                    " \"description_prepare\": \"sHCXEzV\", " + 
                    " \"description_main\": \"jCVS7g5y36F\", " + 
                    " \"description_safety\": \"\", " + 
                    " \"age_min\": -2147483182, " + 
                    " \"participants_min\": 654, " + 
                    " \"time_min\": 324, " + 
                    " \"time_max\": 980, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"sIvtbOB\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"w\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 442, " + 
                    " \"group\": \"iuuFXk4cBll5\", " + 
                    " \"name\": \"flaQQwABT82mdmzQ\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"PV_KhgcoBxu\", " + 
                    " \"copy_right\": \"W\" " + 
                    " }, " + 
                    " \"activities_count\": 17339 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 220, " + 
                    " \"name\": \"_EM_25683_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 555, " + 
                    " \"mime_type\": \"dTqua\", " + 
                    " \"name\": \"e3cysusoFw\", " + 
                    " \"copy_right\": \"_503a\", " + 
                    " \"author\": \"3\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 549, " + 
                    " \"uri\": \"Gc6rgF9LSbJY1L\", " + 
                    " \"name\": \"Y\", " + 
                    " \"capture_date\": \"2025-03-17T10:04:19\", " + 
                    " \"copy_right\": \"IgUwG2GA\", " + 
                    " \"author\": \"BzDffb3uGCB_6nb1\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1704L)
                .d("URI", "\"_EM_12057_XYZ_\"")
            .and().insertInto("TAG", 1703L)
                .d("GRP", "\"_EM_12058_XYZ_\"")
                .d("NAME", "\"Y3uFE3wItIdG\"")
                .r("MEDIA_FILE_ID", 1704L)
            .and().insertInto("USERS", 1955L)
                .d("AUTHORIZATION_LEVEL", "699")
                .d("NAME", "\"0rZ0g\"")
            .and().insertInto("ACTIVITY", 1954L)
            .and().insertInto("ACTIVITY", 1953L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1952L)
                .d("AGE_MAX", "-2147483061")
                .d("AGE_MIN", "-2147483051")
                .d("DATE_CREATED", "\"1972-02-16 00:48:11\"")
                .d("DATE_PUBLISHED", "\"2035-12-14 00:44:49\"")
                .d("DATE_UPDATED", "\"2036-05-30 18:47:47\"")
                .d("DESCRIPTION_INTRODUCTION", "\"uCFYro_vdY8lfA\"")
                .d("DESCRIPTION_MAIN", "\"bF7Xolfbm\"")
                .d("DESCRIPTION_MATERIAL", "\"_EM_12689_XYZ_\"")
                .d("DESCRIPTION_NOTES", "\"eHROX1Q8C\"")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "\"BV86UF0eDv3\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"8Mbz\"")
                .d("PARTICIPANTS_MAX", "108")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"gslbo_bXODCEtW\"")
                .d("TIME_MAX", "NULL")
                .d("TIME_MIN", "65681")
                .r("ACTIVITY_ID", 1954L)
                .d("AUTHOR_ID", "3")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("USERS", 1959L)
                .d("AUTHORIZATION_LEVEL", "195")
                .d("NAME", "\"rKmhZsftkJLhvW\"")
            .and().insertInto("ACTIVITY", 1958L)
            .and().insertInto("ACTIVITY", 1957L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1956L)
                .d("AGE_MAX", "-454")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"2088-05-09 05:15:37\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "\"1952-01-22 13:55:13\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"ohk7rX9uj6IJka\"")
                .d("DESCRIPTION_NOTES", "\"gDh6N71yI\"")
                .d("DESCRIPTION_PREPARE", "\"lXvebi\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_12690_XYZ_\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"_EM_12691_XYZ_\"")
                .d("PARTICIPANTS_MAX", "668")
                .d("PARTICIPANTS_MIN", "817")
                .d("SOURCE", "NULL")
                .d("TIME_MAX", "33197")
                .d("TIME_MIN", "624")
                .r("ACTIVITY_ID", 1958L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 1957L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1642479284252998622, " + 
                    " \"description_prepare\": \"90eXFRk9\", " + 
                    " \"age_min\": -422, " + 
                    " \"age_max\": -2168, " + 
                    " \"participants_min\": 317, " + 
                    " \"participants_max\": 635, " + 
                    " \"time_min\": 819, " + 
                    " \"time_max\": 934, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"A1JI7e\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 137 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -314065631, " + 
                    " \"name\": \"r7_mNWbH5y\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"\", " + 
                    " \"author\": \"S\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"authorization_level\": 585, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 657, " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"UPX_W\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1974-12-09T19:59:16\", " + 
                    " \"value\": \"pRCmOZuV\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 600, " + 
                    " \"date_created\": \"2043-00-27T03:06:31\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 338 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "attrs=id%2Cidentities&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/6?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 5, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 2, " + 
                    " 4 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_124_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/391271861?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_129_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/categories/248")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/activities/862/rating?EMextraParam123=_EM_169_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"Don\u0027t care about the name\", " + 
                    " \"authorization_level\": 99, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"new user\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"A New Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:07\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"Introduction\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"location\", " + 
                    " \"name\": \"At home\", " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif - Duplicate which should not be persisted\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"G\", " + 
                    " \"name\": \"N\", " + 
                    " \"activities_count\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/profile-bob.gif\", " + 
                    " \"name\": \"Bob\u0027s Profile Picture\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/jpeg\", " + 
                    " \"uri\": \"http://example.com/profile-alice.jpg\", " + 
                    " \"name\": \"Alice\u0027s Profile Picture\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"An Updated Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"The Introduction Has Been Updated\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"A Patched Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 765159908, " + 
                    " \"name\": \"_EM_65_XYZ_\", " + 
                    " \"description_main\": \"_EM_69_XYZ_\", " + 
                    " \"description_safety\": \"_EM_70_XYZ_\", " + 
                    " \"participants_min\": 979, " + 
                    " \"participants_max\": 925, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_72_XYZ_\", " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_121_XYZ_\", " + 
                    " \"identities\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/765159908")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 339, " + 
                    " \"description_material\": \"_EM_234_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_235_XYZ_\", " + 
                    " \"description_safety\": \"_EM_238_XYZ_\", " + 
                    " \"age_max\": -2147482673, " + 
                    " \"participants_min\": 404, " + 
                    " \"time_min\": 252, " + 
                    " \"source\": \"_EM_240_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_264_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_274_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_273_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_374_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_375_XYZ_\", " + 
                    " \"uri\": \"_EM_376_XYZ_\", " + 
                    " \"name\": \"_EM_377_XYZ_\", " + 
                    " \"capture_date\": \"1944-08-08T-1:02:59\", " + 
                    " \"author\": \"_EM_379_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 889 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/494")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/556")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/api/v1/categories/852")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/-1522517815?EMextraParam123=_EM_1559_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/162?EMextraParam123=_EM_1564_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/661")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1575_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/238?attrs=_EM_1573_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/1085629470?EMextraParam123=_EM_1576_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1736_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1892_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/-944316141859085105")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/963?EMextraParam123=_EM_1554_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1613_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/18?EMextraParam123=_EM_1612_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1618_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/categories/674")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_6570_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/480?EMextraParam123=_EM_6569_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/3550668227981341718")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 5092L)
                .d("URI", "\"tpSB6kO1JwjE2XBF\"")
            .and().insertInto("TAG", 5091L)
                .d("GRP", "\"_EM_20666_XYZ_\"")
                .d("NAME", "\"qGNNAS2SEkC\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("ACTIVITY", 5093L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/5091")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 555, " + 
                    " \"mime_type\": \"qIvIKSkEoHckP4\", " + 
                    " \"author\": \"_EM_1886_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/555?EMextraParam123=_EM_1887_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5125_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_5118_XYZ_\", " + 
                    " \"authorization_level\": 928 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_5124_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 74, " + 
                    " \"uri\": \"_EM_1719_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_1723_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorization_level\": 572, " + 
                    " \"identities\": [ " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/3584016083058920410?EMextraParam123=_EM_5326_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1783_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_1776_XYZ_\", " + 
                    " \"name\": \"_EM_1777_XYZ_\", " + 
                    " \"activities_count\": 500 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1782_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1899_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 381, " + 
                    " \"group\": \"_EM_1893_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 874, " + 
                    " \"mime_type\": \"_EM_1895_XYZ_\", " + 
                    " \"uri\": \"_EM_1896_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/381?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 770, " + 
                    " \"media_file\": { " + 
                    " \"id\": 1311689370, " + 
                    " \"uri\": \"_EM_1958_XYZ_\", " + 
                    " \"name\": \"_EM_1959_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1960_XYZ_\", " + 
                    " \"author\": \"_EM_1961_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/770?EMextraParam123=_EM_1962_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1553_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"FC19rlSKbu3IsJK\", " + 
                    " \"description_material\": \"_EM_1492_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1496_XYZ_\", " + 
                    " \"description_notes\": \"_EM_1497_XYZ_\", " + 
                    " \"age_min\": -2147482718, " + 
                    " \"age_max\": -2147483262, " + 
                    " \"participants_min\": 148, " + 
                    " \"participants_max\": 871, " + 
                    " \"featured\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/639")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
