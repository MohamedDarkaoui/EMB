import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T22:03:35.434+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 44 tests
 * <br>
 * Covered targets: 1420
 * <br>
 * Used time: 0h 30m 16s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/swagger.json")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v2/tags/1?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system/roles?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission_levels'.'category_edit'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_create'", numberMatches(10.0))
                .body("'permission_levels'.'reference_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'system_message_read'", numberMatches(-100.0))
                .body("'permission_levels'.'auth_role_list'", numberMatches(20.0))
                .body("'permission_levels'.'reference_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_create'", numberMatches(20.0))
                .body("'permission_levels'.'activity_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'comment_create'", numberMatches(0.0))
                .body("'permission_levels'.'category_create'", numberMatches(10.0))
                .body("'permission_levels'.'activity_edit'", numberMatches(10.0))
                .body("'permission_levels'.'reference_create'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_edit'", numberMatches(20.0))
                .body("'permission_levels'.'auth_profile_edit'", numberMatches(0.0))
                .body("'permission_levels'.'comment_edit'", numberMatches(10.0))
                .body("'permission_levels'.'system_message_manage'", numberMatches(20.0))
                .body("'permission_levels'.'mediaitem_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assignown'", numberMatches(10.0))
                .body("'permission_levels'.'rating_set_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assign'", numberMatches(20.0))
                .body("'permission_levels'.'comment_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'activity_create'", numberMatches(0.0))
                .body("'role_levels'.'administrator'", numberMatches(20.0))
                .body("'role_levels'.'moderator'", numberMatches(10.0))
                .body("'role_levels'.'limited_user'", numberMatches(-1.0))
                .body("'role_levels'.'user'", numberMatches(0.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/166?" + 
                    "attrs=_EM_10_XYZ_&" + 
                    "EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/114?" + 
                    "attrs=_EM_64_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3218L)
            .and().insertInto("MEDIA_FILE", 3419L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 3418L)
                .d("GRP", "\"CMQT\"")
                .d("NAME", "\"_EM_16706_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3417L)
                .r("TAG_ID", 3418L)
                .d("ACTIVITIES_COUNT", "773")
            .and().insertInto("MEDIA_FILE", 3422L)
                .d("URI", "\"9BVSxGDn\"")
            .and().insertInto("TAG", 3421L)
                .d("GRP", "\"hLDqiqacHOi4\"")
                .d("NAME", "\"nHGsImjfR8RKuvGK\"")
            .and().insertInto("TAG_DERIVED", 3420L)
                .r("TAG_ID", 3421L)
                .d("ACTIVITIES_COUNT", "1126829372")
            .and().insertInto("MEDIA_FILE", 3425L)
                .d("URI", "\"U9iCmV0YqsS\"")
            .and().insertInto("TAG", 3424L)
                .d("GRP", "\"_EM_25919_XYZ_\"")
                .d("NAME", "\"_EM_25920_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 3423L)
                .r("TAG_ID", 3424L)
                .d("ACTIVITIES_COUNT", "797")
            .and().insertInto("MEDIA_FILE", 3428L)
                .d("URI", "\"_EM_16707_XYZ_\"")
            .and().insertInto("TAG", 3427L)
                .d("GRP", "\"fS9CLLez0sbmSka3\"")
                .d("NAME", "\"Q18SOcf8afI\"")
            .and().insertInto("USERS", 5671L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"B2r6ud\"")
            .and().insertInto("ACTIVITY", 5670L)
            .and().insertInto("ACTIVITY", 5669L)
            .and().insertInto("ACTIVITY_RELATION", 5668L)
                .r("ACTIVITY_1_ID", 5669L)
                .r("ACTIVITY_2_ID", 5669L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 5675L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"cr5cS4GIKdYGC\"")
            .and().insertInto("ACTIVITY", 5674L)
            .and().insertInto("ACTIVITY", 5673L)
            .and().insertInto("ACTIVITY_RELATION", 5672L)
                .r("ACTIVITY_1_ID", 5673L)
                .r("ACTIVITY_2_ID", 3218L)
                .d("OWNER_ID", "2")
            .and().insertInto("USERS", 5679L)
                .d("AUTHORIZATION_LEVEL", "590")
                .d("NAME", "\"_WL3Vrbx9mOCEs\"")
            .and().insertInto("ACTIVITY", 5678L)
            .and().insertInto("ACTIVITY", 5677L)
            .and().insertInto("ACTIVITY_RELATION", 5676L)
                .r("ACTIVITY_1_ID", 5670L)
                .r("ACTIVITY_2_ID", 5678L)
                .r("OWNER_ID", 5675L)
            .and().insertInto("USERS", 5683L)
                .d("AUTHORIZATION_LEVEL", "818")
                .d("NAME", "\"S\"")
            .and().insertInto("ACTIVITY", 5682L)
            .and().insertInto("ACTIVITY", 5681L)
            .and().insertInto("ACTIVITY_RELATION", 5680L)
                .r("ACTIVITY_1_ID", 5674L)
                .r("ACTIVITY_2_ID", 5682L)
                .d("OWNER_ID", "1")
            .and().insertInto("ACTIVITY", 3209L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories/2?attrs=_EM_16704_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=a.&" + 
                    "valid=now_and_future&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 443L)
            .and().insertInto("ACTIVITY", 444L)
            .and().insertInto("ACTIVITY", 445L)
            .and().insertInto("MEDIA_FILE", 448L)
                .d("URI", "\"tiEi0\"")
            .and().insertInto("TAG", 447L)
                .d("GRP", "\"_EM_8426_XYZ_\"")
                .d("NAME", "\"MJw3ffOFAHBFk\"")
            .and().insertInto("TAG_DERIVED", 446L)
                .r("TAG_ID", 447L)
                .d("ACTIVITIES_COUNT", "239")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files?" + 
                    "uri=_EM_7070_XYZ_&" + 
                    "attrs=h4fgNlmFNnTYuEP&" + 
                    "EMextraParam123=_EM_7071_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 153L)
                .d("AUTHOR", "\"qFGM9eTR2gUVUsD\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"3219YWQWIAb\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'mime_type'", nullValue())
                .body("[0].'uri'", containsString("3219YWQWIAb"))
                .body("[0].'name'", nullValue())
                .body("[0].'capture_date'", nullValue())
                .body("[0].'copy_right'", nullValue())
                .body("[0].'author'", containsString("qFGM9eTR2gUVUsD"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 960L)
                .d("AUTHOR", "\"Euljy0yAKU\"")
                .d("CAPTURE_DATE", "\"1912-03-27 19:13:59\"")
                .d("COPY_RIGHT", "\"_EM_10474_XYZ_\"")
                .d("MIME_TYPE", "\"D\"")
                .d("NAME", "\"1uJ3Zj\"")
                .d("URI", "\"_EM_17477_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 961L)
                .d("AUTHOR", "\"_EM_10475_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"cxKMK\"")
                .d("MIME_TYPE", "\"zusafrpLF0mkbX3J\"")
                .d("NAME", "\"XA9a\"")
                .d("URI", "\"_EM_10476_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 962L)
                .d("AUTHOR", "\"fGup\"")
                .d("CAPTURE_DATE", "\"2070-11-24 17:16:05\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_17478_XYZ_\"")
                .d("NAME", "\"VOLJvkM5kh\"")
                .d("URI", "\"GPsMdUd6l\"")
            .and().insertInto("MEDIA_FILE", 963L)
                .d("AUTHOR", "\"_EM_10477_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"p5R8sp0d3LCV\"")
                .d("NAME", "\"_EM_10478_XYZ_\"")
                .d("URI", "\"nn0\"")
            .and().insertInto("SYSTEM_MESSAGE", 983L)
                .d("KEY", "\"MEDIA_FI4_10_0_\"")
                .d("VALID_FROM", "\"1957-03-10 02:45:44\"")
                .d("VALID_TO", "\"2074-06-13 19:17:40\"")
                .d("VALUE", "\"_EM_10480_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 984L)
                .d("KEY", "\"tTYxWfa\"")
                .d("VALID_FROM", "\"2074-07-01 19:03:59\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"6L\"")
            .and().insertInto("SYSTEM_MESSAGE", 985L)
                .d("KEY", "\"SHe1VEbIKt0NOtj\"")
                .d("VALID_FROM", "\"2071-07-03 21:18:54\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"VALID_TO4_9_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?key=SHe1VEbIKt0NOt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'", containsString("SHe1VEbIKt0NOtj"))
                .body("[0].'value'", containsString("VALID_TO4_9_"))
                .body("[0].'valid_to'", nullValue())
                .body("[0].'valid_from'", numberMatches(3.203176734E12));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3306L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1965-11-20 07:01:04\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"9cEtBf1\"")
                .d("URI", "\"_EM_21274_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 3307L)
                .d("AUTHOR", "\"Qo\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"VkVhF2oXfe\"")
                .d("MIME_TYPE", "\"jDHT_WO\"")
                .d("NAME", "NULL")
                .d("URI", "\"6O4LcuTBF6LBgZS\"")
            .and().insertInto("MEDIA_FILE", 3308L)
                .d("AUTHOR", "\"filiMWx\"")
                .d("CAPTURE_DATE", "\"2060-12-17 16:08:52\"")
                .d("COPY_RIGHT", "\"gaeWwCqm86wMeik\"")
                .d("MIME_TYPE", "\"U8vGeFk\"")
                .d("NAME", "\"q3GuacUbJPF\"")
                .d("URI", "\"BLD9\"")
            .and().insertInto("MEDIA_FILE", 3314L)
                .d("URI", "\"_EM_21275_XYZ_\"")
            .and().insertInto("USERS", 3313L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"7L4WK\"")
            .and().insertInto("ACTIVITY", 3312L)
            .and().insertInto("ACTIVITY", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3310L)
                .r("ACTIVITY_ID", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3309L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3308L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3320L)
                .d("URI", "\"xwSK\"")
            .and().insertInto("USERS", 3319L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"IkIXmzO9\"")
            .and().insertInto("ACTIVITY", 3318L)
            .and().insertInto("ACTIVITY", 3317L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3316L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3315L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3314L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 3326L)
                .d("URI", "\"anu\"")
            .and().insertInto("USERS", 3325L)
                .d("AUTHORIZATION_LEVEL", "755")
                .d("NAME", "\"PUxsWLeaw74o\"")
            .and().insertInto("ACTIVITY", 3324L)
            .and().insertInto("ACTIVITY", 3323L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3322L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3321L)
                .r("ACTIVITY_PROPERTIES_ID", 3322L)
                .r("MEDIA_FILE_ID", 3306L)
                .d("FEATURED", "false")
            .and().insertInto("SYSTEM_MESSAGE", 5333L)
                .d("KEY", "\"N\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"B3X\"")
            .and().insertInto("SYSTEM_MESSAGE", 5334L)
                .d("KEY", "\"188EziNcPFeVF\"")
                .d("VALID_FROM", "\"2003-07-22 20:48:30\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_21276_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 5335L)
                .d("KEY", "\"\"")
                .d("VALID_FROM", "\"2054-01-18 07:18:19\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"fZqQs7KzH9fx4G\"")
            .and().insertInto("SYSTEM_MESSAGE", 5336L)
                .d("KEY", "\"4cnH_YEosQ03FqM\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"L\"")
            .and().insertInto("SYSTEM_MESSAGE", 5337L)
                .d("KEY", "\"ZeHrXD\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2084-03-17 09:01:59\"")
                .d("VALUE", "\"_EM_21277_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now&" + 
                    "name=Ns54g4ey0rD_z")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'key'", containsString("N"))
                .body("[0].'value'", containsString("B3X"))
                .body("[0].'valid_to'", nullValue())
                .body("[0].'valid_from'", nullValue())
                .body("[1].'key'", containsString("188EziNcPFeVF"))
                .body("[1].'value'", containsString("_EM_21276_XYZ_"))
                .body("[1].'valid_to'", nullValue())
                .body("[1].'valid_from'", numberMatches(1.05889971E12))
                .body("[2].'key'", containsString("4cnH_YEosQ03FqM"))
                .body("[2].'value'", containsString("L"))
                .body("[2].'valid_to'", nullValue())
                .body("[2].'valid_from'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "attrs=_EM_163_XYZ_&" + 
                    "EMextraParam123=_EM_164_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 443L)
            .and().insertInto("ACTIVITY", 444L)
            .and().insertInto("ACTIVITY", 445L)
            .and().insertInto("MEDIA_FILE", 448L)
                .d("URI", "\"tiEi0\"")
            .and().insertInto("TAG", 447L)
                .d("GRP", "\"_EM_10798_XYZ_\"")
                .d("NAME", "\"MJw3ffOFAHBFk\"")
            .and().insertInto("TAG_DERIVED", 446L)
                .r("TAG_ID", 447L)
                .d("ACTIVITIES_COUNT", "-16145")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_7065_XYZ_")
                .get(baseUrlOfSut + "/api/v2/tags?" + 
                    "group=_EM_7063_XYZ_&" + 
                    "name=ed1kW8Owln1&" + 
                    "min_activities_count=486&" + 
                    "attrs=_EM_7064_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 333L)
            .and().insertInto("ACTIVITY", 334L)
            .and().insertInto("ACTIVITY", 335L)
            .and().insertInto("USERS", 338L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Fy6Cryx\"")
            .and().insertInto("ACTIVITY", 337L)
            .and().insertInto("ACTIVITY_RATING", 336L)
                .r("ACTIVITY_ID", 337L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "8389812")
            .and().insertInto("USERS", 341L)
                .d("AUTHORIZATION_LEVEL", "864")
                .d("NAME", "\"_EM_17283_XYZ_\"")
            .and().insertInto("ACTIVITY", 340L)
            .and().insertInto("ACTIVITY_RATING", 339L)
                .r("ACTIVITY_ID", 340L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "821")
            .and().insertInto("USERS", 344L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"fOvMUcB_icyu\"")
            .and().insertInto("ACTIVITY", 343L)
            .and().insertInto("ACTIVITY_RATING", 342L)
                .r("ACTIVITY_ID", 343L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 347L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"ACTIVITYRA0_\"")
            .and().insertInto("ACTIVITY", 346L)
            .and().insertInto("ACTIVITY_RATING", 345L)
                .r("ACTIVITY_ID", 335L)
                .r("USER_ID", 338L)
                .d("FAVOURITE", "false")
                .d("RATING", "990")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"YMH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("YMH"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"dQ_32oNaLn\", " + 
                    " \"value\": \"N0C\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'key'", containsString("dQ_32oNaLn"))
                .body("'value'", containsString("N0C"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 8462L)
                .d("KEY", "\"3hAOOUCcrIMj\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"SsEqKMstJe\"")
            .and().insertInto("SYSTEM_MESSAGE", 8463L)
                .d("KEY", "\"MbUxRQ\"")
                .d("VALID_FROM", "\"2018-04-28 12:13:01\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"PUNouCAvt5\"")
            .and().insertInto("SYSTEM_MESSAGE", 8464L)
                .d("KEY", "\"_EM_28254_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"UwILKIOWGTWk7U\"")
            .and().insertInto("USERS", 8517L)
                .d("AUTHORIZATION_LEVEL", "1069")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "\"dsmoZbg_p7zYpCO\"")
                .d("NAME", "\"_EM_28247_XYZ_\"")
            .and().insertInto("ACTIVITY", 8525L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "name=_EM_28253_XYZ_&" + 
                    "attrs=4fLHZhRzlSzT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/25?attrs=_EM_4958_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"oeSxidcQ\", " + 
                    " \"name\": \"zzHtXTG4k\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("oeSxidcQ"))
                .body("'name'", containsString("zzHtXTG4k"))
                .body("'activities_count'", numberMatches(0.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_6612_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("INTEGRATION TEST MODERATOR"))
                .body("[0].'email_address'", nullValue())
                .body("[0].'authorization_level'", numberMatches(10.0))
                .body("[0].'identities'.size()", equalTo(1))
                .body("[0].'identities'[0].'date_created'", numberMatches(9.811548E11))
                .body("[0].'identities'[0].'type'", containsString("API"))
                .body("[0].'identities'[0].'value'", containsString("moderator"))
                .body("[1].'name'", containsString("INTEGRATION TEST ADMINISTRATOR"))
                .body("[1].'email_address'", nullValue())
                .body("[1].'authorization_level'", numberMatches(20.0))
                .body("[1].'identities'.size()", equalTo(1))
                .body("[1].'identities'[0].'date_created'", numberMatches(9.811548E11))
                .body("[1].'identities'[0].'type'", containsString("API"))
                .body("[1].'identities'[0].'value'", containsString("administrator"))
                .body("[2].'name'", containsString("INTEGRATION TEST USER"))
                .body("[2].'email_address'", nullValue())
                .body("[2].'authorization_level'", numberMatches(0.0))
                .body("[2].'identities'.size()", equalTo(1))
                .body("[2].'identities'[0].'date_created'", numberMatches(9.811548E11))
                .body("[2].'identities'[0].'type'", containsString("API"))
                .body("[2].'identities'[0].'value'", containsString("user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        String location_system_messages = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"dQ_32oNaLn\", " + 
                    " \"value\": \"N0C\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'key'", containsString("dQ_32oNaLn"))
                .body("'value'", containsString("N0C"));
        location_system_messages = "/api/v1/system_messages" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_system_messages, baseUrlOfSut + "/api/v1/system_messages/214?my_favourites=tUGR6VhNM&ratings_count_min=LGiGf5_H0&featured=G5EeVBopshv1x&ratings_average_min=Iu68OS1YpZE02xRH&name=gXSjBMd43t&text=8zoMr2OlouRTlbw4&categories=tUGR6VhNM&id=wT&attrs=LVuStvUPj&participants=BnweHNkjtTGfaDy"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_1578_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'role_permissions'.size()", equalTo(9))
                .body("'role_permissions'", hasItems("activity_create", "activity_edit_own", "auth_profile_edit", "comment_create", "comment_edit_own", "mediaitem_edit_own", "rating_set_own", "reference_edit_own", "system_message_read"))
                .body("'name'", containsString("INTEGRATION TEST USER"))
                .body("'role'", containsString("user"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3365_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_3358_XYZ_\", " + 
                    " \"name\": \"_EM_3359_XYZ_\", " + 
                    " \"activities_count\": 321 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("_EM_3358_XYZ_"))
                .body("'name'", containsString("_EM_3359_XYZ_"))
                .body("'activities_count'", numberMatches(321.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2485L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"LmQjIwUVBqvLwHg\"")
                .d("NAME", "NULL")
                .d("URI", "\"L9GwlHPhmep\"")
            .and().insertInto("MEDIA_FILE", 2486L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"GehPDu0\"")
            .and().insertInto("MEDIA_FILE", 2487L)
                .d("AUTHOR", "\"7_wOwCAG1s\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"0kbPIthmcz\"")
                .d("NAME", "NULL")
                .d("URI", "\"K1ksdDK86\"")
            .and().insertInto("MEDIA_FILE", 2493L)
                .d("URI", "\"AUw9iWUE3jb2fk\"")
            .and().insertInto("USERS", 2492L)
                .d("AUTHORIZATION_LEVEL", "625")
                .d("NAME", "\"4mRaSPKD\"")
            .and().insertInto("ACTIVITY", 2491L)
            .and().insertInto("ACTIVITY", 2490L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2489L)
                .r("ACTIVITY_ID", 2491L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2488L)
                .r("ACTIVITY_PROPERTIES_ID", 2489L)
                .r("MEDIA_FILE_ID", 2493L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2499L)
                .d("URI", "\"p82eV\"")
            .and().insertInto("USERS", 2498L)
                .d("AUTHORIZATION_LEVEL", "400")
                .d("NAME", "\"voLMe7Bn6\"")
            .and().insertInto("ACTIVITY", 2497L)
            .and().insertInto("ACTIVITY", 2496L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2495L)
                .r("ACTIVITY_ID", 2497L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2494L)
                .r("ACTIVITY_PROPERTIES_ID", 2495L)
                .r("MEDIA_FILE_ID", 2493L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2505L)
                .d("URI", "\"aPYogHRtGE\"")
            .and().insertInto("USERS", 2504L)
                .d("AUTHORIZATION_LEVEL", "957")
                .d("NAME", "\"1SlrQyIQ5hc4PE\"")
            .and().insertInto("ACTIVITY", 2503L)
            .and().insertInto("ACTIVITY", 2502L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2501L)
                .r("ACTIVITY_ID", 2490L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2500L)
                .r("ACTIVITY_PROPERTIES_ID", 2495L)
                .r("MEDIA_FILE_ID", 2486L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 2511L)
                .d("URI", "\"GdgbGo4J9\"")
            .and().insertInto("USERS", 2510L)
                .d("AUTHORIZATION_LEVEL", "959")
                .d("NAME", "\"3Am\"")
            .and().insertInto("ACTIVITY", 2509L)
            .and().insertInto("ACTIVITY", 2508L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2507L)
                .r("ACTIVITY_ID", 2502L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2506L)
                .r("ACTIVITY_PROPERTIES_ID", 2495L)
                .r("MEDIA_FILE_ID", 2487L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2517L)
                .d("URI", "\"YnO85w0O\"")
            .and().insertInto("USERS", 2516L)
                .d("AUTHORIZATION_LEVEL", "951")
                .d("NAME", "\"Tp7rWfNjvgt0g\"")
            .and().insertInto("ACTIVITY", 2515L)
            .and().insertInto("ACTIVITY", 2514L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2513L)
                .r("ACTIVITY_ID", 2508L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2512L)
                .r("ACTIVITY_PROPERTIES_ID", 2513L)
                .r("MEDIA_FILE_ID", 2485L)
                .d("FEATURED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"NtqJaQPTalqabeNH\", " + 
                    " \"name\": \"8Lzel2eq\", " + 
                    " \"author\": \"VsrXMybatJ4L_p3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("NtqJaQPTalqabeNH"))
                .body("'name'", containsString("8Lzel2eq"))
                .body("'author'", containsString("VsrXMybatJ4L_p3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=foof&" + 
                    "durations=42&" + 
                    "ratings_count_min=0&" + 
                    "ratings_average_min=0.0&" + 
                    "favourites=0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 333L)
            .and().insertInto("ACTIVITY", 334L)
            .and().insertInto("ACTIVITY", 335L)
            .and().insertInto("USERS", 338L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Fy6Cryx\"")
            .and().insertInto("ACTIVITY", 337L)
            .and().insertInto("ACTIVITY_RATING", 336L)
                .r("ACTIVITY_ID", 337L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "8389812")
            .and().insertInto("USERS", 341L)
                .d("AUTHORIZATION_LEVEL", "864")
                .d("NAME", "\"_EM_17283_XYZ_\"")
            .and().insertInto("ACTIVITY", 340L)
            .and().insertInto("ACTIVITY_RATING", 339L)
                .r("ACTIVITY_ID", 340L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "821")
            .and().insertInto("USERS", 344L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"fOvMUcB_icyu\"")
            .and().insertInto("ACTIVITY", 343L)
            .and().insertInto("ACTIVITY_RATING", 342L)
                .r("ACTIVITY_ID", 343L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 347L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"ACTIVITYRA0_\"")
            .and().insertInto("ACTIVITY", 346L)
            .and().insertInto("ACTIVITY_RATING", 345L)
                .r("ACTIVITY_ID", 335L)
                .r("USER_ID", 338L)
                .d("FAVOURITE", "false")
                .d("RATING", "990")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/favourites?attrs=eUZulaT0j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1625L)
            .and().insertInto("ACTIVITY", 1626L)
            .and().insertInto("ACTIVITY", 1627L)
            .and().insertInto("USERS", 1630L)
                .d("AUTHORIZATION_LEVEL", "1684")
                .d("NAME", "\"_EM_11942_XYZ_\"")
            .and().insertInto("ACTIVITY", 1629L)
            .and().insertInto("ACTIVITY_RATING", 1628L)
                .r("ACTIVITY_ID", 1629L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "-3304")
            .and().insertInto("USERS", 1633L)
                .d("AUTHORIZATION_LEVEL", "-16776807")
                .d("NAME", "\"_EM_11943_XYZ_\"")
            .and().insertInto("ACTIVITY", 1632L)
            .and().insertInto("ACTIVITY_RATING", 1631L)
                .r("ACTIVITY_ID", 1625L)
                .r("USER_ID", 1630L)
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 1636L)
                .d("AUTHORIZATION_LEVEL", "314")
                .d("NAME", "\"_EM_11944_XYZ_\"")
            .and().insertInto("ACTIVITY", 1635L)
            .and().insertInto("ACTIVITY_RATING", 1634L)
                .r("ACTIVITY_ID", 1625L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "431")
            .and().insertInto("USERS", 1639L)
                .d("AUTHORIZATION_LEVEL", "423")
                .d("NAME", "\"L4S_C896\"")
            .and().insertInto("ACTIVITY", 1638L)
            .and().insertInto("ACTIVITY_RATING", 1637L)
                .r("ACTIVITY_ID", 1632L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "702")
            .and().insertInto("USERS", 1642L)
                .d("AUTHORIZATION_LEVEL", "570")
                .d("NAME", "\"_EM_11945_XYZ_\"")
            .and().insertInto("ACTIVITY", 1641L)
            .and().insertInto("ACTIVITY_RATING", 1640L)
                .r("ACTIVITY_ID", 1625L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "911")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", numberMatches(5.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 7442L)
                .d("URI", "\"1y3yO4d\"")
            .and().insertInto("TAG", 7441L)
                .d("GRP", "\"lC_j8UYm6H1A484\"")
                .d("NAME", "\"\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 7444L)
                .d("URI", "\"ge69zX2sSJO0b9\"")
            .and().insertInto("TAG", 7443L)
                .d("GRP", "\"w5xJcl2RO3AyiyA\"")
                .d("NAME", "\"ianZXEa7oiY2j\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 7446L)
                .d("URI", "\"vG2izJ\"")
            .and().insertInto("TAG", 7445L)
                .d("GRP", "\"RM5\"")
                .d("NAME", "\"U\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 7448L)
                .d("URI", "\"U\"")
            .and().insertInto("TAG", 7447L)
                .d("GRP", "\"1VwJsApFwa\"")
                .d("NAME", "\"ekixgEdt\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 7450L)
                .d("URI", "\"tp\"")
            .and().insertInto("TAG", 7449L)
                .d("GRP", "\"1V\"")
                .d("NAME", "\"U5kYhC7LB\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 88L)
                .d("URI", "\"_EM_6922_XYZ_\"")
            .and().insertInto("TAG", 87L)
                .d("GRP", "\"4BsllZFfSSirBv\"")
                .d("NAME", "\"_EM_6923_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=&" + 
                    "name=xP4SODbjj&" + 
                    "ratings_count_min=901&" + 
                    "random=337&" + 
                    "favourites=940&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3306L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1965-11-20 07:01:04\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"9cEtBf1\"")
                .d("URI", "\"_EM_21274_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 3307L)
                .d("AUTHOR", "\"Qo\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"VkVhF2oXfe\"")
                .d("MIME_TYPE", "\"jDHT_WO\"")
                .d("NAME", "NULL")
                .d("URI", "\"6O4LcuTBF6LBgZS\"")
            .and().insertInto("MEDIA_FILE", 3308L)
                .d("AUTHOR", "\"filiMWx\"")
                .d("CAPTURE_DATE", "\"2060-12-17 16:08:52\"")
                .d("COPY_RIGHT", "\"gaeWwCqm86wMeik\"")
                .d("MIME_TYPE", "\"U8vGeFk\"")
                .d("NAME", "\"q3GuacUbJPF\"")
                .d("URI", "\"BLD9\"")
            .and().insertInto("MEDIA_FILE", 3314L)
                .d("URI", "\"_EM_21275_XYZ_\"")
            .and().insertInto("USERS", 3313L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"7L4WK\"")
            .and().insertInto("ACTIVITY", 3312L)
            .and().insertInto("ACTIVITY", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3310L)
                .r("ACTIVITY_ID", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3309L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3308L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3320L)
                .d("URI", "\"xwSK\"")
            .and().insertInto("USERS", 3319L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"IkIXmzO9\"")
            .and().insertInto("ACTIVITY", 3318L)
            .and().insertInto("ACTIVITY", 3317L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3316L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3315L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3314L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 3326L)
                .d("URI", "\"anu\"")
            .and().insertInto("USERS", 3325L)
                .d("AUTHORIZATION_LEVEL", "755")
                .d("NAME", "\"PUxsWLeaw74o\"")
            .and().insertInto("ACTIVITY", 3324L)
            .and().insertInto("ACTIVITY", 3323L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3322L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3321L)
                .r("ACTIVITY_PROPERTIES_ID", 3322L)
                .r("MEDIA_FILE_ID", 3306L)
                .d("FEATURED", "false")
            .and().insertInto("SYSTEM_MESSAGE", 5333L)
                .d("KEY", "\"N\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"B3X\"")
            .and().insertInto("SYSTEM_MESSAGE", 5334L)
                .d("KEY", "\"188EziNcPFeVF\"")
                .d("VALID_FROM", "\"2003-07-22 20:48:30\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_21276_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 5335L)
                .d("KEY", "\"\"")
                .d("VALID_FROM", "\"2054-01-18 07:18:19\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"fZqQs7KzH9fx4G\"")
            .and().insertInto("SYSTEM_MESSAGE", 5336L)
                .d("KEY", "\"4cnH_YEosQ03FqM\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"L\"")
            .and().insertInto("SYSTEM_MESSAGE", 5337L)
                .d("KEY", "\"ZeHrXD\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2084-03-17 09:01:59\"")
                .d("VALUE", "\"_EM_21277_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"sgNKkK3r2X6506nA\", " + 
                    " \"name\": \"8TdpITBc\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"9373LhSR\", " + 
                    " \"uri\": \"\", " + 
                    " \"name\": \"KrC_MQPP\", " + 
                    " \"copy_right\": \"B\", " + 
                    " \"author\": \"5\" " + 
                    " }, " + 
                    " \"activities_count\": 328 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("sgNKkK3r2X6506nA"))
                .body("'name'", containsString("8TdpITBc"))
                .body("'media_file'.'mime_type'", containsString("9373LhSR"))
                .body("'media_file'.'uri'", containsString(""))
                .body("'media_file'.'name'", containsString("KrC_MQPP"))
                .body("'media_file'.'copy_right'", containsString("B"))
                .body("'media_file'.'author'", containsString("5"))
                .body("'activities_count'", numberMatches(328.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 8453L)
                .d("KEY", "\"GJdp7a7\"")
                .d("VALID_FROM", "\"1993-11-24 16:56:16\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"K0u\"")
            .and().insertInto("SYSTEM_MESSAGE", 8454L)
                .d("KEY", "\"_EM_28000_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2025-10-23 16:38:37\"")
                .d("VALUE", "\"ZAC3NTZbp1IpZcA\"")
            .and().insertInto("SYSTEM_MESSAGE", 8455L)
                .d("KEY", "\"MEwPW\"")
                .d("VALID_FROM", "\"2003-03-18 09:16:13\"")
                .d("VALID_TO", "\"1900-12-10 15:36:50\"")
                .d("VALUE", "\"i2Gqskl4pD\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_tags = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"BC65Yjj\", " + 
                    " \"name\": \"Jxyo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("BC65Yjj"))
                .body("'name'", containsString("Jxyo"))
                .body("'activities_count'", numberMatches(0.0));
        location_tags = "/api/v2/tags" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 585, " + 
                    " \"group\": \"ac\", " + 
                    " \"name\": \"Jxyo\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -2020325061289246110, " + 
                    " \"mime_type\": \"9o\", " + 
                    " \"uri\": \"S4mgq54tPaiS\", " + 
                    " \"author\": \"A8z45kWz_aNSO9z\" " + 
                    " }, " + 
                    " \"activities_count\": 144 " + 
                    " } ")
                .put(resolveLocation(location_tags, baseUrlOfSut + "/api/v2/tags/521?my_favourites=_sIN02ZBnjmZeAg&ratings_count_min=CaTZmHP2tDhw&random=&name=Jxyo&categories=ruYJespIU907m&id=_EM_27999_XYZ_&attrs=YPm&participants=5LFfnesXKQTGce"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("ac"))
                .body("'name'", containsString("Jxyo"))
                .body("'activities_count'", numberMatches(0.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 11672L)
            .and().insertInto("ACTIVITY", 11673L)
            .and().insertInto("ACTIVITY", 11674L)
            .and().insertInto("ACTIVITY", 11675L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/1/rating?" + 
                    "attrs=B8ezUMM9S6&" + 
                    "group=9TslIabcSQS9b")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 333L)
            .and().insertInto("ACTIVITY", 334L)
            .and().insertInto("ACTIVITY", 335L)
            .and().insertInto("USERS", 338L)
                .d("AUTHORIZATION_LEVEL", "64")
                .d("NAME", "\"Fy6Cryx\"")
            .and().insertInto("ACTIVITY", 337L)
            .and().insertInto("ACTIVITY_RATING", 336L)
                .r("ACTIVITY_ID", 337L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "8389812")
            .and().insertInto("USERS", 341L)
                .d("AUTHORIZATION_LEVEL", "866")
                .d("NAME", "\"_EM_17283_XYZ_\"")
            .and().insertInto("ACTIVITY", 340L)
            .and().insertInto("ACTIVITY_RATING", 339L)
                .r("ACTIVITY_ID", 334L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 344L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"fOvMUcB_icyu\"")
            .and().insertInto("ACTIVITY", 343L)
            .and().insertInto("ACTIVITY_RATING", 342L)
                .r("ACTIVITY_ID", 333L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "0")
            .and().insertInto("USERS", 347L)
                .d("AUTHORIZATION_LEVEL", "-8")
                .d("NAME", "\"ACTIVITYRA0_\"")
            .and().insertInto("ACTIVITY", 346L)
            .and().insertInto("ACTIVITY_RATING", 345L)
                .r("ACTIVITY_ID", 340L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "-7202")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "text=blYz6QfV0Zu&" + 
                    "featured=false&" + 
                    "ratings_count_min=17&" + 
                    "ratings_average_min=0.7632495834375448&" + 
                    "random=429&" + 
                    "favourites=367&" + 
                    "min_activities_count=Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3306L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1965-11-20 07:01:04\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"9cEtBf1\"")
                .d("URI", "\"_EM_21274_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 3307L)
                .d("AUTHOR", "\"Qo\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"VkVhF2oXfe\"")
                .d("MIME_TYPE", "\"jDHT_WO\"")
                .d("NAME", "NULL")
                .d("URI", "\"6O4LcuTBF6LBgZS\"")
            .and().insertInto("MEDIA_FILE", 3308L)
                .d("AUTHOR", "\"filiMWx\"")
                .d("CAPTURE_DATE", "\"2060-12-17 16:08:52\"")
                .d("COPY_RIGHT", "\"gaeWwCqm86wMeik\"")
                .d("MIME_TYPE", "\"U8vGeFk\"")
                .d("NAME", "\"q3GuacUbJPF\"")
                .d("URI", "\"BLD9\"")
            .and().insertInto("MEDIA_FILE", 3314L)
                .d("URI", "\"_EM_21275_XYZ_\"")
            .and().insertInto("USERS", 3313L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"7L4WK\"")
            .and().insertInto("ACTIVITY", 3312L)
            .and().insertInto("ACTIVITY", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3310L)
                .r("ACTIVITY_ID", 3311L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3309L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3308L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3320L)
                .d("URI", "\"xwSK\"")
            .and().insertInto("USERS", 3319L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"IkIXmzO9\"")
            .and().insertInto("ACTIVITY", 3318L)
            .and().insertInto("ACTIVITY", 3317L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3316L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3315L)
                .r("ACTIVITY_PROPERTIES_ID", 3310L)
                .r("MEDIA_FILE_ID", 3314L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 3326L)
                .d("URI", "\"anu\"")
            .and().insertInto("USERS", 3325L)
                .d("AUTHORIZATION_LEVEL", "755")
                .d("NAME", "\"PUxsWLeaw74o\"")
            .and().insertInto("ACTIVITY", 3324L)
            .and().insertInto("ACTIVITY", 3323L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3322L)
                .r("ACTIVITY_ID", 3318L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3321L)
                .r("ACTIVITY_PROPERTIES_ID", 3322L)
                .r("MEDIA_FILE_ID", 3306L)
                .d("FEATURED", "false")
            .and().insertInto("SYSTEM_MESSAGE", 5333L)
                .d("KEY", "\"N\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"B3X\"")
            .and().insertInto("SYSTEM_MESSAGE", 5334L)
                .d("KEY", "\"188EziNcPFeVF\"")
                .d("VALID_FROM", "\"2003-07-22 20:48:30\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_21276_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 5335L)
                .d("KEY", "\"\"")
                .d("VALID_FROM", "\"2054-01-18 07:18:19\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"fZqQs7KzH9fx4G\"")
            .and().insertInto("SYSTEM_MESSAGE", 5336L)
                .d("KEY", "\"4cnH_YEosQ03FqM\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"L\"")
            .and().insertInto("SYSTEM_MESSAGE", 5337L)
                .d("KEY", "\"ZeHrXD\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2084-03-17 09:01:59\"")
                .d("VALUE", "\"_EM_21277_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"oVOerrRHR\", " + 
                    " \"description_material\": \"cjR4A6xju26Ocd_\", " + 
                    " \"description_introduction\": \"8z87yrkzFa\", " + 
                    " \"description_main\": \"cjR4A6xju26Ocd_\", " + 
                    " \"description_safety\": \"cjR4A6xju26Ocd_\", " + 
                    " \"age_max\": -2147483515, " + 
                    " \"time_max\": -2147483516, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"69Ey2D3\", " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 838 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'name'", containsString("oVOerrRHR"))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-05-26T22:03:28.371Z"))
                .body("'properties_revisions'[0].'description_material'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties_revisions'[0].'description_introduction'", containsString("8z87yrkzFa"))
                .body("'properties_revisions'[0].'description_main'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties_revisions'[0].'description_safety'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties_revisions'[0].'age_max'", numberMatches(-2.147483515E9))
                .body("'properties_revisions'[0].'time_max'", numberMatches(-2.147483516E9))
                .body("'properties_revisions'[0].'featured'", equalTo(false))
                .body("'properties_revisions'[0].'source'", containsString("69Ey2D3"))
                .body("'properties'.'name'", containsString("oVOerrRHR"))
                .body("'properties'.'date_created'", containsString("2024-05-26T22:03:28.371Z"))
                .body("'properties'.'description_material'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties'.'description_introduction'", containsString("8z87yrkzFa"))
                .body("'properties'.'description_main'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties'.'description_safety'", containsString("cjR4A6xju26Ocd_"))
                .body("'properties'.'age_max'", numberMatches(-2.147483515E9))
                .body("'properties'.'time_max'", numberMatches(-2.147483516E9))
                .body("'properties'.'featured'", equalTo(false))
                .body("'properties'.'source'", containsString("69Ey2D3"))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 4055L)
            .and().insertInto("ACTIVITY", 4056L)
            .and().insertInto("ACTIVITY", 4057L)
            .and().insertInto("ACTIVITY", 4058L)
            .and().insertInto("ACTIVITY", 4059L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_material\": \"M2qc67lfvlIa\", " + 
                    " \"description_introduction\": \"6Old6lq\", " + 
                    " \"description_prepare\": \"fsYb\", " + 
                    " \"description_main\": \"M2qc67lfvlIa\", " + 
                    " \"description_notes\": \"M2qc67lfvlIa\", " + 
                    " \"age_max\": 78, " + 
                    " \"participants_min\": 395, " + 
                    " \"participants_max\": 395, " + 
                    " \"time_min\": 78, " + 
                    " \"time_max\": -2147483181, " + 
                    " \"source\": \"dA\", " + 
                    " \"activity\": { " + 
                    " \"ratings_sum\": -2145210849, " + 
                    " \"favourites_count\": 545, " + 
                    " \"ratings_average\": 0.5236917576090859, " + 
                    " \"related\": [ " + 
                    " 71 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-05-26T22:03:29.127Z"))
                .body("'properties_revisions'[0].'description_material'", containsString("M2qc67lfvlIa"))
                .body("'properties_revisions'[0].'description_introduction'", containsString("6Old6lq"))
                .body("'properties_revisions'[0].'description_prepare'", containsString("fsYb"))
                .body("'properties_revisions'[0].'description_main'", containsString("M2qc67lfvlIa"))
                .body("'properties_revisions'[0].'description_notes'", containsString("M2qc67lfvlIa"))
                .body("'properties_revisions'[0].'age_max'", numberMatches(78.0))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(395.0))
                .body("'properties_revisions'[0].'participants_max'", numberMatches(395.0))
                .body("'properties_revisions'[0].'time_min'", numberMatches(78.0))
                .body("'properties_revisions'[0].'time_max'", numberMatches(-2.147483181E9))
                .body("'properties_revisions'[0].'source'", containsString("dA"))
                .body("'properties'.'date_created'", containsString("2024-05-26T22:03:29.127Z"))
                .body("'properties'.'description_material'", containsString("M2qc67lfvlIa"))
                .body("'properties'.'description_introduction'", containsString("6Old6lq"))
                .body("'properties'.'description_prepare'", containsString("fsYb"))
                .body("'properties'.'description_main'", containsString("M2qc67lfvlIa"))
                .body("'properties'.'description_notes'", containsString("M2qc67lfvlIa"))
                .body("'properties'.'age_max'", numberMatches(78.0))
                .body("'properties'.'participants_min'", numberMatches(395.0))
                .body("'properties'.'participants_max'", numberMatches(395.0))
                .body("'properties'.'time_min'", numberMatches(78.0))
                .body("'properties'.'time_max'", numberMatches(-2.147483181E9))
                .body("'properties'.'source'", containsString("dA"))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system/ping?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 7012L)
                .d("AUTHORIZATION_LEVEL", "734")
                .d("DATE_CREATED", "\"2065-04-03 19:24:16\"")
                .d("EMAIL_ADDRESS", "\"_EM_25068_XYZ_\"")
                .d("NAME", "\"Xub\"")
            .and().insertInto("USERS", 7013L)
                .d("AUTHORIZATION_LEVEL", "157")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "\"_EM_25069_XYZ_\"")
                .d("NAME", "\"FesqHeG5oE850OK\"")
            .and().insertInto("USERS", 7014L)
                .d("AUTHORIZATION_LEVEL", "310")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "\"B\"")
                .d("NAME", "\"MKipGqiWGVAGj\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/2")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2604L)
                .d("URI", "\"JBiP\"")
            .and().insertInto("TAG", 2603L)
                .d("GRP", "\"wrWNjcFEM5ozvx14\"")
                .d("NAME", "\"_EM_16192_XYZ_\"")
                .r("MEDIA_FILE_ID", 2604L)
            .and().insertInto("MEDIA_FILE", 2606L)
                .d("URI", "\"mR6JUsTWUEzQMU\"")
            .and().insertInto("TAG", 2605L)
                .d("GRP", "\"QSzB\"")
                .d("NAME", "\"_EM_16193_XYZ_\"")
                .r("MEDIA_FILE_ID", 2606L)
            .and().insertInto("MEDIA_FILE", 2608L)
                .d("URI", "\"_EM_16194_XYZ_\"")
            .and().insertInto("TAG", 2607L)
                .d("GRP", "\"FUNCTION_COLUMNS\"")
                .d("NAME", "\"O47qE\"")
                .r("MEDIA_FILE_ID", 2606L)
            .and().insertInto("MEDIA_FILE", 2610L)
                .d("URI", "\"_EM_16077_XYZ_\"")
            .and().insertInto("TAG", 2609L)
                .d("GRP", "\"_Txt\"")
                .d("NAME", "\"976173\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2612L)
                .d("URI", "\"DbXfGuhn7\"")
            .and().insertInto("TAG", 2611L)
                .d("GRP", "\"_EM_16086_XYZ_\"")
                .d("NAME", "\"r6YeLlw\"")
                .r("MEDIA_FILE_ID", 2608L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/1")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/1?verify_unused=true")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 443L)
            .and().insertInto("ACTIVITY", 444L)
            .and().insertInto("ACTIVITY", 445L)
            .and().insertInto("MEDIA_FILE", 448L)
                .d("URI", "\"tiEi0\"")
            .and().insertInto("TAG", 447L)
                .d("GRP", "\"_EM_8426_XYZ_\"")
                .d("NAME", "\"MJw3ffOFAHBFk\"")
            .and().insertInto("TAG_DERIVED", 446L)
                .r("TAG_ID", 447L)
                .d("ACTIVITIES_COUNT", "239")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/activities/2?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 11672L)
            .and().insertInto("ACTIVITY", 11673L)
            .and().insertInto("ACTIVITY", 11674L)
            .and().insertInto("ACTIVITY", 11675L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 3, " + 
                    " 709, " + 
                    " 757, " + 
                    " 774, " + 
                    " 938 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 333L)
            .and().insertInto("ACTIVITY", 334L)
            .and().insertInto("ACTIVITY", 335L)
            .and().insertInto("USERS", 338L)
                .d("AUTHORIZATION_LEVEL", "-3687")
                .d("NAME", "\"Fy6Cry\"")
            .and().insertInto("ACTIVITY", 337L)
            .and().insertInto("ACTIVITY_RATING", 336L)
                .r("ACTIVITY_ID", 333L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "8389556")
            .and().insertInto("USERS", 341L)
                .d("AUTHORIZATION_LEVEL", "864")
                .d("NAME", "\"E0a_O364i\"")
            .and().insertInto("ACTIVITY", 340L)
            .and().insertInto("ACTIVITY_RATING", 339L)
                .r("ACTIVITY_ID", 333L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "821")
            .and().insertInto("USERS", 344L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"1sDq0qgBK68J\"")
            .and().insertInto("ACTIVITY", 343L)
            .and().insertInto("ACTIVITY_RATING", 342L)
                .r("ACTIVITY_ID", 343L)
                .r("USER_ID", 341L)
                .d("FAVOURITE", "false")
                .d("RATING", "1048950")
            .and().insertInto("USERS", 347L)
                .d("AUTHORIZATION_LEVEL", "818")
                .d("NAME", "\"_EM_7898_XYZ_\"")
            .and().insertInto("ACTIVITY", 346L)
            .and().insertInto("ACTIVITY_RATING", 345L)
                .r("ACTIVITY_ID", 334L)
                .r("USER_ID", 344L)
                .d("FAVOURITE", "true")
                .d("RATING", "989")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " -1352, " + 
                    " 125, " + 
                    " -130358, " + 
                    " 251 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_5175_XYZ_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 333L)
            .and().insertInto("ACTIVITY", 334L)
            .and().insertInto("ACTIVITY", 335L)
            .and().insertInto("USERS", 338L)
                .d("AUTHORIZATION_LEVEL", "64")
                .d("NAME", "\"Fy8Cryx\"")
            .and().insertInto("ACTIVITY", 337L)
            .and().insertInto("ACTIVITY_RATING", 336L)
                .r("ACTIVITY_ID", 337L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "8389812")
            .and().insertInto("USERS", 341L)
                .d("AUTHORIZATION_LEVEL", "866")
                .d("NAME", "\"_EM_17283_XYZ_\"")
            .and().insertInto("ACTIVITY", 340L)
            .and().insertInto("ACTIVITY_RATING", 339L)
                .r("ACTIVITY_ID", 334L)
                .r("USER_ID", 338L)
                .d("FAVOURITE", "false")
                .d("RATING", "-16")
            .and().insertInto("USERS", 344L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"fOvMUcB_icyu\"")
            .and().insertInto("ACTIVITY", 343L)
            .and().insertInto("ACTIVITY_RATING", 342L)
                .r("ACTIVITY_ID", 334L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 347L)
                .d("AUTHORIZATION_LEVEL", "-8")
                .d("NAME", "\"ACTIVITYRA0_\"")
            .and().insertInto("ACTIVITY", 346L)
            .and().insertInto("ACTIVITY_RATING", 345L)
                .r("ACTIVITY_ID", 340L)
                .r("USER_ID", 338L)
                .d("FAVOURITE", "true")
                .d("RATING", "990")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " -1352, " + 
                    " 0, " + 
                    " 2, " + 
                    " 247 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
