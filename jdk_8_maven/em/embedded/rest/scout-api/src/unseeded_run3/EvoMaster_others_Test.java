import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T03:56:47.084+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 78 tests
 * <br>
 * Covered targets: 594
 * <br>
 * Used time: 2h 0m 17s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("SYSTEM_MESSAGE","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY","MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","TAG_DERIVED"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 6371L)
            .and().insertInto("ACTIVITY", 6372L)
            .and().insertInto("ACTIVITY", 6373L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_tags = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"rSk\", " + 
                    " \"name\": \"e57nddIZnpq4\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("rSk"))
                .body("'name'", containsString("e57nddIZnpq4"))
                .body("'activities_count'", numberMatches(0.0));
        location_tags = "/api/v2/tags" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_tags, baseUrlOfSut + "/api/v2/tags/148?EMextraParam123=42"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=pA7sfREZ&" + 
                    "featured=false&" + 
                    "participants=ECoQ1zB_pO9X&" + 
                    "durations=rZuArHhNaEG&" + 
                    "id=148&" + 
                    "ratings_average_min=0.1418987950375029&" + 
                    "random=285&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_7476_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "attrs=_EM_7477_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 6494L)
                .d("URI", "\"U4qKqkv2Eo4NY2\"")
            .and().insertInto("TAG", 6493L)
                .d("GRP", "\"VALUE5_9_\"")
                .d("NAME", "\"XBS7mtnjt\"")
                .r("MEDIA_FILE_ID", 6494L)
            .and().insertInto("MEDIA_FILE", 6496L)
                .d("URI", "\"_EM_30662_XYZt\"")
            .and().insertInto("TAG", 6495L)
                .d("GRP", "\"4667680\"")
                .d("NAME", "\"4637294\"")
                .r("MEDIA_FILE_ID", 6494L)
            .and().insertInto("MEDIA_FILE", 6498L)
                .d("URI", "\"_EM_34499_XYZ_\"")
            .and().insertInto("TAG", 6497L)
                .d("GRP", "\"_EM_30671_XYZ_\"")
                .d("NAME", "\"_EM_34500_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=&" + 
                    "name=mCh31aXgFeJ&" + 
                    "text=_EM_34497_XYZ_&" + 
                    "categories=2&" + 
                    "ages=HQanj3BwQkEyRZI&" + 
                    "participants=_UMa48U5_XYZU&" + 
                    "durations=_f7uNxgRd9ZE&" + 
                    "id=_EM_34498_XYZ_&" + 
                    "ratings_count_min=-6446517461023918808&" + 
                    "ratings_average_min=5.02267908E8&" + 
                    "random=-196376&" + 
                    "favourites=-65453")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2481L)
                .d("URI", "\"_M03feid2pOpfzLG\"")
            .and().insertInto("TAG", 2480L)
                .d("GRP", "\"MKIJCeN4wmiQfRr\"")
                .d("NAME", "\"Z6sBu8cZ\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2483L)
                .d("URI", "\"nwHwDIRn\"")
            .and().insertInto("TAG", 2482L)
                .d("GRP", "\"Ai_ZVQFOy\"")
                .d("NAME", "\"yYPSs3xE\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2485L)
                .d("URI", "\"iTM\"")
            .and().insertInto("TAG", 2484L)
                .d("GRP", "\"YdDQkIgfSwi1GVI5\"")
                .d("NAME", "\"YZHghy0K9Fg\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2487L)
                .d("URI", "\"eFvz\"")
            .and().insertInto("TAG", 2486L)
                .d("GRP", "\"n_yWhZYAu2PJ7\"")
                .d("NAME", "\"q8M32\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "text=bPpiR1&" + 
                    "ages=54&" + 
                    "id=3uWh&" + 
                    "random=59&" + 
                    "favourites=675")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=WZjh_&" + 
                    "participants=1&" + 
                    "time_1=_EM_5168_XYZ_&" + 
                    "time_2=_EM_5169_XYZ_&" + 
                    "ratings_count_min=880&" + 
                    "ratings_average_min=0.35074987694519266&" + 
                    "random=274&" + 
                    "favourites=18")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 7739L)
                .d("URI", "\"MUUw3E0eDxo3U\"")
            .and().insertInto("TAG", 7738L)
                .d("GRP", "\"_wqKlXEopEb_7i85\"")
                .d("NAME", "\"85q2OJC\"")
            .and().insertInto("USERS", 7737L)
                .d("AUTHORIZATION_LEVEL", "16388")
                .d("NAME", "\"fi7_N2\"")
            .and().insertInto("ACTIVITY", 7736L)
            .and().insertInto("ACTIVITY", 7735L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7734L)
                .r("ACTIVITY_ID", 7735L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 7733L)
                .r("ACTIVITY_PROPERTIES_ID", 7734L)
                .r("TAG_ID", 7738L)
            .and().insertInto("MEDIA_FILE", 7745L)
                .d("URI", "\"_EM_52692_XYZ_\"")
            .and().insertInto("USERS", 7744L)
                .d("AUTHORIZATION_LEVEL", "-7510")
                .d("NAME", "\"_EM_52693_XYZ_\"")
            .and().insertInto("ACTIVITY", 7743L)
            .and().insertInto("ACTIVITY", 7742L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7741L)
                .r("ACTIVITY_ID", 7736L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7740L)
                .r("ACTIVITY_PROPERTIES_ID", 7741L)
                .r("MEDIA_FILE_ID", 7739L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 7751L)
                .d("URI", "\"p_Qj7\"")
            .and().insertInto("USERS", 7750L)
                .d("AUTHORIZATION_LEVEL", "-4193643")
                .d("NAME", "\"19D35\"")
            .and().insertInto("ACTIVITY", 7749L)
            .and().insertInto("ACTIVITY", 7748L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7747L)
                .r("ACTIVITY_ID", 7743L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7746L)
                .r("ACTIVITY_PROPERTIES_ID", 7734L)
                .r("MEDIA_FILE_ID", 7739L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7757L)
                .d("URI", "\"vFSeePSWTAcBgMC\"")
            .and().insertInto("USERS", 7756L)
                .d("AUTHORIZATION_LEVEL", "16778055")
                .d("NAME", "\"w\"")
            .and().insertInto("ACTIVITY", 7755L)
            .and().insertInto("ACTIVITY", 7754L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7753L)
                .r("ACTIVITY_ID", 7736L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7752L)
                .r("ACTIVITY_PROPERTIES_ID", 7734L)
                .r("MEDIA_FILE_ID", 7757L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7763L)
                .d("URI", "\"_EM_52694_XYZ_\"")
            .and().insertInto("USERS", 7762L)
                .d("AUTHORIZATION_LEVEL", "980")
                .d("NAME", "\"lJIhYPTLoSJag\"")
            .and().insertInto("ACTIVITY", 7761L)
            .and().insertInto("ACTIVITY", 7760L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7759L)
                .r("ACTIVITY_ID", 7755L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7758L)
                .r("ACTIVITY_PROPERTIES_ID", 7753L)
                .r("MEDIA_FILE_ID", 7745L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7769L)
                .d("URI", "\"_EM_52695_XYZ_\"")
            .and().insertInto("USERS", 7768L)
                .d("AUTHORIZATION_LEVEL", "954")
                .d("NAME", "\"_EM_52696_XYZ_\"")
            .and().insertInto("ACTIVITY", 7767L)
            .and().insertInto("ACTIVITY", 7766L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7765L)
                .r("ACTIVITY_ID", 7766L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7764L)
                .r("ACTIVITY_PROPERTIES_ID", 7753L)
                .r("MEDIA_FILE_ID", 7757L)
                .d("FEATURED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 388, " + 
                    " \"key\": \"qTcbPXuwWy1CRnc\", " + 
                    " \"valid_to\": \"1907-07-04T12:03:40\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2173_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3186863864942974651, " + 
                    " \"name\": \"ccq89x_uQ4Ytm6tn\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"sF\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/3186863864942974651")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_11459_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"_EM_11454_XYZ_\", " + 
                    " \"capture_date\": \"2046-07-14T18:02:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/470?EMextraParam123=_EM_11458_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 301L)
                .d("KEY", "\"_EM_90299_XYZ_\"")
                .d("VALID_FROM", "\"2069-01-01 08:25:50\"")
                .d("VALID_TO", "\"2000-06-18 11:00:39\"")
                .d("VALUE", "\"_EM_10094_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 302L)
                .d("KEY", "\"WUUUU192_UUV_u\"")
                .d("VALID_FROM", "\"2011-05-06 04:15:02\"")
                .d("VALID_TO", "\"1986-03-01 23:14:44\"")
                .d("VALUE", "\"vxqfztlNSCsIDNS\"")
            .and().insertInto("SYSTEM_MESSAGE", 303L)
                .d("KEY", "\"_EM_71005_XYZ_\"")
                .d("VALID_FROM", "\"2054-06-11 12:42:33\"")
                .d("VALID_TO", "\"2041-08-29 00:00:07\"")
                .d("VALUE", "\"0\"")
            .and().insertInto("SYSTEM_MESSAGE", 304L)
                .d("KEY", "\"_EM_10096_XYZ_\"")
                .d("VALID_FROM", "\"2000-01-16 09:29:04\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"4552920\"")
            .and().insertInto("SYSTEM_MESSAGE", 305L)
                .d("KEY", "\"o\"")
                .d("VALID_FROM", "\"2014-10-13 00:36:24\"")
                .d("VALID_TO", "\"1954-08-04 15:49:29\"")
                .d("VALUE", "\"Y\"")
            .and().insertInto("ACTIVITY", 306L)
            .and().insertInto("ACTIVITY", 307L)
            .and().insertInto("ACTIVITY", 308L)
            .and().insertInto("ACTIVITY", 309L)
            .and().insertInto("ACTIVITY", 310L)
            .and().insertInto("USERS", 23962L)
                .d("AUTHORIZATION_LEVEL", "3")
                .d("NAME", "\"r_f_\"")
            .and().insertInto("ACTIVITY", 23961L)
            .and().insertInto("ACTIVITY_RATING", 23960L)
                .r("ACTIVITY_ID", 309L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "-65324")
            .and().insertInto("MEDIA_FILE", 23964L)
                .d("URI", "\"_EM_90300_XYZ_\"")
            .and().insertInto("TAG", 23963L)
                .d("GRP", "\"VV1_YM0bsh0Gl1\"")
                .d("NAME", "\"_EM_89982_XYZ_\"")
                .r("MEDIA_FILE_ID", 23964L)
            .and().insertInto("MEDIA_FILE", 23966L)
                .d("URI", "\"adb6d65F\"")
            .and().insertInto("TAG", 23965L)
                .d("GRP", "\"O_mOgISD8Hqsw5\"")
                .d("NAME", "\"XKr\"")
                .r("MEDIA_FILE_ID", 23966L)
            .and().insertInto("MEDIA_FILE", 23968L)
                .d("URI", "\"P7ffDz\"")
            .and().insertInto("TAG", 23967L)
                .d("GRP", "\"b9rK93vjZ\"")
                .d("NAME", "\"_EM_90301_XYZ_\"")
                .r("MEDIA_FILE_ID", 23964L)
            .and().insertInto("MEDIA_FILE", 23970L)
                .d("URI", "\"Vzoe\"")
            .and().insertInto("TAG", 23969L)
                .d("GRP", "\"_EM_89983_XYZ_\"")
                .d("NAME", "\"4RSaIEcJS3O\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 24009L)
                .d("URI", "\"Bqj7\"")
            .and().insertInto("TAG", 24008L)
                .d("GRP", "\"Iu3t\"")
                .d("NAME", "\"2PvgMGuWwuahp\"")
            .and().insertInto("TAG_DERIVED", 24007L)
                .r("TAG_ID", 23965L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -3566850904877431808, " + 
                    " \"key\": \"_EM_89979_XYZ_\", " + 
                    " \"value\": \"_EM_8159_XYZ_\", " + 
                    " \"valid_to\": \"2004-05-10T20:19:21\", " + 
                    " \"valid_from\": \"2000-02-05T09:-1:25\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/16552")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_8940_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_8934_XYZ_\", " + 
                    " \"email_address\": \"_EM_8935_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 45, " + 
                    " \"date_created\": \"2047-01-17T13:36:41\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1953-01-14T11:19:45\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 793, " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_8939_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 11291L)
                .d("KEY", "\"_EM_59163_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2057-09-07 07:57:34\"")
                .d("VALUE", "\"Uc8\"")
            .and().insertInto("SYSTEM_MESSAGE", 11292L)
                .d("KEY", "\"Ee1u\"")
                .d("VALID_FROM", "\"1934-08-22 17:46:04\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"onCOy3jCEMY\"")
            .and().insertInto("SYSTEM_MESSAGE", 11293L)
                .d("KEY", "\"w7zAn\"")
                .d("VALID_FROM", "\"2002-03-07 22:34:30\"")
                .d("VALID_TO", "\"2044-03-16 02:04:49\"")
                .d("VALUE", "\"FmAPfnURV\"")
            .and().insertInto("SYSTEM_MESSAGE", 11294L)
                .d("KEY", "\"_EM_59164_XYZ_\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1961-06-21 21:55:41\"")
                .d("VALUE", "\"qFbxfMl4\"")
            .and().insertInto("SYSTEM_MESSAGE", 11295L)
                .d("KEY", "\"6\"")
                .d("VALID_FROM", "\"2000-04-16 19:58:29\"")
                .d("VALID_TO", "\"2093-05-16 05:45:07\"")
                .d("VALUE", "\"_EM_59165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"EVop8st7GTH\", " + 
                    " \"uri\": \"\u003cay3Bh^[?i\", " + 
                    " \"name\": \"pBpwmRHgjH4b\", " + 
                    " \"capture_date\": \"2000-08-24T17:46:04\", " + 
                    " \"copy_right\": \"imDlFU59\", " + 
                    " \"author\": \"2P9t3zeI7kBBLY\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_2165_XYZ_\", " + 
                    " \"uri\": \"_EM_2166_XYZ_\", " + 
                    " \"capture_date\": \"1936-04-24T13:18:40\", " + 
                    " \"copy_right\": \"_EM_2168_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 218 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/1667659395")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -4611686018427386848, " + 
                    " \"mime_type\": \"_EM_89431_XYZ_\", " + 
                    " \"uri\": \"data:text/plain,RlgyejZsWkZOQQ\u003d\u003d\", " + 
                    " \"name\": \"_EM_89432_XYZ_\", " + 
                    " \"capture_date\": \"2023-02-07T21:54:27\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -776149879, " + 
                    " \"group\": \"_EM_58961_XYZ_\", " + 
                    " \"name\": \"_EM_58962_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_58963_XYZ_\", " + 
                    " \"capture_date\": \"2014-10-04T18:13:50\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"_EM_58965_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/-776149879?EMextraParam123=_EM_58966_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_13502_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_13494_XYZ_\", " + 
                    " \"name\": \"_EM_13495_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 510, " + 
                    " \"uri\": \"_EM_13497_XYZ_\", " + 
                    " \"capture_date\": \"2061-01-16T14:09:08\", " + 
                    " \"copy_right\": \"_EM_13499_XYZ_\", " + 
                    " \"author\": \"_EM_13500_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_16515_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 415, " + 
                    " \"group\": \"_EM_16507_XYZ_\", " + 
                    " \"name\": \"_EM_16508_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_16509_XYZ_\", " + 
                    " \"uri\": \"_EM_16510_XYZ_\", " + 
                    " \"name\": \"_EM_16511_XYZ_\", " + 
                    " \"capture_date\": \"1928-10-06T18:48:15\", " + 
                    " \"copy_right\": \"_EM_16512_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_16514_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_54392_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_54367_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_54368_XYZ_\", " + 
                    " \"description_safety\": \"biy\", " + 
                    " \"age_min\": 27, " + 
                    " \"age_max\": -328, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_54370_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 327, " + 
                    " \"name\": \"_EM_54371_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_54373_XYZ_\", " + 
                    " \"name\": \"_EM_54374_XYZ_\", " + 
                    " \"capture_date\": \"1954-11-03T01:11:21\", " + 
                    " \"copy_right\": \"_EM_54375_XYZ_\", " + 
                    " \"author\": \"_EM_54376_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 348 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_54378_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 981, " + 
                    " \"uri\": \"_EM_54380_XYZ_\", " + 
                    " \"name\": \"_EM_54381_XYZ_\", " + 
                    " \"capture_date\": \"1938-00-16T21:52:18\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"_EM_54384_XYZ_\", " + 
                    " \"uri\": \"_EM_54385_XYZ_\", " + 
                    " \"capture_date\": \"2073-08-00T20:26:00\", " + 
                    " \"author\": \"_EM_54388_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/728?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2210_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 432, " + 
                    " \"name\": \"_EM_2174_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_2176_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_2177_XYZ_\", " + 
                    " \"description_safety\": \"_EM_2179_XYZ_\", " + 
                    " \"description_notes\": \"_EM_2180_XYZ_\", " + 
                    " \"age_min\": -2147483318, " + 
                    " \"age_max\": -2147483046, " + 
                    " \"time_max\": 687, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 143, " + 
                    " \"date_created\": \"1994-06-06T24:19:10\", " + 
                    " \"value\": \"_EM_2205_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1939-06-28T25:20:30\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_2206_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2055-02-08T10:22:48\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"_EM_2208_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 8120805166755096121, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 895, " + 
                    " \"ratings_count\": 6, " + 
                    " \"related\": [ " + 
                    " 572, " + 
                    " 672, " + 
                    " 427 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/432?EMextraParam123=_EM_2209_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1848_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1803_XYZ_\", " + 
                    " \"description_material\": \"_EM_1804_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1806_XYZ_\", " + 
                    " \"description_main\": \"_EM_1807_XYZ_\", " + 
                    " \"description_notes\": \"p4t9nr4rJ\", " + 
                    " \"age_min\": -113, " + 
                    " \"participants_max\": 301, " + 
                    " \"time_min\": 674, " + 
                    " \"time_max\": 321, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 910, " + 
                    " \"group\": \"_EM_1810_XYZ_\", " + 
                    " \"name\": \"_EM_1811_XYZ_\", " + 
                    " \"activities_count\": 733 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 185, " + 
                    " \"group\": \"_EM_1817_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1820_XYZ_\", " + 
                    " \"copy_right\": \"V\" " + 
                    " }, " + 
                    " \"activities_count\": 678 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_1824_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_1825_XYZ_\", " + 
                    " \"name\": \"_EM_1827_XYZ_\", " + 
                    " \"capture_date\": \"1974-06-29T22:28:38\", " + 
                    " \"author\": \"_EM_1829_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 194, " + 
                    " \"group\": \"_EM_1830_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1833_XYZ_\", " + 
                    " \"capture_date\": \"1930-00-09T06:16:26\", " + 
                    " \"copy_right\": \"_EM_1835_XYZ_\", " + 
                    " \"author\": \"_EM_1836_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 835 " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_1839_XYZ_\", " + 
                    " \"uri\": \"_EM_1840_XYZ_\", " + 
                    " \"name\": \"_EM_1841_XYZ_\", " + 
                    " \"capture_date\": \"2060-06-28T21:31:28\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 888, " + 
                    " \"name\": \"_EM_1843_XYZ_\", " + 
                    " \"email_address\": \"_EM_1844_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2087-12-28T12:37:26\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_1845_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 377, " + 
                    " \"date_created\": \"2032-09-27T22:53:11\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 432, " + 
                    " \"ratings_average\": 0.7427779808407016 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/807?EMextraParam123=_EM_1847_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 7739L)
                .d("URI", "\"Me2u3U0eDxo3A\"")
            .and().insertInto("TAG", 7738L)
                .d("GRP", "\"_EM_67442_XYZ_\"")
                .d("NAME", "\"_EM_67436_XYZ_\"")
            .and().insertInto("USERS", 7737L)
                .d("AUTHORIZATION_LEVEL", "32772")
                .d("NAME", "\"Ui7_NUN\"")
            .and().insertInto("ACTIVITY", 7736L)
            .and().insertInto("ACTIVITY", 7735L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7734L)
                .r("ACTIVITY_ID", 7736L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 7733L)
                .r("ACTIVITY_PROPERTIES_ID", 7734L)
                .r("TAG_ID", 7738L)
            .and().insertInto("MEDIA_FILE", 7745L)
                .d("URI", "\"_EM_67443_XYZ_\"")
            .and().insertInto("USERS", 7744L)
                .d("AUTHORIZATION_LEVEL", "4194986")
                .d("NAME", "\"_EM_67444_XYZ_\"")
            .and().insertInto("ACTIVITY", 7743L)
            .and().insertInto("ACTIVITY", 7742L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7741L)
                .r("ACTIVITY_ID", 7736L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7740L)
                .r("ACTIVITY_PROPERTIES_ID", 7741L)
                .r("MEDIA_FILE_ID", 7739L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7751L)
                .d("URI", "\"5033919\"")
            .and().insertInto("USERS", 7750L)
                .d("AUTHORIZATION_LEVEL", "1173")
                .d("NAME", "\"19D35\"")
            .and().insertInto("ACTIVITY", 7749L)
            .and().insertInto("ACTIVITY", 7748L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7747L)
                .r("ACTIVITY_ID", 7742L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7746L)
                .r("ACTIVITY_PROPERTIES_ID", 7747L)
                .r("MEDIA_FILE_ID", 7745L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7757L)
                .d("URI", "\"vFSeePSWTAcBgMC\"")
            .and().insertInto("USERS", 7756L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"w\"")
            .and().insertInto("ACTIVITY", 7755L)
            .and().insertInto("ACTIVITY", 7754L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7753L)
                .r("ACTIVITY_ID", 7748L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7752L)
                .r("ACTIVITY_PROPERTIES_ID", 7741L)
                .r("MEDIA_FILE_ID", 7745L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7763L)
                .d("URI", "\"qxPo3O0KQTq\"")
            .and().insertInto("USERS", 7762L)
                .d("AUTHORIZATION_LEVEL", "980")
                .d("NAME", "\"lJIhYPTLoSJag\"")
            .and().insertInto("ACTIVITY", 7761L)
            .and().insertInto("ACTIVITY", 7760L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7759L)
                .r("ACTIVITY_ID", 7760L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7758L)
                .r("ACTIVITY_PROPERTIES_ID", 7734L)
                .r("MEDIA_FILE_ID", 7751L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 7769L)
                .d("URI", "\"_EM_67445_XYZ_\"")
            .and().insertInto("USERS", 7768L)
                .d("AUTHORIZATION_LEVEL", "-4096")
                .d("NAME", "\"B\"")
            .and().insertInto("ACTIVITY", 7767L)
            .and().insertInto("ACTIVITY", 7766L)
            .and().insertInto("ACTIVITY_PROPERTIES", 7765L)
                .r("ACTIVITY_ID", 7766L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 7764L)
                .r("ACTIVITY_PROPERTIES_ID", 7747L)
                .r("MEDIA_FILE_ID", 7757L)
                .d("FEATURED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 864, " + 
                    " \"name\": \"_EM_30522_XYZ_\", " + 
                    " \"description_material\": \"2006-03-02 06:43:55\", " + 
                    " \"description_introduction\": \"_EM_30524_XYZ_\", " + 
                    " \"description_prepare\": \"xqUwP7XmI_NyXxM7\", " + 
                    " \"description_main\": \"_EM_67441_XYZ_\", " + 
                    " \"description_safety\": \"_EM_30526_XYZ_\", " + 
                    " \"description_notes\": \"tsv7\", " + 
                    " \"age_min\": -25, " + 
                    " \"age_max\": -164, " + 
                    " \"participants_min\": 324, " + 
                    " \"participants_max\": 924, " + 
                    " \"time_min\": 61, " + 
                    " \"time_max\": 131475, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"ON\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_30529_XYZ_\", " + 
                    " \"name\": \"_EM_30530_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 437578762, " + 
                    " \"mime_type\": \"_EM_30531_XYZ_\", " + 
                    " \"uri\": \"_EM_30532_XYZ_\", " + 
                    " \"name\": \"_EM_30533_XYZ_\", " + 
                    " \"capture_date\": \"1950-09-23T12:47:41\", " + 
                    " \"author\": \"_EM_30535_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 179 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_30536_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_r2RfyILR_aXfBKJ\", " + 
                    " \"uri\": \"_EM_30538_XYZ_\", " + 
                    " \"capture_date\": \"1930-08-23T08:37:14\", " + 
                    " \"author\": \"_EM_30541_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 873, " + 
                    " \"mime_type\": \"_EM_30542_XYZ_\", " + 
                    " \"uri\": \"_EM_30543_XYZ_\", " + 
                    " \"name\": \"_EM_30544_XYZ_\", " + 
                    " \"author\": \"_EM_30546_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 921, " + 
                    " \"name\": \"_EM_30549_XYZ_\", " + 
                    " \"author\": \"_EM_30551_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_30554_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_30556_XYZ_\", " + 
                    " \"name\": \"_EM_30558_XYZ_\", " + 
                    " \"capture_date\": \"1944-11-05T14:12:00\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"_EM_30559_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_30561_XYZ_\", " + 
                    " \"capture_date\": \"1938-03-24T14:52:49\", " + 
                    " \"author\": \"_EM_30564_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 18, " + 
                    " \"email_address\": \"_EM_30566_XYZ_\", " + 
                    " \"authorization_level\": 845 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 406, " + 
                    " \"ratings_average\": 0.22301704331633854, " + 
                    " \"ratings_sum\": 7734324029684051554, " + 
                    " \"ratings_count\": 645, " + 
                    " \"related\": [ " + 
                    " -8387609, " + 
                    " 131941, " + 
                    " 975 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3423L)
            .and().insertInto("ACTIVITY", 3424L)
            .and().insertInto("ACTIVITY", 3425L)
            .and().insertInto("ACTIVITY", 3426L)
            .and().insertInto("ACTIVITY", 3427L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3091876305021589107, " + 
                    " \"name\": \"4557088\", " + 
                    " \"description_introduction\": \"V7aov\", " + 
                    " \"description_safety\": \"_EM_11796_XYZ_\", " + 
                    " \"description_notes\": \"_EM_11797_XYZ_\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -2147482783, " + 
                    " \"participants_min\": 395, " + 
                    " \"participants_max\": -16776957, " + 
                    " \"time_max\": 1334, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"id\": 593, " + 
                    " \"mime_type\": \"_EM_11801_XYZ_\", " + 
                    " \"uri\": \"_EM_11802_XYZ_\", " + 
                    " \"copy_right\": \"_EM_11804_XYZ_\", " + 
                    " \"author\": \"_EM_11805_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"BYYzypIBeiuw\", " + 
                    " \"author\": \"_EM_11811_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 860000382 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 639, " + 
                    " \"name\": \"o1mLIgjtpPSx2eI\", " + 
                    " \"activities_count\": 805 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 925, " + 
                    " \"media_file\": { " + 
                    " \"id\": 255, " + 
                    " \"name\": \"_EM_11822_XYZ_\", " + 
                    " \"capture_date\": \"2089-08-07T14:50:48\", " + 
                    " \"copy_right\": \"_EM_11823_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 758 " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 811, " + 
                    " \"favourites_count\": 570, " + 
                    " \"ratings_average\": 0.2141402794704962, " + 
                    " \"ratings_count\": 1015, " + 
                    " \"related\": [ " + 
                    " 418 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -129, " + 
                    " \"name\": \"kTTUdRHUCUG\", " + 
                    " \"description_material\": \"gTdQnI\", " + 
                    " \"description_introduction\": \"UxU185_mYrM/L.U\", " + 
                    " \"description_prepare\": \"qWxfFnk0Uu8UysZXK\", " + 
                    " \"description_main\": \"gTdQnI\", " + 
                    " \"description_safety\": \"gTdQnI\", " + 
                    " \"description_notes\": \"gTdQnI\", " + 
                    " \"age_min\": -1879048140, " + 
                    " \"age_max\": -4, " + 
                    " \"participants_min\": -2147444642, " + 
                    " \"participants_max\": 2147483647, " + 
                    " \"time_min\": -4, " + 
                    " \"time_max\": 2142689585, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"VSZUwk\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"YwUmKT52MnU\", " + 
                    " \"name\": \"UfirU8U2m\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 245, " + 
                    " \"mime_type\": \"MmPB1KWtsHLp\", " + 
                    " \"uri\": \"U97h\", " + 
                    " \"name\": \"hMcV7EmPwvZaWt\", " + 
                    " \"capture_date\": \"1931-03-19T08:33:60\", " + 
                    " \"copy_right\": \"42h\" " + 
                    " }, " + 
                    " \"activities_count\": 381 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 256, " + 
                    " \"group\": \"NW11uUT\", " + 
                    " \"name\": \"fbwTHVq1Mq\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 294, " + 
                    " \"uri\": \"JQ2iPszfcQgyHZ\", " + 
                    " \"name\": \"IgvurlVubQ77pEE3\", " + 
                    " \"capture_date\": \"1955-01-08T25:02:16\", " + 
                    " \"copy_right\": \"w\" " + 
                    " }, " + 
                    " \"activities_count\": 351 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 65, " + 
                    " \"mime_type\": \"Af0PnRkvQE8DAch\", " + 
                    " \"uri\": \"k5qEDVH\", " + 
                    " \"name\": \"758cY6j05\", " + 
                    " \"capture_date\": \"1960-07-32T-1:29:-1\", " + 
                    " \"copy_right\": \"27KtKgmvuc4yL\", " + 
                    " \"author\": \"mXG\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -171, " + 
                    " \"mime_type\": \"MPSTmIG\", " + 
                    " \"uri\": \"bpBbY9Hjn\", " + 
                    " \"name\": \"jqS_erg4FNO9jmd6tk6\", " + 
                    " \"capture_date\": \"2086-05-03T22:08:19\", " + 
                    " \"copy_right\": \"3mKorp6pq6Jnva\", " + 
                    " \"author\": \"UV\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -8, " + 
                    " \"mime_type\": \"RfuY5tXUtVlUEYqy\", " + 
                    " \"name\": \"3\", " + 
                    " \"capture_date\": \"2060-07-03T01:03:36\", " + 
                    " \"copy_right\": \"6EqEUUE0bbT\", " + 
                    " \"author\": \"KC7w\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 687, " + 
                    " \"mime_type\": \"JaAkU\", " + 
                    " \"name\": \"O\", " + 
                    " \"capture_date\": \"1933-00-24T24:18:52\", " + 
                    " \"copy_right\": \"coy5JU\", " + 
                    " \"author\": \"BeSOs2\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"0aoC6lsWWTafq\", " + 
                    " \"email_address\": \"zUySUyj\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"date_created\": \"2000-04-05T08:53:29\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"OBfNy1UvN0mIAW\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -6, " + 
                    " \"date_created\": \"2000-03-24T-1:-1:26\", " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"wH\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"1920-06-21T02:59:22\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"C1pFq7ErfsEWgyc\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"1984-06-04T24:09:49\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"ZhM7JEpYf4uD\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 70, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 1, " + 
                    " \"ratings_average\": 27.583778449454176, " + 
                    " \"ratings_sum\": 15, " + 
                    " \"ratings_count\": 4611686018427388206, " + 
                    " \"related\": [ " + 
                    " 1641346010, " + 
                    " -8, " + 
                    " 885, " + 
                    " 0, " + 
                    " 8 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 35720L)
                .d("AUTHOR", "\"_EM_126368_XYZ_\"")
                .d("CAPTURE_DATE", "\"1939-07-01 00:02:24\"")
                .d("COPY_RIGHT", "\"1YxoB\"")
                .d("MIME_TYPE", "\"EzEHbBeJy\"")
                .d("NAME", "\"2016-07-23 13:13:10\"")
                .d("URI", "\"si9S4qTPEg7jhzh\"")
            .and().insertInto("MEDIA_FILE", 35726L)
                .d("URI", "\"12\"")
            .and().insertInto("USERS", 35725L)
                .d("AUTHORIZATION_LEVEL", "239")
                .d("NAME", "\"_EM_124290_XYZ_\"")
            .and().insertInto("ACTIVITY", 35724L)
            .and().insertInto("ACTIVITY", 35723L)
            .and().insertInto("ACTIVITY_PROPERTIES", 35722L)
                .r("ACTIVITY_ID", 35723L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 35721L)
                .r("ACTIVITY_PROPERTIES_ID", 35722L)
                .r("MEDIA_FILE_ID", 35720L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 35732L)
                .d("URI", "\"_EM_126377_XYZ_\"")
            .and().insertInto("USERS", 35731L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_126370_XYZ_\"")
            .and().insertInto("ACTIVITY", 35730L)
            .and().insertInto("ACTIVITY", 35729L)
            .and().insertInto("ACTIVITY_PROPERTIES", 35728L)
                .r("ACTIVITY_ID", 35724L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 35727L)
                .r("ACTIVITY_PROPERTIES_ID", 35728L)
                .r("MEDIA_FILE_ID", 35726L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 35738L)
                .d("URI", "\"6138330\"")
            .and().insertInto("USERS", 35737L)
                .d("AUTHORIZATION_LEVEL", "43")
                .d("NAME", "\"HI\"")
            .and().insertInto("ACTIVITY", 35736L)
            .and().insertInto("ACTIVITY", 35735L)
            .and().insertInto("ACTIVITY_PROPERTIES", 35734L)
                .r("ACTIVITY_ID", 35729L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 35733L)
                .r("ACTIVITY_PROPERTIES_ID", 35722L)
                .r("MEDIA_FILE_ID", 35738L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 35744L)
                .d("URI", "\"zIGt2FshP\"")
            .and().insertInto("USERS", 35743L)
                .d("AUTHORIZATION_LEVEL", "1341")
                .d("NAME", "\"1Gbijq5X_\"")
            .and().insertInto("ACTIVITY", 35742L)
            .and().insertInto("ACTIVITY", 35741L)
            .and().insertInto("ACTIVITY_PROPERTIES", 35740L)
                .r("ACTIVITY_ID", 35723L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 35739L)
                .r("ACTIVITY_PROPERTIES_ID", 35722L)
                .r("MEDIA_FILE_ID", 35726L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 35750L)
                .d("URI", "\"_EM_124683_XYZ_\"")
            .and().insertInto("USERS", 35749L)
                .d("AUTHORIZATION_LEVEL", "2")
                .d("NAME", "\"kMmzt66tQP4JU\"")
            .and().insertInto("ACTIVITY", 35748L)
            .and().insertInto("ACTIVITY", 35747L)
            .and().insertInto("ACTIVITY_PROPERTIES", 35746L)
                .r("ACTIVITY_ID", 35741L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 35745L)
                .r("ACTIVITY_PROPERTIES_ID", 35734L)
                .r("MEDIA_FILE_ID", 35744L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 35861L)
                .d("AUTHORIZATION_LEVEL", "198")
                .d("NAME", "\"n19CUsWNak\"")
            .and().insertInto("USER_IDENTITY", 35860L)
                .d("DATE_CREATED", "\"1989-09-27 23:32:52\"")
                .d("TYPE", "\"GOOGLE\"")
                .d("VALUE", "\"_EM_124291_XYZ_\"")
                .d("USER_ID", "NULL")
            .and().insertInto("USERS", 35863L)
                .d("AUTHORIZATION_LEVEL", "836")
                .d("NAME", "\"UgUkU\"")
            .and().insertInto("USER_IDENTITY", 35862L)
                .d("DATE_CREATED", "\"1917-01-12 15:00:29\"")
                .d("TYPE", "\"API\"")
                .d("VALUE", "\"1KwPg\"")
                .r("USER_ID", 35861L)
            .and().insertInto("MEDIA_FILE", 35719L)
                .d("AUTHOR", "\"_EM_123306_XYZ_\"")
                .d("CAPTURE_DATE", "\"2025-05-29 11:29:09\"")
                .d("COPY_RIGHT", "\"wktAVaicf\"")
                .d("MIME_TYPE", "\"_EM_123609_XYZ_\"")
                .d("NAME", "\"c_7WDW\"")
                .d("URI", "\"2053-09-27 21:32:52\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 5, " + 
                    " \"name\": \"hNl/AdgzX\", " + 
                    " \"description_material\": \"m\", " + 
                    " \"description_introduction\": \"_EM_124289_XYZ_\", " + 
                    " \"description_prepare\": \"cqr9\", " + 
                    " \"description_main\": \"mI5\", " + 
                    " \"description_safety\": \"_EM_123269_XYZ_\", " + 
                    " \"description_notes\": \"UZInj9mSBT\", " + 
                    " \"age_min\": -2147450831, " + 
                    " \"age_max\": -2147450799, " + 
                    " \"participants_min\": -1073741608, " + 
                    " \"participants_max\": 918, " + 
                    " \"time_min\": 119, " + 
                    " \"time_max\": 361, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_123604_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"_EM_124288_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 615, " + 
                    " \"name\": \"YKW\" " + 
                    " }, " + 
                    " \"activities_count\": -16307 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_123311_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -8246211300417274362, " + 
                    " \"mime_type\": \"9eU\", " + 
                    " \"uri\": \"_EM_123312_XYZ_\", " + 
                    " \"copy_right\": \"6acSZuOSFOe\" " + 
                    " }, " + 
                    " \"activities_count\": 155 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 708, " + 
                    " \"group\": \"EPpbpW4FUS4K26\", " + 
                    " \"name\": \"LxFSqnnYl5KGNF\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 356852817, " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"j2FOqzYn\", " + 
                    " \"capture_date\": \"1905-03-03T-1:24:14\", " + 
                    " \"copy_right\": \"UKy4S7OIhAhBr\", " + 
                    " \"author\": \"J89Ypt5XPwaMZyJ4\" " + 
                    " }, " + 
                    " \"activities_count\": 331 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 776, " + 
                    " \"mime_type\": \"Xo0J\", " + 
                    " \"uri\": \"_EM_123282_XYZ_\", " + 
                    " \"name\": \"dbesXXH0C9IrgH\", " + 
                    " \"copy_right\": \"_EM_123283_XYZ_\", " + 
                    " \"author\": \"XC32lasyb\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"J44QfIxrRrHgW_\", " + 
                    " \"email_address\": \"1Px52Mv9OxOmv2a\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 464, " + 
                    " \"value\": \"xe4yGiorvw\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 348, " + 
                    " \"date_created\": \"1974-01-23T02:08:09\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"T3auANYNVsWvK\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1185603419, " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1920-00-27T17:47:01\", " + 
                    " \"value\": \"_EM_123340_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 309, " + 
                    " \"type\": \"API\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 3282196304350272543, " + 
                    " \"favourites_count\": 798, " + 
                    " \"ratings_average\": 0.3016829615502512, " + 
                    " \"ratings_sum\": 329, " + 
                    " \"ratings_count\": -6028961483712593160 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/155/rating?EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/1499999240560127977?EMextraParam123=_EM_47_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/475?EMextraParam123=_EM_52_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/245?EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/79")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_69_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/374?attrs=_EM_67_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/88")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/789")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/305?EMextraParam123=_EM_133_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?name=_EM_157_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_175_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 70, " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/70/rating?EMextraParam123=_EM_174_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/-4380558480533454697/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_310_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/8496153099816730973?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_72_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_128_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/765159908?EMextraParam123=_EM_127_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_173_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_172_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=_EM_221_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 902, " + 
                    " \"key\": \"_EM_229_XYZ_\", " + 
                    " \"valid_to\": \"1904-02-15T05:18:41\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": -1682293841, " + 
                    " \"author\": \"_EM_238_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_239_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_246_XYZ_\", " + 
                    " \"date_published\": \"2016-11-08T14:04:44\", " + 
                    " \"description_introduction\": \"_EM_248_XYZ_\", " + 
                    " \"description_main\": \"_EM_250_XYZ_\", " + 
                    " \"age_min\": -765, " + 
                    " \"participants_min\": 390, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_253_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_299_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_446_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/924")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_453_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_447_XYZ_\", " + 
                    " \"uri\": \"_EM_448_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/698?EMextraParam123=_EM_452_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"o\", " + 
                    " \"value\": \"_EM_454_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/331?EMextraParam123=_EM_455_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_465_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 298, " + 
                    " \"activities_count\": 428 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/298")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 695, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"1961-02-10T04:37:16\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_468_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/695")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_504_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"2039-08-16T04:17:30\", " + 
                    " \"date_created\": \"2100-13-14T18:56:47\", " + 
                    " \"description_introduction\": \"_EM_473_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_474_XYZ_\", " + 
                    " \"description_safety\": \"_EM_475_XYZ_\", " + 
                    " \"participants_min\": 966, " + 
                    " \"time_min\": 761, " + 
                    " \"source\": \"0\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 1377545174, " + 
                    " \"mime_type\": \"_EM_484_XYZ_\", " + 
                    " \"uri\": \"_EM_485_XYZ_\", " + 
                    " \"capture_date\": \"2033-05-17T08:34:57\", " + 
                    " \"copy_right\": \"_EM_487_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_489_XYZ_\", " + 
                    " \"uri\": \"W\", " + 
                    " \"copy_right\": \"_EM_491_XYZ_\", " + 
                    " \"author\": \"_EM_492_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 10, " + 
                    " \"uri\": \"k2ClQaM9w\", " + 
                    " \"author\": \"_EM_496_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_497_XYZ_\", " + 
                    " \"name\": \"_EM_499_XYZ_\", " + 
                    " \"capture_date\": \"1989-04-22T14:59:25\", " + 
                    " \"author\": \"mmzE\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 9, " + 
                    " \"email_address\": \"_EM_502_XYZ_\", " + 
                    " \"authorization_level\": 1620278870 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/509")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/6724186047871204045?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1855_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/983?" + 
                    "verify_unused=false&" + 
                    "EMextraParam123=_EM_1854_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1859_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/770")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/643616977")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/378?" + 
                    "attrs=_EM_1868_XYZ_&" + 
                    "EMextraParam123=_EM_1869_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1872_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/-9044761607917737624?EMextraParam123=_EM_1871_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3900_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/436?EMextraParam123=_EM_3899_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/864")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/452")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2171_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/1667659394?EMextraParam123=_EM_2170_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1850_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/406")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/198?EMextraParam123=_EM_1920_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/814?EMextraParam123=_EM_1924_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/468?EMextraParam123=_EM_2152_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/10?EMextraParam123=_EM_2218_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_39785_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/988")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_2004_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 538, " + 
                    " \"email_address\": \"pUI\", " + 
                    " \"authorization_level\": 606 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 301L)
                .d("KEY", "\"_EM_90299_XYZ_\"")
                .d("VALID_FROM", "\"2069-01-01 08:25:50\"")
                .d("VALID_TO", "\"2000-06-18 11:00:39\"")
                .d("VALUE", "\"_EM_10094_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 302L)
                .d("KEY", "\"WUUUU192_UUV_u\"")
                .d("VALID_FROM", "\"2011-05-06 04:15:02\"")
                .d("VALID_TO", "\"1986-03-01 23:14:44\"")
                .d("VALUE", "\"vxqfztlNSCsIDNS\"")
            .and().insertInto("SYSTEM_MESSAGE", 303L)
                .d("KEY", "\"_EM_71005_XYZ_\"")
                .d("VALID_FROM", "\"2054-06-11 12:42:33\"")
                .d("VALID_TO", "\"2041-08-29 00:00:07\"")
                .d("VALUE", "\"0\"")
            .and().insertInto("SYSTEM_MESSAGE", 304L)
                .d("KEY", "\"_EM_10096_XYZ_\"")
                .d("VALID_FROM", "\"2000-01-16 09:29:04\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"4552920\"")
            .and().insertInto("SYSTEM_MESSAGE", 305L)
                .d("KEY", "\"o\"")
                .d("VALID_FROM", "\"2014-10-13 00:36:24\"")
                .d("VALID_TO", "\"1954-08-04 15:49:29\"")
                .d("VALUE", "\"Y\"")
            .and().insertInto("ACTIVITY", 306L)
            .and().insertInto("ACTIVITY", 307L)
            .and().insertInto("ACTIVITY", 308L)
            .and().insertInto("ACTIVITY", 309L)
            .and().insertInto("ACTIVITY", 310L)
            .and().insertInto("USERS", 23962L)
                .d("AUTHORIZATION_LEVEL", "3")
                .d("NAME", "\"r_f_\"")
            .and().insertInto("ACTIVITY", 23961L)
            .and().insertInto("ACTIVITY_RATING", 23960L)
                .r("ACTIVITY_ID", 309L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "-65324")
            .and().insertInto("MEDIA_FILE", 23964L)
                .d("URI", "\"_EM_90300_XYZ_\"")
            .and().insertInto("TAG", 23963L)
                .d("GRP", "\"VV1_YM0bsh0Gl1\"")
                .d("NAME", "\"_EM_89982_XYZ_\"")
                .r("MEDIA_FILE_ID", 23964L)
            .and().insertInto("MEDIA_FILE", 23966L)
                .d("URI", "\"adb6d65F\"")
            .and().insertInto("TAG", 23965L)
                .d("GRP", "\"O_mOgISD8Hqsw5\"")
                .d("NAME", "\"XKr\"")
                .r("MEDIA_FILE_ID", 23966L)
            .and().insertInto("MEDIA_FILE", 23968L)
                .d("URI", "\"P7ffDz\"")
            .and().insertInto("TAG", 23967L)
                .d("GRP", "\"b9rK93vjZ\"")
                .d("NAME", "\"_EM_90301_XYZ_\"")
                .r("MEDIA_FILE_ID", 23964L)
            .and().insertInto("MEDIA_FILE", 23970L)
                .d("URI", "\"Vzoe\"")
            .and().insertInto("TAG", 23969L)
                .d("GRP", "\"_EM_89983_XYZ_\"")
                .d("NAME", "\"4RSaIEcJS3O\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 24009L)
                .d("URI", "\"Bqj7\"")
            .and().insertInto("TAG", 24008L)
                .d("GRP", "\"Iu3t\"")
                .d("NAME", "\"2PvgMGuWwuahp\"")
            .and().insertInto("TAG_DERIVED", 24007L)
                .r("TAG_ID", 23965L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 630, " + 
                    " \"name\": \"_EM_8169_XYZ_\", " + 
                    " \"activities_count\": 723 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2066_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 418, " + 
                    " \"mime_type\": \"_EM_2061_XYZ_\", " + 
                    " \"copy_right\": \"BDu6PIWJIpx\" " + 
                    " }, " + 
                    " \"activities_count\": 410 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_12498_XYZ_\", " + 
                    " \"description_main\": \"_EM_12500_XYZ_\", " + 
                    " \"description_notes\": \"_EM_12502_XYZ_\", " + 
                    " \"age_min\": -619, " + 
                    " \"participants_min\": 870, " + 
                    " \"source\": \"_EM_12503_XYZ_\", " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 1599409636, " + 
                    " \"related\": [ " + 
                    " 362, " + 
                    " 8290059103593318381, " + 
                    " -1551711778, " + 
                    " 881, " + 
                    " 686 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/161")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 655, " + 
                    " \"description_safety\": \"_EM_7240_XYZ_\", " + 
                    " \"participants_min\": 8, " + 
                    " \"participants_max\": 105, " + 
                    " \"time_max\": 161, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_7242_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_7243_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 772835427, " + 
                    " \"group\": \"_EM_7249_XYZ_\", " + 
                    " \"name\": \"_EM_7250_XYZ_\", " + 
                    " \"activities_count\": 52 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 204, " + 
                    " \"group\": \"_EM_7256_XYZ_\", " + 
                    " \"name\": \"_EM_7257_XYZ_\", " + 
                    " \"activities_count\": 232 " + 
                    " }, " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"id\": -1280174765, " + 
                    " \"uri\": \"_EM_7263_XYZ_\", " + 
                    " \"name\": \"_EM_7264_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 868 " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/655")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
