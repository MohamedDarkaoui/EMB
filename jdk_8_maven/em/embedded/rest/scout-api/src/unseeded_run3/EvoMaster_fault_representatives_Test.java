import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T03:56:47.110+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 611
 * <br>
 * Used time: 2h 0m 18s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_RATING","ACTIVITY_RELATION"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/694/rating")
                .then()
                .statusCode(500) // se/devscout/scoutapi/model/ActivityRating$Key_90_<init>
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -4611686018427386880, " + 
                    " \"mime_type\": \"_EM_89431_XYZ_\", " + 
                    " \"uri\": \"data:;base64,RlgyejZsWkZOQQ\u003d\u003d\", " + 
                    " \"name\": \"_EM_89432_XYZ_\", " + 
                    " \"copy_right\": \"4606846\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(500) // se/devscout/scoutapi/resource/MediaFileResource_135_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'message'", containsString("HTTP 500 Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -371, " + 
                    " \"name\": \"ewdlclHc8\", " + 
                    " \"description_material\": \"_EM_54430_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_51662_XYZ_\", " + 
                    " \"description_main\": \"_EM_54430_XYZ_\", " + 
                    " \"description_safety\": \"_EM_54430_XYZ_\", " + 
                    " \"description_notes\": \"_EM_54430_XYZ_\", " + 
                    " \"participants_min\": -2136563574, " + 
                    " \"participants_max\": 115, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": -3996, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"id\": 965, " + 
                    " \"mime_type\": \"_EM_25701_XYZ_\", " + 
                    " \"author\": \"_EM_25705_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_25706_XYZ_\", " + 
                    " \"activities_count\": 736 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_25712_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 990, " + 
                    " \"group\": \"_EM_25718_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 380, " + 
                    " \"name\": \"5A9YPD_MZY2WrC\", " + 
                    " \"activities_count\": 388 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 256, " + 
                    " \"authorization_level\": 774 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": -833539862, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 634, " + 
                    " \"ratings_sum\": 472, " + 
                    " \"ratings_count\": 744 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/ActivityDao_197_lambda$initTags$7
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 6494L)
                .d("URI", "\"_EM_30661_XYZ_\"")
            .and().insertInto("TAG", 6493L)
                .d("GRP", "\"hdd3\"")
                .d("NAME", "\"XBS7mtnjt\"")
                .r("MEDIA_FILE_ID", 6494L)
            .and().insertInto("MEDIA_FILE", 6496L)
                .d("URI", "\"_EM_30662_XYZ_\"")
            .and().insertInto("TAG", 6495L)
                .d("GRP", "\"_EM_37614_XYZ_\"")
                .d("NAME", "\"eeeF\"")
                .r("MEDIA_FILE_ID", 6494L)
            .and().insertInto("MEDIA_FILE", 6498L)
                .d("URI", "\"4nLXQR371ir4oixu\"")
            .and().insertInto("TAG", 6497L)
                .d("GRP", "\"yLWa2dTc6JcsfII4\"")
                .d("NAME", "\"_EM_37615_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"mCh31aXgFeJ\", " + 
                    " \"description_material\": \"7zo9se\", " + 
                    " \"description_introduction\": \"_EM_4854_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_4855_XYZ_\", " + 
                    " \"description_main\": \"97F\", " + 
                    " \"description_notes\": \"gAXrX\", " + 
                    " \"participants_min\": 4194324, " + 
                    " \"participants_max\": 565283895, " + 
                    " \"time_min\": 67110110, " + 
                    " \"time_max\": 475, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_4858_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"PFSB\", " + 
                    " \"name\": \"_EM_37612_XYZ_\", " + 
                    " \"activities_count\": 16777578 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1035535980, " + 
                    " \"media_file\": { " + 
                    " \"id\": 928, " + 
                    " \"mime_type\": \"_EM_4865_XYZ_\", " + 
                    " \"uri\": \"_EM_4866_XYZ_\", " + 
                    " \"name\": \"_EM_4867_XYZ_\", " + 
                    " \"author\": \"VPDfPoRKg4yp0N\" " + 
                    " }, " + 
                    " \"activities_count\": -169742975350767435 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 271, " + 
                    " \"group\": \"KKycSwmLi2Q0lD7\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"id\": 376, " + 
                    " \"name\": \"_EM_4869_XYZ_\", " + 
                    " \"email_address\": \"cTWYWAFkiB\", " + 
                    " \"authorization_level\": -1073741458, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 32867, " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_37613_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 2, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_4871_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 4611686018393833472, " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 279, " + 
                    " \"ratings_average\": 0.4199343519160109, " + 
                    " \"ratings_sum\": -4611686018427387392, " + 
                    " \"ratings_count\": 1152921504606847232, " + 
                    " \"related\": [ " + 
                    " 621, " + 
                    " 638, " + 
                    " 293, " + 
                    " 509 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(500) // se/devscout/scoutapi/dao/ActivityDao_163_create
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
