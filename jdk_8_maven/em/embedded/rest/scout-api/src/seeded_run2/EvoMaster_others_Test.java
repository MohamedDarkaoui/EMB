import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-30T06:34:58.973+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 77 tests
 * <br>
 * Covered targets: 840
 * <br>
 * Used time: 2h 0m 56s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","SYSTEM_MESSAGE","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 10239L)
                .d("URI", "\"TABLE_TYPES\"")
            .and().insertInto("TAG", 10238L)
                .d("GRP", "\"F5z3hu5x6\"")
                .d("NAME", "\"_EM_42961_XYZ_9\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 10241L)
                .d("URI", "\"C_1aAnn\"")
            .and().insertInto("TAG", 10240L)
                .d("GRP", "\"UM8UhUfMUQU4yd\"")
                .d("NAME", "\"Dmu9deUkfDNc2m\"")
                .r("MEDIA_FILE_ID", 10239L)
            .and().insertInto("MEDIA_FILE", 10243L)
                .d("URI", "\"pr_G_PLbd2x2CB\"")
            .and().insertInto("TAG", 10242L)
                .d("GRP", "\"2CHKgSnY3Cz\"")
                .d("NAME", "\"_EM_51523_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("SYSTEM_MESSAGE", 13046L)
                .d("KEY", "\"VHVdlUHKsO_\"")
                .d("VALID_FROM", "\"1991-12-26 01:15:16\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"\"")
            .and().insertInto("SYSTEM_MESSAGE", 13047L)
                .d("KEY", "\"bXuvFDnuFZ5h\"")
                .d("VALID_FROM", "\"1976-11-21 16:00:17\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_51524_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_media_files = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"uZj0jyr\", " + 
                    " \"date_published\": \"1940-08-18T00:20:-1\", " + 
                    " \"date_updated\": \"2032-00-06T13:30:15\", " + 
                    " \"description_material\": \"nKSbXxFVknN8hf\", " + 
                    " \"description_introduction\": \"_EM_42901_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_42902_XYZ_\", " + 
                    " \"description_main\": \"36RGvEd\", " + 
                    " \"description_safety\": \"36RGvEd\", " + 
                    " \"description_notes\": \"36RGvEd\", " + 
                    " \"age_max\": -1845346265, " + 
                    " \"participants_min\": -1205862252, " + 
                    " \"participants_max\": -1205862252, " + 
                    " \"time_max\": 45, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"Kx0k9JD3\", " + 
                    " \"name\": \"_EM_42959_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"W5y\", " + 
                    " \"author\": \"lS\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 923, " + 
                    " \"group\": \"I4tiR7FDEjrKil\", " + 
                    " \"name\": \"ljZupuICBpBMx\", " + 
                    " \"media_file\": {} " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 151, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 33555393, " + 
                    " \"favourites_count\": 0, " + 
                    " \"ratings_count\": 368, " + 
                    " \"ratings_sum\": 841 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"1940-08-18T00:-1:20\", " + 
                    " \"date_created\": \"2032-00-06T13:15:30\", " + 
                    " \"date_updated\": \"1925-06-27T14:05:-1\", " + 
                    " \"description_material\": \"36RGvEd\", " + 
                    " \"description_prepare\": \"_EM_42902_XYZ_\", " + 
                    " \"description_safety\": \"_EM_51521_XYZ_\", " + 
                    " \"description_notes\": \"7c4yA\", " + 
                    " \"age_min\": -1845346265, " + 
                    " \"participants_max\": 445, " + 
                    " \"time_min\": 369, " + 
                    " \"time_max\": 729, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"naTGd8\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"Kx0k9JD3\", " + 
                    " \"name\": \"_EM_42959_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"W5y\", " + 
                    " \"author\": \"lS\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 923, " + 
                    " \"group\": \"I4tiR7FDEjrKil\", " + 
                    " \"name\": \"ljZupuICBpBMx\", " + 
                    " \"media_file\": {} " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"fp7\", " + 
                    " \"name\": \"aoQQOX8TRwiVg2\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 883, " + 
                    " \"mime_type\": \"1SQC\", " + 
                    " \"capture_date\": \"1987-06-16T01:21:47\", " + 
                    " \"copy_right\": \"\", " + 
                    " \"author\": \"A\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"\", " + 
                    " \"capture_date\": \"1990-01-05T09:03:46\", " + 
                    " \"copy_right\": \"Y0ZH1TihxW2m8BX\", " + 
                    " \"author\": \"bqk\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"0oIj2gmmgJ9DFCp\", " + 
                    " \"copy_right\": \"jTrXCOW2ER9RDyc\", " + 
                    " \"author\": \"75\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 151, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 961, " + 
                    " \"favourites_count\": -3234611463906475274, " + 
                    " \"ratings_count\": 368, " + 
                    " \"ratings_sum\": 841 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 422 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now_and_future&" + 
                    "attrs=_EM_51522_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_4432_XYZ_\", " + 
                    " \"uri\": \"_EM_4433_XYZ_\", " + 
                    " \"copy_right\": \"_EM_4435_XYZ_\", " + 
                    " \"author\": \"eQ6dt5FO\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("_EM_4432_XYZ_"))
                .body("'uri'", containsString("_EM_4433_XYZ_"))
                .body("'copy_right'", containsString("_EM_4435_XYZ_"))
                .body("'author'", containsString("eQ6dt5FO"));
        location_media_files = "/api/v1/media_files" + "/" + res_4.extract().body().path("id").toString();
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_4437_XYZ_\", " + 
                    " \"uri\": \"_EM_4438_XYZ_\", " + 
                    " \"copy_right\": \"_EM_4440_XYZ_\", " + 
                    " \"author\": \"_EM_4441_XYZ_\" " + 
                    " } ")
                .put(resolveLocation(location_media_files, baseUrlOfSut + "/api/v1/media_files/478?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("_EM_4437_XYZ_"))
                .body("'uri'", containsString("_EM_4438_XYZ_"))
                .body("'copy_right'", containsString("_EM_4435_XYZ_"))
                .body("'author'", containsString("eQ6dt5FO"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 34373L)
                .d("AUTHOR", "\"sMPtRQA\"")
                .d("CAPTURE_DATE", "\"2067-01-04 01:40:11\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"ga\"")
                .d("NAME", "NULL")
                .d("URI", "\"yFHR5H\"")
            .and().insertInto("MEDIA_FILE", 34374L)
                .d("AUTHOR", "\"jiJhQEejJovHVg\"")
                .d("CAPTURE_DATE", "\"2011-09-08 19:38:43\"")
                .d("COPY_RIGHT", "\"baqeRJBkxoF\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"uIAsuOcjAT\"")
                .d("URI", "\"lJTzI0a2qjP\"")
            .and().insertInto("MEDIA_FILE", 34375L)
                .d("AUTHOR", "\"dii3cc1J42vN\"")
                .d("CAPTURE_DATE", "\"2077-10-10 01:47:32\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"z90mHwJH2f_umkIN\"")
                .d("NAME", "NULL")
                .d("URI", "\"GtGd1\"")
            .and().insertInto("USERS", 40944L)
                .d("AUTHORIZATION_LEVEL", "501")
                .d("NAME", "\"S70gjp0XL\"")
            .and().insertInto("ACTIVITY", 40943L)
            .and().insertInto("ACTIVITY", 40942L)
            .and().insertInto("ACTIVITY_RELATION", 40941L)
                .r("ACTIVITY_1_ID", 40943L)
                .r("ACTIVITY_2_ID", 40942L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 40948L)
                .d("AUTHORIZATION_LEVEL", "539")
                .d("NAME", "\"kJeB8ya8wIV\"")
            .and().insertInto("ACTIVITY", 40947L)
            .and().insertInto("ACTIVITY", 40946L)
            .and().insertInto("ACTIVITY_RELATION", 40945L)
                .r("ACTIVITY_1_ID", 40946L)
                .r("ACTIVITY_2_ID", 40942L)
                .d("OWNER_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_activities = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1385004073427765579, " + 
                    " \"mime_type\": \"KU51D7h\", " + 
                    " \"capture_date\": \"1909-04-28T07:29:56\", " + 
                    " \"copy_right\": \"7YPDzhcemeBOiGM\", " + 
                    " \"author\": \"tnt\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files?" + 
                    "attrs=gQ&" + 
                    "group=d&" + 
                    "my_favourites=XEZ795rY3n&" + 
                    "categories=nRftcNZgRukxg2p&" + 
                    "participants=zZl7ZC7OBErAmr&" + 
                    "name=_Hq3uBuH8Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
        
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system/roles?" + 
                    "min_activities_count=r&" + 
                    "uri=tJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission_levels'.'category_edit'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_create'", numberMatches(10.0))
                .body("'permission_levels'.'reference_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'system_message_read'", numberMatches(-100.0))
                .body("'permission_levels'.'auth_role_list'", numberMatches(20.0))
                .body("'permission_levels'.'reference_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_create'", numberMatches(20.0))
                .body("'permission_levels'.'activity_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'comment_create'", numberMatches(0.0))
                .body("'permission_levels'.'category_create'", numberMatches(10.0))
                .body("'permission_levels'.'activity_edit'", numberMatches(10.0))
                .body("'permission_levels'.'reference_create'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_edit'", numberMatches(20.0))
                .body("'permission_levels'.'auth_profile_edit'", numberMatches(0.0))
                .body("'permission_levels'.'comment_edit'", numberMatches(10.0))
                .body("'permission_levels'.'system_message_manage'", numberMatches(20.0))
                .body("'permission_levels'.'mediaitem_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assignown'", numberMatches(10.0))
                .body("'permission_levels'.'rating_set_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assign'", numberMatches(20.0))
                .body("'permission_levels'.'comment_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'activity_create'", numberMatches(0.0))
                .body("'role_levels'.'administrator'", numberMatches(20.0))
                .body("'role_levels'.'moderator'", numberMatches(10.0))
                .body("'role_levels'.'limited_user'", numberMatches(-1.0))
                .body("'role_levels'.'user'", numberMatches(0.0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"iON798\", " + 
                    " \"description_safety\": \"eYynAXNrR97Q\", " + 
                    " \"age_min\": -764, " + 
                    " \"participants_min\": 894, " + 
                    " \"participants_max\": 67, " + 
                    " \"time_min\": 359, " + 
                    " \"source\": \"j2_YvCz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-05-30T06:34:04.696Z"))
                .body("'properties_revisions'[0].'description_introduction'", containsString("iON798"))
                .body("'properties_revisions'[0].'description_safety'", containsString("eYynAXNrR97Q"))
                .body("'properties_revisions'[0].'age_min'", numberMatches(-764.0))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(894.0))
                .body("'properties_revisions'[0].'participants_max'", numberMatches(67.0))
                .body("'properties_revisions'[0].'time_min'", numberMatches(359.0))
                .body("'properties_revisions'[0].'source'", containsString("j2_YvCz"))
                .body("'properties'.'date_created'", containsString("2024-05-30T06:34:04.696Z"))
                .body("'properties'.'description_introduction'", containsString("iON798"))
                .body("'properties'.'description_safety'", containsString("eYynAXNrR97Q"))
                .body("'properties'.'age_min'", numberMatches(-764.0))
                .body("'properties'.'participants_min'", numberMatches(894.0))
                .body("'properties'.'participants_max'", numberMatches(67.0))
                .body("'properties'.'time_min'", numberMatches(359.0))
                .body("'properties'.'source'", containsString("j2_YvCz"))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0));
        location_activities = "/api/v1/activities" + "/" + res_3.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_activities, baseUrlOfSut + "/api/v1/activities/654?size=e60"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_6922_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "attrs=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3118L)
                .d("AUTHORIZATION_LEVEL", "-17956452")
                .d("NAME", "\"ACTIVITY_RELATION\"")
            .and().insertInto("ACTIVITY", 3117L)
            .and().insertInto("ACTIVITY_RATING", 3116L)
                .r("ACTIVITY_ID", 3117L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "-2097655")
            .and().insertInto("USERS", 3121L)
                .d("AUTHORIZATION_LEVEL", "-131014")
                .d("NAME", "\"MjmxBqMAuUReZVp4\"")
            .and().insertInto("ACTIVITY", 3120L)
            .and().insertInto("ACTIVITY_RATING", 3119L)
                .r("ACTIVITY_ID", 3120L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "3670877")
            .and().insertInto("ACTIVITY", 5345L)
            .and().insertInto("ACTIVITY_DERIVED", 5344L)
                .r("ACTIVITY_ID", 3120L)
                .d("FAVOURITES_COUNT", "-65487")
                .d("RATINGS_AVG", "0.006161363859917723")
                .d("RATINGS_COUNT", "0")
                .d("RATINGS_SUM", "706")
            .and().insertInto("ACTIVITY", 5347L)
            .and().insertInto("ACTIVITY_DERIVED", 5346L)
                .r("ACTIVITY_ID", 5345L)
                .d("FAVOURITES_COUNT", "7867744000124264416")
                .d("RATINGS_AVG", "-0.48861610435820213")
                .d("RATINGS_COUNT", "6934096695228032970")
                .d("RATINGS_SUM", "0")
            .and().insertInto("MEDIA_FILE", 24777L)
                .d("URI", "\"_EM_91362_XYZ_\"")
            .and().insertInto("TAG", 24776L)
                .d("GRP", "\"\"")
                .d("NAME", "\"1udPUKUYHFATjDYJ\"")
                .r("MEDIA_FILE_ID", 24777L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "text=IePYLiihXXph&" + 
                    "categories=0&" + 
                    "ages=3TC_4kYA35l9wAB&" + 
                    "participants=_EM_91361_XYZ_&" + 
                    "durations=Lt1t1oM8bDzt726&" + 
                    "id=stRMmya2_U&" + 
                    "ratings_count_min=25&" + 
                    "ratings_average_min=1.2448809621536392&" + 
                    "random=698&" + 
                    "favourites=185")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "text=BKZ5AVnw8q5GhP&" + 
                    "featured=true&" + 
                    "ages=7&" + 
                    "durations=_EM_25108_XYZ_&" + 
                    "id=N_RFEpEop&" + 
                    "random=-67108545&" + 
                    "favourites=727")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=eU&" + 
                    "name=rDTi2X&" + 
                    "text=yd_2QXCFyV&" + 
                    "featured=true&" + 
                    "participants=3&" + 
                    "time_2=BZD3SmUU9Bwyq8bz&" + 
                    "ratings_count_min=627&" + 
                    "random=803&" + 
                    "favourites=993&" + 
                    "uri=b3S&" + 
                    "size=EtK6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"valid_to\": \"1938-11-13T12:11:46\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=_EM_3707_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"1904-00-15T02:24:46\", " + 
                    " \"date_updated\": \"1941-06-08T21:17:32\", " + 
                    " \"description_prepare\": \"_EM_1876_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1878_XYZ_\", " + 
                    " \"participants_min\": 858, " + 
                    " \"participants_max\": 384, " + 
                    " \"time_max\": -64024721, " + 
                    " \"source\": \"_EM_1880_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 505, " + 
                    " \"group\": \"k73D17\", " + 
                    " \"name\": \"_EM_1881_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1882_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"_EM_1886_XYZ_\", " + 
                    " \"name\": \"_EM_1887_XYZ_\", " + 
                    " \"activities_count\": 1219679448194098670 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 964, " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1896_XYZ_\", " + 
                    " \"name\": \"_EM_1897_XYZ_\", " + 
                    " \"copy_right\": \"_bBAhE\" " + 
                    " }, " + 
                    " \"activities_count\": 667 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 448, " + 
                    " \"mime_type\": \"_EM_1899_XYZ_\", " + 
                    " \"uri\": \"_EM_1900_XYZ_\", " + 
                    " \"name\": \"_EM_1901_XYZ_\", " + 
                    " \"capture_date\": \"2006-04-30T22:38:44\", " + 
                    " \"author\": \"_EM_1902_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 657, " + 
                    " \"name\": \"_EM_1905_XYZ_\", " + 
                    " \"capture_date\": \"2010-05-01T15:18:43\", " + 
                    " \"author\": \"_EM_1907_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_1908_XYZ_\", " + 
                    " \"name\": \"_EM_1910_XYZ_\", " + 
                    " \"author\": \"_EM_1912_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": {}, " + 
                    " \"activity\": { " + 
                    " \"id\": 660, " + 
                    " \"favourites_count\": 159, " + 
                    " \"ratings_sum\": 652519268 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/594")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3885_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 349, " + 
                    " \"valid_from\": \"1963-00-01T01:07:47\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/349")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_8170_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorization_level\": 888, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 244, " + 
                    " \"date_created\": \"2058-13-22T12:02:53\", " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2183_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3186863864942974651, " + 
                    " \"name\": \"_EM_2179_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_2181_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/3186863864942974651")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_14851_XYZ_\", " + 
                    " \"uri\": \"_EM_14852_XYZ_\", " + 
                    " \"name\": \"_EM_14853_XYZ_\", " + 
                    " \"capture_date\": \"2068-11-04T02:01:46\", " + 
                    " \"author\": \"_EM_14854_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/912785722?EMextraParam123=_EM_14855_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3154L)
                .d("URI", "\"412819\"")
            .and().insertInto("TAG", 3153L)
                .d("GRP", "\"_EM_68515_XYZ_\"")
                .d("NAME", "\"hyVUK\"")
                .r("MEDIA_FILE_ID", 3154L)
            .and().insertInto("MEDIA_FILE", 3156L)
                .d("URI", "\"_EM_69037_XYZ_\"")
            .and().insertInto("TAG", 3155L)
                .d("GRP", "\"197679\"")
                .d("NAME", "\"530528\"")
                .r("MEDIA_FILE_ID", 3154L)
            .and().insertInto("MEDIA_FILE", 18376L)
                .d("URI", "\"mwmrJz0p16mcQG\"")
            .and().insertInto("TAG", 18375L)
                .d("GRP", "\"_EM_68516_XYZ_\"")
                .d("NAME", "\"N\"")
            .and().insertInto("TAG_DERIVED", 18374L)
                .r("TAG_ID", 3153L)
                .d("ACTIVITIES_COUNT", "131")
            .and().insertInto("MEDIA_FILE", 18379L)
                .d("URI", "\"_EM_69038_XYZ_\"")
            .and().insertInto("TAG", 18378L)
                .d("GRP", "\"Q95XuKUU\"")
                .d("NAME", "\"yQ5h\"")
            .and().insertInto("TAG_DERIVED", 18377L)
                .r("TAG_ID", 18378L)
                .d("ACTIVITIES_COUNT", "-8621119316825899848")
            .and().insertInto("MEDIA_FILE", 18382L)
                .d("URI", "\"Qagg\"")
            .and().insertInto("TAG", 18381L)
                .d("GRP", "\"_EM_69039_XYZ_\"")
                .d("NAME", "\"_EM_68517_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 18380L)
                .r("TAG_ID", 3155L)
                .d("ACTIVITIES_COUNT", "0")
            .and().insertInto("MEDIA_FILE", 18385L)
                .d("URI", "\"530951\"")
            .and().insertInto("TAG", 18384L)
                .d("GRP", "\"n\"")
                .d("NAME", "\"xAV83Q2YU\"")
            .and().insertInto("TAG_DERIVED", 18383L)
                .r("TAG_ID", 18381L)
                .d("ACTIVITIES_COUNT", "-9073212693839014765")
            .and().insertInto("MEDIA_FILE", 18388L)
                .d("URI", "\"znLE0ywTdNFJ\"")
            .and().insertInto("TAG", 18387L)
                .d("GRP", "\"7ToqO\"")
                .d("NAME", "\"_EM_68519_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 115, " + 
                    " \"mime_type\": \"yFyNyWGQWj\", " + 
                    " \"uri\": \"wIP8J3\", " + 
                    " \"name\": \"u2unG0QfDXh7GWvC\", " + 
                    " \"capture_date\": \"1902-03-05T19:51:11\", " + 
                    " \"author\": \"AaVDvae\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_15668_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_15662_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_15663_XYZ_\", " + 
                    " \"capture_date\": \"1986-10-17T02:24:29\", " + 
                    " \"author\": \"_EM_15666_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 66 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/4679891118231196964?EMextraParam123=_EM_15667_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"CHR\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"xb70VRVeE\", " + 
                    " \"uri\": \"O4ARKA\", " + 
                    " \"name\": \"iKgF\", " + 
                    " \"capture_date\": \"1990-03-08T16:33:46\", " + 
                    " \"copy_right\": \"FZFrE\", " + 
                    " \"author\": \"lO_LT57jZH1sz9\" " + 
                    " }, " + 
                    " \"activities_count\": 354 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"1HwcX4q_kgir\", " + 
                    " \"name\": \"Kzyz\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"9rd03bP9f2n\", " + 
                    " \"uri\": \"T_8PXDsyiO\", " + 
                    " \"name\": \"gW6ZDTAIVS\", " + 
                    " \"capture_date\": \"2064-11-22T23:30:22\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 569L)
                .d("URI", "\"1\"")
            .and().insertInto("TAG", 568L)
                .d("GRP", "\"_EM_10161_XYZ_\"")
                .d("NAME", "\"MEDIAFILE0_\"")
                .r("MEDIA_FILE_ID", 569L)
            .and().insertInto("MEDIA_FILE", 571L)
                .d("URI", "\"5QIKuwBvGXWLZleK\"")
            .and().insertInto("TAG", 570L)
                .d("GRP", "\"_EM_10193_XYZ_\"")
                .d("NAME", "\"_EM_10165_XYZ_\"")
                .r("MEDIA_FILE_ID", 569L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 319, " + 
                    " \"group\": \"_EM_5432_XYZ_\", " + 
                    " \"name\": \"_EM_5433_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -78, " + 
                    " \"mime_type\": \"_EM_5434_XYZ_\", " + 
                    " \"uri\": \"_EM_5435_XYZ_\", " + 
                    " \"name\": \"0Vv1qEM9nX\", " + 
                    " \"capture_date\": \"2000-06-14T17:16:46\", " + 
                    " \"copy_right\": \"_EM_5436_XYZ_\", " + 
                    " \"author\": \"MuXY56\" " + 
                    " }, " + 
                    " \"activities_count\": -1189152086 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/319?EMextraParam123=_EM_5438_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2219_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 432, " + 
                    " \"name\": \"_EM_2184_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_2186_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_2187_XYZ_\", " + 
                    " \"description_safety\": \"_EM_2189_XYZ_\", " + 
                    " \"description_notes\": \"_EM_2190_XYZ_\", " + 
                    " \"age_min\": -2147483318, " + 
                    " \"age_max\": -2147483046, " + 
                    " \"time_max\": 687, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 143, " + 
                    " \"date_created\": \"1994-06-06T24:19:10\", " + 
                    " \"value\": \"_EM_2214_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1939-06-28T25:20:30\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_2215_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"2055-02-08T10:22:48\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"_EM_2217_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 8120805166755096121, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 895, " + 
                    " \"ratings_sum\": 6, " + 
                    " \"related\": [ " + 
                    " 572, " + 
                    " 672, " + 
                    " 427 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/432?EMextraParam123=_EM_2218_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 93L)
                .d("AUTHORIZATION_LEVEL", "-130406")
                .d("NAME", "\"SEQUENCES\"")
            .and().insertInto("ACTIVITY", 92L)
            .and().insertInto("ACTIVITY_RATING", 91L)
                .r("ACTIVITY_ID", 92L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "-4")
            .and().insertInto("USERS", 96L)
                .d("AUTHORIZATION_LEVEL", "16809")
                .d("NAME", "\"sAEcsMSaraT\"")
            .and().insertInto("ACTIVITY", 95L)
            .and().insertInto("ACTIVITY_RATING", 94L)
                .r("ACTIVITY_ID", 95L)
                .r("USER_ID", 93L)
                .d("FAVOURITE", "true")
                .d("RATING", "16777970")
            .and().insertInto("USERS", 99L)
                .d("AUTHORIZATION_LEVEL", "-524160")
                .d("NAME", "\"_EM_90926_XYZ_\"")
            .and().insertInto("ACTIVITY", 98L)
            .and().insertInto("ACTIVITY_RATING", 97L)
                .r("ACTIVITY_ID", 98L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "0")
            .and().insertInto("USERS", 102L)
                .d("AUTHORIZATION_LEVEL", "-8192")
                .d("NAME", "\"JCPBJO6qaJo\"")
            .and().insertInto("ACTIVITY", 101L)
            .and().insertInto("ACTIVITY_RATING", 100L)
                .r("ACTIVITY_ID", 101L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "1048289")
            .and().insertInto("USERS", 105L)
                .d("AUTHORIZATION_LEVEL", "8192")
                .d("NAME", "\"VALUE\"")
            .and().insertInto("ACTIVITY", 104L)
            .and().insertInto("ACTIVITY_RATING", 103L)
                .r("ACTIVITY_ID", 92L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "462903038")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1673170251, " + 
                    " \"name\": \"i3b46\", " + 
                    " \"description_material\": \"ST7\", " + 
                    " \"description_prepare\": \"WGYH6\", " + 
                    " \"description_safety\": \"gbhwFbVdX\", " + 
                    " \"age_min\": -2147483395, " + 
                    " \"participants_min\": 535, " + 
                    " \"time_max\": 496, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"j_\", " + 
                    " \"name\": \"zqb\", " + 
                    " \"activities_count\": 336 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 707, " + 
                    " \"name\": \"r1ExGfA49\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -237885160668143295, " + 
                    " \"mime_type\": \"JLxOrIWw\", " + 
                    " \"name\": \"h_OWDqG0L7T0Ki\", " + 
                    " \"capture_date\": \"1981-01-00T21:58:50\", " + 
                    " \"copy_right\": \"fpL92ZuS1VEb\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 957, " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"ye8XgxI3PAqaho\", " + 
                    " \"uri\": \"viKEB3wilzOQNt\" " + 
                    " }, " + 
                    " \"activities_count\": 173 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -702871017, " + 
                    " \"uri\": \"04PxLmeVpPq\", " + 
                    " \"name\": \"NHcKlKjzRC6PXiF\", " + 
                    " \"capture_date\": \"2010-02-05T09:47:30\", " + 
                    " \"author\": \"f6\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 8027491871711825174, " + 
                    " \"uri\": \"DFICYHjN3EMwf\", " + 
                    " \"name\": \"a4QFZ5PjfwO3\", " + 
                    " \"capture_date\": \"1925-10-09T13:26:34\", " + 
                    " \"author\": \"3w0JvIfdqi6\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"HDnhoS9m0JY\", " + 
                    " \"capture_date\": \"1904-04-05T09:01:26\", " + 
                    " \"copy_right\": \"vnJ\", " + 
                    " \"author\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"author\": \"W4027FJaFSkTPb3n\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"l5W_6i2\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_average\": 0.6924470114540299, " + 
                    " \"ratings_count\": 760 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/-1673170251")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"_EM_31808_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_31809_XYZ_\", " + 
                    " \"description_safety\": \"_EM_31810_XYZ_\", " + 
                    " \"description_notes\": \"_EM_31811_XYZ_\", " + 
                    " \"age_min\": -2147483249, " + 
                    " \"participants_max\": 293, " + 
                    " \"time_min\": 353, " + 
                    " \"time_max\": 884, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"media_file\": { " + 
                    " \"name\": \"_EM_31814_XYZ_\", " + 
                    " \"copy_right\": \"_EM_31815_XYZ_\", " + 
                    " \"author\": \"_EM_31816_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 128 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 506, " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"vuNEp\", " + 
                    " \"uri\": \"_EM_31819_XYZ_\", " + 
                    " \"capture_date\": \"1952-04-30T21:50:56\" " + 
                    " }, " + 
                    " \"activities_count\": -1717894733 " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 751, " + 
                    " \"name\": \"ZDfvMFzf30UIdP\", " + 
                    " \"email_address\": \"_EM_31822_XYZ_\", " + 
                    " \"authorization_level\": 362, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"value\": \"_EM_31824_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 916, " + 
                    " \"date_created\": \"1913-11-26T10:10:29\", " + 
                    " \"type\": \"API\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 881, " + 
                    " \"ratings_average\": 0.5580013509783451, " + 
                    " \"ratings_sum\": 413 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3536_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_33500_XYZ_\", " + 
                    " \"description_material\": \"_EM_3492_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_3493_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_20090_XYZ_\", " + 
                    " \"age_min\": -2147483618, " + 
                    " \"age_max\": -2147483648, " + 
                    " \"participants_min\": 994, " + 
                    " \"participants_max\": 134152963, " + 
                    " \"time_max\": 817, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"_EM_3499_XYZ_\", " + 
                    " \"name\": \"_EM_3500_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 849, " + 
                    " \"mime_type\": \"_EM_3506_XYZ_\", " + 
                    " \"uri\": \"yu\u003cqfo5K2K\", " + 
                    " \"name\": \"_EM_3507_XYZ_\", " + 
                    " \"copy_right\": \"_EM_33501_XYZ_\", " + 
                    " \"author\": \"_EM_33502_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"_EM_3511_XYZ_\", " + 
                    " \"name\": \"_EM_3512_XYZ_\", " + 
                    " \"author\": \"_EM_3514_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_3515_XYZ_\", " + 
                    " \"uri\": \"_EM_3516_XYZ_\", " + 
                    " \"name\": \"_EM_3517_XYZ_\", " + 
                    " \"capture_date\": \"2052-08-22T04:28:42\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_3522_XYZ_\", " + 
                    " \"capture_date\": \"2061-02-18T09:19:-1\", " + 
                    " \"copy_right\": \"_EM_3523_XYZ_\", " + 
                    " \"author\": \"_EM_3524_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 603, " + 
                    " \"mime_type\": \"_EM_3525_XYZ_\", " + 
                    " \"uri\": \"i\", " + 
                    " \"name\": \"pKvbanb\", " + 
                    " \"capture_date\": \"1933-13-32T-1:53:32\", " + 
                    " \"copy_right\": \"3z88UtEw2VOkT\", " + 
                    " \"author\": \"_EM_3528_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 33555422, " + 
                    " \"name\": \"_EM_3529_XYZ_\", " + 
                    " \"email_address\": \"U\", " + 
                    " \"authorization_level\": 67109143, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 149, " + 
                    " \"value\": \"_EM_3531_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 311, " + 
                    " \"date_created\": \"2008-11-22T11:54:53\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_3532_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 720, " + 
                    " \"date_created\": \"2091-05-07T15:30:50\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 158 " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/893")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 4156L)
                .d("URI", "\"cwklb5NxILefya\"")
            .and().insertInto("TAG", 4155L)
                .d("GRP", "\"_EM_77261_XYZ_\"")
                .d("NAME", "\"_EM_26842_XYZ_\"")
                .r("MEDIA_FILE_ID", 4156L)
            .and().insertInto("MEDIA_FILE", 4158L)
                .d("URI", "\"tnRSFOeao5CrJZf\"")
            .and().insertInto("TAG", 4157L)
                .d("GRP", "\"zk0\"")
                .d("NAME", "\"wpwGRV8d\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 4160L)
                .d("URI", "\"qbjE5aqF\"")
            .and().insertInto("TAG", 4159L)
                .d("GRP", "\"_EM_24201_XYZ\"")
                .d("NAME", "\"icVliEoRx4C3jT\"")
                .r("MEDIA_FILE_ID", 4160L)
            .and().insertInto("MEDIA_FILE", 4162L)
                .d("URI", "\"dNHmzGyH1r\"")
            .and().insertInto("TAG", 4161L)
                .d("GRP", "\"KPwiBugXHaQQmcu\"")
                .d("NAME", "\"_EM_26844_XYZ_\"")
                .r("MEDIA_FILE_ID", 4156L)
            .and().insertInto("MEDIA_FILE", 4164L)
                .d("URI", "\"_EM_77262_XYZ_\"")
            .and().insertInto("TAG", 4163L)
                .d("GRP", "\"_EM_77263_XYZ_\"")
                .d("NAME", "\"_EM_26845_XYZ_\"")
                .r("MEDIA_FILE_ID", 4156L)
            .and().insertInto("ACTIVITY", 4223L)
            .and().insertInto("USERS", 4226L)
                .d("AUTHORIZATION_LEVEL", "29")
                .d("NAME", "\"fzQtCETXu0ss5\"")
            .and().insertInto("ACTIVITY", 4225L)
            .and().insertInto("ACTIVITY_RATING", 4224L)
                .r("ACTIVITY_ID", 4223L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "1272")
            .and().insertInto("USERS", 4229L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Q\"")
            .and().insertInto("ACTIVITY", 4228L)
            .and().insertInto("ACTIVITY_RATING", 4227L)
                .r("ACTIVITY_ID", 4225L)
                .r("USER_ID", 4229L)
                .d("FAVOURITE", "true")
                .d("RATING", "0")
            .and().insertInto("USERS", 4232L)
                .d("AUTHORIZATION_LEVEL", "134218460")
                .d("NAME", "\"_EM_26846_XYZ_\"")
            .and().insertInto("ACTIVITY", 4231L)
            .and().insertInto("ACTIVITY_RATING", 4230L)
                .r("ACTIVITY_ID", 4225L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "0")
            .and().insertInto("USERS", 4235L)
                .d("AUTHORIZATION_LEVEL", "58720766")
                .d("NAME", "\"_EM_26847_XYZ_\"")
            .and().insertInto("ACTIVITY", 4234L)
            .and().insertInto("ACTIVITY_RATING", 4233L)
                .r("ACTIVITY_ID", 4223L)
                .r("USER_ID", 4235L)
                .d("FAVOURITE", "true")
                .d("RATING", "-259217")
            .and().insertInto("MEDIA_FILE", 4238L)
                .d("URI", "\"_EM_24203_XYZ_\"")
            .and().insertInto("TAG", 4237L)
                .d("GRP", "\"szaDKrskh\"")
                .d("NAME", "\"_EM_26848_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 4236L)
                .r("TAG_ID", 4161L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("MEDIA_FILE", 4241L)
                .d("URI", "\"_EM_26849_XYZ_\"")
            .and().insertInto("TAG", 4240L)
                .d("GRP", "\"_EM_77264_XYZ_\"")
                .d("NAME", "\"_EM_24205_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 4239L)
                .r("TAG_ID", 4159L)
                .d("ACTIVITIES_COUNT", "206")
            .and().insertInto("MEDIA_FILE", 4244L)
                .d("URI", "\"BZtHQVDWqbAjhL\"")
            .and().insertInto("TAG", 4243L)
                .d("GRP", "\"8MvFOAdMhwqh\"")
                .d("NAME", "\"_EM_24208_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 4242L)
                .r("TAG_ID", 4240L)
                .d("ACTIVITIES_COUNT", "4915643630068208647")
            .and().insertInto("ACTIVITY", 3479L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -4611686018442706960, " + 
                    " \"name\": \"9Nn7Cla\", " + 
                    " \"description_material\": \"_EM_20053_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_20054_XYZ_\", " + 
                    " \"description_main\": \"yIxMHhuq\", " + 
                    " \"description_safety\": \"_EM_20056_XYZ_\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": 96, " + 
                    " \"participants_min\": 810, " + 
                    " \"participants_max\": 180, " + 
                    " \"time_max\": 373, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"Ivk\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"name\": \"_EM_77260_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"Bc_kFABpx\", " + 
                    " \"copy_right\": \"_EM_20061_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": -1375460951 " + 
                    " }, " + 
                    " { " + 
                    " \"activities_count\": 145 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 975, " + 
                    " \"mime_type\": \"_EM_20069_XYZ_\", " + 
                    " \"name\": \"yiXHke8I2JfK\", " + 
                    " \"copy_right\": \"Uu\", " + 
                    " \"author\": \"_EM_20071_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 596, " + 
                    " \"uri\": \"_EM_20073_XYZ_\", " + 
                    " \"name\": \"_EM_20074_XYZ_\", " + 
                    " \"capture_date\": \"1941-04-31T09:25:52\", " + 
                    " \"author\": \"_EM_20076_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 900, " + 
                    " \"capture_date\": \"1964-03-08T17:27:02\", " + 
                    " \"copy_right\": \"_EM_20080_XYZ_\", " + 
                    " \"author\": \"_EM_20081_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 974, " + 
                    " \"uri\": \"_EM_20083_XYZ_\", " + 
                    " \"name\": \"_EM_20084_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"favourites_count\": 38, " + 
                    " \"ratings_count\": -1913170625 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "attrs=id%2Cidentities&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/6?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"rating\": 5, " + 
                    " \"favourite\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities/5/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 2, " + 
                    " 4 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/789")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/305?EMextraParam123=_EM_134_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"favourite\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities/-4380558480533454697/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"Don\u0027t care about the name\", " + 
                    " \"authorization_level\": 99, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"new user\", " + 
                    " \"authorization_level\": 0, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"date_created\": \"2024-05-26T19:24:08\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"some api key\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"name\": \"A New Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:07\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"Introduction\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"location\", " + 
                    " \"name\": \"At home\", " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/ant.gif\", " + 
                    " \"name\": \"ant.gif - Duplicate which should not be persisted\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"group\": \"G\", " + 
                    " \"name\": \"N\", " + 
                    " \"activities_count\": 0 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"key\": \"fail\", " + 
                    " \"value\": \"fail\", " + 
                    " \"valid_to\": \"2024-05-26T21:24:06\", " + 
                    " \"valid_from\": \"2024-05-26T22:24:06\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/profile-bob.gif\", " + 
                    " \"name\": \"Bob\u0027s Profile Picture\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/4?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/jpeg\", " + 
                    " \"uri\": \"http://example.com/profile-alice.jpg\", " + 
                    " \"name\": \"Alice\u0027s Profile Picture\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_246_XYZ_\", " + 
                    " \"date_published\": \"2016-11-08T14:04:44\", " + 
                    " \"description_introduction\": \"_EM_248_XYZ_\", " + 
                    " \"description_main\": \"_EM_250_XYZ_\", " + 
                    " \"age_min\": -765, " + 
                    " \"participants_min\": 390, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_253_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_299_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"An Updated Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\", " + 
                    " \"description_material\": \"Materials\", " + 
                    " \"description_introduction\": \"The Introduction Has Been Updated\", " + 
                    " \"description_prepare\": \"Preparations\", " + 
                    " \"description_main\": \"Main\", " + 
                    " \"description_safety\": \"Safety\", " + 
                    " \"description_notes\": \"Notes\", " + 
                    " \"age_min\": 5, " + 
                    " \"age_max\": 10, " + 
                    " \"participants_min\": 1, " + 
                    " \"participants_max\": 3, " + 
                    " \"time_min\": 10, " + 
                    " \"time_max\": 30, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1, " + 
                    " \"activities_count\": 0 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"image/gif\", " + 
                    " \"uri\": \"http://example.com/bobcat.gif\", " + 
                    " \"name\": \"bobcat.gif\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1, " + 
                    " \"name\": \"A Patched Activity\", " + 
                    " \"date_created\": \"2024-05-26T19:24:00\" " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/1?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_129_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/765159908?EMextraParam123=_EM_128_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_465_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 298, " + 
                    " \"activities_count\": 428 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/298")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_503_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"2039-08-16T04:17:30\", " + 
                    " \"date_created\": \"2100-13-14T18:56:47\", " + 
                    " \"description_introduction\": \"_EM_472_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_473_XYZ_\", " + 
                    " \"description_safety\": \"_EM_474_XYZ_\", " + 
                    " \"participants_min\": 966, " + 
                    " \"time_min\": 761, " + 
                    " \"source\": \"_EM_476_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 1377545174, " + 
                    " \"mime_type\": \"_EM_484_XYZ_\", " + 
                    " \"uri\": \"_EM_485_XYZ_\", " + 
                    " \"capture_date\": \"2033-05-17T08:34:57\", " + 
                    " \"copy_right\": \"oAdSEEpPWyDCerLB\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_488_XYZ_\", " + 
                    " \"uri\": \"_EM_489_XYZ_\", " + 
                    " \"copy_right\": \"LJp3\", " + 
                    " \"author\": \"_EM_491_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 10, " + 
                    " \"uri\": \"_EM_493_XYZ_\", " + 
                    " \"author\": \"_EM_496_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_497_XYZ_\", " + 
                    " \"name\": \"_EM_498_XYZ_\", " + 
                    " \"capture_date\": \"1989-04-22T14:59:25\", " + 
                    " \"author\": \"_EM_500_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 9, " + 
                    " \"email_address\": \"YuMu6d6Hsj\", " + 
                    " \"authorization_level\": 1620278870 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/509")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/6724186047871204045?EMextraParam123=_EM_509_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1851_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/983?" + 
                    "verify_unused=false&" + 
                    "EMextraParam123=_EM_1850_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/643616977")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/378?" + 
                    "attrs=_EM_1866_XYZ_&" + 
                    "EMextraParam123=_EM_1867_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/users/-9044761607917737624?EMextraParam123=_EM_1869_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1503L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"FlhdgTiUHYK\"")
                .d("URI", "\"P\"")
            .and().insertInto("MEDIA_FILE", 1504L)
                .d("AUTHOR", "\"xPy\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"khDhYmKr\"")
                .d("NAME", "\"TpUg\"")
                .d("URI", "\"rpImqjt5CgE9gu\"")
            .and().insertInto("MEDIA_FILE", 1505L)
                .d("AUTHOR", "\"H3UWsl\"")
                .d("CAPTURE_DATE", "\"2050-08-10 23:35:00\"")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"u4cs5KR7e4YV5V\"")
                .d("URI", "\"vnCsHGcs2RAoYKZ\"")
            .and().insertInto("MEDIA_FILE", 1506L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"i6hwOd9Y5\"")
                .d("MIME_TYPE", "\"BVc\"")
                .d("NAME", "\"J\"")
                .d("URI", "\"\"")
            .and().insertInto("MEDIA_FILE", 1507L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2065-02-11 15:42:34\"")
                .d("COPY_RIGHT", "\"T\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"NMVwp_rYnbpKBc\"")
                .d("URI", "\"qQtt4uFu3hcMcC\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/954?EMextraParam123=_EM_3546_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2015_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/media_files/864")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/452")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2178_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/tags/1667659394?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_3900_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/436?EMextraParam123=_EM_3899_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1846_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/406")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/814?EMextraParam123=_EM_1920_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/468?EMextraParam123=_EM_2158_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/categories/10?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3658L)
            .and().insertInto("ACTIVITY", 3659L)
            .and().insertInto("ACTIVITY", 3660L)
            .and().insertInto("ACTIVITY", 3661L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v1/activities/2095393369")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_53280_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/242?EMextraParam123=_EM_53279_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/977")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_1999_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 550L)
            .and().insertInto("ACTIVITY", 551L)
            .and().insertInto("ACTIVITY", 552L)
            .and().insertInto("ACTIVITY", 553L)
            .and().insertInto("ACTIVITY", 554L)
            .and().insertInto("SYSTEM_MESSAGE", 2246L)
                .d("KEY", "\"os4fy3S6ue_e\"")
                .d("VALID_FROM", "\"2090-08-21 15:52:18\"")
                .d("VALID_TO", "\"2079-08-11 05:56:07\"")
                .d("VALUE", "\"mlD7WTrE6eml\"")
            .and().insertInto("SYSTEM_MESSAGE", 2247L)
                .d("KEY", "\"CqYrleEEmZTHmMKA\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1954-10-16 04:30:56\"")
                .d("VALUE", "\"bEvBji8v8FRxXR\"")
            .and().insertInto("SYSTEM_MESSAGE", 2248L)
                .d("KEY", "\"akF\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1918-04-28 00:40:09\"")
                .d("VALUE", "\"kM\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1023834779, " + 
                    " \"key\": \"gf2gEotrq\", " + 
                    " \"value\": \"zD5Ay\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 441, " + 
                    " \"name\": \"EEDJ8\", " + 
                    " \"email_address\": \"7J_W\", " + 
                    " \"authorization_level\": 256, " + 
                    " \"identities\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_2063_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"id\": 418, " + 
                    " \"mime_type\": \"_EM_2057_XYZ_\", " + 
                    " \"copy_right\": \"_EM_2060_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 410 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
