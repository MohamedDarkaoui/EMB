import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T22:38:38.969+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 75 tests
 * <br>
 * Covered targets: 475
 * <br>
 * Used time: 0h 30m 26s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("MEDIA_FILE","ACTIVITY_PROPERTIES_MEDIA_FILE","MEDIA_FILE_KEYWORDS","TAG","ACTIVITY_PROPERTIES_TAG","TAG_DERIVED","ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_RATING","ACTIVITY_RELATION","USERS","USER_IDENTITY","SYSTEM_MESSAGE"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=_EM_141_XYZ_&" + 
                    "valid=EVOMASTER&" + 
                    "attrs=_EM_142_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=&" + 
                    "featured=true&" + 
                    "age_1=al8tABoRPT&" + 
                    "time_1=_EM_7329_XYZ_&" + 
                    "time_2=_EM_7330_XYZ_&" + 
                    "favourites=942")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 14126L)
                .d("AUTHOR", "\"\"")
                .d("CAPTURE_DATE", "\"1960-05-25 04:03:01\"")
                .d("COPY_RIGHT", "\"IsiNa2ZvLUSi7plc\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"_I\"")
            .and().insertInto("MEDIA_FILE", 14127L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1926-09-01 06:22:38\"")
                .d("COPY_RIGHT", "\"XlTqRh\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"cd\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=f&" + 
                    "featured=false&" + 
                    "participants=7&" + 
                    "durations=eE3ix_wPWL&" + 
                    "id=OH&" + 
                    "uri=nNnypn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1620_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 375, " + 
                    " \"date_created\": \"2000-08-28T14:43:13\", " + 
                    " \"description_material\": \"_EM_1593_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_1594_XYZ_\", " + 
                    " \"description_prepare\": \"_EM_1595_XYZ_\", " + 
                    " \"description_notes\": \"_EM_1598_XYZ_\", " + 
                    " \"age_max\": -2147483604, " + 
                    " \"participants_min\": 737, " + 
                    " \"participants_max\": 545, " + 
                    " \"time_max\": 160, " + 
                    " \"activity\": { " + 
                    " \"id\": 501, " + 
                    " \"favourites_count\": 92029164, " + 
                    " \"ratings_average\": 0.9068721893438785, " + 
                    " \"related\": [ " + 
                    " 28, " + 
                    " 66, " + 
                    " 257, " + 
                    " 647, " + 
                    " 435 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/375")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1562_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 639, " + 
                    " \"name\": \"_EM_8624_XYZ_\", " + 
                    " \"date_published\": \"1958-12-23T09:36:22\", " + 
                    " \"date_created\": \"1931-01-08T23:58:59\", " + 
                    " \"description_material\": \"hNÂ‚556OPcx\", " + 
                    " \"description_introduction\": \"_EM_1502_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1505_XYZ_\", " + 
                    " \"description_notes\": \"j82zNc3NblVdme2e_\", " + 
                    " \"age_min\": -2146434142, " + 
                    " \"age_max\": -2147483262, " + 
                    " \"participants_min\": 148, " + 
                    " \"participants_max\": 871, " + 
                    " \"time_min\": -1065795897, " + 
                    " \"time_max\": 224, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"q0v\", " + 
                    " \"tags\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"group\": \"_EM_1512_XYZ_\", " + 
                    " \"name\": \"_EM_1513_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 345, " + 
                    " \"name\": \"_EM_1516_XYZ_\", " + 
                    " \"capture_date\": \"1954-07-22T20:45:17\", " + 
                    " \"author\": \"_EM_1518_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 247 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_1520_XYZ_\", " + 
                    " \"activities_count\": 26 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 107, " + 
                    " \"group\": \"_EM_1524_XYZ_\", " + 
                    " \"name\": \"_EM_1525_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_1529_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_1559_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 5271665411066270322, " + 
                    " \"ratings_count\": 342, " + 
                    " \"favourites_count\": 467, " + 
                    " \"ratings_average\": 0.4046231188802515, " + 
                    " \"related\": [ " + 
                    " 717, " + 
                    " 837, " + 
                    " 336 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/607")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_7411_XYZ_\", " + 
                    " \"authorization_level\": 566, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 385, " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 544, " + 
                    " \"value\": \"_EM_7414_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_7415_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/-2096740")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 837L)
                .d("AUTHOR", "\"_EM_10297_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "\"7QsqNlEXmNw3ASvQ\"")
                .d("MIME_TYPE", "\"mJ8r4OWbbAtY\"")
                .d("NAME", "\"9dJ\"")
                .d("URI", "\"_EM_10298_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 838L)
                .d("AUTHOR", "\"hctJu2IdDBWPZrqX\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"RVgnvqyTYXu8x\"")
                .d("NAME", "NULL")
                .d("URI", "\"fCAwlEp9YtY\"")
            .and().insertInto("MEDIA_FILE", 839L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"jXqvHbaqrbkZ4a\"")
                .d("NAME", "\"_EM_10299_XYZ_\"")
                .d("URI", "\"_EM_10300_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 886L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 885L)
                .d("GRP", "\"sY_Ipu8Cx3Pro8Xr\"")
                .d("NAME", "\"dPfzqp0mgcofE\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 888L)
                .d("URI", "\"E\"")
            .and().insertInto("TAG", 887L)
                .d("GRP", "\"FM35VDm3\"")
                .d("NAME", "\"EtN\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 890L)
                .d("URI", "\"6BQwZKR\"")
            .and().insertInto("TAG", 889L)
                .d("GRP", "\"EEwEs9\"")
                .d("NAME", "\"_EM_10301_XYZ_\"")
                .r("MEDIA_FILE_ID", 837L)
            .and().insertInto("MEDIA_FILE", 892L)
                .d("URI", "\"EU2VOChXqLYaBa\"")
            .and().insertInto("TAG", 891L)
                .d("GRP", "\"_EM_10302_XYZ_\"")
                .d("NAME", "\"Qqlu6kA83W6DVRC\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 894L)
                .d("URI", "\"_EM_10303_XYZ_\"")
            .and().insertInto("TAG", 893L)
                .d("GRP", "\"v\"")
                .d("NAME", "\"qjOzru6Nd\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("SYSTEM_MESSAGE", 918L)
                .d("KEY", "\"Rd8uPSCvq\"")
                .d("VALID_FROM", "\"1924-10-05 03:27:19\"")
                .d("VALID_TO", "\"1948-06-25 05:21:40\"")
                .d("VALUE", "\"eUsrrzf\"")
            .and().insertInto("SYSTEM_MESSAGE", 919L)
                .d("KEY", "\"GF4rhGVQyZY\"")
                .d("VALID_FROM", "\"1989-02-22 23:22:13\"")
                .d("VALID_TO", "\"2098-05-25 03:43:26\"")
                .d("VALUE", "\"_EM_10304_XYZ_\"")
            .and().insertInto("SYSTEM_MESSAGE", 920L)
                .d("KEY", "\"_EM_10305_XYZ_\"")
                .d("VALID_FROM", "\"1965-08-15 14:55:41\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"eT0ksJRmHLhZksC\"")
            .and().insertInto("MEDIA_FILE", 120L)
                .d("AUTHOR", "\"_EM_6989_XYZ_\"")
                .d("CAPTURE_DATE", "\"2059-04-02 07:29:28\"")
                .d("COPY_RIGHT", "\"_EM_6990_XYZ_\"")
                .d("MIME_TYPE", "\"2389103\"")
                .d("NAME", "\"_EM_10306_XYZ_\"")
                .d("URI", "\"TAGDERIVED2_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1596644441, " + 
                    " \"key\": \"_EM_10296_XYZ_\", " + 
                    " \"value\": \"eByyc_rs\", " + 
                    " \"valid_from\": \"2065-12-20T14:34:23\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 483, " + 
                    " \"key\": \"I76kOzK_1If9Sp\", " + 
                    " \"value\": \"2V7ea\", " + 
                    " \"valid_to\": \"2082-07-17T06:20:02\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/483?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 6471L)
            .and().insertInto("ACTIVITY", 6472L)
            .and().insertInto("USERS", 6476L)
                .d("AUTHORIZATION_LEVEL", "-1895")
                .d("NAME", "\"xHkrDzAVE6VtF\"")
            .and().insertInto("ACTIVITY", 6475L)
            .and().insertInto("ACTIVITY", 6474L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6473L)
                .d("AGE_MAX", "-2147483470")
                .d("AGE_MIN", "-2097692")
                .d("DATE_CREATED", "\"1927-11-28 22:23:25\"")
                .d("DATE_PUBLISHED", "\"1907-08-21 01:05:04\"")
                .d("DATE_UPDATED", "\"2000-06-27 03:42:11\"")
                .d("DESCRIPTION_INTRODUCTION", "\"iCTTtPxhZ2KW6GZ\"")
                .d("DESCRIPTION_MAIN", "\"3\"")
                .d("DESCRIPTION_MATERIAL", "\"_EM_37667_XYZ_\"")
                .d("DESCRIPTION_NOTES", "\"_EM_38241_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"oJxbzzJT3uGSj\"")
                .d("DESCRIPTION_SAFETY", "\"ZouMJys0pNxndb\"")
                .d("FEATURED", "false")
                .d("NAME", "\"Vy9UPMUse\"")
                .d("PARTICIPANTS_MAX", "728")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"_EM_26429_XYZ_\"")
                .d("TIME_MAX", "557040")
                .d("TIME_MIN", "-32768")
                .r("ACTIVITY_ID", 6474L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 6475L)
            .and().insertInto("USERS", 6480L)
                .d("AUTHORIZATION_LEVEL", "-524140")
                .d("NAME", "\"bVJIHSz7kU5UsnU\"")
            .and().insertInto("ACTIVITY", 6479L)
            .and().insertInto("ACTIVITY", 6478L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6477L)
                .d("AGE_MAX", "-2147483209")
                .d("AGE_MIN", "-2147483648")
                .d("DATE_CREATED", "\"2023-12-11 03:00:37\"")
                .d("DATE_PUBLISHED", "\"2053-09-03 21:18:45\"")
                .d("DATE_UPDATED", "\"2083-03-12 20:20:12\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "\"_EM_37574_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "\"_EM_26430_XYZ_\"")
                .d("DESCRIPTION_NOTES", "\"kz6qW_TPGVoCPDJj5\"")
                .d("DESCRIPTION_PREPARE", "\"lVqZ9XSm6\"")
                .d("DESCRIPTION_SAFETY", "\"2564951\"")
                .d("FEATURED", "true")
                .d("NAME", "\"Q375\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "463")
                .d("SOURCE", "\"_EM_26175_XYZ_\"")
                .d("TIME_MAX", "0")
                .d("TIME_MIN", "-7340")
                .r("ACTIVITY_ID", 6479L)
                .d("AUTHOR_ID", "2")
                .r("PUBLISHING_ACTIVITY_ID", 6471L)
            .and().insertInto("USERS", 6484L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_26152_XYZ_a\"")
            .and().insertInto("ACTIVITY", 6483L)
            .and().insertInto("ACTIVITY", 6482L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6481L)
                .d("AGE_MAX", "16")
                .d("AGE_MIN", "-8107")
                .d("DATE_CREATED", "\"1975-07-01 07:36:30\"")
                .d("DATE_PUBLISHED", "\"2040-05-16 14:02:47\"")
                .d("DATE_UPDATED", "\"2071-02-08 17:39:34\"")
                .d("DESCRIPTION_INTRODUCTION", "\"lwGxRYn0q8m_\"")
                .d("DESCRIPTION_MAIN", "\"_EM_38242_XYZ_\"")
                .d("DESCRIPTION_MATERIAL", "\"gVOsEzG8bK\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"9gChbv\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "true")
                .d("NAME", "\"_EM_26155_XYZ_\"")
                .d("PARTICIPANTS_MAX", "NULL")
                .d("PARTICIPANTS_MIN", "1332")
                .d("SOURCE", "\"WQTO4p0xonE4q\"")
                .d("TIME_MAX", "16712")
                .d("TIME_MIN", "2113536")
                .r("ACTIVITY_ID", 6483L)
                .d("AUTHOR_ID", "1")
                .r("PUBLISHING_ACTIVITY_ID", 6474L)
            .and().insertInto("ACTIVITY", 6486L)
            .and().insertInto("ACTIVITY_DERIVED", 6485L)
                .r("ACTIVITY_ID", 6483L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "0.0")
                .d("RATINGS_COUNT", "0")
                .d("RATINGS_SUM", "242")
            .and().insertInto("ACTIVITY", 6488L)
            .and().insertInto("ACTIVITY_DERIVED", 6487L)
                .r("ACTIVITY_ID", 6479L)
                .d("FAVOURITES_COUNT", "0")
                .d("RATINGS_AVG", "-1.4331136607447645")
                .d("RATINGS_COUNT", "-5803801424899172826")
                .d("RATINGS_SUM", "0")
            .and().insertInto("ACTIVITY", 6490L)
            .and().insertInto("ACTIVITY_DERIVED", 6489L)
                .r("ACTIVITY_ID", 6474L)
                .d("FAVOURITES_COUNT", "218")
                .d("RATINGS_AVG", "0.0")
                .d("RATINGS_COUNT", "317")
                .d("RATINGS_SUM", "-238383691873956605")
            .and().insertInto("ACTIVITY", 6492L)
            .and().insertInto("ACTIVITY_DERIVED", 6491L)
                .r("ACTIVITY_ID", 6475L)
                .d("FAVOURITES_COUNT", "99")
                .d("RATINGS_AVG", "0.9049115711590934")
                .d("RATINGS_COUNT", "NULL")
                .d("RATINGS_SUM", "977")
            .and().insertInto("ACTIVITY", 6494L)
            .and().insertInto("ACTIVITY_DERIVED", 6493L)
                .r("ACTIVITY_ID", 6482L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "408.3838807005611")
                .d("RATINGS_COUNT", "-4096")
                .d("RATINGS_SUM", "0")
            .and().insertInto("MEDIA_FILE", 6495L)
                .d("AUTHOR", "\"2547159\"")
                .d("CAPTURE_DATE", "\"2030-09-06 13:01:18\"")
                .d("COPY_RIGHT", "\"_UM_26432_XZZ_\"")
                .d("MIME_TYPE", "\"_EM_37668_XYZ_\"")
                .d("NAME", "\"_EM_26433_XYZ_\"")
                .d("URI", "\"o\"")
            .and().insertInto("MEDIA_FILE", 6496L)
                .d("AUTHOR", "\"_EM_37575_XYZ_\"")
                .d("CAPTURE_DATE", "\"1920-05-05 03:05:20\"")
                .d("COPY_RIGHT", "\"2568870\"")
                .d("MIME_TYPE", "\"Y7bn8ocMRqE\"")
                .d("NAME", "\"ZPaOT5rmOO7VJ\"")
                .d("URI", "\"OCcIXhRhIAu\"")
            .and().insertInto("MEDIA_FILE", 6502L)
                .d("URI", "\"aID_\"")
            .and().insertInto("USERS", 6501L)
                .d("AUTHORIZATION_LEVEL", "-128")
                .d("NAME", "\"_EM_26437_XYZ_\"")
            .and().insertInto("ACTIVITY", 6500L)
            .and().insertInto("ACTIVITY", 6499L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6498L)
                .r("ACTIVITY_ID", 6471L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 6497L)
                .r("ACTIVITY_PROPERTIES_ID", 6498L)
                .r("MEDIA_FILE_ID", 6495L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 6508L)
                .d("URI", "\"OtZS13Fe\"")
            .and().insertInto("USERS", 6507L)
                .d("AUTHORIZATION_LEVEL", "392")
                .d("NAME", "\"_EM_38243_XYZ_\"")
            .and().insertInto("ACTIVITY", 6506L)
            .and().insertInto("ACTIVITY", 6505L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6504L)
                .r("ACTIVITY_ID", 6482L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 6503L)
                .r("ACTIVITY_PROPERTIES_ID", 6498L)
                .r("MEDIA_FILE_ID", 6496L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 6514L)
                .d("URI", "\"lC_\"")
            .and().insertInto("USERS", 6513L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"ITDPoU\"")
            .and().insertInto("ACTIVITY", 6512L)
            .and().insertInto("ACTIVITY", 6511L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6510L)
                .r("ACTIVITY_ID", 6494L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 6509L)
                .r("ACTIVITY_PROPERTIES_ID", 6510L)
                .r("MEDIA_FILE_ID", 6495L)
                .d("FEATURED", "true")
            .and().insertInto("USERS", 6517L)
                .d("AUTHORIZATION_LEVEL", "9323")
                .d("NAME", "\"2568488\"")
            .and().insertInto("ACTIVITY", 6516L)
            .and().insertInto("ACTIVITY_RATING", 6515L)
                .r("ACTIVITY_ID", 6490L)
                .r("USER_ID", 6517L)
                .d("FAVOURITE", "true")
                .d("RATING", "-32274")
            .and().insertInto("USERS", 6520L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_37576_XYZ_\"")
            .and().insertInto("ACTIVITY", 6519L)
            .and().insertInto("ACTIVITY_RATING", 6518L)
                .r("ACTIVITY_ID", 6471L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "735")
            .and().insertInto("MEDIA_FILE", 6522L)
                .d("URI", "\"Xs6bR79Xc\"")
            .and().insertInto("TAG", 6521L)
                .d("GRP", "\"YLjEXk7lSfdblab\"")
                .d("NAME", "\"_EM_26181_XYZ_\"")
                .r("MEDIA_FILE_ID", 6495L)
            .and().insertInto("MEDIA_FILE", 6524L)
                .d("URI", "\"_EM_26157_XYZ_\"")
            .and().insertInto("TAG", 6523L)
                .d("GRP", "\"_EM_26158_XYZ_\"")
                .d("NAME", "\"VFxANPel~LP\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 6526L)
                .d("URI", "\"_EM_26438_XYZ_\"")
            .and().insertInto("TAG", 6525L)
                .d("GRP", "\"_EM_26439_XYZ_\"")
                .d("NAME", "\"HnncFa7w7jZkg\"")
                .r("MEDIA_FILE_ID", 6526L)
            .and().insertInto("MEDIA_FILE", 11033L)
                .d("URI", "\"zMVkgDSq22I\"")
            .and().insertInto("MEDIA_FILE_KEYWORDS", 11032L)
                .r("MEDIA_FILE_ID", 6522L)
                .d("KEYWORD", "\"49YFaQVvUvdW0M\"")
            .and().insertInto("MEDIA_FILE", 11035L)
                .d("URI", "\"jZpI13CBiP\"")
            .and().insertInto("MEDIA_FILE_KEYWORDS", 11034L)
                .r("MEDIA_FILE_ID", 6524L)
                .d("KEYWORD", "\"Gc74\"")
            .and().insertInto("USERS", 11429L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"HZ\"")
            .and().insertInto("ACTIVITY", 11428L)
            .and().insertInto("ACTIVITY", 11427L)
            .and().insertInto("ACTIVITY_RELATION", 11426L)
                .r("ACTIVITY_1_ID", 6506L)
                .r("ACTIVITY_2_ID", 6506L)
                .r("OWNER_ID", 6517L)
            .and().insertInto("USERS", 11433L)
                .d("AUTHORIZATION_LEVEL", "293")
                .d("NAME", "\"czSH0J4khaJWl\"")
            .and().insertInto("ACTIVITY", 11432L)
            .and().insertInto("ACTIVITY", 11431L)
            .and().insertInto("ACTIVITY_RELATION", 11430L)
                .r("ACTIVITY_1_ID", 6499L)
                .r("ACTIVITY_2_ID", 11428L)
                .r("OWNER_ID", 11433L)
            .and().insertInto("MEDIA_FILE", 11440L)
                .d("URI", "\"Kr\"")
            .and().insertInto("TAG", 11439L)
                .d("GRP", "\"mlzesLJBidlB02d\"")
                .d("NAME", "\"wKi\"")
            .and().insertInto("USERS", 11438L)
                .d("AUTHORIZATION_LEVEL", "119")
                .d("NAME", "\"Mg\"")
            .and().insertInto("ACTIVITY", 11437L)
            .and().insertInto("ACTIVITY", 11436L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11435L)
                .r("ACTIVITY_ID", 6492L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11434L)
                .r("ACTIVITY_PROPERTIES_ID", 6498L)
                .r("TAG_ID", 6523L)
            .and().insertInto("MEDIA_FILE", 11447L)
                .d("URI", "\"_EM_38244_XYZ_\"")
            .and().insertInto("TAG", 11446L)
                .d("GRP", "\"8xKkwtOe\"")
                .d("NAME", "\"Wo\"")
            .and().insertInto("USERS", 11445L)
                .d("AUTHORIZATION_LEVEL", "338")
                .d("NAME", "\"kZJc3BMuM\"")
            .and().insertInto("ACTIVITY", 11444L)
            .and().insertInto("ACTIVITY", 11443L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11442L)
                .r("ACTIVITY_ID", 6511L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11441L)
                .r("ACTIVITY_PROPERTIES_ID", 6473L)
                .r("TAG_ID", 6525L)
            .and().insertInto("MEDIA_FILE", 11454L)
                .d("URI", "\"MQkCf_EQe\"")
            .and().insertInto("TAG", 11453L)
                .d("GRP", "\"xYJ\"")
                .d("NAME", "\"_EM_38245_XYZ_\"")
            .and().insertInto("USERS", 11452L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"NFx12Uyta2S2HmnM\"")
            .and().insertInto("ACTIVITY", 11451L)
            .and().insertInto("ACTIVITY", 11450L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11449L)
                .r("ACTIVITY_ID", 6499L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11448L)
                .r("ACTIVITY_PROPERTIES_ID", 6498L)
                .r("TAG_ID", 6525L)
            .and().insertInto("MEDIA_FILE", 11461L)
                .d("URI", "\"_EM_38246_XYZ_\"")
            .and().insertInto("TAG", 11460L)
                .d("GRP", "\"m\"")
                .d("NAME", "\"LyJyA0Ztx\"")
            .and().insertInto("USERS", 11459L)
                .d("AUTHORIZATION_LEVEL", "614")
                .d("NAME", "\"bUUcuU9dy0UU\"")
            .and().insertInto("ACTIVITY", 11458L)
            .and().insertInto("ACTIVITY", 11457L)
            .and().insertInto("ACTIVITY_PROPERTIES", 11456L)
                .r("ACTIVITY_ID", 11431L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 11455L)
                .r("ACTIVITY_PROPERTIES_ID", 6481L)
                .r("TAG_ID", 6525L)
            .and().insertInto("MEDIA_FILE", 11604L)
                .d("URI", "\"jwr4FdBcDUfyU\"")
            .and().insertInto("TAG", 11603L)
                .d("GRP", "\"2owfMjm\"")
                .d("NAME", "\"tso\"")
            .and().insertInto("TAG_DERIVED", 11602L)
                .r("TAG_ID", 6523L)
                .d("ACTIVITIES_COUNT", "387")
            .and().insertInto("MEDIA_FILE", 11607L)
                .d("URI", "\"_LDt\"")
            .and().insertInto("TAG", 11606L)
                .d("GRP", "\"600m7e\"")
                .d("NAME", "\"_EM_38247_XYZ_\"")
            .and().insertInto("TAG_DERIVED", 11605L)
                .r("TAG_ID", 11606L)
                .d("ACTIVITIES_COUNT", "-4734965707452695228")
            .and().insertInto("MEDIA_FILE", 11610L)
                .d("URI", "\"5KJv\"")
            .and().insertInto("TAG", 11609L)
                .d("GRP", "\"d0yCoqB2QZ\"")
                .d("NAME", "\"Jf7wMaD1D\"")
            .and().insertInto("TAG_DERIVED", 11608L)
                .r("TAG_ID", 6525L)
                .d("ACTIVITIES_COUNT", "761")
            .and().insertInto("MEDIA_FILE", 11613L)
                .d("URI", "\"_EM_38248_XYZ_\"")
            .and().insertInto("TAG", 11612L)
                .d("GRP", "\"_EM_38249_XYZ_\"")
                .d("NAME", "\"KIYKGI3OHE8oXu5\"")
            .and().insertInto("TAG_DERIVED", 11611L)
                .r("TAG_ID", 11603L)
                .d("ACTIVITIES_COUNT", "NULL")
            .and().insertInto("ACTIVITY", 6406L)
            .and().insertInto("MEDIA_FILE", 6407L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2047-12-01 19:10:14\"")
                .d("COPY_RIGHT", "\"uhjL8udxP\"")
                .d("MIME_TYPE", "\"7D0\"")
                .d("NAME", "\"_EM_25974_XYZ_\"")
                .d("URI", "\"J\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"7\", " + 
                    " \"email_address\": \"_EM_37571_XYZ_\", " + 
                    " \"authorization_level\": 942, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2064-02-21T24:30:56\", " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_25848_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -1409259762, " + 
                    " \"date_created\": \"2060-11-02T10:26:12\", " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"XJMJwFXemxNW\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 279, " + 
                    " \"date_created\": \"2070-09-14T06:21:27\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_25851_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 2500618099751743029, " + 
                    " \"uri\": \"\", " + 
                    " \"name\": \"khuxQo87JWVj0Q\", " + 
                    " \"capture_date\": \"2092-04-13T25:49:23\", " + 
                    " \"copy_right\": \"En776hsM1\", " + 
                    " \"author\": \"9iHV7e2ed7i\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3311L)
                .d("AUTHOR", "\"_EM_16662_XYZ_\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"_EM_16663_XYZ_\"")
                .d("NAME", "NULL")
                .d("URI", "\"_EM_16665_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"_EM_16666_XYZ_\", " + 
                    " \"uri\": \"jZj\", " + 
                    " \"name\": \"_EM_16667_XYZ_\", " + 
                    " \"capture_date\": \"1956-11-32T05:44:20\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/3311")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 13613L)
                .d("URI", "\"1qbzK682Em\"")
            .and().insertInto("TAG", 13612L)
                .d("GRP", "\"dX5Qggytmz8Kj\"")
                .d("NAME", "\"vmJB0YB1nuZMrC\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 13615L)
                .d("URI", "\"Djzz33KNHk37D\"")
            .and().insertInto("TAG", 13614L)
                .d("GRP", "\"Bs416QmMKvr39W4\"")
                .d("NAME", "\"\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 192, " + 
                    " \"group\": \"gB4pmDsl\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 47, " + 
                    " \"uri\": \"LG5f2\", " + 
                    " \"capture_date\": \"2006-06-13T06:54:03\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1628L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 1627L)
                .d("GRP", "\"5AbB9UP\"")
                .d("NAME", "\"Y5O9QHJg\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1630L)
                .d("URI", "\"Jq6x_o2TSfiX\"")
            .and().insertInto("TAG", 1629L)
                .d("GRP", "\"bta3LavNQ\"")
                .d("NAME", "\"Qv\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1632L)
                .d("URI", "\"zquLJ3oFHNny3_v2\"")
            .and().insertInto("TAG", 1631L)
                .d("GRP", "\"m3kAcwgAb\"")
                .d("NAME", "\"P5deuE8\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1634L)
                .d("URI", "\"Cy5N_GY\"")
            .and().insertInto("TAG", 1633L)
                .d("GRP", "\"y\"")
                .d("NAME", "\"_qvQGeOA9x39\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1636L)
                .d("URI", "\"QqlUZHi\"")
            .and().insertInto("TAG", 1635L)
                .d("GRP", "\"tuL\"")
                .d("NAME", "\"Nkps\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 894, " + 
                    " \"name\": \"jf1vQW9\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"o1w0uhrZ7prGS5\", " + 
                    " \"name\": \"GurqIWEP5_iGJ\", " + 
                    " \"capture_date\": \"1902-11-14T14:26:08\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/894?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 2460L)
                .d("URI", "\"VK7sZkmXirs0\"")
            .and().insertInto("TAG", 2459L)
                .d("GRP", "\"TElMRe4FyytLbm\"")
                .d("NAME", "\"_EM_14379_XYZ_\"")
                .r("MEDIA_FILE_ID", 2460L)
            .and().insertInto("MEDIA_FILE", 2462L)
                .d("URI", "\"_dsmoBp4hGn_k7M\"")
            .and().insertInto("TAG", 2461L)
                .d("GRP", "\"e\"")
                .d("NAME", "\"oLpzKdLZP85XCPH\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2464L)
                .d("URI", "\"D313_s\"")
            .and().insertInto("TAG", 2463L)
                .d("GRP", "\"Ug3nctlkLexQ\"")
                .d("NAME", "\"_EM_14380_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2466L)
                .d("URI", "\"PalM3BHKkLCZ_5K\"")
            .and().insertInto("TAG", 2465L)
                .d("GRP", "\"_jx7\"")
                .d("NAME", "\"FaGk2\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5420_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 379, " + 
                    " \"group\": \"_EM_5412_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 348, " + 
                    " \"mime_type\": \"TKRjh1yEHg\", " + 
                    " \"uri\": \"_EM_5415_XYZ_\", " + 
                    " \"capture_date\": \"1968-09-22T25:16:13\", " + 
                    " \"copy_right\": \"e6lkA\\\\M\", " + 
                    " \"author\": \"_EM_5418_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 1790950038403269414 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/379?EMextraParam123=_EM_5419_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 4505L)
                .d("AUTHORIZATION_LEVEL", "566")
                .d("NAME", "\"LWAmkp\"")
            .and().insertInto("ACTIVITY", 4504L)
            .and().insertInto("ACTIVITY", 4503L)
            .and().insertInto("ACTIVITY_RELATION", 4502L)
                .r("ACTIVITY_1_ID", 4503L)
                .r("ACTIVITY_2_ID", 4504L)
                .d("OWNER_ID", "3")
            .and().insertInto("USERS", 4509L)
                .d("AUTHORIZATION_LEVEL", "291")
                .d("NAME", "\"0rst8dfp9TG5\"")
            .and().insertInto("ACTIVITY", 4508L)
            .and().insertInto("ACTIVITY", 4507L)
            .and().insertInto("ACTIVITY_RELATION", 4506L)
                .r("ACTIVITY_1_ID", 4504L)
                .r("ACTIVITY_2_ID", 4503L)
                .d("OWNER_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 993, " + 
                    " \"name\": \"MZ7RvxUqemenTa\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 807700484, " + 
                    " \"mime_type\": \"JUkuyHNez5\", " + 
                    " \"uri\": \"iX\", " + 
                    " \"name\": \"tI\", " + 
                    " \"capture_date\": \"2062-09-12T12:16:50\", " + 
                    " \"copy_right\": \"md\", " + 
                    " \"author\": \"H3U2iQ6BX5L\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 12281L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"O2zuMDKG\", " + 
                    " \"description_prepare\": \"\", " + 
                    " \"participants_min\": 237, " + 
                    " \"participants_max\": 634, " + 
                    " \"time_max\": 661, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 956, " + 
                    " \"name\": \"EdLvB9OjcNJ1Xm\", " + 
                    " \"activities_count\": 275 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"q\", " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"IX_sIT8\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"Zj9\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 532, " + 
                    " \"mime_type\": \"73R38NSU_EW\", " + 
                    " \"uri\": \"M_mB1XUiEMOQ\", " + 
                    " \"name\": \"DUOpqFG4P98\", " + 
                    " \"capture_date\": \"2098-03-22T11:39:57\", " + 
                    " \"author\": \"Q1qPsflgcLkIMnzQ\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"GW3wzLudXz3\", " + 
                    " \"activities_count\": 260 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"zI_Huga\", " + 
                    " \"name\": \"\", " + 
                    " \"capture_date\": \"2044-08-27T04:48:08\", " + 
                    " \"copy_right\": \"odrZmiRGty2\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 479090540, " + 
                    " \"uri\": \"B7BF46fRzAz\", " + 
                    " \"capture_date\": \"2073-00-00T18:08:30\", " + 
                    " \"copy_right\": \"KumXbOfoc\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"341kle\", " + 
                    " \"name\": \"oWr6ZUitak27h\", " + 
                    " \"copy_right\": \"fYNy4y\", " + 
                    " \"author\": \"1o67LmgL1VasF\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 860, " + 
                    " \"uri\": \"uEwYTG_b\", " + 
                    " \"name\": \"6jqPPJcKFnf\", " + 
                    " \"copy_right\": \"K\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"id\": 922, " + 
                    " \"ratings_sum\": 1677914997, " + 
                    " \"favourites_count\": 52 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/-495")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 734, " + 
                    " \"description_material\": \"MMVD\", " + 
                    " \"description_introduction\": \"_EM_38989_XYZ_\", " + 
                    " \"description_prepare\": \"ZC1LPN6\", " + 
                    " \"description_main\": \"_EM_39002_XYZ_\", " + 
                    " \"description_safety\": \"OtrLdE8dJoDwaa\", " + 
                    " \"description_notes\": \"_EM_38990_XYZ_\", " + 
                    " \"age_min\": -2147483337, " + 
                    " \"age_max\": -379, " + 
                    " \"participants_min\": 923, " + 
                    " \"time_min\": 1073742004, " + 
                    " \"time_max\": 56, " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 998, " + 
                    " \"name\": \"WrrD35dGVG\", " + 
                    " \"author\": \"CNnGMy09J8\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"NUU01mA9FcD6J\", " + 
                    " \"copy_right\": \"cqxt\", " + 
                    " \"author\": \"solpk\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"ll7\", " + 
                    " \"uri\": \"6\", " + 
                    " \"capture_date\": \"1935-00-30T06:41:43\", " + 
                    " \"copy_right\": \"oN5VkQhDkK3X\", " + 
                    " \"author\": \"ttT_BCiMQYcu\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 450, " + 
                    " \"name\": \"r36U537dyLeOSIbn\", " + 
                    " \"email_address\": \"Bzr8fTiJ5fbVr9d\", " + 
                    " \"authorization_level\": 595 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 398, " + 
                    " \"ratings_count\": 861, " + 
                    " \"ratings_sum\": 507 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 2054L)
            .and().insertInto("ACTIVITY", 2055L)
            .and().insertInto("ACTIVITY", 2056L)
            .and().insertInto("ACTIVITY", 2057L)
            .and().insertInto("ACTIVITY", 2058L)
            .and().insertInto("MEDIA_FILE", 2069L)
                .d("URI", "\"_EM_18265_XYZ_\"")
            .and().insertInto("USERS", 2068L)
                .d("AUTHORIZATION_LEVEL", "52")
                .d("NAME", "\"_EM_18266_XYZ_\"")
            .and().insertInto("ACTIVITY", 2067L)
            .and().insertInto("ACTIVITY", 2066L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2065L)
                .r("ACTIVITY_ID", 2067L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2064L)
                .r("ACTIVITY_PROPERTIES_ID", 2065L)
                .r("MEDIA_FILE_ID", 2069L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 2075L)
                .d("URI", "\"ptVmzCEmD\"")
            .and().insertInto("USERS", 2074L)
                .d("AUTHORIZATION_LEVEL", "260")
                .d("NAME", "\"kKjWqxe_pZ4d\"")
            .and().insertInto("ACTIVITY", 2073L)
            .and().insertInto("ACTIVITY", 2072L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2071L)
                .r("ACTIVITY_ID", 2056L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2070L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("MEDIA_FILE_ID", 2069L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2081L)
                .d("URI", "\"fTo\"")
            .and().insertInto("USERS", 2080L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"UUS7ruUoUORPd\"")
            .and().insertInto("ACTIVITY", 2079L)
            .and().insertInto("ACTIVITY", 2078L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2077L)
                .r("ACTIVITY_ID", 2054L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2076L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("MEDIA_FILE_ID", 2075L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2083L)
                .d("URI", "\"0`cP_\"")
            .and().insertInto("TAG", 2082L)
                .d("GRP", "\"_EM_18267_XYZ_\"")
                .d("NAME", "\"0XTElKF5\"")
                .r("MEDIA_FILE_ID", 2075L)
            .and().insertInto("MEDIA_FILE", 2085L)
                .d("URI", "\"_EM_18268_XYZ_\"")
            .and().insertInto("TAG", 2084L)
                .d("GRP", "\"HYDvkugC6zXZL\"")
                .d("NAME", "\"vhb8\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2087L)
                .d("URI", "\"Pc6IdztTJSCRu5PM\"")
            .and().insertInto("TAG", 2086L)
                .d("GRP", "\"P1TXlnO\"")
                .d("NAME", "\"CU1jU6UEU\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2089L)
                .d("URI", "\"_EM_18269_XYZ_\"")
            .and().insertInto("TAG", 2088L)
                .d("GRP", "\"uoDaRd4l9h2D\"")
                .d("NAME", "\"_EM_18270_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2091L)
                .d("URI", "\"HLSjguOW\"")
            .and().insertInto("TAG", 2090L)
                .d("GRP", "\"uEzd\"")
                .d("NAME", "\"zjS2urrm8QjdbBl\"")
                .r("MEDIA_FILE_ID", 2069L)
            .and().insertInto("MEDIA_FILE", 2098L)
                .d("URI", "\"vk4IsfmPKjbLeu\"")
            .and().insertInto("TAG", 2097L)
                .d("GRP", "\"7Gh_F3hbdtSLABS\"")
                .d("NAME", "\"_EM_18271_XYZ_\"")
            .and().insertInto("USERS", 2096L)
                .d("AUTHORIZATION_LEVEL", "936")
                .d("NAME", "\"M8BBgsQIPnfgZ3p8\"")
            .and().insertInto("ACTIVITY", 2095L)
            .and().insertInto("ACTIVITY", 2094L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2093L)
                .r("ACTIVITY_ID", 2079L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2092L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("TAG_ID", 2086L)
            .and().insertInto("MEDIA_FILE", 2105L)
                .d("URI", "\"v5AUdwG3lz\"")
            .and().insertInto("TAG", 2104L)
                .d("GRP", "\"wmjnfjpxmtRy5D\"")
                .d("NAME", "\"_EM_18272_XYZ_\"")
            .and().insertInto("USERS", 2103L)
                .d("AUTHORIZATION_LEVEL", "795")
                .d("NAME", "\"_EM_18273_XYZ_\"")
            .and().insertInto("ACTIVITY", 2102L)
            .and().insertInto("ACTIVITY", 2101L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2100L)
                .r("ACTIVITY_ID", 2094L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2099L)
                .r("ACTIVITY_PROPERTIES_ID", 2093L)
                .r("TAG_ID", 2104L)
            .and().insertInto("MEDIA_FILE", 2112L)
                .d("URI", "\"UUu2ZUyis_UKWzUU\"")
            .and().insertInto("TAG", 2111L)
                .d("GRP", "\"_EM_18274_XYZ_\"")
                .d("NAME", "\"9Sk5YX4ycU3TSvP\"")
            .and().insertInto("USERS", 2110L)
                .d("AUTHORIZATION_LEVEL", "38")
                .d("NAME", "\"oDhWyayMGUV9F\"")
            .and().insertInto("ACTIVITY", 2109L)
            .and().insertInto("ACTIVITY", 2108L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2107L)
                .r("ACTIVITY_ID", 2101L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2106L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("TAG_ID", 2088L)
            .and().insertInto("ACTIVITY", 1802L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -64600, " + 
                    " \"description_material\": \"_EM_18263_XYZ_\", " + 
                    " \"description_prepare\": \"JLWA2KC6ERyagnJf\", " + 
                    " \"description_main\": \"_EM_18263_XYZ_\", " + 
                    " \"description_safety\": \"_EM_18263_XYZ_\", " + 
                    " \"description_notes\": \"_EM_18263_XYZ_\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -2147483648, " + 
                    " \"participants_min\": 8984, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"AG648Tp_zÂƒs0VBU\", " + 
                    " \"name\": \"yW9xMzqw3E\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"3E6\", " + 
                    " \"copy_right\": \"gH_w3lwJt\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"Z_n\", " + 
                    " \"uri\": \"\u003ckV\", " + 
                    " \"name\": \"_EM_18264_XYZ_\", " + 
                    " \"capture_date\": \"1991-09-12T05:28:35\", " + 
                    " \"copy_right\": \"6PncTpg6AwKPBK\", " + 
                    " \"author\": \"8Ql7\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"BrayS0f9wWI1vUg\", " + 
                    " \"authorization_level\": 360 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 327, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 367, " + 
                    " \"favourites_count\": 914, " + 
                    " \"ratings_average\": 0.051700101248575714 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 2054L)
            .and().insertInto("ACTIVITY", 2055L)
            .and().insertInto("ACTIVITY", 2056L)
            .and().insertInto("ACTIVITY", 2057L)
            .and().insertInto("ACTIVITY", 2058L)
            .and().insertInto("MEDIA_FILE", 2069L)
                .d("URI", "\"_EM_18265_XYZ_\"")
            .and().insertInto("USERS", 2068L)
                .d("AUTHORIZATION_LEVEL", "52")
                .d("NAME", "\"_EM_18266_XYZ_\"")
            .and().insertInto("ACTIVITY", 2067L)
            .and().insertInto("ACTIVITY", 2066L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2065L)
                .r("ACTIVITY_ID", 2067L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2064L)
                .r("ACTIVITY_PROPERTIES_ID", 2065L)
                .r("MEDIA_FILE_ID", 2069L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 2075L)
                .d("URI", "\"pvVmzCEmD\"")
            .and().insertInto("USERS", 2074L)
                .d("AUTHORIZATION_LEVEL", "260")
                .d("NAME", "\"kKjWqxe_pZ4d\"")
            .and().insertInto("ACTIVITY", 2073L)
            .and().insertInto("ACTIVITY", 2072L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2071L)
                .r("ACTIVITY_ID", 2056L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2070L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("MEDIA_FILE_ID", 2069L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2081L)
                .d("URI", "\"fTo\"")
            .and().insertInto("USERS", 2080L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"UUS7ruUoUORPd\"")
            .and().insertInto("ACTIVITY", 2079L)
            .and().insertInto("ACTIVITY", 2078L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2077L)
                .r("ACTIVITY_ID", 2054L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 2076L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("MEDIA_FILE_ID", 2075L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 2083L)
                .d("URI", "\"0`cP_\"")
            .and().insertInto("TAG", 2082L)
                .d("GRP", "\"_EM_18267_XYZ_\"")
                .d("NAME", "\"0XTElKF5\"")
                .r("MEDIA_FILE_ID", 2075L)
            .and().insertInto("MEDIA_FILE", 2085L)
                .d("URI", "\"_EM_18268_XYZ_\"")
            .and().insertInto("TAG", 2084L)
                .d("GRP", "\"HYDvkugC6zXZL\"")
                .d("NAME", "\"vhb8\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2087L)
                .d("URI", "\"Pc6IdztTJSCRu5PM\"")
            .and().insertInto("TAG", 2086L)
                .d("GRP", "\"P1TXlnO\"")
                .d("NAME", "\"CU1jU6UEU\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2089L)
                .d("URI", "\"_EM_18269_XYZ_\"")
            .and().insertInto("TAG", 2088L)
                .d("GRP", "\"uoDaRd4l9h2D\"")
                .d("NAME", "\"_EM_18270_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 2091L)
                .d("URI", "\"HLSjguOW\"")
            .and().insertInto("TAG", 2090L)
                .d("GRP", "\"uEzd\"")
                .d("NAME", "\"zjS2urrm8QjdbBl\"")
                .r("MEDIA_FILE_ID", 2069L)
            .and().insertInto("MEDIA_FILE", 2098L)
                .d("URI", "\"vk4IsfmPKjbLeu\"")
            .and().insertInto("TAG", 2097L)
                .d("GRP", "\"7Gh_F3hbdtSLABS\"")
                .d("NAME", "\"_EM_18271_XYZ_\"")
            .and().insertInto("USERS", 2096L)
                .d("AUTHORIZATION_LEVEL", "936")
                .d("NAME", "\"M8BBgsQIPnfgZ3p8\"")
            .and().insertInto("ACTIVITY", 2095L)
            .and().insertInto("ACTIVITY", 2094L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2093L)
                .r("ACTIVITY_ID", 2079L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2092L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("TAG_ID", 2090L)
            .and().insertInto("MEDIA_FILE", 2105L)
                .d("URI", "\"v5AUdwG3lz\"")
            .and().insertInto("TAG", 2104L)
                .d("GRP", "\"wmjnfjpxmtRy5D\"")
                .d("NAME", "\"_EM_18272_XYZ_\"")
            .and().insertInto("USERS", 2103L)
                .d("AUTHORIZATION_LEVEL", "795")
                .d("NAME", "\"_EM_18273_XYZ_\"")
            .and().insertInto("ACTIVITY", 2102L)
            .and().insertInto("ACTIVITY", 2101L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2100L)
                .r("ACTIVITY_ID", 2094L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2099L)
                .r("ACTIVITY_PROPERTIES_ID", 2093L)
                .r("TAG_ID", 2104L)
            .and().insertInto("MEDIA_FILE", 2112L)
                .d("URI", "\"UUu2ZUyis_UKWzUU\"")
            .and().insertInto("TAG", 2111L)
                .d("GRP", "\"_EM_18274_XYZ_\"")
                .d("NAME", "\"9Sk5YX4ycU3TSvP\"")
            .and().insertInto("USERS", 2110L)
                .d("AUTHORIZATION_LEVEL", "38")
                .d("NAME", "\"oDhWyayMGUV9F\"")
            .and().insertInto("ACTIVITY", 2109L)
            .and().insertInto("ACTIVITY", 2108L)
            .and().insertInto("ACTIVITY_PROPERTIES", 2107L)
                .r("ACTIVITY_ID", 2101L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 2106L)
                .r("ACTIVITY_PROPERTIES_ID", 2071L)
                .r("TAG_ID", 2088L)
            .and().insertInto("ACTIVITY", 1802L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -64600, " + 
                    " \"description_material\": \"_EM_18263_XYZ_\", " + 
                    " \"description_prepare\": \"JLWA2KC6ERyagnJf\", " + 
                    " \"description_main\": \"_EM_18263_XYZ_\", " + 
                    " \"description_safety\": \"_EM_18263_XYZ_\", " + 
                    " \"description_notes\": \"_EM_18263_XYZ_\", " + 
                    " \"age_min\": -2147483640, " + 
                    " \"age_max\": -2147483640, " + 
                    " \"participants_min\": 8984, " + 
                    " \"time_max\": 206, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"group\": \"AG648Tp_zÂƒs0VBU\", " + 
                    " \"name\": \"yW9xMzqw3E\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"3E6\", " + 
                    " \"copy_right\": \"gH_w3lwJt\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"Z_n\", " + 
                    " \"uri\": \"\u003ckV\", " + 
                    " \"name\": \"_EM_18264_XYZ_\", " + 
                    " \"capture_date\": \"1991-09-12T05:28:35\", " + 
                    " \"copy_right\": \"6PncTpg6AwKPBK\", " + 
                    " \"author\": \"8Ql7\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"BrayS0f9wWI1vUg\", " + 
                    " \"authorization_level\": 360 " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 327, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 367, " + 
                    " \"favourites_count\": 914, " + 
                    " \"ratings_average\": 0.051700101248575714 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_safety\": \"_EM_1921_XYZ_\", " + 
                    " \"description_notes\": \"_EM_1922_XYZ_\", " + 
                    " \"age_max\": -249, " + 
                    " \"participants_min\": 11, " + 
                    " \"participants_max\": 34, " + 
                    " \"time_max\": 540, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 224, " + 
                    " \"group\": \"_EM_1923_XYZ_\", " + 
                    " \"activities_count\": 680 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 9041120563816903019, " + 
                    " \"group\": \"_EM_1929_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 5, " + 
                    " \"mime_type\": \"b\", " + 
                    " \"uri\": \"_EM_1931_XYZ_\", " + 
                    " \"name\": \"_EM_1932_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"F8Ta5OPBJwN\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 516, " + 
                    " \"group\": \"_EM_1941_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 525, " + 
                    " \"name\": \"_EM_1950_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1951_XYZ_\", " + 
                    " \"author\": \"_EM_1952_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"capture_date\": \"1962-01-04T10:22:41\", " + 
                    " \"copy_right\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1765382070, " + 
                    " \"author\": \"_EM_1960_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 134, " + 
                    " \"name\": \"_EM_1961_XYZ_\", " + 
                    " \"email_address\": \"_EM_1962_XYZ_\", " + 
                    " \"authorization_level\": 532, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 398, " + 
                    " \"date_created\": \"1988-07-31T03:00:53\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 106, " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"_EM_1964_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 515, " + 
                    " \"ratings_count\": 749, " + 
                    " \"ratings_sum\": 558, " + 
                    " \"ratings_average\": 0.39074120913872257, " + 
                    " \"related\": [ " + 
                    " 986, " + 
                    " 1851553339, " + 
                    " 195 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/919")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/389/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/155/rating?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/734/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/903/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .delete(baseUrlOfSut + "/api/v2/activities/349245789?EMextraParam123=_EM_39_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/475?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/245?EMextraParam123=_EM_48_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/79")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/374?attrs=_EM_59_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/88")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_125_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/391271861?EMextraParam123=_EM_124_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_130_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/categories/248")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_169_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/v2/activities/614/rating?EMextraParam123=_EM_168_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/activities/862/rating?EMextraParam123=_EM_170_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_278_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .patch(baseUrlOfSut + "/api/v2/activities/8496153099816730973?EMextraParam123=_EM_38_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=_EM_62_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 765159908, " + 
                    " \"name\": \"_EM_65_XYZ_\", " + 
                    " \"description_main\": \"_EM_69_XYZ_\", " + 
                    " \"description_safety\": \"_EM_70_XYZ_\", " + 
                    " \"participants_min\": 979, " + 
                    " \"participants_max\": 925, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_72_XYZ_\", " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_121_XYZ_\", " + 
                    " \"identities\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/765159908")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_167_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_209_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -4388111007307506924, " + 
                    " \"copy_right\": \"_EM_213_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_219_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 79, " + 
                    " \"key\": \"_EM_217_XYZ_\", " + 
                    " \"value\": \"7eBGk5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=_EM_218_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_220_XYZ_\", " + 
                    " \"media_file\": {}, " + 
                    " \"activities_count\": 69 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=_EM_227_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 339, " + 
                    " \"description_material\": \"_EM_235_XYZ_\", " + 
                    " \"description_introduction\": \"_EM_236_XYZ_\", " + 
                    " \"description_safety\": \"_EM_239_XYZ_\", " + 
                    " \"age_max\": -2147482673, " + 
                    " \"participants_min\": 404, " + 
                    " \"time_min\": 252, " + 
                    " \"source\": \"_EM_241_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=_EM_266_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_276_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_275_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/1221510980")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_373_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1449763214, " + 
                    " \"mime_type\": \"_EM_367_XYZ_\", " + 
                    " \"capture_date\": \"2031-10-10T15:14:02\", " + 
                    " \"copy_right\": \"_EM_370_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/-1449763214")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/620")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_378_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_379_XYZ_\", " + 
                    " \"uri\": \"_EM_380_XYZ_\", " + 
                    " \"name\": \"_EM_381_XYZ_\", " + 
                    " \"capture_date\": \"1944-08-08T-1:02:59\", " + 
                    " \"author\": \"_EM_383_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 889 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/494")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_392_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/users/921")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_433_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/556")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/api/v1/categories/852")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/-1522517815?EMextraParam123=_EM_1568_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/system_messages/162?EMextraParam123=_EM_1573_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/661")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1584_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users/238?attrs=_EM_1582_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/1085629470?EMextraParam123=_EM_1585_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1745_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1903_XYZ_")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/system_messages/-944316141859085105")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/963?EMextraParam123=_EM_1563_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1622_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/18?EMextraParam123=_EM_1621_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1627_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/categories/674")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v1/activities/-9218725595656821738?EMextraParam123=_EM_6761_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/api/v2/activities/409?EMextraParam123=_EM_8480_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 555, " + 
                    " \"mime_type\": \"qIvIKSkEoHckP4\", " + 
                    " \"author\": \"_EM_1897_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/555?EMextraParam123=_EM_1898_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_5155_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"email_address\": \"_EM_5148_XYZ_\", " + 
                    " \"authorization_level\": 928 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_5154_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 74, " + 
                    " \"uri\": \"_EM_1728_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_1732_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorization_level\": 572, " + 
                    " \"identities\": [ " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/3584016083058920410?EMextraParam123=_EM_5357_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1793_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_1785_XYZ_\", " + 
                    " \"name\": \"_EM_1786_XYZ_\", " + 
                    " \"activities_count\": 500 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_1792_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1910_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 381, " + 
                    " \"group\": \"_EM_1904_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 874, " + 
                    " \"mime_type\": \"_EM_1906_XYZ_\", " + 
                    " \"uri\": \"_EM_1907_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/381?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 770, " + 
                    " \"media_file\": { " + 
                    " \"id\": 1311689370, " + 
                    " \"uri\": \"_EM_1969_XYZ_\", " + 
                    " \"name\": \"_EM_1970_XYZ_\", " + 
                    " \"copy_right\": \"_EM_1971_XYZ_\", " + 
                    " \"author\": \"_EM_1972_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/770?EMextraParam123=_EM_1973_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1562_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"FC19rlSKbu3IsJK\", " + 
                    " \"description_material\": \"_EM_1501_XYZ_\", " + 
                    " \"description_safety\": \"_EM_1505_XYZ_\", " + 
                    " \"description_notes\": \"_EM_1506_XYZ_\", " + 
                    " \"age_min\": -2147482718, " + 
                    " \"age_max\": -2147483262, " + 
                    " \"participants_min\": 148, " + 
                    " \"participants_max\": 871, " + 
                    " \"featured\": false " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/639")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
