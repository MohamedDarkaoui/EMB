import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T03:33:37.642+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 26 tests
 * <br>
 * Covered targets: 18503
 * <br>
 * Used time: 4h 15m 36s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/swagger")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/healthcheck")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_27_XYZ_")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=test%40test.de&" + 
                    "apiKey=foo&" + 
                    "offset=262144&" + 
                    "limit=0&" + 
                    "password=Jb_e_icyiaQVH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'words'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/languages?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=test%40test.de&" + 
                    "apiKey=foo&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'words'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=foo&" + 
                    "language=en&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.899214))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=unx&" + 
                    "language=es&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Spanish"))
                .body("'language'.'code'", containsString("es"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5452544))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Se ha encontrado un posible error ortográfico."))
                .body("'matches'[0].'shortMessage'", containsString("Error de ortografía"))
                .body("'matches'[0].'replacements'.size()", equalTo(10))
                .body("'matches'[0].'replacements'[0].'value'", containsString("un"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("una"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("uno"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("unx"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("unx"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Posible error de ortografía"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Posible error ortográfico"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=unx&" + 
                    "language=nl&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Dutch"))
                .body("'language'.'code'", containsString("nl"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5452544))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[0].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[0].'replacements'.size()", equalTo(9))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Un"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("uni"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Una"))
                // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("unx"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("unx"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=bla+bla+%C8%99%C8%9B%C3%AE%C3%A2%C4%83+%C8%99%C8%9B%C3%AE%C3%A2%C4%83+%C8%99i+c%C3%A2teva+caractere+speciale&" + 
                    "language=ro&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Romanian"))
                .body("'language'.'code'", containsString("ro-RO"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Romanian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ro-RO"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999946))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("Posibilă greșeală: ați repetat un cuvânt"))
                .body("'matches'[0].'shortMessage'", containsString("Cuvânt repetat"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("bla"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(7.0))
                .body("'matches'[0].'context'.'text'", containsString("bla bla șțîâă șțîâă și câteva caractere special..."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(7.0))
                .body("'matches'[0].'sentence'", containsString("bla bla șțîâă șțîâă și câteva caractere speciale"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Cuvânt repetat (ex: „voi voi”)"))
                .body("'matches'[0].'rule'.'issueType'", containsString("duplication"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Diverse"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0))
                .body("'matches'[1].'message'", containsString("Posibilă greșeală: ați repetat un cuvânt"))
                .body("'matches'[1].'shortMessage'", containsString("Cuvânt repetat"))
                .body("'matches'[1].'replacements'.size()", equalTo(1))
                .body("'matches'[1].'replacements'[0].'value'", containsString("șțîâă"))
                .body("'matches'[1].'offset'", numberMatches(8.0))
                .body("'matches'[1].'length'", numberMatches(11.0))
                .body("'matches'[1].'context'.'text'", containsString("bla bla șțîâă șțîâă și câteva caractere speciale"))
                .body("'matches'[1].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[1].'context'.'length'", numberMatches(11.0))
                .body("'matches'[1].'sentence'", containsString("bla bla șțîâă șțîâă și câteva caractere speciale"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Cuvânt repetat (ex: „voi voi”)"))
                .body("'matches'[1].'rule'.'issueType'", containsString("duplication"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Diverse"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=To+jest+frywolne.&" + 
                    "language=pl&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Polish"))
                .body("'language'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Polish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999446))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=This+is+an+test.+We+will+will+do+so.&" + 
                    "language=en&" + 
                    "disabledRules=EN_A_VS_AN%2CENGLISH_WORD_REPEAT_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999034))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=A+text.&" + 
                    "language=en&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.6080272))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=This+is+an+test&" + 
                    "language=en&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999195))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’"))
                .body("'matches'[0].'shortMessage'", containsString("Wrong article"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("a"))
                .body("'matches'[0].'offset'", numberMatches(8.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("This is an test"))
                .body("'matches'[0].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("This is an test"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Use of 'a' vs. 'an'"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Miscellaneous"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Me+%26+you+you&" + 
                    "language=en&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9902576))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible typo: you repeated a word"))
                .body("'matches'[0].'shortMessage'", containsString("Word repetition"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("you"))
                .body("'matches'[0].'replacements'[0].'shortDescription'", containsString("personal pronoun"))
                .body("'matches'[0].'offset'", numberMatches(5.0))
                .body("'matches'[0].'length'", numberMatches(7.0))
                .body("'matches'[0].'context'.'text'", containsString("Me & you you"))
                .body("'matches'[0].'context'.'offset'", numberMatches(5.0))
                .body("'matches'[0].'context'.'length'", numberMatches(7.0))
                .body("'matches'[0].'sentence'", containsString("Me & you you"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Word repetition (e.g. 'will will')"))
                .body("'matches'[0].'rule'.'issueType'", containsString("duplication"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Miscellaneous"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=M%C3%B3wi%C5%82a+d%C5%82ugo%2C+%C5%BCeby+tylko+m%C3%B3wi%C4%87+m%C3%B3wi%C4%87+d%C5%82ugo.&" + 
                    "language=pl&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Polish"))
                .body("'language'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Polish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(1.0))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("W tym fragmencie zdania prawdopodobnie brakuje przecinka."))
                .body("'matches'[0].'shortMessage'", containsString("Błąd interpunkcyjny"))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(14.0))
                .body("'matches'[0].'length'", numberMatches(22.0))
                .body("'matches'[0].'context'.'text'", containsString("Mówiła długo, żeby tylko mówić mówić długo."))
                .body("'matches'[0].'context'.'offset'", numberMatches(14.0))
                .body("'matches'[0].'context'.'length'", numberMatches(22.0))
                .body("'matches'[0].'sentence'", containsString("Mówiła długo, żeby tylko mówić mówić długo."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("6"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("Brak przecinka przed „żeby”, „aby”, „ażeby”, „iżby”"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Błędy interpunkcyjne"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=We+will+will+do+so&" + 
                    "language=en&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9994176))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible typo: you repeated a word"))
                .body("'matches'[0].'shortMessage'", containsString("Word repetition"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("will"))
                .body("'matches'[0].'offset'", numberMatches(3.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("We will will do so"))
                .body("'matches'[0].'context'.'offset'", numberMatches(3.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("We will will do so"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Word repetition (e.g. 'will will')"))
                .body("'matches'[0].'rule'.'issueType'", containsString("duplication"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Miscellaneous"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=I+wonder+if+this+errors+are+easy+to+fix.&" + 
                    "language=en&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999326))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Did you mean “these”?"))
                .body("'matches'[0].'shortMessage'", containsString("Grammatical problem: use ‘these’"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("these"))
                .body("'matches'[0].'offset'", numberMatches(12.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("I wonder if this errors are easy to fix."))
                .body("'matches'[0].'context'.'offset'", numberMatches(12.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("I wonder if this errors are easy to fix."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("2"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("'this' vs. 'these'"))
                .body("'matches'[0].'rule'.'issueType'", containsString("grammar"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Grammar"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(5.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=This+is+an+test.+We+will+will+do+so.&" + 
                    "language=en&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English"))
                .body("'language'.'code'", containsString("en"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999034))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’"))
                .body("'matches'[0].'shortMessage'", containsString("Wrong article"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("a"))
                .body("'matches'[0].'offset'", numberMatches(8.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("This is an test. We will will do so."))
                .body("'matches'[0].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("This is an test."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Use of 'a' vs. 'an'"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Miscellaneous"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0))
                .body("'matches'[1].'message'", containsString("Possible typo: you repeated a word"))
                .body("'matches'[1].'shortMessage'", containsString("Word repetition"))
                .body("'matches'[1].'replacements'.size()", equalTo(1))
                .body("'matches'[1].'replacements'[0].'value'", containsString("will"))
                .body("'matches'[1].'offset'", numberMatches(20.0))
                .body("'matches'[1].'length'", numberMatches(9.0))
                .body("'matches'[1].'context'.'text'", containsString("This is an test. We will will do so."))
                .body("'matches'[1].'context'.'offset'", numberMatches(20.0))
                .body("'matches'[1].'context'.'length'", numberMatches(9.0))
                .body("'matches'[1].'sentence'", containsString("We will will do so."))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Word repetition (e.g. 'will will')"))
                .body("'matches'[1].'rule'.'issueType'", containsString("duplication"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Miscellaneous"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=C%27est+unx&" + 
                    "language=fr&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("French"))
                .body("'language'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9992705))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Faute de frappe possible trouvée."))
                .body("'matches'[0].'shortMessage'", containsString("Faute de frappe"))
                .body("'matches'[0].'replacements'.size()", equalTo(8))
                .body("'matches'[0].'replacements'[0].'value'", containsString("un"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("une"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("uns"))
                // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(6.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("C'est unx"))
                .body("'matches'[0].'context'.'offset'", numberMatches(6.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("C'est unx"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Faute de frappe possible"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Faute de frappe possible"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=This+is+a+test+of+the+language+detection.&" + 
                    "language=auto&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999845))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=This+is+Mysurname.&" + 
                    "language=en-US&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9999963))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("My surname"))
                .body("'matches'[0].'offset'", numberMatches(8.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("This is Mysurname."))
                .body("'matches'[0].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("This is Mysurname."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Mxsurname+is+my+name.&" + 
                    "language=en-US&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999386))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Surname"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("Mxsurname is my name."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("Mxsurname is my name."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Mysurname+is+my+name.&" + 
                    "language=en-US&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9999962))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("My surname"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("Mysurname is my name."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("Mysurname is my name."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }


}
