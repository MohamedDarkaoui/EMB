import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T03:33:37.715+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 20 tests
 * <br>
 * Covered targets: 3919
 * <br>
 * Used time: 4h 15m 36s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=bla+%3Cscript%3E&" + 
                        "language=de&" + 
                        "disabledRules=HUNSPELL_RULE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=Hier+steht+Sch%C3%B6ckl.&" + 
                        "language=de-DE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=IENGN8N&data=jje2o&language=&altLanguages=ZI5qWNGm&motherTongue=2mSQyazwIPRn7s&preferredVariants=_EM_3292_XYZ_&enabledRules=e")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=&language=_EM_3295_XYZ_&altLanguages=_EM_3296_XYZ_&motherTongue=6N2GQaK1&preferredVariants=_EM_3297_XYZ_&enabledRules=_EM_3298_XYZ_&disabledRules=_EM_3299_XYZ_&enabledCategories=OKmscJFhsLuiS")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=0JcfJt7j&" + 
                    "inputLogging=&" + 
                    "apiKey=QHGtQNbe9pETY&" + 
                    "useragent=_EM_3302_XYZ_&" + 
                    "username=UYOQGE")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'data' key in JSON requires 'text' or 'annotation' key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=k3&" + 
                    "language=pU7NnWN6jK&" + 
                    "disabledRules=&" + 
                    "preferredVariants=8mTeZZAqFw&" + 
                    "motherTongue=nHg&" + 
                    "data=fxIoUuJzF9yWiRGX&" + 
                    "tokenV2=07gSD7IJQH&" + 
                    "enabledOnly=V_Iidaqz&" + 
                    "useragent=_EM_6223_XYZ_&" + 
                    "noopLanguages=zj6i&" + 
                    "enabled=uKvDDtPDr&" + 
                    "mode=_EM_742_XYZ_&" + 
                    "password=_EM_744_XYZ_&" + 
                    "instanceId=7tID&" + 
                    "preferredLanguages=rc&" + 
                    "disabled=_EM_745_XYZ_&" + 
                    "preferredvariants=_EM_7243_XYZ_&" + 
                    "enabledRules=ZW&" + 
                    "c=&" + 
                    "ruleValues=P4ZZAURGjF&" + 
                    "sourceText=W&" + 
                    "allowIncompleteResults=T6p5tuUfb&" + 
                    "filterDictionaryMatches=7iPcW6QEiIksANC&" + 
                    "v=EhW3hDSI9&" + 
                    "altLanguages=KzHmYdaAPy&" + 
                    "username=kWAFx1WmNHJvAN")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=WmRh3V0&username=d&apiKey=YA7_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'd' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=-x-&" + 
                    "ruleId=uY_u1Qk")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '-x-' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_509_XYZ_&username=_EM_510_XYZ_&apiKey=jisWAdnLdOW")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=pK3B4V0j&" + 
                    "useragent=_EM_513_XYZ_&" + 
                    "mode=_EM_514_XYZ_&" + 
                    "v=_EM_516_XYZ_&" + 
                    "text=_EM_517_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_510_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_518_XYZ_&username=_EM_519_XYZ_&apiKey=_EM_520_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_519_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=J60bODkAAoVO&" + 
                    "ruleId=_EM_521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'J60bODkAAoVO' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_523_XYZ_&username=JaV2EkRY0gpY&apiKey=_EM_524_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_EM_526_XYZ_&" + 
                    "useragent=_EM_528_XYZ_&" + 
                    "mode=&" + 
                    "v=Aizbvq8r_VQ6PTFl")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'JaV2EkRY0gpY' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=&" + 
                    "ruleId=_EM_533_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: langCode cannot be empty or whitespace only"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1154_XYZ_&username=_EM_1155_XYZ_&apiKey=_EM_1156_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1155_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1157_XYZ_&username=_EM_1158_XYZ_&apiKey=_EM_1159_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "level=_EM_1161_XYZ_&" + 
                    "language=_EM_1163_XYZ_&" + 
                    "mode=_EM_1164_XYZ_&" + 
                    "instanceId=_EM_1165_XYZ_&" + 
                    "v=4y0S9WgH5nPVcP&" + 
                    "text=")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1158_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1166_XYZ_&username=_EM_1167_XYZ_&apiKey=_EM_1168_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1167_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=DyVfQVNDssj&data=R2d&language=Q2ftVHUG1j&motherTongue=IsKmHixe_NN&enabledRules=_4BTVmA&disabledRules=QHp8yBU&enabledCategories=ie41fz1TRkTII_jD&disabledCategories=gBW7&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=DyVfQVNDssj&" + 
                    "language=Q2ftVHUG1j&" + 
                    "preferredVariants=OawOIAlNNZGQmB&" + 
                    "motherTongue=IsKmHixe_NN&" + 
                    "inputLogging=_EM_1170_XYZ_&" + 
                    "apiKey=_EM_1171_XYZ_&" + 
                    "tokenV2=_EM_1172_XYZ_&" + 
                    "enabledOnly=_EM_1173_XYZ_&" + 
                    "mode=_EM_1176_XYZ_&" + 
                    "password=_EM_1177_XYZ_&" + 
                    "disabled=_EM_1181_XYZ_&" + 
                    "enabledRules=_4BTVmA&" + 
                    "c=_EM_1183_XYZ_&" + 
                    "level=A&" + 
                    "ruleValues=_EM_1184_XYZ_&" + 
                    "enableHiddenRules=qpAYQJzpNEpUlTK&" + 
                    "altLanguages=ecCwKn&" + 
                    "callback=miqiB2")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'disabled' but the parameter is now called 'disabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=SB9X6QkWSvGn")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=SB9X6QkWSvGn")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=_EM_1191_XYZ_&" + 
                    "ruleId=_EM_1192_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_1191_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=k3&" + 
                    "language=pU7NnWN6jK&" + 
                    "disabledRules=&" + 
                    "preferredVariants=8mTeZZAqFw&" + 
                    "motherTongue=nHg&" + 
                    "inputLogging=mZ&" + 
                    "useragent=ttlXBALAAxc&" + 
                    "password=kRVnw7u2xV_evE&" + 
                    "instanceId=7tID&" + 
                    "preferredLanguages=rgk&" + 
                    "preferredvariants=NB4oYKfczSscxy&" + 
                    "enabledRules=ZW&" + 
                    "level=oG8yfbSDwh3X8n&" + 
                    "sourceText=&" + 
                    "token=LITLJ3k&" + 
                    "allowIncompleteResults=T6p5tuUfb&" + 
                    "autodetect=nWIifr4&" + 
                    "v=EhW3hDSI9&" + 
                    "altLanguages=KzHmYdaAPy&" + 
                    "textSessionId=o12sgn0QJS2&" + 
                    "disabledCategories=_5Z_&" + 
                    "username=kWAFx1WmNHJvAN")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredvariants' but the parameter is now called 'preferredVariants' (uppercase 'V') in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=J60bODkAAoVO&" + 
                    "ruleId=_EM_521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'J60bODkAAoVO' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=WmRh3V00&username=_EM_519_XYZ_&apiKey=YA7_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_519_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=_EM_575_XYZ_&" + 
                    "ruleId=uY_u1Qk")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_575_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_523_XYZ_&username=_EM_573_XYZ_&apiKey=_EM_524_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "useragent=_EM_528_XYZ_&" + 
                    "mode=&" + 
                    "text=_EM_532_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_573_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=YysTI&language=_EM_577_XYZ_&preferredVariants=_EM_579_XYZ_&enabledRules=_EM_580_XYZ_&disabledRules=pOGfAWJ&enabledCategories=_EM_581_XYZ_&disabledCategories=_EM_582_XYZ_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "instanceId=L73Y5rcqWUuyj&" + 
                    "inputLogging=X9W7hfn93P&" + 
                    "level=2DaL_W0MOUO8d7E6&" + 
                    "useragent=_EM_587_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/healthcheck")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=hRPr&username=_EM_588_XYZ_&apiKey=_EM_589_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "instanceId=Ss&" + 
                    "text=_EM_599_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_588_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=Xn8VDvXHoIzgfEr")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?language=i3")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'i3' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=bKruSiR_5&username=dvh0&apiKey=BmqcROIeaizAJOLL")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'dvh0' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=Mk6&username=_EM_602_XYZ_&apiKey=")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=goo0FPPLRO_&" + 
                    "tokenV2=i3qGVe&" + 
                    "useragent=_EM_603_XYZ_&" + 
                    "instanceId=_EM_606_XYZ_&" + 
                    "v=BvOYVD9cu575HHl")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=k3&" + 
                    "language=pU7NnWN6jK&" + 
                    "disabledRules=&" + 
                    "preferredVariants=8mTeZZAqFw&" + 
                    "motherTongue=nHg&" + 
                    "inputLogging=mZ&" + 
                    "data=fxIoUuJzF9yWiRGX&" + 
                    "enabledOnly=V_Iidaqz&" + 
                    "useragent=_EM_6223_XYZ_&" + 
                    "noopLanguages=zj6i&" + 
                    "enabled=uKtDDtPDr&" + 
                    "password=_EM_744_XYZ_&" + 
                    "enableTempOffRules=Qy53G&" + 
                    "instanceId=7tID&" + 
                    "preferredLanguages=rc&" + 
                    "disabled=_EM_745_XYZ_&" + 
                    "preferredvariants=NB4oYKfczSscxy&" + 
                    "enabledRules=ZW&" + 
                    "c=&" + 
                    "level=oG8zfbSDwh3X8&" + 
                    "ruleValues=P4ZZAURGjF&" + 
                    "sourceText=W&" + 
                    "allowIncompleteResults=T6p5tuUfb&" + 
                    "autodetect=nWIifr4&" + 
                    "filterDictionaryMatches=7iPcW6QEiIksANC&" + 
                    "v=EhW3hDSI9&" + 
                    "callback=_EM_6224_XYZ_&" + 
                    "disabledCategories=_5Z_&" + 
                    "username=kWAFx1WmNHJvAN")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=WmRh3V0&username=d&apiKey=YA7_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'd' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=Zh&" + 
                    "ruleId=uY_u1Qk")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'uY_u1Qk' not found for language Chinese (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 1870)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=k3&" + 
                    "language=pU7NnWN6jK&" + 
                    "disabledRules=&" + 
                    "preferredVariants=8mTeZZAqFw&" + 
                    "motherTongue=nHg&" + 
                    "tokenV2=_EM_743_XYZ_&" + 
                    "enabledOnly=V_Iidaqz&" + 
                    "useragent=ttlXBALAAxc&" + 
                    "mode=_EM_742_XYZ_&" + 
                    "enableTempOffRules=Qy53G&" + 
                    "instanceId=7tID&" + 
                    "preferredLanguages=rc&" + 
                    "enabledRules=ZW&" + 
                    "c=i&" + 
                    "ruleValues=P4ZZAURGjF&" + 
                    "sourceText=&" + 
                    "enableHiddenRules=r55JFyU7PUA3Ex8&" + 
                    "token=LITLJ3k&" + 
                    "allowIncompleteResults=T6p5tuUfb&" + 
                    "autodetect=nWIifr4&" + 
                    "filterDictionaryMatches=7iPcW6UEiIksANC&" + 
                    "v=EhW3hDSI9&" + 
                    "textSessionId=o12scn0QJS2&" + 
                    "callback=_&" + 
                    "disabledCategories=_5Z_&" + 
                    "username=kWAFx1WmNHJvAN")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'autodetect' but automatic language detection is now activated with 'language=auto' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=J60bODkAAoVO&" + 
                    "ruleId=_EM_521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'J60bODkAAoVO' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=WmRh3V00&username=d&apiKey=YA7_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'd' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=Zh&" + 
                    "ruleId=uY_u1Qk")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'uY_u1Qk' not found for language Chinese (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 1870)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=M%C3%B3wi%C5%82a+d%C5%82ugo%2C+%C5%BCeby+tylko+m%C3%B3wi%C4%87+m%C3%B3wi%C4%87+d%C5%82ugo.&" + 
                    "language=_EM_2141_XYZ_&" + 
                    "disabledRules=_EM_2132_XYZ_&" + 
                    "preferredVariants=U%3BC&" + 
                    "motherTongue=vai_hL1S6IjB6wN&" + 
                    "data=H&" + 
                    "apiKey=_EM_2147_XYZ_&" + 
                    "inputLogging=_EM_2133_XYZ_&" + 
                    "enabledOnly=_EM_2134_XYZ_&" + 
                    "useragent=&" + 
                    "noopLanguages=_EM_2148_XYZ_&" + 
                    "enabled=kJ0tywX8q&" + 
                    "mode=3%3AX7F&" + 
                    "password=E9mgCkalh&" + 
                    "enableTempOffRules=&" + 
                    "preferredLanguages=SRsNlA%2Cg0jEjr&" + 
                    "disabled=bW6GtTtQMbxwj&" + 
                    "preferredvariants=zR5pAK6e2ysfuecd&" + 
                    "enabledRules=_GMIqkwYJBu&" + 
                    "c=8GOhHO4ILwi&" + 
                    "level=picky&" + 
                    "ruleValues=_EM_2149_XYZ_&" + 
                    "sourceText=v0zZbARRcsNG&" + 
                    "enableHiddenRules=_EM_2150_XYZ_&" + 
                    "token=T4TOEZGupHT6&" + 
                    "allowIncompleteResults=3I1Vj0deWXCwU1&" + 
                    "autodetect=4lqwmDv&" + 
                    "filterDictionaryMatches=_EM_2151_XYZ_&" + 
                    "enabledCategories=HuYw%4044pHlJtTq&" + 
                    "altLanguages=1wIkAPjx9Jhjq&" + 
                    "v=_EM_2145_XYZ_&" + 
                    "textSessionId=nTnfLYKs9lF5I&" + 
                    "callback=_EM_2146_XYZ_&" + 
                    "disabledCategories=hNm6Xkm7o&" + 
                    "username=_EM_2152_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/add?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=_EM_5133_XYZ_&motherTongue=rZpnwzcJJdq&preferredVariants=_EM_5135_XYZ_&disabledRules=dZbKA&disabledCategories=Q3BumNda4zGKB&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_5137_XYZ_&username=aq_OIsYtIxu&apiKey=")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=CG01aJUc6&" + 
                    "apiKey=_EM_227_XYZ_&" + 
                    "offset=77&" + 
                    "inputLogging=&" + 
                    "level=_EM_230_XYZ_&" + 
                    "password=_EM_233_XYZ_&" + 
                    "v=_EM_234_XYZ_&" + 
                    "text=_EM_235_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'CG01aJUc6' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=fop&" + 
                    "language=en&" + 
                    "disabledRules=HUNSPELL_RULES&" + 
                    "preferredVariants=f_B&" + 
                    "motherTongue=XtdxEK3L_hBpENoJ&" + 
                    "apiKey=pVhRvNn&" + 
                    "inputLogging=&" + 
                    "enabledOnly=YpzIiEhbwA&" + 
                    "useragent=kPuv&" + 
                    "noopLanguages=a&" + 
                    "enabled=A8zKSAjyit&" + 
                    "mode=wo&" + 
                    "password=cBe_3fm34&" + 
                    "enableTempOffRules=_6Xf4vPTmi&" + 
                    "preferredLanguages=fRS6vf_7&" + 
                    "disabled=_EM_8807_XYZ_&" + 
                    "preferredvariants=7ce&" + 
                    "enabledRules=&" + 
                    "c=k&" + 
                    "level=g9dN22D9h2lbg&" + 
                    "ruleValues=uCHZ7&" + 
                    "sourceText=t5rzj&" + 
                    "enableHiddenRules=sPsgttk5Dp&" + 
                    "token=JWY9&" + 
                    "allowIncompleteResults=_EM_8803_XYZ_&" + 
                    "autodetect=VPHF4bJr&" + 
                    "filterDictionaryMatches=5b3OsUabj&" + 
                    "enabledCategories=KuNi0ptW&" + 
                    "altLanguages=M&" + 
                    "v=4bnKzhg7o1QK&" + 
                    "textSessionId=z7X6KwnfEbBdHM&" + 
                    "callback=ALMjD&" + 
                    "disabledCategories=5X&" + 
                    "username=JsbJypCb")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?language=CBSscwrXu")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'CBSscwrXu' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=_EM_0_XYZ_&" + 
                    "ruleId=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_0_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=2Y&language=qAKMHuo&altLanguages=G7Fcyx37_L3XxCMC&motherTongue=v&preferredVariants=UlmTU&enabledRules=tUOlCUmxSXiUMi&disabledRules=tWEc_gfppD4lZaq&enabledCategories=gJRhign4NbK&disabledCategories=y&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=&language=qNBxbVv0z&disabledRules=_EM_28_XYZ_&enabledCategories=_EM_29_XYZ_&disabledCategories=_EM_7171_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'qNBxbVv0z' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=&language=qNBxbVv0z&preferredVariants=od0ObE1MT&enabledRules=kim9so8&disabledRules=_EM_7172_XYZ_&enabledCategories=_EM_7171_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }


}
