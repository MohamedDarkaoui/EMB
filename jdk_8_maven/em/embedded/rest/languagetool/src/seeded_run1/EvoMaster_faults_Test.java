import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T03:33:37.604+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 22 tests
 * <br>
 * Covered targets: 4245
 * <br>
 * Used time: 4h 15m 36s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_43_XYZ_&" + 
                    "apiKey=foo&" + 
                    "limit=0&" + 
                    "password=GZoN0EPe2WR0n9&" + 
                    "token=D")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_20_XYZ_&language=_EM_21_XYZ_&motherTongue=_EM_22_XYZ_&preferredVariants=_EM_23_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_20_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_20_XYZ_\"; line: 1, column: 12]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_647_XYZ_&" + 
                    "apiKey=39qa&" + 
                    "offset=77&" + 
                    "limit=545&" + 
                    "inputLogging=&" + 
                    "tokenV2=PgjV3xH1d&" + 
                    "level=_EM_230_XYZ_&" + 
                    "useragent=laJwT0DhwV&" + 
                    "language=J8q&" + 
                    "token=DXMO39_zTLq&" + 
                    "mode=_EM_646_XYZ_&" + 
                    "password=_EM_648_XYZ_&" + 
                    "instanceId=8jsDckjx&" + 
                    "v=RhrlEl1znT1&" + 
                    "text=_EM_649_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=W07w3t97gCwRUh&data=_EM_5324_XYZ_&language=_EM_5325_XYZ_&preferredVariants=_EM_5312_XYZ_&disabledCategories=_EM_5315_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=YTSsTytysA&language=_EM_5316_XYZ_&enabledRules=hMnSad&disabledRules=rCmBVUEj")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "instanceId=xOlf5sle7S&" + 
                    "apiKey=tjGG0&" + 
                    "level=Sqn86s")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token 'YTSsTytysA': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"YTSsTytysA\"; line: 1, column: 11]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=_EM_49_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=4f6hWrNzf&" + 
                    "tokenV2=i7mcc0z9G&" + 
                    "level=%5Dk&" + 
                    "useragent=z6NAKT&" + 
                    "language=N7jEfZEC&" + 
                    "token=SwqZIl5Q93cWlH&" + 
                    "mode=u0gl&" + 
                    "password=GOYz9&" + 
                    "instanceId=_EM_50_XYZ_&" + 
                    "v=ogBa9g2pksBQ45&" + 
                    "text=SLX_w")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_382_sendError
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_630_XYZ_&username=_EM_631_XYZ_&apiKey=GjG_BUj")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_632_XYZ_&" + 
                    "tokenV2=tZF9bxbxV4_Nj6_&" + 
                    "useragent=SZ0&" + 
                    "language=_EM_624_XYZ_&" + 
                    "token=FSlMYaHHjT&" + 
                    "mode=textLevelOnly&" + 
                    "password=YT&" + 
                    "instanceId=_EM_629_XYZ_&" + 
                    "v=bSf3PpqFwBLoip7&" + 
                    "text=__VT9jmSgZbxD")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=noo&username=cDPgJE0uReX_GY&apiKey=_EM_341_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_633_XYZ_&" + 
                    "level=picky&" + 
                    "useragent=_EM_345_XYZ_&" + 
                    "language=_EM_634_XYZ_&" + 
                    "token=WKgQ73w&" + 
                    "mode=textLevelOnly&" + 
                    "password=_EM_324_XYZ_&" + 
                    "instanceId=_EM_325_XYZ_&" + 
                    "v=_EM_344_XYZ_&" + 
                    "text=CkCOVs9U")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=_EM_323_XYZ_&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_EM_75_XYZ_&" + 
                    "tokenV2=HaNc2D&" + 
                    "level=_EM_320_XYZ_&" + 
                    "useragent=_EM_321_XYZ_&" + 
                    "language=vrJBdpV&" + 
                    "token=_EM_309_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "password=_EM_324_XYZ_&" + 
                    "instanceId=igOrB&" + 
                    "v=_EM_327_XYZ_&" + 
                    "text=CkCOVs9U")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_251_XYZ_&username=_EM_252_XYZ_&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_255_XYZ_&" + 
                    "level=default&" + 
                    "useragent=AyRP5&" + 
                    "language=k6TP&" + 
                    "token=_EM_256_XYZ_&" + 
                    "mode=kGPEg2HvgZ&" + 
                    "password=Ccu5myLPr_FCP&" + 
                    "instanceId=6O&" + 
                    "v=BUriyTfJGt2DzW&" + 
                    "text=FR")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_288_XYZ_&" + 
                    "tokenV2=_EM_285_XYZ_&" + 
                    "level=picky&" + 
                    "useragent=_EM_290_XYZ_&" + 
                    "language=_EM_283_XYZ_&" + 
                    "token=BtMaxmLBFla&" + 
                    "mode=_EM_291_XYZ_&" + 
                    "password=GgNRnwtx3i&" + 
                    "instanceId=_EM_292_XYZ_&" + 
                    "v=_EM_289_XYZ_&" + 
                    "text=FS")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_178_XYZ_&username=foo&apiKey=eoo")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_ThCX&" + 
                    "tokenV2=v2j30U6vL4lT&" + 
                    "level=XQ&" + 
                    "useragent=_UMUUU5UXQ%5B_&" + 
                    "language=&" + 
                    "token=_EM_179_XYZ_&" + 
                    "mode=all&" + 
                    "password=wm8sWrbkD&" + 
                    "instanceId=PCIleDDo7UY&" + 
                    "v=WvrfmJP81&" + 
                    "text=_EM_180_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=lJzIWl5HyJJ&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_EM_800_XYZ_&" + 
                    "tokenV2=Zfxph&" + 
                    "level=picky&" + 
                    "useragent=_EM_799_XYZ_&" + 
                    "language=_EM_801_XYZ_&" + 
                    "token=EMwjrP9F&" + 
                    "mode=mZV&" + 
                    "password=zXTHPszXh7&" + 
                    "instanceId=&" + 
                    "v=lJzIWl5HyJJ&" + 
                    "text=_EL_7U8UXYU_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_80_XYZ_&username=fso&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=no&" + 
                    "tokenV2=HaNa2D&" + 
                    "level=jX7&" + 
                    "useragent=2L9Oezuq&" + 
                    "language=lQXgAQZ0&" + 
                    "token=_EM_81_XYZ_&" + 
                    "mode=_EM_77_XYZ_&" + 
                    "password=YrHmZy&" + 
                    "instanceId=&" + 
                    "v=WwrfmJP81&" + 
                    "text=_EM_82_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=GAiAm&username=&apiKey=_EM_473_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=Nnthj1XnW7U&username=_EM_474_XYZ_&apiKey=_EM_475_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=PkNwe&" + 
                    "tokenV2=_EM_476_XYZ_&" + 
                    "level=_EM_477_XYZ_&" + 
                    "useragent=6&" + 
                    "language=_EM_478_XYZ_&" + 
                    "token=AkbuxeOKohRpaNSs&" + 
                    "instanceId=&" + 
                    "v=_EM_479_XYZ_&" + 
                    "text=_EM_480_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=Wa_WGSbH9gY28T&username=gfp&apiKey=_EM_60_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=4f6hWrNzf&" + 
                    "tokenV2=i7mcc0z9G&" + 
                    "level=ak&" + 
                    "useragent=_EM_55_XYZ_&" + 
                    "language=&" + 
                    "token=SwqZIl5Q93cWl&" + 
                    "mode=_EM_57_XYZ_&" + 
                    "password=GOYz9&" + 
                    "instanceId=_EM_58_XYZ_&" + 
                    "v=ogBa9g2pksBQ45&" + 
                    "text=_EM_59_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=8ZkwLOBaF498Yz4p&language=Wl&disabledCategories=_EM_5315_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/RequestCounter_51_decrementHandleCount
                .assertThat()
                .body(containsString("Error: Internal Error: Unexpected character ('Z' (code 90)): Expected space separating root-level values\n at [Source: (String)\"8ZkwLOBaF498Yz4p\"; line: 1, column: 3]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=nKV0Of48DZohKBV&language=_EM_5316_XYZ_&altLanguages=WG0qzVUguL&enabledRules=hMnSad&enabledCategories=E&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_5326_XYZ_&" + 
                    "instanceId=xSlf5slg7S&" + 
                    "tokenV2=_EM_5321_XYZ_&" + 
                    "v=rX5%7CM&" + 
                    "useragent=o3QgGz2sfMwG&" + 
                    "username=hLtepVhexxNQ")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: With 'username' set, you also need to specify either 'apiKey' (recommended) or 'password'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=4634bEpb8FeUryE&language=&altLanguages=mQbxE")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unexpected character ('b' (code 98)): Expected space separating root-level values\n at [Source: (String)\"4634bEpb8FeUryE\"; line: 1, column: 6]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=OZZNTvlm1pGl&" + 
                    "language=&" + 
                    "preferredVariants=4iNXs9XuhGnoJP&" + 
                    "inputLogging=&" + 
                    "enabledOnly=Pi&" + 
                    "enableTempOffRules=_EM_8595_XYZ_&" + 
                    "instanceId=ficRU5v_n3BP&" + 
                    "c=cGq8mBH0RZU&" + 
                    "ruleValues=uPlsY8W8lQEo&" + 
                    "sourceText=6w0hIuqN&" + 
                    "allowIncompleteResults=gXkz&" + 
                    "autodetect=rRcGdpz2mXoZbRtz&" + 
                    "filterDictionaryMatches=cSeFmZt&" + 
                    "textSessionId=_EM_8597_XYZ_&" + 
                    "disabledCategories=&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'language' parameter, e.g. 'language=en-US' for American English or 'language=fr' for French"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=lUubIswvORu")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=lUubIswvORu")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=yZNhxuxTQ&username=12TphSS77Kj6&apiKey=4V")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '12TphSS77Kj6' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=DhYCrBRUhZJv&username=_EM_8598_XYZ_&apiKey=mEO")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "tokenV2=d8QuJF4GBPajUbM&" + 
                    "level=qeC1zyFNDfc&" + 
                    "token=uX")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/healthcheck")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK"));
        
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=vYQt9&username=FUyYpDlWgpHz84&apiKey=c")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'FUyYpDlWgpHz84' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_657_XYZ_&username=_EM_7737_XYZ_&apiKey=Ps6ptur")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_659_XYZ_&" + 
                    "level=_EM_660_XYZ_&" + 
                    "useragent=t574jw&" + 
                    "language=_EM_662_XYZ_&" + 
                    "token=w3dGuq84U&" + 
                    "mode=Jg2aTR&" + 
                    "password=xza&" + 
                    "instanceId=_EM_663_XYZ_&" + 
                    "v=_EM_664_XYZ_&" + 
                    "text=_EM_665_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_235_handle
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Ra1&data=AxI4X2x5&language=4OZVYPlYl&preferredVariants=ap&disabledCategories=rfC")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Ra1&" + 
                    "language=4OZVYPlYl&" + 
                    "preferredVariants=ap&" + 
                    "motherTongue=HLf&" + 
                    "inputLogging=&" + 
                    "apiKey=&" + 
                    "data=AxI4X2x5&" + 
                    "tokenV2=mQmce5xp&" + 
                    "enabledOnly=smDBeN72l9dWrzxn&" + 
                    "useragent=G1gubCNY&" + 
                    "enabled=OJdeRsf&" + 
                    "mode=AalZHO1&" + 
                    "enableTempOffRules=FnyS4&" + 
                    "instanceId=m17T&" + 
                    "preferredLanguages=46nw8i5VKBu&" + 
                    "disabled=XP&" + 
                    "preferredvariants=H5xRSO&" + 
                    "enabledRules=H&" + 
                    "level=WaWDWcXqqQk&" + 
                    "ruleValues=0RWHaoa&" + 
                    "sourceText=Oat19RT08_d6UX&" + 
                    "enableHiddenRules=_EM_7738_XYZ_&" + 
                    "allowIncompleteResults=KNHMJxaoG0Ny&" + 
                    "autodetect=BcEEm1g&" + 
                    "filterDictionaryMatches=Wiscd5CEO&" + 
                    "enabledCategories=9_goh3dUebOZ3Lzt&" + 
                    "v=_EM_7739_XYZ_&" + 
                    "altLanguages=fQPtQv&" + 
                    "textSessionId=wCnZHyOa9E50&" + 
                    "callback=wdTPVJsl&" + 
                    "disabledCategories=rfC&" + 
                    "username=qat8gQ0chW")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=hRTUU&username=GjDttbSKnD&apiKey=QIOYU83")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=XyBrV5Xuj4Qr&" + 
                    "tokenV2=_EM_7740_XYZ_&" + 
                    "level=6EqoTBQDAf0c6&" + 
                    "useragent=KufbsmPt&" + 
                    "language=XboBGtDjMr8K&" + 
                    "token=qME6Clh&" + 
                    "mode=5aDMziR0fBLBBDN&" + 
                    "password=plLKSd8XSzKUM&" + 
                    "instanceId=_UatHnPA&" + 
                    "v=b56FIvZ&" + 
                    "text=hdXQYJEleaU")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_235_handle
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=j&username=kwI&apiKey=OvfilaA3o")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "tokenV2=wNwd9ZBVi6&" + 
                    "level=l4hDFll&" + 
                    "useragent=M&" + 
                    "language=ShFQq1SaQJ_sX477&" + 
                    "token=j1oFIuCl2aLHzg&" + 
                    "mode=1kc9hQbNI6K&" + 
                    "password=Efhyt7w&" + 
                    "instanceId=X&" + 
                    "v=bQBr4M_FpTxi&" + 
                    "text=j")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_382_sendError
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=3va4w4VWJ2z")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=3va4w4VWJ2z")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?language=15CvMsjh")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '15CvMsjh' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=4WSMYVYk&username=n&apiKey=sF5ONdDb")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'n' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_7123_XYZ_&username=_EM_7124_XYZ_&apiKey=evfJYK")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=_EM_7126_XYZ_&" + 
                    "level=uQ4Uu8pLaLd26&" + 
                    "language=_zBP&" + 
                    "token=VY_4Pb3ot4&" + 
                    "password=XTDKn7")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_7129_XYZ_&data=uU7Ednee&language=_EM_7130_XYZ_&enabledRules=VUTXgJWkJ4U&disabledRules=pD2&enabledCategories=_EM_7131_XYZ_&disabledCategories=ywJy7ULTHLEALBYU&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_7132_XYZ_&language=hDHeHxDc6ilRIOh&altLanguages=LGhij4T&enabledRules=&disabledRules=HTLc2obUk&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_7134_XYZ_&" + 
                    "apiKey=0x1F1a3dszeMXt&" + 
                    "tokenV2=_EM_7136_XYZ_&" + 
                    "level=P&" + 
                    "v=_EM_7137_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey was set, but username was not: 0x1F1a3dszeMXt"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=DQf7g3KjKJv599&username=_EM_7139_XYZ_&apiKey=32CNac_X8lx1iyg")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_7139_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_32_XYZ_&language=p4NNrr25DxhQv&preferredVariants=_EM_34_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_32_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_32_XYZ_\"; line: 1, column: 12]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=PHBsfdf_Tltl3DC9&" + 
                    "language=p4NNrr25DxhQv")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'p4NNrr25DxhQv' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=f&username=0&apiKey=_EM_7717_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '0' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=PioAF8XslOZ&username=&apiKey=Z")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "level=8bSYA_wRRo4G&" + 
                    "language=i&" + 
                    "instanceId=_EM_7722_XYZ_&" + 
                    "v=_EM_7723_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=36lUmfx&language=EJCdZqbN_ekGkE9T&motherTongue=_EM_7724_XYZ_&enabledRules=egYC7TTIcsExn&enabledCategories=_EM_7725_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'EJCdZqbN_ekGkE9T' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_7726_XYZ_&language=1kCo_gwtOtEd22&altLanguages=_EM_7727_XYZ_&enabledRules=7P2vMd4qBCHE&enabledCategories=_XwKsaAf")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "instanceId=Qc&" + 
                    "apiKey=_wn3PdieupWyN&" + 
                    "level=_EM_7729_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_7726_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_7726_XYZ_\"; line: 1, column: 14]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=i6k4I1")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_7732_XYZ_&username=_EM_7733_XYZ_&apiKey=Ot")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_7733_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=7cpi&" + 
                    "apiKey=CC2vl14ZwC61qePg&" + 
                    "offset=648&" + 
                    "limit=243&" + 
                    "inputLogging=_EM_7735_XYZ_&" + 
                    "tokenV2=&" + 
                    "useragent=Pxp8fpZLsTYTa&" + 
                    "language=vAbSXLM&" + 
                    "token=_EM_7736_XYZ_&" + 
                    "mode=Uq5usax9pQiv&" + 
                    "password=PR8_I3LBqW2Qo&" + 
                    "instanceId=o79e59bOHwV")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=dTFWYMJq2m3&username=VoD&apiKey=AH")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_746_XYZ_&" + 
                    "tokenV2=gb&" + 
                    "level=CeSp8&" + 
                    "useragent=d3NTTAMeuJLMBt8g&" + 
                    "language=Pg1QRTc3&" + 
                    "mode=pko0avgZ5mcGac&" + 
                    "password=IoOl0kKTRUJE&" + 
                    "instanceId=bQ&" + 
                    "text=wAJO3uW_B9Uh")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'VoD' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=0jJSm6O&username=&apiKey=p")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "tokenV2=P&" + 
                    "useragent=K0TWi8&" + 
                    "language=drB4rm&" + 
                    "token=FQP3pvS&" + 
                    "mode=vNR%5DK549iBNddt&" + 
                    "password=gWHpyGkrEn2S&" + 
                    "instanceId=_EM_748_XYZ_&" + 
                    "v=_EM_752_XYZ_&" + 
                    "text=0jJSm6O")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_518_XYZ_&username=_EM_519_XYZ_&apiKey=_EM_520_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_519_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_523_XYZ_&username=JaV2EkRY0gpY&apiKey=weiMt")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=eeZqrQL%3E&" + 
                    "level=_EM_527_XYZ_&" + 
                    "useragent=_EM_528_XYZ_&" + 
                    "language=_EM_529_XYZ_&" + 
                    "token=FPyzJZqX&" + 
                    "mode=&" + 
                    "password=3n5uPDc&" + 
                    "v=_EM_750_XYZ_&" + 
                    "text=_EM_753_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=FR&" + 
                    "ruleId=_EM_533_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_533_XYZ_' not found for language French (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 2822)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_10 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=J60bODkA%3DoVO&" + 
                    "ruleId=_EM_521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'J60bODkA=oVO' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_10.extract().statusCode()));
    }


}
