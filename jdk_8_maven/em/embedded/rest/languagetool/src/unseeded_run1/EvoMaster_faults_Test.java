import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T08:23:22.996+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 20 tests
 * <br>
 * Covered targets: 1660
 * <br>
 * Used time: 4h 15m 39s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_31_XYZ_&language=_EM_32_XYZ_&motherTongue=7fy7eLi&preferredVariants=_EM_34_XYZ_")
                .post(baseUrlOfSut + "/v2/check?EMextraParam123=_EM_39_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_31_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_31_XYZ_\"; line: 1, column: 12]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_7112_XYZ_&" + 
                    "apiKey=_EM_7113_XYZ_&" + 
                    "inputLogging=_EM_7114_XYZ_&" + 
                    "useragent=_EM_7117_XYZ_&" + 
                    "token=_EM_7119_XYZ_&" + 
                    "instanceId=_EM_7122_XYZ_&" + 
                    "v=_EM_7123_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "ei9TBF7KuP6NXXBc")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=ntVyJhIGFW0W&" + 
                    "apiKey=9oORVmz&" + 
                    "offset=154&" + 
                    "limit=357&" + 
                    "EMextraParam123=_EM_9485_XYZ_&" + 
                    "tokenV2=_EM_9487_XYZ_&" + 
                    "language=_EM_9489_XYZ_&" + 
                    "token=_EM_9490_XYZ_&" + 
                    "mode=_EM_9491_XYZ_&" + 
                    "password=_EM_9492_XYZ_&" + 
                    "v=_EM_9493_XYZ_&" + 
                    "text=_EM_9494_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=eDy3F%22&" + 
                    "apiKey=xJod9yUQM&" + 
                    "offset=583&" + 
                    "EMextraParam123=_EM_17_XYZ_&" + 
                    "inputLogging=cgrq&" + 
                    "tokenV2=kiODeW0ACG&" + 
                    "level=_c9oPk&" + 
                    "useragent=yQ5zhPfrjioJ&" + 
                    "language=vKk9Jj&" + 
                    "token=Zg0XlI&" + 
                    "mode=cFkiUuRlS&" + 
                    "password=_EM_191_XYZ_&" + 
                    "instanceId=HErsE5_X84&" + 
                    "v=_EM_192_XYZ_&" + 
                    "text=_EM_193_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_285_XYZ_&username=efCNOhSSJMxre8ix&apiKey=_EM_286_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_71_XYZ_&" + 
                    "level=picky&" + 
                    "useragent=_EM_287_XYZ_&" + 
                    "language=_EM_288_XYZ_&" + 
                    "token=qQuUUtdJ&" + 
                    "mode=_EM_74_XYZ_&" + 
                    "password=3t&" + 
                    "instanceId=_EM_289_XYZ_&" + 
                    "v=_EM_77_XYZ_&" + 
                    "text=_EM_290_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_419_XYZ_&username=efCNOhSSJMxre8ixg&apiKey=b0gd")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=5jtFh0oBTfl5&" + 
                    "tokenV2=_EM_72_XYZ_&" + 
                    "level=picky&" + 
                    "useragent=_EM_420_XYZ_&" + 
                    "language=_EM_421_XYZ_&" + 
                    "token=_EM_422_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "password=3l&" + 
                    "instanceId=_EM_423_XYZ_&" + 
                    "v=_EM_77_XYZ_&" + 
                    "text=_EM_424_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_6615_XYZ_&username=_EM_6616_XYZ_&apiKey=_EM_6617_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=_EM_2324_XYZ_&" + 
                    "inputLogging=_EM_6623_XYZ_&" + 
                    "tokenV2=_EM_6618_XYZ_T&" + 
                    "level=picky&" + 
                    "useragent=AxH&" + 
                    "language=pxm&" + 
                    "token=daXVp4fYZ2BG&" + 
                    "mode=7LKRARMI1nvX0gd&" + 
                    "password=_EM_6624_XYZ_&" + 
                    "instanceId=POuBd&" + 
                    "text=_EM_6622_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("word=W__flaNKWNSjk&username=iUTgiJkfm3uZvuuW&apiKey=_EM_6970_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=_EM_28_XYZ_&" + 
                    "inputLogging=1bckuaR235_ubA&" + 
                    "tokenV2=DUBXBK4txcdKR&" + 
                    "level=default&" + 
                    "useragent=_EM_416_XYZ_&" + 
                    "language=TGX&" + 
                    "token=ac&" + 
                    "mode=all&" + 
                    "password=_EM_6974_XYZ_&" + 
                    "instanceId=_EM_6975_XYZ_&" + 
                    "v=_EM_6976_XYZ_&" + 
                    "text=_EM_6977_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_21_XYZ_&username=_EM_22_XYZ_&apiKey=_EM_23_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "EMextraParam123=42&" + 
                    "inputLogging=_EM_71_XYZ_&" + 
                    "tokenV2=_EM_72_XYZ_&" + 
                    "level=_EM_73_XYZ_&" + 
                    "useragent=Bd&" + 
                    "language=HoOMM6EN&" + 
                    "token=qQuUUtdJ&" + 
                    "mode=_EM_74_XYZ_&" + 
                    "password=_EM_75_XYZ_&" + 
                    "instanceId=_EM_76_XYZ_&" + 
                    "v=_EM_77_XYZ_&" + 
                    "text=Ms5y6WKUWsMiK")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("word=W__flaNKWNSjk&username=iUTgiJkfm3uZvuuW&apiKey=_EM_6970_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=_EM_28_XYZ_&" + 
                    "inputLogging=_EM_6971_XYZ_&" + 
                    "tokenV2=DUBXBK4txcdKR&" + 
                    "level=default&" + 
                    "useragent=_EM_416_XYZ_&" + 
                    "language=TGX&" + 
                    "token=_EM_6972_XYZ_&" + 
                    "mode=_EM_6973_XYZ_&" + 
                    "password=7mqk9qTM&" + 
                    "instanceId=vuH&" + 
                    "v=_EM_417_XYZ_&" + 
                    "text=_EM_418_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_5607_XYZ_&language=_EM_5613_XYZ_&altLanguages=_EM_51_XYZ_&preferredVariants=_EM_5608_XYZ_&enabledRules=_EM_53_XYZ_&disabledRules=SanIyqY9&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "EMextraParam123=42&" + 
                    "mode=_EM_5609_XYZ_&" + 
                    "instanceId=Va7vGkG62SuDaX&" + 
                    "inputLogging=_EM_5610_XYZ_&" + 
                    "apiKey=_Q9Ve&" + 
                    "tokenV2=_EM_5611_XYZ_&" + 
                    "level=_EM_5612_XYZ_&" + 
                    "v=040ivjuj59Q1K&" + 
                    "useragent=dUJI&" + 
                    "username=pnwYzDj")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_5607_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_5607_XYZ_\"; line: 1, column: 14]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=PHBsfdf_Tltl3DC9&" + 
                    "language=_EM_5613_XYZ_&" + 
                    "disabledRules=SanIyqY9&" + 
                    "data=qVK3bHjMYji1G&" + 
                    "apiKey=ntfhWJ67ku0Au&" + 
                    "inputLogging=_EM_5614_XYZ_&" + 
                    "tokenV2=aH&" + 
                    "level=_0&" + 
                    "ruleValues=L2NqUS_1bDla&" + 
                    "noopLanguages=LfrJG9chk6_ripPx&" + 
                    "enabled=_Di0CHzBZa1Wc&" + 
                    "token=_EM_5615_XYZ_&" + 
                    "mode=_l3mK_RCSoezfo&" + 
                    "password=T1ub61u0hFoFLq&" + 
                    "autodetect=_EM_5616_XYZ_&" + 
                    "instanceId=_EM_5617_XYZ_&" + 
                    "filterDictionaryMatches=_EM_5618_XYZ_&" + 
                    "v=FT0S79XQIJ&" + 
                    "preferredLanguages=FDlr&" + 
                    "textSessionId=RUXgfhwA4&" + 
                    "disabled=EOdMVR4&" + 
                    "preferredvariants=_EM_5619_XYZ_&" + 
                    "username=bctRiAYC_SR")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "qVvJCygoWi")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=GE&" + 
                    "language=ynNcbyCQroHk&" + 
                    "disabledRules=Cj2V&" + 
                    "EMextraParam123=_EM_5915_XYZ_&" + 
                    "apiKey=_EM_5918_XYZ_&" + 
                    "inputLogging=3xll3ri6gYmlB9BC&" + 
                    "ruleValues=QlCu2&" + 
                    "token=_EM_5922_XYZ_&" + 
                    "filterDictionaryMatches=_EM_5927_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_25_XYZ_&username=_EM_26_XYZ_&apiKey=_EM_27_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=_EM_28_XYZ_&" + 
                    "inputLogging=_EM_305_XYZ_&" + 
                    "tokenV2=DUBXBK4txcdKR&" + 
                    "level=_EM_306_XYZ_&" + 
                    "useragent=_EM_307_XYZ_&" + 
                    "language=TGX&" + 
                    "token=_EM_308_XYZ_&" + 
                    "mode=_EM_309_XYZ_&" + 
                    "password=_EM_310_XYZ_&" + 
                    "instanceId=vuH&" + 
                    "v=_EM_311_XYZ_&" + 
                    "text=_EM_312_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=6O&language=38Gd2Pd8vnwmY29c&motherTongue=_EM_52_XYZ_&preferredVariants=_EM_11175_XYZ_&enabledRules=_EM_53_XYZ_&disabledRules=OW8E&enabledCategories=_EM_54_XYZ_&disabledCategories=&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_11165_XYZ_&" + 
                    "instanceId=a99Syk52CeGif&" + 
                    "inputLogging=aMuH114z3&" + 
                    "apiKey=_Q9Ve&" + 
                    "tokenV2=_EM_11187_XYZ_&" + 
                    "level=default&" + 
                    "v=_EM_11188_XYZ_&" + 
                    "useragent=_EM_11189_XYZ_&" + 
                    "username=tnwYzDj")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: Unexpected character ('O' (code 79)): Expected space separating root-level values\n at [Source: (String)\"6O\"; line: 1, column: 3]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=PHBsfdf_Tltl3DC9&" + 
                    "language=38Gd2Pd8vnwmY29c&" + 
                    "disabledRules=OW8E&" + 
                    "preferredVariants=AGutDKuGr&" + 
                    "data=_EM_11183_XYZ_&" + 
                    "apiKey=Wwlv39cr49CqIvf&" + 
                    "inputLogging=_EM_11190_XYZ_&" + 
                    "tokenV2=ZQGVNquq&" + 
                    "level=_EM_11178_XYZ_&" + 
                    "ruleValues=_EM_11191_XYZ_&" + 
                    "useragent=1y4KB&" + 
                    "noopLanguages=_UM_1U180_%5CUZ_&" + 
                    "enabled=_EM_11171_XYZ_&" + 
                    "token=l9_&" + 
                    "mode=_l3mK_RCSoezfo&" + 
                    "password=_EM_11181_XYZ_&" + 
                    "autodetect=aYc7Hw&" + 
                    "instanceId=ncW0M4ZFV&" + 
                    "filterDictionaryMatches=qExAEWGZbnYkxWk5&" + 
                    "v=_EM_11184_XYZ_&" + 
                    "preferredLanguages=FDlr&" + 
                    "textSessionId=RUXgfhwA4&" + 
                    "disabled=_EM_11192_XYZ_&" + 
                    "preferredvariants=_EM_11182_XYZ_&" + 
                    "username=IPg0nt")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("data=TWoph6TZ9gJZmt_&language=&altLanguages=_EM_9521_XYZ_&disabledRules=n0nNcLV0JhnIbrZV&enabledCategories=_EM_9524_XYZ_&disabledCategories=_EM_9525_XYZ_")
                .post(baseUrlOfSut + "/v2/check?EMextraParam123=_EM_6_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token 'TWoph6TZ9gJZmt_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"TWoph6TZ9gJZmt_\"; line: 1, column: 16]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=k9TW&" + 
                    "language=&" + 
                    "EMextraParam123=_EM_6_XYZ_&" + 
                    "preferredVariants=NBp&" + 
                    "apiKey=_EM_9526_XYZ_&" + 
                    "useragent=Uvtyiq&" + 
                    "noopLanguages=_EM_9529_XYZ_&" + 
                    "enabled=_EM_9530_XYZ_&" + 
                    "autodetect=_EM_9534_XYZ_&" + 
                    "filterDictionaryMatches=_EM_9536_XYZ_&" + 
                    "v=_EM_9537_XYZ_&" + 
                    "preferredvariants=_EM_9540_XYZ_&" + 
                    "username=_EM_9541_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'language' parameter, e.g. 'language=en-US' for American English or 'language=fr' for French"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=&language=M21fxY2uT2R&altLanguages=_EM_12011_XYZ_&motherTongue=eS&enabledRules=_EM_12012_XYZ_&enabledCategories=G4PMwcnea6wF&disabledCategories=_EM_12014_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'data' key in JSON requires 'text' or 'annotation' key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_12015_XYZ_&language=_EM_12017_XYZ_&altLanguages=uuu5vZPnVqDlfk0C&motherTongue=_EM_12018_XYZ_&preferredVariants=_EM_12019_XYZ_&enabledCategories=S8ydMiWSNEODP7W")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "tokenV2=J_pkVC28F&" + 
                    "ruleValues=_EM_12022_XYZ_&" + 
                    "useragent=_EM_12023_XYZ_&" + 
                    "noopLanguages=_EM_12024_XYZ_&" + 
                    "token=_EM_12026_XYZ_&" + 
                    "mode=_EM_12027_XYZ_&" + 
                    "password=9B_diCBnWk&" + 
                    "instanceId=_EM_12029_XYZ_&" + 
                    "filterDictionaryMatches=_EM_12030_XYZ_&" + 
                    "v=L18_Fe0&" + 
                    "preferredLanguages=rrEWIAlkqeTk9F&" + 
                    "textSessionId=t4hoE0aA")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_de5kE0csz&username=&apiKey=_EM_12033_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_13796_XYZ_&username=VrrZ8bjX&apiKey=_EM_13797_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'VrrZ8bjX' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=AoRPaqJSm0A&username=_EM_13798_XYZ_&apiKey=SoQnzT8g0k1Q7R")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=50hwv8TgEXv2Z&" + 
                    "tokenV2=_EM_13799_XYZ_&" + 
                    "level=_EM_13800_XYZ_&" + 
                    "useragent=_EM_13801_XYZ_&" + 
                    "language=E1p5_G3pe6&" + 
                    "instanceId=_EM_13804_XYZ_&" + 
                    "v=pETS6RFAhm&" + 
                    "text=_EM_13805_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_13798_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=&username=_EM_13806_XYZ_&apiKey=J1j")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_13806_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=9ECD97DEd&username=mJuqSf9k3&apiKey=432b")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "level=_EM_13809_XYZ_&" + 
                    "token=_EM_13812_XYZ_&" + 
                    "instanceId=_EM_13815_XYZ_&" + 
                    "v=8XrWDHcaYDwfSY")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Q0TtFKHPz0ZDo&data=_EM_13817_XYZ_&language=KjBJyDUx&altLanguages=_EM_13818_XYZ_&preferredVariants=_EM_13819_XYZ_&disabledRules=_EM_13820_XYZ_&enabledCategories=_EM_13821_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_13822_XYZ_&language=VCQmwDQtJNqcN8&preferredVariants=_EM_13825_XYZ_&enabledRules=_EM_13826_XYZ_&disabledRules=_EM_13827_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "apiKey=fy9ECELAv&" + 
                    "tokenV2=_EM_13830_XYZ_&" + 
                    "ruleValues=_EM_13831_XYZ_&" + 
                    "noopLanguages=G6&" + 
                    "token=_EM_13834_XYZ_&" + 
                    "instanceId=ELq8ro&" + 
                    "filterDictionaryMatches=_EM_13837_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=Vt4QwA_Bm&" + 
                    "apiKey=oH9x2LF2R6KdGSs&" + 
                    "offset=904&" + 
                    "limit=147&" + 
                    "inputLogging=_EM_13841_XYZ_&" + 
                    "level=_EM_13842_XYZ_&" + 
                    "language=_EM_13844_XYZ_&" + 
                    "mode=_EM_13846_XYZ_&" + 
                    "password=bNkuZ3r&" + 
                    "text=T")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'Vt4QwA_Bm' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_14630_XYZ_&username=_EM_14631_XYZ_&apiKey=EaSMVhqI")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_14631_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_14632_XYZ_&username=_EM_14633_XYZ_&apiKey=jKymU8NVHg")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_14633_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_3PcIiksXm9PSJsf&username=ZX3XGq8rO&apiKey=wbX6")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=_EM_14635_XYZ_&" + 
                    "useragent=_EM_14637_XYZ_&" + 
                    "token=_EM_14638_XYZ_&" + 
                    "instanceId=YDGntCuyqwGXipC&" + 
                    "text=_3PcIiksXm9PSJsf")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=m61mnWSIpzfYhxMx&language=cu2&altLanguages=qDcwkpN&preferredVariants=A51T&disabledCategories=_EM_14642_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=m61mnWSIpzfYhxMx&" + 
                    "language=cu2&" + 
                    "disabledRules=_nOOO6zzKVCy&" + 
                    "inputLogging=Uo&" + 
                    "level=&" + 
                    "ruleValues=Lu8hQmF6D&" + 
                    "useragent=JhW7i01M&" + 
                    "noopLanguages=QGABBm0O9&" + 
                    "token=&" + 
                    "password=yDYuWQGgQLl&" + 
                    "v=_EM_14647_XYZ_&" + 
                    "preferredLanguages=CHKF6qEke&" + 
                    "textSessionId=_EM_14648_XYZ_&" + 
                    "username=5f9Hct9")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_924_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_920_XYZ_&username=_EM_921_XYZ_&apiKey=_EM_922_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_921_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_926_XYZ_")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=4RQcv4on1Fac&" + 
                    "language=pQkIj&" + 
                    "disabledRules=_EM_925_XYZ_&" + 
                    "ruleValues=_EM_933_XYZ_&" + 
                    "password=d301do0_2sjvLg&" + 
                    "instanceId=_EM_940_XYZ_&" + 
                    "preferredLanguages=PNfUh6SANbMof&" + 
                    "disabled=_EM_944_XYZ_&" + 
                    "username=_EM_946_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'disabled' but the parameter is now called 'disabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_947_XYZ_&username=_EM_948_XYZ_&apiKey=fxytkv")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=_EM_949_XYZ_&" + 
                    "token=_EM_956_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_961_XYZ_&language=_EM_963_XYZ_&altLanguages=2OAQOYMALeMiA&motherTongue=_EM_964_XYZ_&preferredVariants=_EM_965_XYZ_&enabledCategories=_EM_968_XYZ_&disabledCategories=_EM_969_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_971_XYZ_&language=_EM_972_XYZ_&motherTongue=&enabledRules=&disabledRules=_EM_975_XYZ_&enabledCategories=_EM_976_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "apiKey=_EM_978_XYZ_&" + 
                    "ruleValues=O49Q&" + 
                    "useragent=_EM_982_XYZ_&" + 
                    "noopLanguages=_EM_983_XYZ_&" + 
                    "mode=_EM_986_XYZ_&" + 
                    "password=_EM_987_XYZ_&" + 
                    "autodetect=_EM_988_XYZ_&" + 
                    "v=_EM_991_XYZ_&" + 
                    "preferredLanguages=_EM_992_XYZ_&" + 
                    "disabled=_EM_994_XYZ_&" + 
                    "username=_EM_995_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_971_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_971_XYZ_\"; line: 1, column: 13]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_752_XYZ_")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=&" + 
                    "ruleId=_EM_751_XYZ_&" + 
                    "EMextraParam123=n&" + 
                    "apiKey=_EM_754_XYZ_&" + 
                    "tokenV2=_EM_755_XYZ_&" + 
                    "level=_EM_756_XYZ_&" + 
                    "useragent=_EM_757_XYZ_&" + 
                    "language=_EM_758_XYZ_&" + 
                    "mode=_EM_759_XYZ_&" + 
                    "instanceId=_EM_760_XYZ_&" + 
                    "v=_EM_761_XYZ_&" + 
                    "text=_EM_762_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: langCode cannot be empty or whitespace only"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_768_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_764_XYZ_&username=_EM_765_XYZ_&apiKey=_EM_766_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_765_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_771_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_769_XYZ_")
                .post(baseUrlOfSut + "/v2/log?EMextraParam123=_EM_770_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_773_XYZ_")
                .get(baseUrlOfSut + "/v2/maxtextlength?EMextraParam123=_EM_772_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_777_XYZ_")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=_EM_775_XYZ_&" + 
                    "instanceId=_EM_779_XYZ_&" + 
                    "inputLogging=_EM_780_XYZ_&" + 
                    "tokenV2=_EM_782_XYZ_&" + 
                    "level=_EM_783_XYZ_&" + 
                    "v=_EM_784_XYZ_&" + 
                    "text=_EM_786_XYZ_&" + 
                    "username=2sQ5trJV")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_775_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_788_XYZ_")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_791_XYZ_")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_789_XYZ_&" + 
                    "apiKey=&" + 
                    "tokenV2=0p&" + 
                    "level=_EM_793_XYZ_&" + 
                    "token=_EM_796_XYZ_&" + 
                    "mode=_EM_797_XYZ_&" + 
                    "text=_EM_801_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=vV&" + 
                    "apiKey=k_R&" + 
                    "offset=930&" + 
                    "limit=307&" + 
                    "EMextraParam123=_EM_69_XYZ_&" + 
                    "inputLogging=_EM_803_XYZ_&" + 
                    "tokenV2=_EM_804_XYZ_&" + 
                    "level=_EM_805_XYZ_&" + 
                    "language=_EM_807_XYZ_&" + 
                    "text=_EM_812_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'vV' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }


}
