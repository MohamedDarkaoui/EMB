import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-28T08:23:23.358+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 70 tests
 * <br>
 * Covered targets: 24284
 * <br>
 * Used time: 4h 15m 39s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/swagger")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/healthcheck")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info?EMextraParam123=_EM_13_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_41_XYZ_")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/v2/languages?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=ZH&" + 
                    "ruleId=WHITESPACE_RULE&" + 
                    "EMextraParam123=_EM_2_XYZ_&" + 
                    "inputLogging=no&" + 
                    "apiKey=_EM_8505_XYZ_&" + 
                    "tokenV2=nNDNpsOiAjMQg5&" + 
                    "level=p44mm0iUK8DSaI_f&" + 
                    "useragent=_EM_8507_XYZ_&" + 
                    "language=_EM_8508_XYZ_&" + 
                    "mode=all&" + 
                    "instanceId=_EM_296_XYZ_&" + 
                    "v=jywsw11MIEOZ&" + 
                    "text=W&" + 
                    "username=klX_Af6wD8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'results'.size()", equalTo(1))
                .body("'results'[0].'warning'", containsString("*** This is not a public API - it may change anytime ***"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=jA&" + 
                    "mode=all&" + 
                    "instanceId=_EM_15862_XYZ_&" + 
                    "inputLogging=_EM_15842_XYZ_&" + 
                    "apiKey=3uHX_A3T4&" + 
                    "tokenV2=d&" + 
                    "level=gZ_mtQyys5Dif&" + 
                    "v=qUiHiKh&" + 
                    "useragent=Q&" + 
                    "text=_DM_15858_%5CYZ_m&" + 
                    "username=rE8ntd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(746))
                .body("'rules'[0].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[0].'description'", containsString("２つの連続したドットまたはコンマの使用"))
                .body("'rules'[0].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[0].'categoryName'", containsString("Punctuation"))
                .body("'rules'[0].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[1].'ruleId'", containsString("WHITESPACE_RULE"))
                .body("'rules'[1].'description'", containsString("空白の繰り返し (悪いフォーマット)"))
                .body("'rules'[1].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[1].'categoryName'", containsString("Typography"))
                .body("'rules'[1].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[1].'minToCheckParagraph'", containsString("0"))
                .body("'rules'[2].'ruleId'", containsString("SITAGATTE_END"))
                .body("'rules'[2].'description'", containsString("したがって_END"))
                .body("'rules'[2].'categoryId'", containsString("CAT1"))
                .body("'rules'[2].'categoryName'", containsString("文法"))
                .body("'rules'[2].'locQualityIssueType'", containsString("uncategorized"))
                ; // Skipping assertions on the remaining 743 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=gl&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=KPWs%5DBT&" + 
                    "inputLogging=_EM_15842_XYZ_&" + 
                    "apiKey=_EM_12136_XYZ_&" + 
                    "tokenV2=_EM_15843_XYZ_&" + 
                    "level=_EM_12152_XYZ_&" + 
                    "v=_EM_12155_XYZ_&" + 
                    "useragent=_EM_12156_XYZ_&" + 
                    "text=f&" + 
                    "username=_EM_12154_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(323))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Uso de espazos en branco diante dunha coma ou antes/despois de paréntese"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Tipografía"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Uso de dous puntos ou comas consecutivos"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Puntuación"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Parénteses, comiñas e símbolos similares desemparellados"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Puntuación"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 320 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=AsT&" + 
                    "ruleId=A_CONTR&" + 
                    "EMextraParam123=_EM_2_XYZ_&" + 
                    "inputLogging=n%286ASJ&" + 
                    "apiKey=_EM_63_XYZ_&" + 
                    "tokenV2=&" + 
                    "level=picky&" + 
                    "useragent=YtVFEs65vS7&" + 
                    "language=_EM_7127_XYZ_&" + 
                    "mode=textLevelOnly&" + 
                    "instanceId=_EM_7125_XYZ_&" + 
                    "v=_EM_7128_XYZ_&" + 
                    "text=kqZbbBkKOqMgyqc&" + 
                    "username=x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'results'.size()", equalTo(7))
                .body("'results'[0].'warning'", containsString("*** This is not a public API - it may change anytime ***"))
                .body("'results'[1].'status'", containsString("correct"))
                .body("'results'[1].'sentence'", containsString("Foi al cine cola so hermana."))
                .body("'results'[2].'status'", containsString("incorrect"))
                .body("'results'[2].'sentence'", containsString("Foi <marker>a el</marker> cine cola so hermana."))
                .body("'results'[2].'corrections'.size()", equalTo(1))
                .body("'results'[2].'corrections'", hasItems("al"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=aSt&" + 
                    "ruleId=WHITESPACE_RULE&" + 
                    "inputLogging=_EM_128_XYZ_&" + 
                    "apiKey=eprqdA9ntO&" + 
                    "tokenV2=&" + 
                    "level=ia8LClHO&" + 
                    "useragent=_EM_129_XYZ_&" + 
                    "language=_EM_61_XYZ_&" + 
                    "mode=%5BVk&" + 
                    "instanceId=1&" + 
                    "v=_EM_62_XYZ_&" + 
                    "text=kqZbbBkKOqMgyqc&" + 
                    "username=_EM_130_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'results'.size()", equalTo(1))
                .body("'results'[0].'warning'", containsString("*** This is not a public API - it may change anytime ***"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=eL&" + 
                    "mode=all&" + 
                    "instanceId=_EM_15862_XYZ_&" + 
                    "inputLogging=_EM_15842_XYZ_&" + 
                    "apiKey=_EM_15859_XYZ_&" + 
                    "tokenV2=f&" + 
                    "level=gZ_mtQyys5Dif&" + 
                    "v=qUiHiKh&" + 
                    "useragent=Q&" + 
                    "text=_EM_15858_%5CYZ_m&" + 
                    "username=pE8ntf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(65))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Χρήση κενού πριν από κόμμα και πρίν/μετά από παρένθεση"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Τυπογραφικά"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Χρήση δύο συνεχόμενων κομμάτων ή τελειών"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Στίξη"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("EL_UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Αταίριαστες αγκύλες, παρενθέσεις, εισαγωγικά ή παρόμοια σύμβολα"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Στίξη"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 62 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=nl&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=_EM_12363_XYZ_&" + 
                    "inputLogging=_EM_12364_XYZ_&" + 
                    "apiKey=cEXiAxhiKJTsHYp&" + 
                    "tokenV2=ETAJDq0Ktma&" + 
                    "level=_EM_12325_XYZ_&" + 
                    "v=_EM_12326UXYZ_&" + 
                    "useragent=35mC2VMKw4zZrhmi&" + 
                    "text=cEXiAxhiKJTsHYp&" + 
                    "username=h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(3108))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Spatie voor of achter haakje"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Twee komma's of punten"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 3105 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=Ga&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=KPWs%5DBT&" + 
                    "inputLogging=hLG15D&" + 
                    "apiKey=_EM_12136_XYZ_&" + 
                    "tokenV2=ETJDq0KtmaC&" + 
                    "level=_EM_6519_XYZ_&" + 
                    "v=zbW60&" + 
                    "useragent=&" + 
                    "text=f&" + 
                    "username=_EM_6521_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(1683))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Spatie voor of achter haakje"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[1].'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[1].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[1].'minToCheckParagraph'", containsString("-1"))
                .body("'rules'[2].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[2].'description'", containsString("Twee komma's of punten"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                ; // Skipping assertions on the remaining 1680 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=mi&language=auto&altLanguages=ta&enabledRules=Et&disabledRules=uSiWN_OnKCG&disabledCategories=tY7gePiHYuglQvpN")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Esperanto"))
                .body("'language'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Esperanto"))
                .body("'language'.'detectedLanguage'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.98927814))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=7YTV&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2U5bD26Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Swedish"))
                .body("'language'.'code'", containsString("sv"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Swedish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sv"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.7081128))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Hittat ett möjligt stavfel"))
                .body("'matches'[0].'shortMessage'", containsString("Stavfel"))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("7YTV"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("7YTV"))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Möjligt stavfel"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Möjligt korrekturfel"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=youtube&language=auto&altLanguages=SV&motherTongue=ta&enabledRules=UtfXmpsi&disabledRules=UtfXmps&disabledCategories=M9c_Ii&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5217931))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=PYie8Kn&language=bR&altLanguages=zh-CN&motherTongue=Sl&enabledRules=_EM_2281_XYZ_&disabledRules=_EM_14055_XYZ_&disabledCategories=kmcgazJa8&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("German (Germany)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("de-DE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9051388))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Sv&language=auto&altLanguages=SV&enabledRules=uSiWN_OrKCG&disabledRules=uSiUN_UrKC&enabledCategories=_EM_2283_XYZ_&disabledCategories=_EM_15517_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Slovenian"))
                .body("'language'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5130336))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Najdena morebitna napaka pri črkovanju."))
                .body("'matches'[0].'shortMessage'", containsString("Napaka pri črkovanju"))
                .body("'matches'[0].'replacements'.size()", equalTo(29))
                .body("'matches'[0].'replacements'[0].'value'", containsString("CV"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("DV"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Ev"))
                // Skipping assertions on the remaining 26 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("Sv"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("Sv"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Morebitna napaka pri črkovanju"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Možna tipkarska napaka"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=fiblo&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4v&enabledCategories=_EM_2283_XYZ_&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Esperanto"))
                .body("'language'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Esperanto"))
                .body("'language'.'detectedLanguage'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.84502995))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Ebla mistajpaĵo trovita"))
                .body("'matches'[0].'shortMessage'", containsString("Mistajpaĵo"))
                .body("'matches'[0].'replacements'.size()", equalTo(11))
                .body("'matches'[0].'replacements'[0].'value'", containsString("fibol"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("filo"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("fibolo"))
                // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(5.0))
                .body("'matches'[0].'context'.'text'", containsString("fiblo"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(5.0))
                .body("'matches'[0].'sentence'", containsString("fiblo"))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Ebla mistajpaĵo"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Ebla misliterumo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=tu&language=auto&altLanguages=uk-UA&enabledRules=j1dsBNZ&disabledRules=2m5bB26QS&enabledCategories=LfJzFTpS4P7&disabledCategories=_UMc2283_XWZ_8")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Esperanto"))
                .body("'language'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Esperanto"))
                .body("'language'.'detectedLanguage'.'code'", containsString("eo"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.69122934))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Ebla mistajpaĵo trovita"))
                .body("'matches'[0].'shortMessage'", containsString("Mistajpaĵo"))
                .body("'matches'[0].'replacements'.size()", equalTo(11))
                .body("'matches'[0].'replacements'[0].'value'", containsString("ti"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("etu"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("tiu"))
                // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("tu"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("tu"))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Ebla mistajpaĵo"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Ebla misliterumo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_sU&language=auto&altLanguages=sv&enabledRules=uSiWN_OrKCG&disabledRules=tUiUO_UrKB&enabledCategories=idNOo5IXLd0DFtLo&disabledCategories=_EM_15517_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Swedish"))
                .body("'language'.'code'", containsString("sv"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Swedish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sv"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.10657201))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Hittat ett möjligt stavfel"))
                .body("'matches'[0].'shortMessage'", containsString("Stavfel"))
                .body("'matches'[0].'replacements'.size()", equalTo(15))
                .body("'matches'[0].'replacements'[0].'value'", containsString("s"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("sa"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("se"))
                // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("9_sU"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("9_sU"))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Möjligt stavfel"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Möjligt korrekturfel"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=OWLugk&language=auto&altLanguages=uk-UA&enabledRules=_EM_2281_XYZ_&disabledRules=2k5bD26Q4&enabledCategories=_EM_2283_XYZ_&disabledCategories=%5DUMc2283UXYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Tagalog"))
                .body("'language'.'code'", containsString("tl-PH"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Tagalog"))
                .body("'language'.'detectedLanguage'.'code'", containsString("tl-PH"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.8006241))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Posibleng may nahanap na mali sa ispeling"))
                .body("'matches'[0].'shortMessage'", containsString("Pagkakamali sa ispeling"))
                .body("'matches'[0].'replacements'.size()", equalTo(2))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Lugi"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("Luok"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(6.0))
                .body("'matches'[0].'context'.'text'", containsString("OWLugk"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(6.0))
                .body("'matches'[0].'sentence'", containsString("OWLugk"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Posibleng pagkakamali sa ispeling"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Posibleng Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Fk%0A63.&language=auto&altLanguages=SV&enabledRules=Et&disabledRules=uSiWN_OnKCG&enabledCategories=PPfYrm_Wz6WpA&disabledCategories=b")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Danish"))
                .body("'language'.'code'", containsString("da-DK"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Danish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("da-DK"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.25811782))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Mulig stavefejl fundet"))
                .body("'matches'[0].'shortMessage'", containsString("Stavefejl"))
                .body("'matches'[0].'replacements'.size()", equalTo(13))
                .body("'matches'[0].'replacements'[0].'value'", containsString("F"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("K"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Fe"))
                // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("Fk 63."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("Fk\n63."))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Mulig stavefejl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mulig slåfejl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Sv&language=bR&altLanguages=Sv&enabledRules=uSiWN_UrKCG&disabledRules=uSiUN_UrKC&enabledCategories=_EM_2283_XYZ_&disabledCategories=vUYkKbK")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5130336))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(24))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Av"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("CV"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("DV"))
                // Skipping assertions on the remaining 21 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("Sv"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("Sv"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_qrb&language=bR&enabledRules=_EM_2281_XYZ_&disabledRules=UTuP3Sah&disabledCategories=_EM_2284_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.7102486))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("ARB"))
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("9_qrb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("9_qrb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_srb&language=auto&altLanguages=sv&enabledRules=_EM_2281_XYZ_&disabledRules=2k5bD26Q4&disabledCategories=_EM_2284_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Slovenian"))
                .body("'language'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.61646634))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("\"devet\""))
                .body("'matches'[0].'shortMessage'", containsString("Številka v besedilu"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("devet"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("9_srb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("9_srb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("10"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("Števila, manjša od 10"))
                .body("'matches'[0].'rule'.'issueType'", containsString("uncategorized"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Slog - številke"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(1.0))
                .body("'matches'[1].'message'", containsString("Najdena morebitna napaka pri črkovanju."))
                .body("'matches'[1].'shortMessage'", containsString("Napaka pri črkovanju"))
                .body("'matches'[1].'replacements'.size()", equalTo(494))
                .body("'matches'[1].'replacements'[0].'value'", containsString("Srb"))
                .body("'matches'[1].'replacements'[1].'value'", containsString("SKB"))
                .body("'matches'[1].'replacements'[2].'value'", containsString("SRS"))
                // Skipping assertions on the remaining 491 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[1].'offset'", numberMatches(2.0))
                .body("'matches'[1].'length'", numberMatches(3.0))
                .body("'matches'[1].'context'.'text'", containsString("9_srb"))
                .body("'matches'[1].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[1].'context'.'length'", numberMatches(3.0))
                .body("'matches'[1].'sentence'", containsString("9_srb"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Morebitna napaka pri črkovanju"))
                .body("'matches'[1].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Možna tipkarska napaka"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_ss&language=bR&altLanguages=uk-UA&enabledRules=X&disabledRules=2k4bD26S4&enabledCategories=_EM_2283_XYZ_&disabledCategories=_EM_2284_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5317226))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(20))
                .body("'matches'[0].'replacements'[0].'value'", containsString("PS"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("Sa"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("St"))
                // Skipping assertions on the remaining 17 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("9_ss"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("9_ss"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Sainte-Anne-d%E2%80%99Auray&language=bR&altLanguages=sv&enabledRules=_EM_14029_XYZ_&disabledRules=uSiWN_OnKCGj&enabledCategories=C0uX_&disabledCategories=c")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9999026))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Sainte-Anne-d’Auray zo un anv lec’h gallek. Ha fellout a rae deoc’h skrivañ \"Santez-Anna-Wened\"?"))
                .body("'matches'[0].'shortMessage'", containsString("anvioù lec’h"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Santez-Anna-Wened"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(19.0))
                .body("'matches'[0].'context'.'text'", containsString("Sainte-Anne-d’Auray"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(19.0))
                .body("'matches'[0].'sentence'", containsString("Sainte-Anne-d’Auray"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("anvioù-lec’h e brezhoneg"))
                .body("'matches'[0].'rule'.'issueType'", containsString("uncategorized"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Reolennoù diazez"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=l%E2%80%99JUnb%E2%80%99hi%E2%80%99ho-l&language=BR&altLanguages=uk-UA&disabledRules=2k5bD26Q4&disabledCategories=CpFYgkmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9250072))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(11))
                .body("'matches'[0].'replacements'[0].'value'", containsString("L"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("LI"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("LV"))
                // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("l’JUnb’hi’ho-l"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("l’JUnb’hi’ho-l"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0))
                .body("'matches'[1].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[1].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[1].'replacements'.size()", equalTo(11))
                .body("'matches'[1].'replacements'[0].'value'", containsString("hi"))
                .body("'matches'[1].'replacements'[1].'value'", containsString("hie"))
                .body("'matches'[1].'replacements'[2].'value'", containsString("hii"))
                // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[1].'offset'", numberMatches(7.0))
                .body("'matches'[1].'length'", numberMatches(3.0))
                .body("'matches'[1].'context'.'text'", containsString("l’JUnb’hi’ho-l"))
                .body("'matches'[1].'context'.'offset'", numberMatches(7.0))
                .body("'matches'[1].'context'.'length'", numberMatches(3.0))
                .body("'matches'[1].'sentence'", containsString("l’JUnb’hi’ho-l"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[1].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=fQ%0A3.&language=Br&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&enabledCategories=VI5sL&disabledCategories=Iyt7")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.2385241))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(10))
                .body("'matches'[0].'replacements'[0].'value'", containsString("f"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("fa"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("fe"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("fQ 3."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("fQ\n3."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=entesouravas&language=ru&altLanguages=ta&motherTongue=pl&enabledRules=_EM_15834_XYZ_&disabledRules=VtfXmps&enabledCategories=c1jylxs7v&disabledCategories=M%3Dc_HUU&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Russian"))
                .body("'language'.'code'", containsString("ru-RU"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5998508))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=17.+u&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD27Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("French"))
                .body("'language'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.30056262))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_srcj&language=pT&altLanguages=zh-CN&enabledRules=2k5bD26Q4&disabledRules=_EM_16068_XYZ_&enabledCategories=_EM_2283_XYZ_&disabledCategories=_EM_2284_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese"))
                .body("'language'.'code'", containsString("pt"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Polish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.79027474))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=U_orb&language=bR&altLanguages=TA&motherTongue=EL&enabledRules=_EM_12376_XYZ_&disabledRules=&enabledCategories=_EM_2283_XYZ_&disabledCategories=_EM_14216_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Breton"))
                .body("'language'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.29122093))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Fazi reizhskrivañ posupl kavet."))
                .body("'matches'[0].'shortMessage'", containsString("Fazi reizhskrivañ"))
                .body("'matches'[0].'replacements'.size()", equalTo(13))
                .body("'matches'[0].'replacements'[0].'value'", containsString("ARB"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("borb"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("lorb"))
                // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("U_orb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("U_orb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Fazi reizhskrivañ posupl"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Fazi bizskrivañ posupl"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=b%0A2.&language=auto&altLanguages=sv&enabledRules=Es&disabledRules=uSiWN_OnKCG&disabledCategories=_EM_15517_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Irish"))
                .body("'language'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Irish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.28770524))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Deze zin begint niet met een hoofdletter"))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("B"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("b 2."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("b\n2."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Controleert of een zin begint met een hoofdletter"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Hoofdlettergebruik"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=fo%27c%27sle&language=auto&altLanguages=sv&enabledRules=2k5bD26Q4&disabledRules=2k5bD26O4&enabledCategories=3M7&disabledCategories=gkY8X8&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Romanian"))
                .body("'language'.'code'", containsString("ro-RO"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Romanian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ro-RO"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.7101863))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("S-a găsit o posibilă greșeală de ortografie"))
                .body("'matches'[0].'shortMessage'", containsString("Greșeală de ortografie"))
                .body("'matches'[0].'replacements'.size()", equalTo(32))
                .body("'matches'[0].'replacements'[0].'value'", containsString("FC"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("FM"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Fi"))
                // Skipping assertions on the remaining 29 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("fo'c'sle"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("fo'c'sle"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Posibilă greșeală de ortografie"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Posibilă greșeală de tastare"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0))
                .body("'matches'[1].'message'", containsString("S-a găsit o posibilă greșeală de ortografie"))
                .body("'matches'[1].'shortMessage'", containsString("Greșeală de ortografie"))
                .body("'matches'[1].'replacements'.size()", equalTo(22))
                .body("'matches'[1].'replacements'[0].'value'", containsString("Ele"))
                .body("'matches'[1].'replacements'[1].'value'", containsString("Sile"))
                .body("'matches'[1].'replacements'[2].'value'", containsString("Sue"))
                // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[1].'offset'", numberMatches(5.0))
                .body("'matches'[1].'length'", numberMatches(3.0))
                .body("'matches'[1].'context'.'text'", containsString("fo'c'sle"))
                .body("'matches'[1].'context'.'offset'", numberMatches(5.0))
                .body("'matches'[1].'context'.'length'", numberMatches(3.0))
                .body("'matches'[1].'sentence'", containsString("fo'c'sle"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Posibilă greșeală de ortografie"))
                .body("'matches'[1].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Posibilă greșeală de tastare"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=dhiNkN&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Irish"))
                .body("'language'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Irish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9785944))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[0].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[0].'replacements'.size()", equalTo(33))
                .body("'matches'[0].'replacements'[0].'value'", containsString("dúinn"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("chinn"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Shinn"))
                // Skipping assertions on the remaining 30 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(6.0))
                .body("'matches'[0].'context'.'text'", containsString("dhiNkN"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(6.0))
                .body("'matches'[0].'sentence'", containsString("dhiNkN"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=nWWuba9W&language=auto&altLanguages=uk-UA&motherTongue=da&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=UUFXglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Polish"))
                .body("'language'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Polish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.93429995))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Wykryto prawdopodobny błąd pisowni"))
                .body("'matches'[0].'shortMessage'", containsString("Błędna pisownia"))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(8.0))
                .body("'matches'[0].'context'.'text'", containsString("nWWuba9W"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(8.0))
                .body("'matches'[0].'sentence'", containsString("nWWuba9W"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Prawdopodobny błąd pisowni"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Prawdopodobna literówka"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=W9%0A6.&language=auto&altLanguages=sV&enabledRules=Et&disabledRules=uSiWN_OnKCG&enabledCategories=PPfYrm_Wz6WpA&disabledCategories=b")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Polish"))
                .body("'language'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Polish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pl-PL"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.96169937))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Wykryto prawdopodobny błąd pisowni"))
                .body("'matches'[0].'shortMessage'", containsString("Błędna pisownia"))
                .body("'matches'[0].'replacements'.size()", equalTo(18))
                .body("'matches'[0].'replacements'[0].'value'", containsString("W"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("We"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Wg"))
                // Skipping assertions on the remaining 15 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("W9 6."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("W9\n6."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Prawdopodobny błąd pisowni"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Prawdopodobna literówka"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_15168_XYZ_&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=GtXLkLs")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.32285422))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible error ortogràfic."))
                .body("'matches'[0].'shortMessage'", containsString("Error ortogràfic"))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(14.0))
                .body("'matches'[0].'context'.'text'", containsString("_EM_15168_XYZ_"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(14.0))
                .body("'matches'[0].'sentence'", containsString("_EM_15168_XYZ_"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible error ortogràfic"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Errors ortogràfics"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=F%0A53.&language=auto&altLanguages=sV&enabledRules=Et&disabledRules=uSiWN_OnKCG&disabledCategories=b")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Irish"))
                .body("'language'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Irish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.24843317))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[0].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("5G"))
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("F 53."))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("F\n53."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9%5Dsrb&language=nl&altLanguages=SV&enabledRules=ga7onAlufFE&disabledRules=XjOtyB8vAAvhfuYr&enabledCategories=_EM_15668_XYZ_&disabledCategories=_EUU14%3BU9_XYZc&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Dutch"))
                .body("'language'.'code'", containsString("nl"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.61646634))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("Niet-gecombineerd symbool: “[” lijkt te ontbreken"))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(1.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("9]srb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(1.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("9]srb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Interpunctie"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0))
                .body("'matches'[1].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[1].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[1].'replacements'.size()", equalTo(10))
                .body("'matches'[1].'replacements'[0].'value'", containsString("SVB"))
                .body("'matches'[1].'replacements'[1].'value'", containsString("Sri"))
                .body("'matches'[1].'replacements'[2].'value'", containsString("sub"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[1].'offset'", numberMatches(2.0))
                .body("'matches'[1].'length'", numberMatches(3.0))
                .body("'matches'[1].'context'.'text'", containsString("9]srb"))
                .body("'matches'[1].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[1].'context'.'length'", numberMatches(3.0))
                .body("'matches'[1].'sentence'", containsString("9]srb"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[1].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_srb&language=nl&altLanguages=SV&enabledRules=ga7onAlufFE&disabledRules=XjOtyB8vAAvhfuYr&enabledCategories=_EM_15668_XYZ_&disabledCategories=_EUU14%3BU9_XYZc&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Dutch"))
                .body("'language'.'code'", containsString("nl"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.61646634))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[0].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[0].'replacements'.size()", equalTo(10))
                .body("'matches'[0].'replacements'[0].'value'", containsString("SVB"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("Sri"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("sub"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("9_srb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("9_srb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=cint&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.39762047))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("«Cint» és un arcaisme. ¿Volíeu dir una altra cosa?"))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(3))
                .body("'matches'[0].'replacements'[0].'value'", containsString("vint"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("cinc"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("cent"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("cint"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("cint"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("1"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("cint"))
                .body("'matches'[0].'rule'.'issueType'", containsString("grammar"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Paraules incorrectes segons el context"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(2.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=O&language=Ru&altLanguages=SV&motherTongue=ja&enabledRules=_EM_14322_XYZ_&disabledRules=UtfXmp&enabledCategories=ufLfEMKr&disabledCategories=M%3Bd_Ii8&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Russian"))
                .body("'language'.'code'", containsString("ru-RU"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.98096114))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Возможно нужна буква из кириллицы вместо аналогичной по начертанию латинской или наоборот."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("O"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("O"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("1"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("Использование аналогичных по написанию латинских букв"))
                .body("'matches'[0].'rule'.'issueType'", containsString("uncategorized"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Проверка орфографии"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(5.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=polib%C3%A3&language=pT&altLanguages=Sv&motherTongue=gl&enabledRules=_EM_15834_XYZ_&disabledRules=UtfXmpsi&disabledCategories=M9c_Ii&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese"))
                .body("'language'.'code'", containsString("pt"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Slovenian"))
                .body("'language'.'detectedLanguage'.'code'", containsString("sl-SI"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.32086444))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=entesouravas&language=pt&altLanguages=sV&motherTongue=pl&enabledRules=_EM_15834_XYZ_&disabledRules=VtfXmps&enabledCategories=c1jylxs7v&disabledCategories=M%3Dc_HUU&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese"))
                .body("'language'.'code'", containsString("pt"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5998508))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=l%C3%A0&language=auto&altLanguages=uk-UA&enabledRules=_EM_2281_XYZ_&disabledRules=2m5bB26QS&enabledCategories=LfJzFTpS4P7&disabledCategories=_UMc2283_XWZ_8")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9819146))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible error ortogràfic."))
                .body("'matches'[0].'shortMessage'", containsString("Error ortogràfic"))
                .body("'matches'[0].'replacements'.size()", equalTo(64))
                .body("'matches'[0].'replacements'[0].'value'", containsString("la"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("a"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("ha"))
                // Skipping assertions on the remaining 61 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("là"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("là"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible error ortogràfic"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Errors ortogràfics"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9_sr%5ET&language=auto&altLanguages=uk-UA&motherTongue=eL&disabledRules=2k5bD26Q4&enabledCategories=34NHhVW8t4&disabledCategories=s_VRReJ&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Irish"))
                .body("'language'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Irish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ga-IE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.7167286))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Er is een mogelijke spelfout gevonden."))
                .body("'matches'[0].'shortMessage'", containsString("Spelfout"))
                .body("'matches'[0].'replacements'.size()", equalTo(34))
                .body("'matches'[0].'replacements'[0].'value'", containsString("ort"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("stát"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("srl"))
                // Skipping assertions on the remaining 31 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(2.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("9_sr^T"))
                .body("'matches'[0].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("9_sr^T"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Waarschijnlijk een spelfout"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mogelijke typefouten"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=subsol&language=auto&altLanguages=SV&motherTongue=tA&enabledRules=_EM_15834_XYZ_&disabledRules=UtfXmpsi&enabledCategories=_EM_15814_XYZ_&disabledCategories=M9c_Ii&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.45419663))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Falta l’accent diacrític."))
                .body("'matches'[0].'shortMessage'", containsString("Falta l’accent."))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("subsòl"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(6.0))
                .body("'matches'[0].'context'.'text'", containsString("subsol"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(6.0))
                .body("'matches'[0].'sentence'", containsString("subsol"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Falta l'accent diacrític segons les normes tradicionals."))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Z) Accents diacrítics tradicionals"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=pel&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26S4&enabledCategories=_EM_2283_XYZ_&disabledCategories=CpFYglmzP")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.8260227))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Aquesta frase no comença amb majúscula."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Pe"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("pel"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("pel"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Comproveu que la frase comença amb majúscula"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Majúscules i minúscules"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=merc%C3%A0sseu&language=auto&altLanguages=sv&enabledRules=Ev&disabledRules=uSiWN_OnICG&enabledCategories=kyjthjOOZ&disabledCategories=6d&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.97113687))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible error ortogràfic."))
                .body("'matches'[0].'shortMessage'", containsString("Error ortogràfic"))
                .body("'matches'[0].'replacements'.size()", equalTo(23))
                .body("'matches'[0].'replacements'[0].'value'", containsString("m'arcàsseu"))
                .body("'matches'[0].'replacements'[0].'type'", containsString("Curated"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("marcàsseu"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("marcísseu"))
                // Skipping assertions on the remaining 20 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("mercàsseu"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("mercàsseu"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible error ortogràfic"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Errors ortogràfics"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=Y_sUb&language=nl&altLanguages=SV&enabledRules=ga7onAlufFE&disabledRules=XjOtyB8wAAvhfuYr&enabledCategories=_EM_15668_XYZ_&disabledCategories=_EUU14%3BU9_XYZc&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Dutch"))
                .body("'language'.'code'", containsString("nl"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.32383233))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Een liggende streep onderaan (underscore) is ongebruikelijk in gewone tekst. Het kan zijn dat u “Y sUb” of “YsUb”bedoelt."))
                .body("'matches'[0].'shortMessage'", containsString("Underscore"))
                .body("'matches'[0].'replacements'.size()", equalTo(2))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Y sUb"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("YsUb"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(5.0))
                .body("'matches'[0].'context'.'text'", containsString("Y_sUb"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(5.0))
                .body("'matches'[0].'sentence'", containsString("Y_sUb"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("1"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("Eeen woord met een underscore"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Spellingcontrole"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=qui-sap-lo&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=CpFUglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("French"))
                .body("'language'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.3585681))
                .body("'matches'.size()", equalTo(3))
                .body("'matches'[0].'message'", containsString("Cette phrase ne commence pas par une majuscule"))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Qui"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("qui-sap-lo"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("qui-sap-lo"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Absence de majuscule en début de phrase"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Majuscules"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0))
                .body("'matches'[1].'message'", containsString("Faute de frappe possible trouvée."))
                .body("'matches'[1].'shortMessage'", containsString("Faute de frappe"))
                .body("'matches'[1].'replacements'.size()", equalTo(569))
                .body("'matches'[1].'replacements'[0].'value'", containsString("SAP"))
                .body("'matches'[1].'replacements'[1].'value'", containsString("sa"))
                .body("'matches'[1].'replacements'[2].'value'", containsString("San"))
                // Skipping assertions on the remaining 566 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[1].'offset'", numberMatches(4.0))
                .body("'matches'[1].'length'", numberMatches(3.0))
                .body("'matches'[1].'context'.'text'", containsString("qui-sap-lo"))
                .body("'matches'[1].'context'.'offset'", numberMatches(4.0))
                .body("'matches'[1].'context'.'length'", numberMatches(3.0))
                .body("'matches'[1].'sentence'", containsString("qui-sap-lo"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'description'", containsString("Faute de frappe possible"))
                .body("'matches'[1].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Faute de frappe possible"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0))
                .body("'matches'[2].'message'", containsString("Faute de frappe possible trouvée."))
                .body("'matches'[2].'shortMessage'", containsString("Faute de frappe"))
                .body("'matches'[2].'replacements'.size()", equalTo(75))
                .body("'matches'[2].'replacements'[0].'value'", containsString("Léo"))
                .body("'matches'[2].'replacements'[1].'value'", containsString("la"))
                .body("'matches'[2].'replacements'[2].'value'", containsString("le"))
                // Skipping assertions on the remaining 72 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[2].'offset'", numberMatches(8.0))
                .body("'matches'[2].'length'", numberMatches(2.0))
                .body("'matches'[2].'context'.'text'", containsString("qui-sap-lo"))
                .body("'matches'[2].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[2].'context'.'length'", numberMatches(2.0))
                .body("'matches'[2].'sentence'", containsString("qui-sap-lo"))
                .body("'matches'[2].'type'.'typeName'", containsString("Other"))
                .body("'matches'[2].'rule'.'description'", containsString("Faute de frappe possible"))
                .body("'matches'[2].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[2].'rule'.'category'.'name'", containsString("Faute de frappe possible"))
                .body("'matches'[2].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[2].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=am&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&enabledCategories=mbk&disabledCategories=CpFYglm")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.37275958))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possível erro ortográfico"))
                .body("'matches'[0].'shortMessage'", containsString("Erro ortográfico"))
                .body("'matches'[0].'replacements'.size()", equalTo(15))
                .body("'matches'[0].'replacements'[0].'value'", containsString("ma"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("a"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("ama"))
                // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(2.0))
                .body("'matches'[0].'context'.'text'", containsString("am"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(2.0))
                .body("'matches'[0].'sentence'", containsString("am"))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Possível erro ortográfico"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Erros Ortográficos"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=0&language=auto&altLanguages=uk-UA&disabledRules=2k5bD26S4&enabledCategories=_EM_2283_XYZ_&disabledCategories=CpFYglmzP")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.0))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=youtube&language=PT&altLanguages=SV&motherTongue=it&enabledRules=_EM_14322_XYZ_&disabledRules=UtfXmps&disabledCategories=M%3Bc_Ii8&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese"))
                .body("'language'.'code'", containsString("pt"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Breton"))
                .body("'language'.'detectedLanguage'.'code'", containsString("br-FR"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5217931))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Você quis dizer “YouTube”?"))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("YouTube"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(7.0))
                .body("'matches'[0].'context'.'text'", containsString("youtube"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(7.0))
                .body("'matches'[0].'sentence'", containsString("youtube"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("1"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("YouTube"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'urls'.size()", equalTo(1))
                .body("'matches'[0].'rule'.'urls'[0].'value'", containsString("https://pt.wikipedia.org/wiki/YouTube"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Erros Ortográficos"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=EM1-s-me-les&language=auto&altLanguages=sv&enabledRules=Ev&disabledRules=uSiWN_OnKCG&disabledCategories=_EM_15517_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("French"))
                .body("'language'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'name'", containsString("French"))
                .body("'language'.'detectedLanguage'.'code'", containsString("fr"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9586377))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("« me » n’est pas un verbe valide."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("mue-les"))
                .body("'matches'[0].'offset'", numberMatches(6.0))
                .body("'matches'[0].'length'", numberMatches(6.0))
                .body("'matches'[0].'context'.'text'", containsString("EM1-s-me-les"))
                .body("'matches'[0].'context'.'offset'", numberMatches(6.0))
                .body("'matches'[0].'context'.'length'", numberMatches(6.0))
                .body("'matches'[0].'sentence'", containsString("EM1-s-me-les"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'subId'", containsString("1"))
                .body("'matches'[0].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[0].'rule'.'description'", containsString("verb non valide + pronom"))
                .body("'matches'[0].'rule'.'issueType'", containsString("uncategorized"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Grammaire"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(3.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=n%27Iyfl-los-les-s&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26S4&enabledCategories=_EM_2283_XYZ_&disabledCategories=CpFYglmzP")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Spanish"))
                .body("'language'.'code'", containsString("es"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Spanish"))
                .body("'language'.'detectedLanguage'.'code'", containsString("es"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.64772123))
                .body("'matches'.size()", equalTo(3))
                .body("'matches'[0].'message'", containsString("Se ha encontrado un posible error ortográfico."))
                .body("'matches'[0].'shortMessage'", containsString("Error de ortografía"))
                .body("'matches'[0].'replacements'.size()", equalTo(0))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Posible error de ortografía"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Posible error ortográfico"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0))
                .body("'matches'[1].'message'", containsString("Use el apóstrofe tipográfico."))
                .body("'matches'[1].'shortMessage'", containsString(""))
                .body("'matches'[1].'replacements'.size()", equalTo(1))
                .body("'matches'[1].'replacements'[0].'value'", containsString("’"))
                .body("'matches'[1].'offset'", numberMatches(1.0))
                .body("'matches'[1].'length'", numberMatches(1.0))
                .body("'matches'[1].'context'.'text'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[1].'context'.'offset'", numberMatches(1.0))
                .body("'matches'[1].'context'.'length'", numberMatches(1.0))
                .body("'matches'[1].'sentence'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'subId'", containsString("7"))
                .body("'matches'[1].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[1].'rule'.'description'", containsString("Comillas tipográficas"))
                .body("'matches'[1].'rule'.'issueType'", containsString("uncategorized"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("tipografía avanzada"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(1.0))
                .body("'matches'[2].'message'", containsString("Se ha encontrado un posible error ortográfico."))
                .body("'matches'[2].'shortMessage'", containsString("Error de ortografía"))
                .body("'matches'[2].'replacements'.size()", equalTo(50))
                .body("'matches'[2].'replacements'[0].'value'", containsString("Mil"))
                .body("'matches'[2].'replacements'[1].'value'", containsString("Piel"))
                .body("'matches'[2].'replacements'[2].'value'", containsString("Fiel"))
                // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[2].'offset'", numberMatches(2.0))
                .body("'matches'[2].'length'", numberMatches(4.0))
                .body("'matches'[2].'context'.'text'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[2].'context'.'offset'", numberMatches(2.0))
                .body("'matches'[2].'context'.'length'", numberMatches(4.0))
                .body("'matches'[2].'sentence'", containsString("n'Iyfl-los-les-s"))
                .body("'matches'[2].'type'.'typeName'", containsString("Other"))
                .body("'matches'[2].'rule'.'description'", containsString("Posible error de ortografía"))
                .body("'matches'[2].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[2].'rule'.'category'.'name'", containsString("Posible error ortográfico"))
                .body("'matches'[2].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[2].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=caf%E2%80%99l-vos-el&language=auto&altLanguages=sv&enabledRules=Et&disabledRules=uSiWN_OnKCG&disabledCategories=a")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Catalan"))
                .body("'language'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.74013984))
                .body("'matches'.size()", equalTo(2))
                .body("'matches'[0].'message'", containsString("Possible error ortogràfic."))
                .body("'matches'[0].'shortMessage'", containsString("Error ortogràfic"))
                .body("'matches'[0].'replacements'.size()", equalTo(36))
                .body("'matches'[0].'replacements'[0].'value'", containsString("cap"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("cal"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("cas"))
                // Skipping assertions on the remaining 33 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("caf’l-vos-el"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("caf'l-vos-el"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible error ortogràfic"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Errors ortogràfics"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0))
                .body("'matches'[1].'message'", containsString("Combinació incorrecta de pronoms febles."))
                .body("'matches'[1].'shortMessage'", containsString(""))
                .body("'matches'[1].'replacements'.size()", equalTo(0))
                .body("'matches'[1].'offset'", numberMatches(3.0))
                .body("'matches'[1].'length'", numberMatches(6.0))
                .body("'matches'[1].'context'.'text'", containsString("caf’l-vos-el"))
                .body("'matches'[1].'context'.'offset'", numberMatches(3.0))
                .body("'matches'[1].'context'.'length'", numberMatches(6.0))
                .body("'matches'[1].'sentence'", containsString("caf'l-vos-el"))
                .body("'matches'[1].'type'.'typeName'", containsString("Other"))
                .body("'matches'[1].'rule'.'subId'", containsString("13"))
                .body("'matches'[1].'rule'.'sourceFile'", containsString("grammar.xml"))
                .body("'matches'[1].'rule'.'description'", containsString("Ordenació dels pronoms febles: *li se, *hi us"))
                .body("'matches'[1].'rule'.'issueType'", containsString("grammar"))
                .body("'matches'[1].'rule'.'category'.'name'", containsString("Pronoms febles"))
                .body("'matches'[1].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[1].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=%0A3.&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.0))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=9%0A7.&language=auto&altLanguages=sv&enabledRules=2k5bD26Q4&disabledRules=2k5bD26U4&enabledCategories=_EM_2283_XYZ_&disabledCategories=gkU7V6&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.0))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=o%0A74.&language=auto&altLanguages=sv&disabledRules=0l5bD2WQ3&enabledCategories=_EM_2283_XYZ_&disabledCategories=gkW8X8")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Portuguese (Portugal)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("pt-PT"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.5641039))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Esta frase não começa com maiúscula."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("O"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(1.0))
                .body("'matches'[0].'context'.'text'", containsString("o 74."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(1.0))
                .body("'matches'[0].'sentence'", containsString("o\n74."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Capitalização da frase"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Capitalização"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=hes&language=auto&altLanguages=sv&enabledRules=2k5bD26Q4&disabledRules=0l5bD1UQ3&enabledCategories=_EM_2283_XYZ_&disabledCategories=gkW8X8&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.7726392))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found"))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("he's"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("hes"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("hes"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Spelling of English contractions"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_%0A63.&language=auto&altLanguages=sv&disabledRules=3U5bD2WQ4&enabledCategories=_EM_2283_XYZ_&disabledCategories=gkW8X8")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.0))
                .body("'matches'.size()", equalTo(0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=YfR%3A7yOZt&language=auto&altLanguages=uk-UA&disabledRules=2k5bD26Q4f&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9049909))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(24))
                .body("'matches'[0].'replacements'[0].'value'", containsString("CFR"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("SFR"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Fr"))
                // Skipping assertions on the remaining 21 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("YfR:7yOZt"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("YfR:7yOZt"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=YfR%3A7yOZt&language=auto&altLanguages=uk-UA&enabledRules=2k5bD26Q4&disabledRules=2k5bD26Q4&disabledCategories=CpFYglmz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.9049909))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(24))
                .body("'matches'[0].'replacements'[0].'value'", containsString("CFR"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("SFR"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Fr"))
                // Skipping assertions on the remaining 21 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(3.0))
                .body("'matches'[0].'context'.'text'", containsString("YfR:7yOZt"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(3.0))
                .body("'matches'[0].'sentence'", containsString("YfR:7yOZt"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=fGHe%E2%80%99m&language=auto&altLanguages=sv&enabledRules=Et&disabledRules=uSiWN_OnKCG&disabledCategories=c")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.64181894))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("This sentence does not start with an uppercase letter."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("FGHe"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("fGHe’m"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("fGHe’m"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Checks that a sentence starts with an uppercase letter"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Capitalization"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=fGHe%E2%80%99m&language=auto&altLanguages=sv&enabledRules=_EM_14029_XYZ_&disabledRules=uSiWN_OnKCG&enabledCategories=_EM_2283_XYZ_&disabledCategories=c")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.64181894))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("This sentence does not start with an uppercase letter."))
                .body("'matches'[0].'shortMessage'", containsString(""))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("FGHe"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(4.0))
                .body("'matches'[0].'context'.'text'", containsString("fGHe’m"))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(4.0))
                .body("'matches'[0].'sentence'", containsString("fGHe’m"))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Checks that a sentence starts with an uppercase letter"))
                .body("'matches'[0].'rule'.'issueType'", containsString("typographical"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Capitalization"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(true))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(-1.0));
        
        expectationHandler.expect(ems);
    }


}
