import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T18:01:36.532+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 21 tests
 * <br>
 * Covered targets: 4858
 * <br>
 * Used time: 10h 10m 22s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=test%40test.de&" + 
                    "apiKey=_EM_134_XYZ_&" + 
                    "password=jm6XDcSdk&" + 
                    "token=CcVVWjFUBCFs_f")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=nQU6&language=.ds0YgSWyqq&altLanguages=j2g9m9&motherTongue=%5EBZb6UdUI1UUHd&preferredVariants=nvLt2WW5w8IXh8BN&enabledRules=ff1KQ41&disabledRules=_EM_29232_XYZ_&enabledCategories=5UUMAKHMeu4U47&disabledCategories=_EM_29234_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token 'nQU6': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"nQU6\"; line: 1, column: 5]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_5596_XYZ_&" + 
                    "apiKey=GbB8Xu4Yiwhg_Y&" + 
                    "limit=517&" + 
                    "inputLogging=P8JtMBFgUkD&" + 
                    "tokenV2=pwgeW&" + 
                    "level=default&" + 
                    "useragent=_EM_5600_XYZ_&" + 
                    "language=_EM_5601_XYZ_&" + 
                    "token=_EM_5602_XYZ_&" + 
                    "mode=_EM_5603_XYZ_&" + 
                    "password=NG0u22&" + 
                    "instanceId=_EM_5604_XYZ_&" + 
                    "v=_EM_5605_XYZ_&" + 
                    "text=_EM_5606_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=test%40test.de&" + 
                    "apiKey=foo&" + 
                    "limit=0&" + 
                    "EMextraParam123=42&" + 
                    "password=talYRgK3X3x&" + 
                    "token=F5K&" + 
                    "mode=FuoFSYYRCB&" + 
                    "instanceId=_EM_105_XYZ_&" + 
                    "inputLogging=_EM_106_XYZ_&" + 
                    "tokenV2=_EM_107_XYZ_&" + 
                    "level=4eZMk556cc&" + 
                    "v=Cnrya5g&" + 
                    "useragent=RB&" + 
                    "language=x2b_HwIxdDP&" + 
                    "text=ynS2fZusJa76eSgR")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=4Lts5&language=_EM_30_XYZ_&motherTongue=_EM_32_XYZ_&preferredVariants=JWk&disabledRules=_EM_34_XYZ_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=5&" + 
                    "instanceId=_EM_50837_XYZ_&" + 
                    "inputLogging=8_PKQk&" + 
                    "apiKey=_EM_50840_XYZ_&" + 
                    "tokenV2=_EM_50838_XYZ_&" + 
                    "level=_EM_50839_XYZ_&" + 
                    "v=_EM_50841_XYZ_&" + 
                    "useragent=yMXZsgrg&" + 
                    "username=_EM_50842_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unexpected character ('L' (code 76)): Expected space separating root-level values\n at [Source: (String)\"4Lts5\"; line: 1, column: 3]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_50450_XYZ_&language=ToHJPozp_zIxFA&motherTongue=_EM_32_XYZ_&preferredVariants=JWk&enabledRules=xmai&disabledRules=_EM_34_XYZ_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=7&" + 
                    "instanceId=91K0n64&" + 
                    "inputLogging=8_PKQk&" + 
                    "apiKey=kkY2m4nBpffs7pt&" + 
                    "tokenV2=EetUpbRIz&" + 
                    "level=picky&" + 
                    "v=_EM_50453_XYZ_&" + 
                    "useragent=_EM_50455_XYZ_&" + 
                    "username=oNYTOpt80w")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_50450_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_50450_XYZ_\"; line: 1, column: 15]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=YSwSjytDEDo5NeL&username=I5Gq7blmen9i&apiKey=6rHX7_1V")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_9341_XYZ_&" + 
                    "level=default&" + 
                    "useragent=oDeBq&" + 
                    "language=YO4C0f0V&" + 
                    "token=Yxrp&" + 
                    "mode=textLevelOnly&" + 
                    "password=ATje1WI_nCW3y&" + 
                    "instanceId=qshNqaNXfUZYpD&" + 
                    "v=oFVo22M5aXQe4f&" + 
                    "text=_EM_48448_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_53205_XYZ_&username=0Cewek&apiKey=_EM_53206_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "tokenV2=bNcFyMAt%5Ds5&" + 
                    "level=picky&" + 
                    "useragent=c93CNEcLKSPZ&" + 
                    "language=_EM_49269_XYZ_&" + 
                    "token=ULgpofIlK1gly7&" + 
                    "mode=dOPXihdyCJt_&" + 
                    "password=fs&" + 
                    "instanceId=dSv&" + 
                    "v=0q%3FaOE&" + 
                    "text=DKhA7RgrTLXaRp9y")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=fooo&apiKey=_EM_856_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "EMextraParam123=42&" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_857_XYZ_&" + 
                    "level=_EM_858_XYZ_&" + 
                    "useragent=_EM_859_XYZ_&" + 
                    "language=_EM_860_XYZ_&" + 
                    "token=_EM_332_XYZ_&" + 
                    "mode=yba8YQoFzv44&" + 
                    "password=_EM_861_XYZ_&" + 
                    "instanceId=_EM_333_XYZ_&" + 
                    "v=_EM_334_XYZ_&" + 
                    "text=x")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=aVOWxdbCTV&username=THls&apiKey=3Pqn_hJWfn")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=T8UCtgWgaQ&" + 
                    "level=picky&" + 
                    "useragent=4OrgHmgrYeuj&" + 
                    "language=IzlMuMpf&" + 
                    "token=_EM_50825_XYZ_n&" + 
                    "mode=all&" + 
                    "password=QpVdThMWeI93XTh&" + 
                    "instanceId=%60&" + 
                    "v=Y&" + 
                    "text=Uw")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_136_XYZ_&username=_EM_194_XYZ_&apiKey=_EM_143_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "EMextraParam123=42&" + 
                    "inputLogging=no&" + 
                    "tokenV2=CdUj2n6V&" + 
                    "level=_EM_195_XYZ_&" + 
                    "useragent=B5EQ&" + 
                    "language=l4y9hhnCVGHI&" + 
                    "token=_EM_140_XYZ_&" + 
                    "mode=_EM_196_XYZ_&" + 
                    "password=MtARDIg6&" + 
                    "instanceId=_EM_198_XYZ_&" + 
                    "v=_EM_146_XYZ_&" + 
                    "text=_D9u")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=cVOXxdbCT&username=defaul&apiKey=b_ZV1T")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=no&" + 
                    "tokenV2=T8UCtgWgajg&" + 
                    "level=picky&" + 
                    "useragent=4OrgJmirYfuj&" + 
                    "language=GyoMUOp&" + 
                    "token=_UOU6U825_XYZ_&" + 
                    "mode=_EM_43195_XYZU&" + 
                    "password=%60BCKd4oUU&" + 
                    "instanceId=_EM_51300_XWZa&" + 
                    "v=&" + 
                    "text=Q")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=SXUEHxIUKJ2L&" + 
                    "language=_EM_43646_XYZ_&" + 
                    "disabledRules=_EM_43647_XYZ_&" + 
                    "preferredVariants=_EM_43650_XYZ_&" + 
                    "motherTongue=_EM_43651_XYZ_&" + 
                    "apiKey=Zu41qOYR&" + 
                    "tokenV2=_EM_43652_XYZ_&" + 
                    "enabledOnly=_EM_43653_XYZ_&" + 
                    "password=_EM_43656_XYZ_&" + 
                    "enabledRules=MZ4&" + 
                    "c=_EM_43659_XYZ_&" + 
                    "sourceText=_EM_43662_XYZ_&" + 
                    "token=_EM_43664_XYZ_&" + 
                    "enabledCategories=tbJk9oi7mrEvupv&" + 
                    "textSessionId=_EM_43668_XYZ_&" + 
                    "disabledCategories=_EM_43670_XYZ_&" + 
                    "username=YAuxnKVbcC4")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=%5EUMU5806_XUY_&username=CyTG&apiKey=G1pUT60Xe0Hh")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=WJc6_&" + 
                    "tokenV2=_EM_5834_XYZ_&" + 
                    "level=_EM_5828_XYZ_&" + 
                    "useragent=AwSZ7A3Cm9khqg&" + 
                    "language=_EM_5835_XYZ_&" + 
                    "token=_EM_5829_XYZ_&" + 
                    "mode=_EM_5830_XYZ_&" + 
                    "password=_EM_5836_XYZ_&" + 
                    "instanceId=goV9z5Ugquod&" + 
                    "v=_EM_5832_XYZ_&" + 
                    "text=tE%7D")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=JXTLWsVDx&username=&apiKey=42")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "EMextraParam123=42&" + 
                    "tokenV2=_EM_5774_XYZ_&" + 
                    "level=_EM_5775_XYZ_&" + 
                    "language=_EM_5777_XYZ_&" + 
                    "mode=_EM_5779_XYZ_&" + 
                    "v=_EM_5782_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=A4RKAzvzlFjZB&altLanguages=K1CtRl_gH4&preferredVariants=eDtOzhzgm2&enabledCategories=j8gpeSOlq1Ebam&disabledCategories=KHP1SLj3aori&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=ATr9N4IM7xY6ydCo&" + 
                    "language=A4RKAzvzlFjZB&" + 
                    "disabledRules=VfyyF&" + 
                    "EMextraParam123=42&" + 
                    "motherTongue=72cNFh&" + 
                    "inputLogging=_EM_8350_XYZ_&" + 
                    "apiKey=_EM_8351_XYZ_&" + 
                    "tokenV2=_EM_8352_XYZ_&" + 
                    "mode=_EM_8357_XYZ_&" + 
                    "enableTempOffRules=_EM_8359_XYZ_&" + 
                    "instanceId=_EM_8360_XYZ_&" + 
                    "preferredLanguages=fESF6257&" + 
                    "enabledRules=&" + 
                    "ruleValues=D3SEdHsnJBm&" + 
                    "sourceText=_EM_8364_XYZ_&" + 
                    "enableHiddenRules=5bk7F&" + 
                    "token=_EM_8365_XYZ_&" + 
                    "altLanguages=K1CtRl_gH4&" + 
                    "textSessionId=_EM_8370_XYZ_&" + 
                    "callback=_EM_8371_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_11366_XYZ_&username=_EM_11367_XYZ_&apiKey=_EM_11368_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_11367_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_11369_XYZ_&username=_EM_11370_XYZ_&apiKey=")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=U72t0B&" + 
                    "tokenV2=_EM_11371_XYZ_&" + 
                    "level=_EM_11372_XYZ_&" + 
                    "language=_EM_11374_XYZ_&" + 
                    "token=_EM_11375_XYZ_&" + 
                    "mode=_EM_11376_XYZ_&" + 
                    "password=bRgaRdvL36&" + 
                    "text=_EM_11379_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=2pKsPhH&username=_EM_11380_XYZ_&apiKey=_EM_11381_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_11380_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_11383_XYZ_")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_11387_XYZ_&language=_EM_11388_XYZ_&preferredVariants=_EM_11391_XYZ_&disabledRules=_EM_11393_XYZ_&disabledCategories=_EM_11395_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_11387_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_11387_XYZ_\"; line: 1, column: 15]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=&" + 
                    "ruleId=_EM_11398_XYZ_&" + 
                    "inputLogging=161JBHBEI0Yb5u&" + 
                    "apiKey=_EM_11400_XYZ_&" + 
                    "useragent=_EM_11402_XYZ_&" + 
                    "language=&" + 
                    "v=q50H1dG_xngDpsoW&" + 
                    "text=Jy8e_MVFOjUZ")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: langCode cannot be empty or whitespace only"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=I8KJ&" + 
                    "apiKey=rSC7GuAfxWtwcbJ&" + 
                    "offset=955&" + 
                    "inputLogging=nsZPiBo&" + 
                    "tokenV2=mARRZej55NLrKKa&" + 
                    "level=&" + 
                    "useragent=E9GS&" + 
                    "language=RAi9ELKnYUWi&" + 
                    "token=8lD_VKZ0ZvGz8&" + 
                    "mode=T&" + 
                    "password=y&" + 
                    "instanceId=pmNQkhhR&" + 
                    "v=afR4T&" + 
                    "text=7xDgnHIOht8k1b")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=w7Gt6DUwX&data=8&language=RIyVu&motherTongue=Ma&enabledRules=ULnxWfNiQ&enabledCategories=0fnXcAA&disabledCategories=dQDowWNc9sm&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=w7Gt6DUwX&" + 
                    "language=RIyVu&" + 
                    "EMextraParam123=42&" + 
                    "preferredVariants=Iq&" + 
                    "motherTongue=Ma&" + 
                    "apiKey=7OCVss95SD&" + 
                    "enabledOnly=okQCSR4&" + 
                    "mode=t&" + 
                    "enableTempOffRules=7Vroe03iQ&" + 
                    "preferredLanguages=0ibSynqrcudj90Jc&" + 
                    "level=4DQMrfdB8iAeRYV&" + 
                    "token=vGZW8OJd&" + 
                    "allowIncompleteResults=isQXB&" + 
                    "filterDictionaryMatches=&" + 
                    "enabledCategories=0fnXcAA&" + 
                    "altLanguages=xWE2RfeK&" + 
                    "disabledCategories=dQDowWNc9sm&" + 
                    "username=1LIBKa6uomchMcYr")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=j_EBq81XCuLEW&username=CZSewvufmW&apiKey=uALtmyypGItyBNqi")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'CZSewvufmW' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=ztXs2dbgZwW&username=ktox2fPftUg1ffK&apiKey=f")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=qzMdsz4WPB&" + 
                    "level=ugb5xIbc0t0sHpu&" + 
                    "language=OoDtE&" + 
                    "token=sX597hlGs&" + 
                    "mode=NmQVe8&" + 
                    "password=m8xuZZbR2s9&" + 
                    "instanceId=N5PmSJQwmGMBR&" + 
                    "v=Ecwd8")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_45589_XYZ_&username=Xztkn4Opu&apiKey=DqJKgwIvN5eTvu")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'Xztkn4Opu' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=Okyval&username=LcPHI&apiKey=wBAUPVaXN7")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=rxfl1l6C_q0r&" + 
                    "level=A6O0R_BNq&" + 
                    "useragent=kV37StLjfZFMA&" + 
                    "token=BXxaUQP69zb0D")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=gawdmDpGaX7h")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=gawdmDpGaX7h")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=FA&" + 
                    "ruleId=_EM_45593_XYZ_&" + 
                    "apiKey=_EM_45596_XYZ_&" + 
                    "mode=_EM_45600_XYZ_&" + 
                    "instanceId=_EM_45601_XYZ_&" + 
                    "text=Av0E6raV3An&" + 
                    "username=_EM_45603_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_45593_XYZ_' not found for language Persian (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 294)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=nl&" + 
                    "mode=CF0uXCW&" + 
                    "inputLogging=no&" + 
                    "apiKey=_EM_42955_XYZ_&" + 
                    "tokenV2=rNgrQP&" + 
                    "level=default&" + 
                    "v=4k_2ed4rARSJ5&" + 
                    "useragent=Rn2pmXG3b4creAM&" + 
                    "text=aHXBkWgK&" + 
                    "username=g")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(3108))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Spatie voor of achter haakje"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Twee komma's of punten"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 3105 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=RXzIexXOW%7E4&username=_EM_16887_XYZ_&apiKey=_EM_16888_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=XJaUs7hfaPc_&" + 
                    "level=_EM_46258_XYZ_&" + 
                    "useragent=_EM_16890_XYZ_&" + 
                    "language=swp2YfED%2FlXNY&" + 
                    "token=_EM_16892_XYZ_&" + 
                    "mode=vFYz&" + 
                    "password=QdxmolCH&" + 
                    "instanceId=IubYXi4hnHV4e2uz")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_16873_XYZ_&username=hkUYxXQu6LFz&apiKey=_EM_16874_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "level=Hl4xysVMWPqAqUk&" + 
                    "useragent=_EM_46260_XYZ_&" + 
                    "token=R&" + 
                    "mode=textLevelOnly&" + 
                    "password=uKm%3BP0mHU&" + 
                    "instanceId=%5EnKk6HOUx9Ea0AEc")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=en&" + 
                    "mode=Fh0Ie86pwQduwMBz&" + 
                    "inputLogging=OjTFeGFRof2ZZMR&" + 
                    "apiKey=nA7&" + 
                    "tokenV2=_EM_16901_XYZ_&" + 
                    "level=E6&" + 
                    "v=%2F&" + 
                    "useragent=pJCyiTX8Lhv&" + 
                    "text=dV&" + 
                    "username=Td8IOzLbD_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(4077))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Use of whitespace before comma and before/after parentheses"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typography"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Use of two consecutive dots or commas"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Punctuation"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UPPERCASE_SENTENCE_START"))
                .body("'rules'[2].'description'", containsString("Checks that a sentence starts with an uppercase letter"))
                .body("'rules'[2].'categoryId'", containsString("CASING"))
                .body("'rules'[2].'categoryName'", containsString("Capitalization"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("0"))
                ; // Skipping assertions on the remaining 4074 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=DA&" + 
                    "ruleId=_EM_47439_XYZ_&" + 
                    "inputLogging=no&" + 
                    "apiKey=V&" + 
                    "tokenV2=pi02J0CieR9d5X&" + 
                    "useragent=mc4E0DY8on5&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=0QvS%5DE&" + 
                    "text=1&" + 
                    "username=jz26BmALKj9JZ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_47439_XYZ_' not found for language Danish (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 84)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=nl&" + 
                    "mode=CF0uXCW&" + 
                    "inputLogging=_EM_47437_XYZ_&" + 
                    "apiKey=_EM_42955_XYZ_&" + 
                    "tokenV2=_EM_47436_XYZ_&" + 
                    "level=default&" + 
                    "v=4k_2ed4rARSJ5&" + 
                    "useragent=Rn2pmXG3b4creAM&" + 
                    "text=_EM_16871_XYZ_&" + 
                    "username=g")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(3108))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Spatie voor of achter haakje"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Twee komma's of punten"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 3105 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=RXzIexXOW%7E4&username=_EM_16887_XYZ_&apiKey=_EM_16888_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "level=_EM_46258_XYZ_&" + 
                    "useragent=_EM_16890_XYZ_&" + 
                    "language=swp2YfED%2FlXNY&" + 
                    "token=_EM_16892_XYZ_&" + 
                    "mode=vFYz&" + 
                    "password=QdxmolCH&" + 
                    "instanceId=IubYXi4hnHV4e2uz")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_16873_XYZ_&username=hkUYxXQu6LFz&apiKey=_EM_16874_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_EM_16877_XYZ_&" + 
                    "tokenV2=_EM_16878_XYZ_&" + 
                    "level=Hl4xysVMWPqAqUk&" + 
                    "useragent=_EM_46260_XYZ_&" + 
                    "token=S&" + 
                    "mode=textLevelOnly&" + 
                    "instanceId=%5EnKk6HOUx9Ea0AEc&" + 
                    "text=xEnOKu")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=FR&" + 
                    "mode=Fh0Ie86pwQduwMBz&" + 
                    "inputLogging=OjTFeGFRof2ZZMR&" + 
                    "apiKey=_EM_16900_XYZ_&" + 
                    "tokenV2=_EM_16901_XYZ_&" + 
                    "level=M6&" + 
                    "v=%2F&" + 
                    "useragent=pJCyiTX8Lhv&" + 
                    "text=dV&" + 
                    "username=Td8IOzLZD_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(2822))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Espace devant « , », « ) » ou après « ( »"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typographie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Deux virgules ou points consécutifs"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Ponctuation"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Guillemet fermant ou ouvrant manquant (ou autre symbole équilibré)"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Ponctuation"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 2819 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=DA&" + 
                    "ruleId=lozh%2FU&" + 
                    "inputLogging=no&" + 
                    "apiKey=V&" + 
                    "tokenV2=_EM_47438_XYZ_&" + 
                    "useragent=mc4E0DY8on5&" + 
                    "language=9hZE1e&" + 
                    "mode=_EM_16944_XYZ_&" + 
                    "instanceId=0QvS%5DE&" + 
                    "text=1&" + 
                    "username=jz25BmALKj9JZ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'lozh/U' not found for language Danish (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 84)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=ga&" + 
                    "mode=CF0uXCW&" + 
                    "inputLogging=_EM_16866_XYZ_&" + 
                    "apiKey=_EM_42955_XYZ_&" + 
                    "v=4k_2ed4rARSJ5J&" + 
                    "useragent=Rn2pmXG3b4creAM&" + 
                    "username=_EM_16872_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(1683))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Spatie voor of achter haakje"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[1].'description'", containsString("Niet-gecombineerde haakjes, aanhalingstekens of andere symbolen"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[1].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[1].'minToCheckParagraph'", containsString("-1"))
                .body("'rules'[2].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[2].'description'", containsString("Twee komma's of punten"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Interpunctie"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                ; // Skipping assertions on the remaining 1680 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_16873_XYZ_&username=hkUYxXQu6LFz&apiKey=_EM_16874_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=_EM_16878_XYZ_&" + 
                    "level=Hl4xysVMWPqAqUk&" + 
                    "useragent=_EM_42956_XYZ_&" + 
                    "language=_EM_16881_XYZ_&" + 
                    "mode=_EM_16883_XYZ_&" + 
                    "password=_EM_16884_XYZ_&" + 
                    "instanceId=_EM_16885_XYZ_&" + 
                    "v=_EM_42949_XYZ_&" + 
                    "text=xEnOKu")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'hkUYxXQu6LFz' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=RXzIexXOW%7E4&username=_EM_16887_XYZ_&apiKey=_EM_16888_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=vcedYK&" + 
                    "level=_EM_42950_XYZ_&" + 
                    "language=swp2YfCD6lXNY&" + 
                    "token=_EM_16892_XYZ_&" + 
                    "mode=vFYz&" + 
                    "password=QdxmolCH&" + 
                    "instanceId=IubYXi4hnHV4e2uz&" + 
                    "v=_EM_16895_XYZ_&" + 
                    "text=_EM_16896_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=FR&" + 
                    "mode=Fh0Ie86pwQduwMBz&" + 
                    "instanceId=a4N0K&" + 
                    "inputLogging=OjTFeGFRof2ZZMR&" + 
                    "apiKey=_EM_16900_XYZ_&" + 
                    "tokenV2=_EM_16901_XYZ_&" + 
                    "v=%2F&" + 
                    "useragent=_EM_16903_XYZ_&" + 
                    "text=_EM_16904_XYZ_&" + 
                    "username=Td8IOzLZD_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(2822))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Espace devant « , », « ) » ou après « ( »"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typographie"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("Deux virgules ou points consécutifs"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Ponctuation"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Guillemet fermant ou ouvrant manquant (ou autre symbole équilibré)"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Ponctuation"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 2819 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=XJaUs7hfaPc_&" + 
                    "language=_pKP85Bec%5EKtZ&" + 
                    "preferredVariants=cQlhzH5B0P&" + 
                    "apiKey=_EM_16914_XYZ_&" + 
                    "data=_EM_16915_XYZ_&" + 
                    "tokenV2=_EM_42957_XYZ_&" + 
                    "enabledOnly=_EM_16917_XYZ_&" + 
                    "useragent=_EM_16918_XYZ_&" + 
                    "noopLanguages=_EM_16919_XYZ_&" + 
                    "enabled=_EM_16920_XYZ_&" + 
                    "mode=&" + 
                    "password=_EM_16922_XYZ_&" + 
                    "enableTempOffRules=_EM_16923_XYZ_&" + 
                    "instanceId=_EM_44910_XYZ_&" + 
                    "disabled=_EM_16926_XYZ_&" + 
                    "preferredvariants=_EM_16927_XYZ_&" + 
                    "enabledRules=g_vL9THUt6Vr&" + 
                    "c=NMDo%3E3&" + 
                    "level=_EM_44911_XYZ_&" + 
                    "ruleValues=_EM_16929_XYZ_&" + 
                    "sourceText=_EM_16930_XYZ_&" + 
                    "enableHiddenRules=7hdv&" + 
                    "token=_EM_16931_XYZ_&" + 
                    "enabledCategories=_EM_42953_XYZ_&" + 
                    "v=dR0lQSxKjsoB&" + 
                    "altLanguages=_EM_16936_XYZ_&" + 
                    "callback=_EM_16937_XYZ_&" + 
                    "disabledCategories=_EM_16938_XYZ_&" + 
                    "username=_EM_16939_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=tL&" + 
                    "ruleId=jozh0U&" + 
                    "inputLogging=_EM_16941_XYZ_&" + 
                    "apiKey=zpJmJWRiBmaX1lA&" + 
                    "tokenV2=65qDh&" + 
                    "useragent=mc4E0DY8on5&" + 
                    "language=9hZE1e&" + 
                    "mode=_EM_16944_XYZ_&" + 
                    "instanceId=0QvS%5DE&" + 
                    "v=_EM_16946_XYZ_&" + 
                    "text=%2F")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'jozh0U' not found for language Tagalog (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 50)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }


}
