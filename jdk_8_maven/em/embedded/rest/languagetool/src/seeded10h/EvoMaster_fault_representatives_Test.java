import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T18:01:36.663+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 13281
 * <br>
 * Used time: 10h 10m 22s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=fooo&apiKey=_EM_856_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "EMextraParam123=42&" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_857_XYZ_&" + 
                    "level=_EM_858_XYZ_&" + 
                    "useragent=_EM_859_XYZ_&" + 
                    "language=_EM_860_XYZ_&" + 
                    "token=_EM_332_XYZ_&" + 
                    "mode=yba8YQoFzv44&" + 
                    "password=_EM_861_XYZ_&" + 
                    "instanceId=_EM_333_XYZ_&" + 
                    "v=_EM_334_XYZ_&" + 
                    "text=x")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Mxsurname+is+my+name.&" + 
                    "language=en-US&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("English (US)"))
                .body("'language'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'name'", containsString("English (US)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("en-US"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999386))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Possible spelling mistake found."))
                .body("'matches'[0].'shortMessage'", containsString("Spelling mistake"))
                .body("'matches'[0].'replacements'.size()", equalTo(1))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Surname"))
                .body("'matches'[0].'offset'", numberMatches(0.0))
                .body("'matches'[0].'length'", numberMatches(9.0))
                .body("'matches'[0].'context'.'text'", containsString("Mxsurname is my name."))
                .body("'matches'[0].'context'.'offset'", numberMatches(0.0))
                .body("'matches'[0].'context'.'length'", numberMatches(9.0))
                .body("'matches'[0].'sentence'", containsString("Mxsurname is my name."))
                .body("'matches'[0].'type'.'typeName'", containsString("Other"))
                .body("'matches'[0].'rule'.'description'", containsString("Possible spelling mistake"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Possible Typo"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=egj3rUz9&language=auto&altLanguages=6elVH&motherTongue=Pl&enabledRules=dL2Zz0JY&disabledRules=_EM_48306_XYZ_&enabledCategories=_EM_44480_XYZ_&disabledCategories=SB9UBD&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '6elVH' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
