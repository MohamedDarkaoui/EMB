import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T18:01:36.646+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 31 tests
 * <br>
 * Covered targets: 5419
 * <br>
 * Used time: 10h 10m 22s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=bla+%3Cscript%3E&" + 
                        "language=de&" + 
                        "disabledRules=HUNSPELL_RULE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=Hier+steht+Schockl&" + 
                        "language=de-DE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=&" + 
                    "apiKey=V7&" + 
                    "limit=261&" + 
                    "EMextraParam123=42&" + 
                    "inputLogging=ofQyg81JqTKWm_&" + 
                    "level=2WbvEr4sTJWa4Z1V&" + 
                    "useragent=JnHT23CpoKCU&" + 
                    "language=61EwEkGVoWaLfe&" + 
                    "mode=Hx6Bl2L1&" + 
                    "instanceId=9eQ9u9WTe_ylWf1&" + 
                    "v=mW0Oq5Qxbhnf&" + 
                    "text=kdEZNP2")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=cMxPb8KIWB8KFTrv")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=hR&username=sPskR&apiKey=tgIyBGpiMfmA")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'sPskR' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=A1arf&language=sRid_sFejC767g&altLanguages=xiq&motherTongue=&preferredVariants=aUfHqCX4NQu2jQ&enabledRules=Rm9ry3KdL&disabledRules=qeu_wgMpc1p3pad5&enabledCategories=TWr_JHAme8n7R_u&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=wy_&" + 
                    "instanceId=XT2AEEA&" + 
                    "inputLogging=_fXqstNi5a00R&" + 
                    "tokenV2=MgUHwEI&" + 
                    "level=WTD3PfTcLh&" + 
                    "v=DFBfK1XSGp&" + 
                    "username=bDT")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: With 'username' set, you also need to specify either 'apiKey' (recommended) or 'password'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=H-t-ils&" + 
                    "instanceId=_EM_45038_XYZ_&" + 
                    "inputLogging=3VXnqeyFF972W%2FVC&" + 
                    "apiKey=_EM_46802_XYZ_&" + 
                    "tokenV2=r_hz9I85_jUC1&" + 
                    "level=zZDZ&" + 
                    "v=_EM_45242_XYZ_&" + 
                    "text=V5HJE23FgGwb6Tvj&" + 
                    "username=Uhc8IOzLZD_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'H-t-ils' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=-x-&" + 
                    "ruleId=R_WORDS&" + 
                    "inputLogging=XkZn&" + 
                    "apiKey=_EM_47267_XYZ_&" + 
                    "tokenV2=_EM_46057_XYZ_&" + 
                    "level=default&" + 
                    "useragent=_EM_46058_XYZ_&" + 
                    "language=9hZE1&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=0QvSUE&" + 
                    "v=ZhCBg8ds2JlVtH&" + 
                    "text=lE86MjVRwnNZJv&" + 
                    "username=S_1R1ZnUElDY1lS")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '-x-' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=_EM_47264_XYZ_&" + 
                    "language=ciFxtk7XD_&" + 
                    "disabledRules=LhggHdUswqkI&" + 
                    "motherTongue=_EM_16912_XYZ_&" + 
                    "apiKey=_EM_46881_XYZ_&" + 
                    "data=_EM_47269_XYZ_&" + 
                    "tokenV2=_EM_47265_XYZ_&" + 
                    "enabledOnly=eeJk&" + 
                    "useragent=WgW&" + 
                    "noopLanguages=hv&" + 
                    "enabled=_EM_46885_XYZ_&" + 
                    "mode=all&" + 
                    "password=_EM_47268_XYZ_&" + 
                    "enableTempOffRules=UVoch4B&" + 
                    "preferredLanguages=Q&" + 
                    "disabled=5p6U_dyktYlIn1&" + 
                    "preferredvariants=TcvewAUUvD&" + 
                    "enabledRules=g_vL9THUv6Vr&" + 
                    "c=NMDo%401&" + 
                    "level=default&" + 
                    "ruleValues=H&" + 
                    "enableHiddenRules=G%5E1D&" + 
                    "token=_EM_46887_XYZ_&" + 
                    "allowIncompleteResults=%3C8V171UAgjrsTla&" + 
                    "autodetect=_EM_47266_XYZ_&" + 
                    "filterDictionaryMatches=jJeZYQzpD9boz&" + 
                    "enabledCategories=tlcUrCv&" + 
                    "textSessionId=q5D3K&" + 
                    "callback=otPw%40Q1&" + 
                    "disabledCategories=19YDdeOUnVlcnP&" + 
                    "username=Tn6ptkknvVy")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=PhSG&username=5uiffIYyWixZWOgh&apiKey=4zJN0aFz6Mx")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '5uiffIYyWixZWOgh' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=cMxPb8KIWB8KFTrv")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=A1arf&language=sRid_sFejC767g&altLanguages=xiq&motherTongue=&preferredVariants=aUfHqCX4NQu2jQ&enabledRules=Rm9ry3KdL&disabledRules=qeu_wgMpc1p3pad5&enabledCategories=TWr_JHAme8n7R_u&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=wy_&" + 
                    "instanceId=XT2AEEA&" + 
                    "inputLogging=_fXqstNi5a20R&" + 
                    "tokenV2=MgUHwEI&" + 
                    "level=WTD3PfTcLh&" + 
                    "v=DFBfK1XSGp&" + 
                    "useragent=Vj8h0EwLvExB0QFA")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=cvEta4gefVn6A&language=u&enabledRules=OTCAXScU1jG8vG")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'u' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=cvEta4gefVn6A&" + 
                    "language=u&" + 
                    "disabledRules=AW5wSwSVBg6jEuAS&" + 
                    "preferredVariants=rKFzOCJuj9Y&" + 
                    "apiKey=_EM_14521_XYZ_&" + 
                    "enabledOnly=_EM_14523_XYZ_&" + 
                    "noopLanguages=_EM_14525_XYZ_&" + 
                    "enabled=ykxe_iVGBCdX&" + 
                    "instanceId=_EM_14528_XYZ_&" + 
                    "preferredLanguages=_hCr5I1PpNyY&" + 
                    "disabled=_EM_14529_XYZ_&" + 
                    "c=_EM_14531_XYZ_&" + 
                    "level=_EM_14532_XYZ_&" + 
                    "ruleValues=_EM_14533_XYZ_&" + 
                    "sourceText=_EM_14534_XYZ_&" + 
                    "enableHiddenRules=_EM_14535_XYZ_&" + 
                    "token=_EM_14536_XYZ_&" + 
                    "allowIncompleteResults=_EM_14537_XYZ_&" + 
                    "autodetect=_EM_14538_XYZ_&" + 
                    "filterDictionaryMatches=_EM_14539_XYZ_&" + 
                    "enabledCategories=h6oMlCROO4yHRC9&" + 
                    "v=_EM_14540_XYZ_&" + 
                    "textSessionId=_EM_14541_XYZ_&" + 
                    "callback=UO1JzNQhx&" + 
                    "username=_EM_14542_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_14543_XYZ_")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_14545_XYZ_&username=_EM_14546_XYZ_&apiKey=_EM_14547_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_14546_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_14548_XYZ_&username=_EM_14549_XYZ_&apiKey=_EM_14550_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_14551_XYZ_&" + 
                    "level=WN&" + 
                    "useragent=U5TqSBLCCvOn3&" + 
                    "language=pThzlTRjq&" + 
                    "mode=&" + 
                    "password=_EM_14553_XYZ_&" + 
                    "instanceId=_EM_14554_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_14549_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/healthcheck")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=XJaUs7hfaPc_&" + 
                    "language=_pKP85Bec%5EKtZ&" + 
                    "disabledRules=LhggDdUswqkI&" + 
                    "preferredVariants=cQldzH5B0P&" + 
                    "motherTongue=_EM_16912_XYZ_&" + 
                    "apiKey=_EM_16914_XYZ_&" + 
                    "tokenV2=_EM_42957_XYZ_&" + 
                    "enabledOnly=&" + 
                    "useragent=cjE75uX&" + 
                    "noopLanguages=fv&" + 
                    "enabled=KObu2EBpFKY&" + 
                    "mode=&" + 
                    "password=_EM_16922_XYZ_&" + 
                    "enableTempOffRules=qOJYOTrcvhhO&" + 
                    "instanceId=Qg2mx&" + 
                    "enabledRules=g_vL9THUt6Vr&" + 
                    "c=NMDo%3E3&" + 
                    "level=picky&" + 
                    "ruleValues=_EM_16929_XYZ_&" + 
                    "sourceText=_EM_16930_XYZ_&" + 
                    "allowIncompleteResults=_EM_42952_XYZ_&" + 
                    "autodetect=%7Fl&" + 
                    "filterDictionaryMatches=_EM_16934_XYZ_&" + 
                    "enabledCategories=tlcUrCv&" + 
                    "v=_EM_45037_XYZ_&" + 
                    "altLanguages=_EM_16936_XYZ_&" + 
                    "disabledCategories=httl")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'commit'", nullValue())
                .body("'software'.'premium'", equalTo(false));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=Ow-ce&" + 
                    "mode=Fh0Ie86pwQduwMBz&" + 
                    "instanceId=_EM_45038_XYZ_&" + 
                    "apiKey=_EM_45461_XYZ_&" + 
                    "level=M6&" + 
                    "v=_EM_45462_XYZ_&" + 
                    "useragent=Udc8IOzLZD_&" + 
                    "text=_EM_45463_XYZ_&" + 
                    "username=Udc8IOzLZD_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'Ow-ce' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=tl&" + 
                    "ruleId=jkzh%28U&" + 
                    "inputLogging=RYorV0GewLWSeQ&" + 
                    "apiKey=znJmJWRiBmaX1lA&" + 
                    "tokenV2=65qD%60&" + 
                    "level=default&" + 
                    "language=9hZE1&" + 
                    "mode=_EM_16944_XYZ_&" + 
                    "instanceId=0QvS%5DE&" + 
                    "text=-")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'jkzh(U' not found for language Tagalog (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 50)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=0BeSzEf6KcPj&username=uGjr5k4YofLrrZ&apiKey=_EM_25693_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'uGjr5k4YofLrrZ' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=tO7TFnU0KT%60")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_25697_XYZ_&language=0kSp0cgb&altLanguages=YwJh7&motherTongue=SInoyH8aNaCdo&preferredVariants=_EM_25700_XYZ_&enabledRules=_EM_43444_XYZ_&disabledRules=_EM_43283_XYZ_&disabledCategories=_EM_43284_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=AR&" + 
                    "mode=ST&" + 
                    "inputLogging=i20eWVjuRXe&" + 
                    "tokenV2=IqJ&" + 
                    "level=8pQ5AzIG2H6WU7&" + 
                    "v=CSnLNZmO&" + 
                    "useragent=_EM_43443_XYZ_&" + 
                    "username=jJHJx9qIntjlOAkD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(532))
                .body("'rules'[0].'ruleId'", containsString("WHITESPACE_RULE"))
                .body("'rules'[0].'description'", containsString("فراغات متكررة (صياغة رديئة)"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("أخطاء مطبعية"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[0].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[0].'minToCheckParagraph'", containsString("0"))
                .body("'rules'[1].'ruleId'", containsString("SENTENCE_WHITESPACE"))
                .body("'rules'[1].'description'", containsString("فراغ منسيّ بين الجمل"))
                .body("'rules'[1].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[1].'categoryName'", containsString("أخطاء مطبعية"))
                .body("'rules'[1].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[1].'minToCheckParagraph'", containsString("0"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("أقواس أو حاضنات أو اقتباس أو ما شابه غير مغلقة"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("علامات الترقيم"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 529 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=tL&" + 
                    "ruleId=4ACgQ4k4&" + 
                    "inputLogging=ZZaLU&" + 
                    "apiKey=lzq2JWQo0ep0&" + 
                    "tokenV2=_EM_43438_XYZ_&" + 
                    "level=_EM_43439_XYZ_&" + 
                    "useragent=_EM_43286_XYZ_&" + 
                    "mode=_EM_43445_XYZ_&" + 
                    "v=8Voy45edc&" + 
                    "text=_EM_43288_XYZ_&" + 
                    "username=_EM_43440_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '4ACgQ4k4' not found for language Tagalog (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 50)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=We+will+berate+you&" + 
                    "language=en&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "preferredVariants=zobrpWxFk&" + 
                    "motherTongue=Qa0VtvtZMlx5Sy&" + 
                    "data=ZZXVvKqZqlGe6nr&" + 
                    "apiKey=_EM_920_XYZ_&" + 
                    "inputLogging=&" + 
                    "enabledOnly=MNBaVlG0&" + 
                    "useragent=XMdOsfHid&" + 
                    "noopLanguages=sJvW0rcIgXQrrWFV&" + 
                    "enabled=_EM_921_XYZ_&" + 
                    "mode=z6mCdFSdJ&" + 
                    "password=_EM_922_XYZ_&" + 
                    "enableTempOffRules=nXwoJwK5F0soKYIS&" + 
                    "preferredLanguages=XczxLvgPEGSO&" + 
                    "disabled=64vI8QBhkzC1l&" + 
                    "preferredvariants=H3_P9zbNO4Ld&" + 
                    "enabledRules=9MVo5Z&" + 
                    "c=439v&" + 
                    "level=_EM_923_XYZ_&" + 
                    "ruleValues=jjrD&" + 
                    "sourceText=_EM_924_XYZ_&" + 
                    "enableHiddenRules=_EM_925_XYZ_&" + 
                    "token=_EM_926_XYZ_&" + 
                    "allowIncompleteResults=_EM_927_XYZ_&" + 
                    "autodetect=zcBQOpexR&" + 
                    "filterDictionaryMatches=4GxZqR2dVBy&" + 
                    "enabledCategories=ZHohw_OeW&" + 
                    "altLanguages=ombEs_c&" + 
                    "v=_EM_928_XYZ_&" + 
                    "textSessionId=_EM_929_XYZ_&" + 
                    "callback=nfvhBwzFkVFs&" + 
                    "disabledCategories=9rg1vFKPZdH&" + 
                    "username=9bbc823x")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/add?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1732_XYZ_")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=MLVPt4h_0R3hu4X&" + 
                    "language=_EM_1729_XYZ_&" + 
                    "disabledRules=_EM_1730_XYZ_&" + 
                    "motherTongue=_EM_1734_XYZ_&" + 
                    "inputLogging=_EM_1735_XYZ_&" + 
                    "apiKey=_EM_1736_XYZ_&" + 
                    "mode=_EM_1743_XYZ_&" + 
                    "password=_EM_1744_XYZ_&" + 
                    "enableTempOffRules=Nd4pYIKF6u5jV&" + 
                    "instanceId=c3c2z&" + 
                    "preferredLanguages=_EM_1745_XYZ_&" + 
                    "disabled=_EM_1746_XYZ_&" + 
                    "enabledRules=_EM_1748_XYZ_&" + 
                    "level=_EM_1750_XYZ_&" + 
                    "ruleValues=Zam1oH1Ww_57&" + 
                    "sourceText=ULMKD0S03yp&" + 
                    "autodetect=_EM_1753_XYZ_&" + 
                    "filterDictionaryMatches=_EM_1754_XYZ_&" + 
                    "v=_EM_1756_XYZ_&" + 
                    "textSessionId=_EM_1758_XYZ_&" + 
                    "username=_EM_1760_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'disabled' but the parameter is now called 'disabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=_EM_669_XYZ_&" + 
                    "language=_EM_670_XYZ_&" + 
                    "preferredVariants=_EM_673_XYZ_&" + 
                    "apiKey=_EM_675_XYZ_&" + 
                    "noopLanguages=_EM_679_XYZ_&" + 
                    "enabled=zdhXqKMFOdMlNW&" + 
                    "mode=_EM_680_XYZ_&" + 
                    "password=_EM_681_XYZ_&" + 
                    "instanceId=_EM_683_XYZ_&" + 
                    "disabled=_EM_685_XYZ_&" + 
                    "enabledRules=_EM_687_XYZ_&" + 
                    "token=p5HV&" + 
                    "altLanguages=_EM_697_XYZ_&" + 
                    "textSessionId=_EM_698_XYZ_&" + 
                    "callback=_EM_699_XYZ_&" + 
                    "disabledCategories=_EM_700_XYZ_&" + 
                    "username=_EM_701_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_5287_XYZ_&" + 
                    "apiKey=_EM_5288_XYZ_&" + 
                    "offset=727&" + 
                    "tokenV2=&" + 
                    "level=_EM_5291_XYZ_&" + 
                    "language=_EM_5293_XYZ_&" + 
                    "mode=_EM_5295_XYZ_&" + 
                    "password=6uVvmR9Y8xz&" + 
                    "text=_EM_5298_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_5287_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_620_XYZ_")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=axfn3UOzEMsfL&" + 
                    "language=_EM_617_XYZ_&" + 
                    "EMextraParam123=_EM_619_XYZ_&" + 
                    "preferredVariants=nEpsrVC&" + 
                    "inputLogging=_EM_622_XYZ_&" + 
                    "apiKey=_EM_623_XYZ_&" + 
                    "tokenV2=1Oy&" + 
                    "useragent=_EM_625_XYZ_&" + 
                    "mode=p6pqGoSD&" + 
                    "password=_EM_628_XYZ_&" + 
                    "preferredLanguages=_EM_631_XYZ_&" + 
                    "c=AccSXRjJotsbLsJg&" + 
                    "level=_EM_634_XYZ_&" + 
                    "sourceText=_EM_636_XYZ_&" + 
                    "autodetect=_EM_639_XYZ_&" + 
                    "filterDictionaryMatches=_EM_640_XYZ_&" + 
                    "enabledCategories=_EM_641_XYZ_&" + 
                    "textSessionId=_EM_643_XYZ_&" + 
                    "username=RGQLP3")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'autodetect' but automatic language detection is now activated with 'language=auto' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=&language=BA6I7KiDWQEc&altLanguages=etUQQMrEfngh&enabledRules=xgXgURrEl&disabledRules=S3Cbeau&disabledCategories=ENXvfMY3ub4N62&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'data' key in JSON requires 'text' or 'annotation' key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=scKqTHv46_R&" + 
                    "language=BA6I7KiDWQEc&" + 
                    "EMextraParam123=42&" + 
                    "preferredVariants=nW8tfBux8x&" + 
                    "inputLogging=_EM_223_XYZ_&" + 
                    "useragent=NTv6GW&" + 
                    "noopLanguages=_EM_226_XYZ_&" + 
                    "enabled=_EM_227_XYZ_&" + 
                    "enableTempOffRules=_EM_229_XYZ_&" + 
                    "preferredLanguages=&" + 
                    "preferredvariants=_EM_231_XYZ_&" + 
                    "ruleValues=_EM_233_XYZ_&" + 
                    "allowIncompleteResults=_EM_235_XYZ_&" + 
                    "filterDictionaryMatches=_EM_237_XYZ_&" + 
                    "v=_EM_238_XYZ_&" + 
                    "altLanguages=etUQQMrEfngh&" + 
                    "textSessionId=_EM_239_XYZ_&" + 
                    "disabledCategories=ENXvfMY3ub4N62")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=rDhPgaQAt5QDjGgH&language=&preferredVariants=WAW&disabledRules=BNUGvA1hH&disabledCategories=Jln4Qx0mdtwiMRnT&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'language' parameter, e.g. 'language=en-US' for American English or 'language=fr' for French"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=rDhPgaQAt5QDjGgH&" + 
                    "language=&" + 
                    "motherTongue=Zj6ef4C2276Uv&" + 
                    "inputLogging=_EM_1931_XYZ_&" + 
                    "apiKey=_EM_1932_XYZ_&" + 
                    "tokenV2=&" + 
                    "useragent=_EM_1934_XYZ_&" + 
                    "enabled=_EM_1936_XYZ_&" + 
                    "password=_EM_1937_XYZ_&" + 
                    "enabledRules=IGermg&" + 
                    "c=_EM_1941_XYZ_&" + 
                    "ruleValues=_EM_1943_XYZ_&" + 
                    "sourceText=_EM_1944_XYZ_&" + 
                    "v=_EM_1949_XYZ_&" + 
                    "altLanguages=YXgMo&" + 
                    "disabledCategories=Jln4Qx0mdtwiMRnT&" + 
                    "username=_EM_1952_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'language' parameter, e.g. 'language=en-US' for American English or 'language=fr' for French"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_322_XYZ_")
                .get(baseUrlOfSut + "/v2/configinfo?language=_EM_321_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_321_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=_EM_49155_XYZ_&" + 
                    "language=_EM_49156_XYZ_&" + 
                    "disabledRules=&" + 
                    "motherTongue=_EM_49157_XYZ_&" + 
                    "inputLogging=N6xnm7j2&" + 
                    "apiKey=uZyI1Ws0&" + 
                    "tokenV2=24d&" + 
                    "enabledOnly=X7U69wartX&" + 
                    "useragent=_EM_49158_XYZ_&" + 
                    "mode=_EM_49159_XYZ_&" + 
                    "password=0h0OZeV86j7x8oi6&" + 
                    "preferredLanguages=hQhZCVbzG&" + 
                    "level=0k4AqCMGlLro&" + 
                    "ruleValues=1IkqV9bi0qyvGrZo&" + 
                    "allowIncompleteResults=_EM_49164_XYZ_&" + 
                    "enabledCategories=FtuXxJun4Zm&" + 
                    "v=QRKrgb&" + 
                    "altLanguages=n9DBuGk43&" + 
                    "textSessionId=_EM_49166_XYZ_&" + 
                    "callback=_EM_49167_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey was set, but username was not: uZyI1Ws0"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=9j&preferredVariants=kcA9u8avqe&enabledRules=I&enabledCategories=wewBjlDz8AsJf7U&disabledCategories=")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=gQ7gMfoZ&" + 
                    "language=9j&" + 
                    "disabledRules=99AGBCd8&" + 
                    "motherTongue=E8MgGi&" + 
                    "apiKey=7mq&" + 
                    "noopLanguages=_EM_2847_XYZ_&" + 
                    "password=_EM_2849_XYZ_&" + 
                    "instanceId=_EM_2851_XYZ_&" + 
                    "preferredLanguages=_SdoZaMWyubY6F3&" + 
                    "preferredvariants=_EM_2853_XYZ_&" + 
                    "c=_EM_2854_XYZ_&" + 
                    "sourceText=_EM_2857_XYZ_&" + 
                    "token=_EM_2859_XYZ_&" + 
                    "allowIncompleteResults=_EM_2860_XYZ_&" + 
                    "autodetect=G7z1Yyj42s&" + 
                    "filterDictionaryMatches=_EM_2861_XYZ_&" + 
                    "enabledCategories=wewBjlDz8AsJf7U&" + 
                    "v=_EM_2862_XYZ_&" + 
                    "callback=_EM_2863_XYZ_&" + 
                    "username=_EM_2864_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredvariants' but the parameter is now called 'preferredVariants' (uppercase 'V') in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=_EM_0_XYZ_&" + 
                    "ruleId=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_0_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=5jE&language=_EM_3865_XYZ_&altLanguages=_EM_3866_XYZ_&motherTongue=_EM_3867_XYZ_&preferredVariants=_EM_3868_XYZ_&enabledRules=_EM_3869_XYZ_&disabledCategories=_EM_3871_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?EMextraParam123=_EM_3872_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=-x-&" + 
                    "ruleId=NAG-_SS&" + 
                    "EMextraParam123=_EM_5785_XYZ_&" + 
                    "inputLogging=_EM_8691_XYZ_&" + 
                    "apiKey=_EM_8692_XYZ_&" + 
                    "tokenV2=_EM_5788_XYZ_&" + 
                    "level=1I%40OgZ%3FCETv&" + 
                    "useragent=_EM_5790_XYZ_&" + 
                    "language=_EM_8689_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=_EM_8690_XYZ_&" + 
                    "v=_EM_8693_XYZ_&" + 
                    "text=_EM_8694_XYZ_&" + 
                    "username=_EM_5794_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '-x-' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=egr2rUz9&language=auto&altLanguages=_EM_19396_XYZ_&motherTongue=_EM_19387_XYZ_J&preferredVariants=xk1K8i038E6dPJ&enabledRules=_EM_19398_XYZ_&disabledRules=_EM_19399_XYZ_&enabledCategories=G6ZTDqBQqprRjz4&disabledCategories=XGaaANLFapkEeW_9&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Invalid format for 'preferredVariants', expected a dash as in 'en-GB': 'xk1K8i038E6dPJ'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=egj3rUz9&language=auto&altLanguages=_EM_44478_XYZ_&motherTongue=dE-%5CE%28d%7CD%29%28e%7CE%29%5CQ-%5CE%28x%7CX%29%5CQ-%5CE%28s%7CS%29%28i%7CI%29%28m%7CM%29%28p%7CP%29%28l%7CL%29%28e%7CE%29%5CQ-LANGuAge&enabledRules=dL2Zz0IY&disabledRules=_EM_44479_XYZ_&enabledCategories=_EM_44480_XYZ_&disabledCategories=XGaa9NUFapUEfWU9N&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'dE-\\E(d|D)(e|E)\\Q-\\E(x|X)\\Q-\\E(s|S)(i|I)(m|M)(p|P)(l|L)(e|E)\\Q-LANGuAge' isn't a valid language code"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=egj3rUz9&language=auto&altLanguages=6elVH&motherTongue=Pl&enabledRules=dL2Zz0JY&disabledRules=_EM_48306_XYZ_&enabledCategories=_EM_44480_XYZ_&disabledCategories=SB9UBD&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '6elVH' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=&language=EJbx&motherTongue=8ZO&disabledCategories=UAK81WfZCa")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'EJbx' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=&" + 
                    "language=EJbx&" + 
                    "motherTongue=8ZO&" + 
                    "inputLogging=uN1o6md&" + 
                    "apiKey=_qz5&" + 
                    "data=nAOCjfXoXBuUIJ&" + 
                    "tokenV2=IjwyYux6wTvQ_M&" + 
                    "useragent=_EM_39735_XYZ_&" + 
                    "enabled=_EM_39737_XYZ_&" + 
                    "mode=VxmiViTh3Kg&" + 
                    "password=_EM_39738_XYZ_&" + 
                    "disabled=_EM_39741_XYZ_&" + 
                    "c=_EM_39742_XYZ_&" + 
                    "level=sw0X2EufpIdsa&" + 
                    "ruleValues=_EM_39743_XYZ_&" + 
                    "enableHiddenRules=_EM_39744_XYZ_&" + 
                    "allowIncompleteResults=oIWI6RkFrFUTD&" + 
                    "enabledCategories=&" + 
                    "v=_EM_39747_XYZ_&" + 
                    "disabledCategories=UAK81WfZCa")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_35465_XYZ_&username=_EM_35466_XYZ_&apiKey=")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_35467_XYZ_&username=Ol&apiKey=_EM_35468_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "tokenV2=_EM_35470_XYZ_&" + 
                    "mode=_EM_35473_XYZ_&" + 
                    "instanceId=_EM_35475_XYZ_&" + 
                    "v=_EM_35476_XYZ_&" + 
                    "text=_EM_35477_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'Ol' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=T4B&language=_EM_35479_XYZ_&motherTongue=tUHegVGzHxf&disabledRules=eZhz3fJsqDDaKU&enabledCategories=_EM_35482_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_35479_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5786_XYZ_")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=Tl&" + 
                    "ruleId=_EM_5795_XYZ_&" + 
                    "EMextraParam123=_EM_5785_XYZ_&" + 
                    "inputLogging=no&" + 
                    "apiKey=_EM_5799_XYZ_&" + 
                    "tokenV2=_EM_5788_XYZ_&" + 
                    "level=1IBOgZ%3FCETv&" + 
                    "useragent=_EM_5800_XYZ_&" + 
                    "language=_EM_5801_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=_EM_5802_XYZ_&" + 
                    "v=_EM_5796_XYZ_&" + 
                    "text=h&" + 
                    "username=_EM_5798_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_5795_XYZ_' not found for language Tagalog (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 50)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=tL&" + 
                    "ruleId=_EM_5795_XYZ_&" + 
                    "EMextraParam123=_EM_5785_XYZ_&" + 
                    "inputLogging=Vvm1EP7BrDrGXlh6&" + 
                    "apiKey=ILDkktqVFVPver1p&" + 
                    "tokenV2=_EM_5788_XYZ_&" + 
                    "level=1IBOgZ%3FCETv&" + 
                    "useragent=_EM_5790_XYZ_&" + 
                    "language=RpK6YBtF&" + 
                    "mode=all&" + 
                    "instanceId=AflozdHQyHek_R2o&" + 
                    "v=_EM_5796_XYZ_&" + 
                    "text=_EM_5797_XYZ_&" + 
                    "username=_EM_5794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_5795_XYZ_' not found for language Tagalog (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 50)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=Uk&" + 
                    "ruleId=RwAvqY4MvRsuro&" + 
                    "inputLogging=_EM_725_XYZ_&" + 
                    "apiKey=_EM_726_XYZ_&" + 
                    "tokenV2=_EM_13474_XYZ_&" + 
                    "level=default&" + 
                    "useragent=_EM_13476_XYZ_&" + 
                    "language=_EM_13477_XYZ_&" + 
                    "mode=textLevelOnly&" + 
                    "instanceId=cSbgGUFOu&" + 
                    "v=yV1L&" + 
                    "text=EO_K1kz9QDn0&" + 
                    "username=92cNk2FrG30b6Q")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'RwAvqY4MvRsuro' not found for language Ukrainian (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 913)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
