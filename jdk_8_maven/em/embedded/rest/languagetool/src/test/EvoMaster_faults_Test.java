import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-25T22:11:15.655+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 16 tests
 * <br>
 * Covered targets: 2469
 * <br>
 * Used time: 3h 15m 6s
 * <br>
 * Needed budget for current results: 86%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_133_XYZ_&" + 
                    "apiKey=foo&" + 
                    "password=ViiSTb&" + 
                    "token=AQss")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_677_XYZ_&username=_EM_678_XYZ_&apiKey=fom")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_679_XYZ_&" + 
                    "tokenV2=_EM_53_XYZ_&" + 
                    "level=_EM_50_XYZ_&" + 
                    "useragent=_EM_54_XYZ_&" + 
                    "language=W1mO4B&" + 
                    "token=MwZob&" + 
                    "mode=textLevelOnly&" + 
                    "password=_EM_56_XYZ_&" + 
                    "instanceId=j0ax&" + 
                    "v=_EM_680_XYZ_&" + 
                    "text=_EM_57_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_383_sendError
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_65_XYZ_&username=foo&apiKey=fom")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=TeZoaqTs8YWv3r&" + 
                    "tokenV2=V_xvcFR5Br9b7l&" + 
                    "level=qVsRMmULMOq&" + 
                    "useragent=_EM_70_XYZ_&" + 
                    "language=_EM_62_XYZ_&" + 
                    "token=Z66eyNB6&" + 
                    "mode=textLevelOnly&" + 
                    "password=&" + 
                    "instanceId=j0ax&" + 
                    "v=_EM_69_XYZ_&" + 
                    "text=_EM_71_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=hoo")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_813_XYZ_&" + 
                    "tokenV2=_EM_821_XYZ_&" + 
                    "level=picky&" + 
                    "useragent=_EM_822_XYZ_&" + 
                    "language=x_Tb&" + 
                    "token=_EM_823_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "password=IFXLn2703FHG&" + 
                    "instanceId=_EM_816_XYZ_&" + 
                    "v=_EM_817_XYZ_&" + 
                    "text=_EM_824_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_415_XYZ_&username=_EM_641_XYZ_&apiKey=_EM_416_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_634_XYZ_&" + 
                    "tokenV2=_EM_635_XYZ_&" + 
                    "level=default&" + 
                    "useragent=_EM_636_XYZ_&" + 
                    "language=_EM_637_XYZ_&" + 
                    "token=_EM_638_XYZ_&" + 
                    "mode=_EM_642_XYZ_&" + 
                    "password=_EM_639_XYZ_&" + 
                    "instanceId=_EM_640_XYZ_&" + 
                    "v=xCySypB&" + 
                    "text=_EM_643_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_259_XYZ_&username=_EM_265_XYZ_&apiKey=_EM_266_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=no&" + 
                    "tokenV2=_EM_267_XYZ_&" + 
                    "level=_EM_261_XYZ_&" + 
                    "useragent=_EM_268_XYZ_&" + 
                    "language=_EM_269_XYZ_&" + 
                    "token=d&" + 
                    "mode=_EM_263_XYZ_&" + 
                    "password=_EM_270_XYZ_&" + 
                    "instanceId=_EM_271_XYZ_&" + 
                    "v=_EM_264_XYZ_&" + 
                    "text=ICij5A")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=fop")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=&" + 
                    "tokenV2=_EM_846_XYZ_&" + 
                    "level=_EM_847_XYZ_&" + 
                    "useragent=&" + 
                    "language=uKoYdS&" + 
                    "token=9gD1aBaIy0jRwxf&" + 
                    "mode=C&" + 
                    "password=1VTJjcmtS&" + 
                    "instanceId=_EM_8U8_XYZ_&" + 
                    "v=tggsVqSRlMytkp9z&" + 
                    "text=b9hDTtMEbGU")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=c2m11bNQRtp&username=&apiKey=_EM_1935_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=mUN3_AkqKLI&username=_EM_756_XYZ_&apiKey=8T7mO")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "language=gY&" + 
                    "token=5l&" + 
                    "mode=_EM_760_XYZ_&" + 
                    "password=%7Co&" + 
                    "instanceId=_EM_1940_XYZ_&" + 
                    "v=X4iwUgxlgB&" + 
                    "text=")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=_EM_7349_XYZ_&altLanguages=h5EoCF&motherTongue=L1Zq7AmO1MJi&preferredVariants=XF_ZFhtsR&enabledCategories=jz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_7352_XYZ_&language=GZ_SWei1bLlIg5Lj&altLanguages=YwdrpqZe_qRW&preferredVariants=_EM_7353_XYZ_&enabledRules=_EM_7354_XYZ_&enabledCategories=_EM_7356_XYZ_&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=EY4&" + 
                    "inputLogging=aA0a6Y9QyfS&" + 
                    "apiKey=_EM_7358_XYZ_&" + 
                    "tokenV2=DsSLF2f5h&" + 
                    "v=_EM_7360_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/LanguageToolHttpHandler_382_sendError
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_7352_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_7352_XYZ_\"; line: 1, column: 14]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=4v9WGWa3jv68YRTc")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=4v9WGWa3jv68YRTc")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=Zgj99UZ&username=x&apiKey=yrF99bICq")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'x' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=SGiuOjt1c_dn&username=&apiKey=UU4Vu8OkJGMvdV4")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_6814_XYZ_&username=_EM_6815_XYZ_&apiKey=QK")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=DoMT&" + 
                    "tokenV2=_EM_6816_XYZ_&" + 
                    "useragent=_EM_6817_XYZ_&" + 
                    "language=ApzzjcRSm0WO6v&" + 
                    "token=NQBVBP4Ltk3A8&" + 
                    "password=N7KtQncmkQ&" + 
                    "instanceId=_EM_6819_XYZ_&" + 
                    "v=RFL9_W76glyI9")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_44Pgk05psjtX8p&language=WfwpxwkxxT&preferredVariants=pZyK6Qz&enabledRules=FyM1kX3Bnemp&disabledRules=fw8KjLcvjA7nB8vY")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(500) // org/languagetool/server/ApiV2_155_handleCheckRequest
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_44Pgk05psjtX8p': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_44Pgk05psjtX8p\"; line: 1, column: 16]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Ryc3hi33z&" + 
                    "language=WfwpxwkxxT&" + 
                    "preferredVariants=pZyK6Qz&" + 
                    "tokenV2=_EM_274_XYZ_&" + 
                    "enabledOnly=_EM_275_XYZ_&" + 
                    "noopLanguages=efM4T&" + 
                    "enabled=_EM_277_XYZ_&" + 
                    "mode=_EM_278_XYZ_&" + 
                    "password=_EM_279_XYZ_&" + 
                    "enableTempOffRules=_EM_280_XYZ_&" + 
                    "instanceId=dr4NFR1PSm&" + 
                    "preferredLanguages=_EM_281_XYZ_&" + 
                    "enabledRules=FyM1kX3Bnemp&" + 
                    "level=_EM_283_XYZ_&" + 
                    "ruleValues=_EM_284_XYZ_&" + 
                    "token=&" + 
                    "allowIncompleteResults=zXrYEYpi&" + 
                    "altLanguages=9p75F&" + 
                    "v=vmN5UxTUt&" + 
                    "callback=_EM_288_XYZ_&" + 
                    "disabledCategories=NF4LvM")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=nqk7_zUr_Ih9vE&username=_EM_1016_XYZ_&apiKey=_EM_1017_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1016_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1018_XYZ_&username=_EM_1019_XYZ_&apiKey=FRIGrr38wvv2lEH")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "level=_EM_1021_XYZ_&" + 
                    "useragent=&" + 
                    "language=_EM_1022_XYZ_&" + 
                    "mode=_EM_1023_XYZ_&" + 
                    "password=&" + 
                    "text=_EM_1026_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1019_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=rNzSC&username=_EM_1027_XYZ_&apiKey=_EM_1028_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1027_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1029_XYZ_&username=_EM_1030_XYZ_&apiKey=_EM_1031_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_1032_XYZ_&" + 
                    "language=_EM_1035_XYZ_&" + 
                    "token=_EM_1036_XYZ_&" + 
                    "instanceId=_EM_1038_XYZ_&" + 
                    "v=_EM_1039_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=kRq5ouw2r&username=_EM_7653_XYZ_&apiKey=_EM_7654_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_7653_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_7655_XYZ_&username=wbtClHKMOMAsR33&apiKey=_EM_7656_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "tokenV2=vLeWr2nx9ru&" + 
                    "language=fllrbvL59O&" + 
                    "token=_EM_7659_XYZ_&" + 
                    "mode=_EM_7660_XYZ_&" + 
                    "instanceId=wT9h0ixtu9qE&" + 
                    "v=_EM_7662_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=MOSuf3cSwtbH&data=Kbg6ZzEg84c&language=bONMm3M3CRqJtI0R&altLanguages=VV3VyptsmnNDoiWz&motherTongue=lyEsznBtk&disabledRules=_SR4mG4P&disabledCategories=Dm5Ws2FfT&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=MOSuf3cSwtbH&" + 
                    "language=bONMm3M3CRqJtI0R&" + 
                    "disabledRules=_SR4mG4P&" + 
                    "motherTongue=lyEsznBtk&" + 
                    "apiKey=_EM_7663_XYZ_&" + 
                    "inputLogging=ZDRJ2cGf&" + 
                    "tokenV2=HP73pN3KUFG&" + 
                    "noopLanguages=KVGiIL&" + 
                    "password=_EM_7666_XYZ_&" + 
                    "preferredLanguages=VKKBwVtZo6FO&" + 
                    "ruleValues=_EM_7670_XYZ_&" + 
                    "enableHiddenRules=LVqs5cNEOzAkXtrK&" + 
                    "token=10thzKX_&" + 
                    "enabledCategories=lC10lDe&" + 
                    "callback=_EM_7677_XYZ_&" + 
                    "disabledCategories=Dm5Ws2FfT")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=_EM_7679_XYZ_")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=hHjSSZp6QnBVg4R&" + 
                    "apiKey=Xk&" + 
                    "offset=360&" + 
                    "password=_EM_7683_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'hHjSSZp6QnBVg4R' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_10002_XYZ_&language=_EM_10003_XYZ_&altLanguages=_EM_10004_XYZ_&motherTongue=_EM_10005_XYZ_&preferredVariants=IKtkf2H&disabledRules=_EM_10006_XYZ_&disabledCategories=_EM_10007_XYZ_")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=9eAxa&language=_EM_10009_XYZ_&altLanguages=R02I&motherTongue=JFD9TUdf05bTHwP&disabledRules=_EM_10012_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "inputLogging=_EM_10016_XYZ_&" + 
                    "tokenV2=_EM_10018_XYZ_&" + 
                    "level=_EM_10019_XYZ_&" + 
                    "useragent=_EM_10021_XYZ_&" + 
                    "username=_EM_10022_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unexpected character ('A' (code 65)) in numeric value: Exponent indicator not followed by a digit\n at [Source: (String)\"9eAxa\"; line: 1, column: 3]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=7&username=hy&apiKey=_EM_10023_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'hy' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=jVCv8P1f&username=nNOxjw&apiKey=")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=_EM_10024_XYZ_&" + 
                    "tokenV2=_EM_10025_XYZ_&" + 
                    "token=_EM_10027_XYZ_&" + 
                    "mode=FRllEGpUXaH47cn&" + 
                    "password=_EM_10028_XYZ_&" + 
                    "instanceId=Lka7K&" + 
                    "v=_EM_10029_XYZ_")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_173_getMode
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_1291_XYZ_&language=vGs4Haj")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'vGs4Haj' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_1300_XYZ_&language=gWgSZ7Kv9wZmTCi&altLanguages=_EM_1301_XYZ_&enabledRules=zvaQ7pKQOpdmFQ&enabledCategories=hqkbcjxfGkXR1w3")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "instanceId=_EM_1307_XYZ_&" + 
                    "inputLogging=_EM_1308_XYZ_&" + 
                    "apiKey=_EM_1309_XYZ_&" + 
                    "tokenV2=_EM_1310_XYZ_&" + 
                    "level=_EM_1311_XYZ_&" + 
                    "v=meYHJxT437QB2O")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey was set, but username was not: _EM_1309_XYZ_"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1313_XYZ_&username=_EM_1314_XYZ_&apiKey=_EM_1315_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1314_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1316_XYZ_&username=_EM_1317_XYZ_&apiKey=_EM_1318_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=_EM_1319_XYZ_&" + 
                    "tokenV2=_EM_1320_XYZ_&" + 
                    "useragent=_EM_1322_XYZ_&" + 
                    "language=r&" + 
                    "token=01EOOI")
                .then()
                .statusCode(500) // org/languagetool/server/UserLimits_71_getLimitsFromToken
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=zZQIniqXtzZ5&" + 
                    "mode=textLevelOnly&" + 
                    "instanceId=_EM_8737_XYZ_d&" + 
                    "inputLogging=_EM_7303_XYZ_&" + 
                    "apiKey=_EM_7304_XYZ_&" + 
                    "tokenV2=7muO59YxB&" + 
                    "level=_EM_7306_XYZ_&" + 
                    "v=bgP8DI6z&" + 
                    "useragent=Y&" + 
                    "text=tcmNhrtKfkkbC&" + 
                    "username=%3A9vb3eE2LLG4QFt5")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'zZQIniqXtzZ5' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=tDa9Tt5XMx_&username=j1EmGalHMGqUCz&apiKey=1zU")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=P2Cu92I9Y&" + 
                    "tokenV2=9y4e2cIhtXzodmk_&" + 
                    "level=8&" + 
                    "useragent=RZvFfawnR&" + 
                    "language=p2HpRs9qG&" + 
                    "token=OMo9_J9Z_&" + 
                    "mode=gFyCnDcRxhjI&" + 
                    "password=69&" + 
                    "instanceId=oZBx7ySg&" + 
                    "v=wtRcLvr&" + 
                    "text=SJRdgT")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=_EM_7317_XYZ_&" + 
                    "mode=_EM_7319_XYZ_&" + 
                    "inputLogging=yHCd&" + 
                    "apiKey=&" + 
                    "tokenV2=_EM_8739_XYZ_&" + 
                    "level=_EM_8740_XYZ_&" + 
                    "v=gLBaRFs&" + 
                    "useragent=fjOIL3SX505")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_7317_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=IYSyxgDu")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=Da&" + 
                    "instanceId=ablE&" + 
                    "inputLogging=_EM_8741_XYZ_&" + 
                    "apiKey=8UaJ4DGAwQVbz0R&" + 
                    "tokenV2=_EM_7325_XYZ_&" + 
                    "level=_EM_7326_XYZ_&" + 
                    "v=3lC&" + 
                    "text=_EM_7329_XYZ_&" + 
                    "username=_EM_7330_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'premium'", equalTo(false))
                .body("'parameter'.'maxTextLength'", numberMatches(2.147483647E9))
                .body("'rules'.size()", equalTo(84))
                .body("'rules'[0].'ruleId'", containsString("COMMA_PARENTHESIS_WHITESPACE"))
                .body("'rules'[0].'description'", containsString("Mellemrum før komma og før/efter parenteser"))
                .body("'rules'[0].'categoryId'", containsString("TYPOGRAPHY"))
                .body("'rules'[0].'categoryName'", containsString("Typografi"))
                .body("'rules'[0].'locQualityIssueType'", containsString("whitespace"))
                .body("'rules'[1].'ruleId'", containsString("DOUBLE_PUNCTUATION"))
                .body("'rules'[1].'description'", containsString("To på hinanden følgende punktummer eller kommaer"))
                .body("'rules'[1].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[1].'categoryName'", containsString("Tegnsætning"))
                .body("'rules'[1].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'ruleId'", containsString("UNPAIRED_BRACKETS"))
                .body("'rules'[2].'description'", containsString("Ikke parret parenteser, tuborgklammer, citationstegn og lignende symboler"))
                .body("'rules'[2].'categoryId'", containsString("PUNCTUATION"))
                .body("'rules'[2].'categoryName'", containsString("Tegnsætning"))
                .body("'rules'[2].'locQualityIssueType'", containsString("typographical"))
                .body("'rules'[2].'isTextLevelRule'", containsString("yes"))
                .body("'rules'[2].'minToCheckParagraph'", containsString("-1"))
                ; // Skipping assertions on the remaining 81 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=mGsHU45wnbM&" + 
                    "ruleId=_EM_8735_XYZ_&" + 
                    "inputLogging=YyzZfqX1&" + 
                    "apiKey=_EM_7333_XYZ_&" + 
                    "tokenV2=_EM_7334_XYZ_&" + 
                    "level=_EM_8736_XYZ_&" + 
                    "language=_EM_7337_XYZ_&" + 
                    "mode=1cdSSxQFvwgR1_&" + 
                    "instanceId=47uCaShbRr&" + 
                    "v=&" + 
                    "text=chHBRR3ZmE3677F&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'mGsHU45wnbM' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=_EM_7338_XYZ_&" + 
                    "ruleId=_EM_8742_XYZ_&" + 
                    "apiKey=_EM_7342_XYZ_&" + 
                    "tokenV2=_EM_8738_XYZ_&" + 
                    "useragent=Uo47X6Twf_&" + 
                    "language=_EM_7344_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "instanceId=_EM_7346_XYZ_&" + 
                    "username=AzYfdh90KoWSw")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_7338_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_8.extract().statusCode()));
    }


}
