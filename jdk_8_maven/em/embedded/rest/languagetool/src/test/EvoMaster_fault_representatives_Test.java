import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-25T22:11:15.725+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 14288
 * <br>
 * Used time: 3h 15m 6s
 * <br>
 * Needed budget for current results: 86%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=fop")
                .post(baseUrlOfSut + "/v2/words/delete?" + 
                    "inputLogging=&" + 
                    "tokenV2=_EM_846_XYZ_&" + 
                    "level=_EM_847_XYZ_&" + 
                    "useragent=&" + 
                    "language=uKoYdS&" + 
                    "token=9gD1aBaIy0jRwxf&" + 
                    "mode=C&" + 
                    "password=1VTJjcmtS&" + 
                    "instanceId=_EM_8U8_XYZ_&" + 
                    "v=tggsVqSRlMytkp9z&" + 
                    "text=b9hDTtMEbGU")
                .then()
                .statusCode(500) // org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: You specified a 'token' parameter but this server doesn't accept tokens"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=Hier+steht+Schockl&" + 
                        "language=de-DE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Das+ist+Meinname.&" + 
                    "language=de-DE&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("German (Germany)"))
                .body("'language'.'code'", containsString("de-DE"))
                .body("'language'.'detectedLanguage'.'name'", containsString("German (Germany)"))
                .body("'language'.'detectedLanguage'.'code'", containsString("de-DE"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.99999887))
                .body("'matches'.size()", equalTo(1))
                .body("'matches'[0].'message'", containsString("Möglicher Tippfehler gefunden."))
                .body("'matches'[0].'shortMessage'", containsString("Rechtschreibfehler"))
                .body("'matches'[0].'replacements'.size()", equalTo(10))
                .body("'matches'[0].'replacements'[0].'value'", containsString("Mein Name"))
                .body("'matches'[0].'replacements'[1].'value'", containsString("Einsame"))
                .body("'matches'[0].'replacements'[2].'value'", containsString("Beiname"))
                // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
                .body("'matches'[0].'offset'", numberMatches(8.0))
                .body("'matches'[0].'length'", numberMatches(8.0))
                .body("'matches'[0].'context'.'text'", containsString("Das ist Meinname."))
                .body("'matches'[0].'context'.'offset'", numberMatches(8.0))
                .body("'matches'[0].'context'.'length'", numberMatches(8.0))
                .body("'matches'[0].'sentence'", containsString("Das ist Meinname."))
                .body("'matches'[0].'type'.'typeName'", containsString("UnknownWord"))
                .body("'matches'[0].'rule'.'description'", containsString("Möglicher Rechtschreibfehler"))
                .body("'matches'[0].'rule'.'issueType'", containsString("misspelling"))
                .body("'matches'[0].'rule'.'category'.'name'", containsString("Mögliche Tippfehler"))
                .body("'matches'[0].'ignoreForIncompleteSentence'", equalTo(false))
                .body("'matches'[0].'contextForSureMatch'", numberMatches(0.0));
        
        expectationHandler.expect(ems);
    }


}
