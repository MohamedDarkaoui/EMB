import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-25T22:11:15.716+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 24 tests
 * <br>
 * Covered targets: 10871
 * <br>
 * Used time: 3h 15m 6s
 * <br>
 * Needed budget for current results: 86%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.languagetool.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/v2/check?" + 
                        "text=Hier+steht+Schockl&" + 
                        "language=de-DE&" + 
                        "EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=SIlKN1D5Ji1")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=pRbyJYgLqWrIOI&language=g4lmalEGwzPSsq&altLanguages=&motherTongue=7M&preferredVariants=Ll3&enabledRules=oH4&disabledRules=KiidtJrV&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=pRbyJYgLqWrIOI&" + 
                    "language=g4lmalEGwzPSsq&" + 
                    "disabledRules=KiidtJrV&" + 
                    "preferredVariants=Ll3&" + 
                    "motherTongue=7M&" + 
                    "inputLogging=_EM_336_XYZ_&" + 
                    "tokenV2=_EM_337_XYZ_&" + 
                    "password=_EM_342_XYZ_&" + 
                    "enableTempOffRules=_EM_343_XYZ_&" + 
                    "preferredLanguages=_EM_345_XYZ_&" + 
                    "disabled=VZ9iqktzNC&" + 
                    "preferredvariants=_EM_346_XYZ_&" + 
                    "enabledRules=oH4&" + 
                    "level=_EM_347_XYZ_&" + 
                    "ruleValues=_EM_348_XYZ_&" + 
                    "enableHiddenRules=_EM_350_XYZ_&" + 
                    "token=_EM_351_XYZ_&" + 
                    "allowIncompleteResults=Guf0H0WPX_0lPypG&" + 
                    "autodetect=ZxgxcC&" + 
                    "filterDictionaryMatches=_EM_352_XYZ_&" + 
                    "enabledCategories=_kvrfdmn&" + 
                    "altLanguages=&" + 
                    "callback=_EM_355_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'disabled' but the parameter is now called 'disabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=u5rp8YWD")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=u5rp8YWD")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_1590_XYZ_&username=_EM_1591_XYZ_&apiKey=_EM_1592_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_1591_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=gyGMdY&altLanguages=r6OULpqI__FL&preferredVariants=8XOix67kYhurgb&enabledCategories=vciPVbBLH85B&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=B6deyo&" + 
                    "language=gyGMdY&" + 
                    "disabledRules=zfASbOnkBhp&" + 
                    "useragent=alO5&" + 
                    "noopLanguages=_EM_1597_XYZ_&" + 
                    "mode=_EM_1599_XYZ_&" + 
                    "password=_EM_1600_XYZ_&" + 
                    "enabledRules=QX6Xs2XDMysE&" + 
                    "ruleValues=1XfNdXYO&" + 
                    "sourceText=_EM_1605_XYZ_&" + 
                    "allowIncompleteResults=_EM_1608_XYZ_&" + 
                    "altLanguages=r6OULpqI__FL&" + 
                    "v=_EM_1609_XYZ_&" + 
                    "callback=t&" + 
                    "disabledCategories=qseW8Zs65")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: password was set, but username was not"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/maxtextlength")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2147483647"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_8084_XYZ_&language=&motherTongue=pse&enabledRules=_EM_8088_XYZ_&disabledRules=_EM_8089_XYZ_&enabledCategories=EeNpq3kpvdyGnGk")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'language' parameter, e.g. 'language=en-US' for American English or 'language=fr' for French"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=BR2pWiS9t714O&data=_EM_8090_XYZ_&language=_EM_8091_XYZ_&enabledRules=_EM_8093_XYZ_&disabledRules=_EM_8094_XYZ_&enabledCategories=_EM_8095_XYZ_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_8097_XYZ_&" + 
                    "inputLogging=_EM_8098_XYZ_&" + 
                    "tokenV2=_EM_8099_XYZ_&" + 
                    "level=b5ozG&" + 
                    "useragent=_EM_8100_XYZ_&" + 
                    "username=_EM_8101_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_8102_XYZ_&username=_EM_8103_XYZ_&apiKey=EYH")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_8103_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_8104_XYZ_&username=9FeW8m6k&apiKey=k_tX4fCgde")
                .post(baseUrlOfSut + "/v2/words/add")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '9FeW8m6k' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_8105_XYZ_&username=_EM_8106_XYZ_&apiKey=_EM_8107_XYZ_")
                .post(baseUrlOfSut + "/v2/words/add?" + 
                    "inputLogging=PZhNLueXmc29ez&" + 
                    "level=dFZM03oIXhQy5&" + 
                    "useragent=_EM_8109_XYZ_&" + 
                    "mode=YtK8ZqX&" + 
                    "password=xgb7Qi4X&" + 
                    "text=_EM_8112_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_8106_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=5z")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=5z")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=7FKZ1QuK&" + 
                    "apiKey=kaJG&" + 
                    "username=MH9Sm9_V")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '7FKZ1QuK' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=A&language=ib8kSU3LR5uQJb&altLanguages=_EM_10938_XYZ_&enabledRules=_EM_10940_XYZ_&disabledRules=tXOp74W3k5x")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'ib8kSU3LR5uQJb' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_10942_XYZ_&data=l5wvmpd&language=_EM_10943_XYZ_&altLanguages=_EM_10944_XYZ_&motherTongue=m3n3AtivSQOI9K&enabledCategories=_EM_10946_XYZ_&disabledCategories=TIp4OZknAE&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "tokenV2=_EM_10950_XYZ_&" + 
                    "level=2w3Tq3tY4UL&" + 
                    "v=e3G&" + 
                    "useragent=QLm4K")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=WuzbaTC")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("message=WuzbaTC")
                .post(baseUrlOfSut + "/v2/log")
                .then()
                .statusCode(200)
                .assertThat()
                .body(containsString("OK"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=DYi7V53e3uwNVvU")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=El&data=IUljQT6aUnHq&language=DYi7V53e3uwNVvU&motherTongue=8&preferredVariants=xrg&disabledCategories=LrEf6OitSxe9X")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=hOa&" + 
                    "language=es&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "preferredVariants=_EM_367_XYZ_&" + 
                    "motherTongue=_EM_358_XYZ_&" + 
                    "data=hw4SKigIBt2caT&" + 
                    "apiKey=_EM_359_XYZ_&" + 
                    "inputLogging=W&" + 
                    "enabledOnly=_EM_360_XYZ_&" + 
                    "useragent=Bl1BdzssZQN&" + 
                    "noopLanguages=_EM_514_XYZ_&" + 
                    "enabled=_EM_515_XYZ_&" + 
                    "mode=all&" + 
                    "password=ODKXSEPPrnCg%2CwB&" + 
                    "enableTempOffRules=u2aPJ%3FCxx&" + 
                    "preferredLanguages=uhefyNEbYzfiSiAc&" + 
                    "disabled=W62b465Ma&" + 
                    "preferredvariants=N%5D99h&" + 
                    "enabledRules=XjOxAmr3_oDRDPl&" + 
                    "c=_EM_369_XYZ_&" + 
                    "level=AdX7&" + 
                    "ruleValues=_EM_371_XYZ_&" + 
                    "sourceText=_EM_516_XYZ_&" + 
                    "enableHiddenRules=pv&" + 
                    "token=_EM_372_XYZ_&" + 
                    "allowIncompleteResults=&" + 
                    "autodetect=_EM_364_XYZ_&" + 
                    "filterDictionaryMatches=DsP8R&" + 
                    "enabledCategories=_EM_365_XYZ_&" + 
                    "altLanguages=_EM_517_XYZ_&" + 
                    "v=tDsEyb&" + 
                    "textSessionId=_EM_518_XYZ_&" + 
                    "callback=_EM_373_XYZ_&" + 
                    "disabledCategories=_EM_374_XYZ_&" + 
                    "username=bjEMWQ")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?" + 
                    "language=&" + 
                    "mode=_EM_9057_XYZ_&" + 
                    "instanceId=_EM_9058_XYZ_&" + 
                    "inputLogging=DqgwFF4x4&" + 
                    "apiKey=_EM_9059_XYZ_&" + 
                    "tokenV2=&" + 
                    "level=_EM_9060_XYZ_&" + 
                    "v=e&" + 
                    "useragent=nWhO3y1u6FvGjcSd&" + 
                    "username=NVAHFsQw0JDKb")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: langCode cannot be empty or whitespace only"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/words?" + 
                    "username=_EM_14_XYZ_&" + 
                    "apiKey=_EM_15_XYZ_&" + 
                    "offset=369")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_14_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=yoMOuPM9HR4XWTFz&username=&apiKey=_EM_25_XYZ_")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: username must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=foo&data=foo&language=_EM_477_XYZ_&altLanguages=fom&motherTongue=_EM_471_XYZ_&preferredVariants=foo&enabledRules=_EM_621_XYZ_&disabledRules=_EM_622_XYZ_&enabledCategories=foo&disabledCategories=b&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_472_XYZ_&" + 
                    "instanceId=36Ptxevs4qYYGJx&" + 
                    "inputLogging=no&" + 
                    "apiKey=_EM_478_XYZ_&" + 
                    "tokenV2=UdTrVb5webW&" + 
                    "level=U80mdWeKs&" + 
                    "v=_EM_623_XYZ_&" + 
                    "useragent=bLFOkyt&" + 
                    "username=4hOVsfvk")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=V3AfJ3SbCBEUPi6k&username=Hsf9u5r&apiKey=")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=V3AfJ3SbCBEUPi6k&username=Hsf9u5r&apiKey=")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: apiKey must be set"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/delete?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=_EM_2114_XYZ_&" + 
                    "language=fp&" + 
                    "disabledRules=_EM_2115_XYZ_&" + 
                    "motherTongue=_EM_2118_XYZ_&" + 
                    "enabledOnly=_EM_2121_XYZ_&" + 
                    "useragent=_EM_2122_XYZ_&" + 
                    "noopLanguages=1tCqnzz&" + 
                    "password=_EM_2123_XYZ_&" + 
                    "preferredLanguages=_EM_2126_XYZ_&" + 
                    "sourceText=_EM_2132_XYZ_&" + 
                    "token=_EM_2133_XYZ_&" + 
                    "allowIncompleteResults=R&" + 
                    "autodetect=rrZwuD&" + 
                    "filterDictionaryMatches=t6LhUqMj5FOXq&" + 
                    "altLanguages=_EM_2135_XYZ_&" + 
                    "v=_EM_2136_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'autodetect' but automatic language detection is now activated with 'language=auto' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("word=foo&username=foo&apiKey=foo")
                .post(baseUrlOfSut + "/v2/words/add?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username 'foo' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=Me+%26+qou+you&" + 
                    "language=_EM_6125_XYZ_&" + 
                    "disabledRules=HUNSPELL_RULE&" + 
                    "preferredVariants=EudmrEdIK&" + 
                    "motherTongue=beTZ&" + 
                    "apiKey=e_moCEKAPPGE&" + 
                    "inputLogging=_EM_6126_XYZ_&" + 
                    "enabledOnly=_EM_6127_XYZ_&" + 
                    "useragent=YqW9lIsAbYXB3O&" + 
                    "noopLanguages=_EM_6128_XYZ_&" + 
                    "enabled=_EM_6122_XYZ_&" + 
                    "mode=allButTextLevelOnly&" + 
                    "password=_EM_6129_XYZ_&" + 
                    "enableTempOffRules=_EM_6130_XYZ_&" + 
                    "preferredLanguages=jpq07e2U4cykcG&" + 
                    "disabled=GKHII%3DijX0wZXs&" + 
                    "preferredvariants=jZF&" + 
                    "enabledRules=_EM_6131_XYZ_&" + 
                    "c=_EM_6132_XYZ_&" + 
                    "level=2WkzWxHh1mOB2&" + 
                    "ruleValues=_a1tXGjJ&" + 
                    "sourceText=WtKQhwK&" + 
                    "enableHiddenRules=U&" + 
                    "token=V&" + 
                    "allowIncompleteResults=_EM_6119_XYZ_&" + 
                    "autodetect=Sd1vQ&" + 
                    "filterDictionaryMatches=Hm&" + 
                    "enabledCategories=xr&" + 
                    "altLanguages=JQ84xYys&" + 
                    "v=_EM_6124_XYZ_&" + 
                    "textSessionId=Yn5yrqY&" + 
                    "callback=0IH&" + 
                    "disabledCategories=KwmCk&" + 
                    "username=_EM_6133_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/configinfo?language=_EM_10_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '_EM_10_XYZ_' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=-x-&" + 
                    "ruleId=i1eEkjuV9Ge")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: '-x-' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=hbloqVL78DRQ&" + 
                    "ruleId=_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'hbloqVL78DRQ' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-valencia, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, fa, fr, ga-IE, gl-ES, it, ja-JP, km-KH, nl, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=&language=gkaBDkm8&motherTongue=fyePIGI&enabledCategories=HQWon&disabledCategories=SP&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: 'data' key in JSON requires 'text' or 'annotation' key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=pFkGz&" + 
                    "language=gkaBDkm8&" + 
                    "preferredVariants=AA&" + 
                    "motherTongue=fyePIGI&" + 
                    "apiKey=_EM_955_XYZ_&" + 
                    "tokenV2=fhBTUMhku&" + 
                    "enabledOnly=_EM_957_XYZ_&" + 
                    "useragent=le&" + 
                    "noopLanguages=_EM_958_XYZ_&" + 
                    "enabled=E&" + 
                    "mode=_EM_959_XYZ_&" + 
                    "instanceId=_EM_962_XYZ_&" + 
                    "preferredLanguages=76gIXaoT0kpaI&" + 
                    "preferredvariants=_EM_963_XYZ_&" + 
                    "ruleValues=_EM_964_XYZ_&" + 
                    "autodetect=_EM_968_XYZ_&" + 
                    "altLanguages=HgAxxVRFNPi&" + 
                    "v=_EM_969_XYZ_&" + 
                    "callback=_EM_971_XYZ_&" + 
                    "username=_EM_972_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=7Bx&data=_EM_2006_XYZ_&language=1tUoi6o0c48y&altLanguages=_EM_2008_XYZ_&motherTongue=_EM_2067_XYZ_&preferredVariants=_EM_2010_XYZ_&enabledRules=_EM_2011_XYZ_&disabledRules=_EM_2068_XYZ_&enabledCategories=KfkdM_sFK&disabledCategories=EwbUUYS5U%60h")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_2013_XYZ_&language=L9xr9V&motherTongue=VnFEcnlTYfTzm5K&enabledCategories=y7s&disabledCategories=qwucma67O_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_2018_XYZ_&" + 
                    "instanceId=_EM_2069_XYZ_&" + 
                    "inputLogging=_EM_2019_XYZ_&" + 
                    "tokenV2=UUQVWjf&" + 
                    "username=qqWXT9YV_pp1")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: With 'username' set, you also need to specify either 'apiKey' (recommended) or 'password'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("word=_EM_2025_XYZ_&username=_EM_2065_XYZ_&apiKey=yrXcv_GFUpK")
                .post(baseUrlOfSut + "/v2/words/delete")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: No user found for given username '_EM_2065_XYZ_' and given api key"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=EVGZR14hit3S&language=ieakLismwjX2w&preferredVariants=dLiCgsdU1iDwv&disabledRules=_Tm2SbFF&enabledCategories=UT217vHXhwdmyG9s&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'preferredVariants' but you didn't specify 'language=auto'"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/check?" + 
                    "text=EVGZR14hit3S&" + 
                    "language=ieakLismwjX2w&" + 
                    "disabledRules=_Tm2SbFF&" + 
                    "motherTongue=sPQGs&" + 
                    "apiKey=R9&" + 
                    "tokenV2=_EM_13077_XYZ_&" + 
                    "noopLanguages=n55xnA&" + 
                    "enabled=_EM_13078_XYZ_&" + 
                    "preferredLanguages=BG9Dhh50SYC&" + 
                    "preferredvariants=zpr9E&" + 
                    "enabledRules=F5anBfFmB&" + 
                    "level=ME5hmkAGFGh1&" + 
                    "ruleValues=Pe&" + 
                    "sourceText=e8h7oUGcwrzCbMeN&" + 
                    "enableHiddenRules=_EM_13081_XYZ_&" + 
                    "autodetect=d_DXvf5cfAc8&" + 
                    "filterDictionaryMatches=_EM_13083_XYZ_&" + 
                    "enabledCategories=UT217vHXhwdmyG9s&" + 
                    "altLanguages=jGMym&" + 
                    "v=Tj1u&" + 
                    "callback=IpE6U&" + 
                    "username=YnukDXHKna")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'enabled' but the parameter is now called 'enabledRules' in v2 of the API"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=Da&" + 
                    "ruleId=i1eEkjuV9Ge")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule 'i1eEkjuV9Ge' not found for language Danish (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 84)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/rule/examples?" + 
                    "lang=eo&" + 
                    "ruleId=_EM_9380_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("Error: Rule '_EM_9380_XYZ_' not found for language Esperanto (LanguageTool version/date: 5.2-SNAPSHOT/null, total rules of language: 431)"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
