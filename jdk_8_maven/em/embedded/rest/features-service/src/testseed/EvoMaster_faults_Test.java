import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T00:14:24.049+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 24 tests
 * <br>
 * Covered targets: 518
 * <br>
 * Used time: 0h 5m 3s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PRODUCT","CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","PRODUCT_CONFIGURATION"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/Kakq8I?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_64_insert
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/Product_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/Product_1/configurations/Product_1_Configuration_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/Product_1/constraints/excludes?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/Product_1/constraints/requires?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/Product_1/features/Feature_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/Product_1/configurations/Product_1_Configuration_2/features/Feature_2?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/Product_1/features/Feature_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/Product_1/configurations/Product_1_Configuration_1/features/Feature_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/Product_1/features/Feature_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/Product_1/configurations/newConfig?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/Product_1/features?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/products/_EM_3_XYZ_/configurations/ym1GR5vj466zh/features?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1613L)
                .d("NAME", "\"WvMgGyTy\"")
            .and().insertInto("FEATURE", 1612L)
                .d("DESCRIPTION", "\"vO\"")
                .d("NAME", "\"7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1615L)
                .d("NAME", "\"N\"")
            .and().insertInto("FEATURE", 1614L)
                .d("DESCRIPTION", "\"xMXzyv\"")
                .d("NAME", "\"KIrc8GK\"")
                .r("PRODUCT_ID", 1615L)
            .and().insertInto("PRODUCT", 1617L)
                .d("NAME", "\"Ymv\"")
            .and().insertInto("FEATURE", 1616L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"_EM_1029_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1622L)
                .d("NAME", "\"u8zFvuGMziHx\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1621L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT", 1620L)
                .d("NAME", "\"o868wDO\"")
            .and().insertInto("FEATURE", 1619L)
                .d("NAME", "\"9tn0ON67JpMJWX\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1618L)
                .r("IN_CONFIGURATIONS_ID", 1621L)
                .d("ACTIVED_FEATURES_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/UEM_UU28_U%5BUU")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 3193L)
                .d("NAME", "\"G9pz_bz8R7\"")
            .and().insertInto("FEATURE", 3192L)
                .d("DESCRIPTION", "\"_EM_1911_XYZ_\"")
                .d("NAME", "\"sZAhT\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/G9pz_bz8R7/features/sZAhT")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/Product_1?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4629L)
                .d("NAME", "\"Y5eBQZgY1CJ5Wy\"")
            .and().insertInto("FEATURE", 4628L)
                .d("DESCRIPTION", "\"_EM_2656_XYZ_\"")
                .d("NAME", "\"1FHD_hPb24mui8pz\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4631L)
                .d("NAME", "\"_EM_2657_XYZ_\"")
            .and().insertInto("FEATURE", 4630L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_2653_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4636L)
                .d("NAME", "\"_EM_2654_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4635L)
                .d("NAME", "\"xBWVLb9g2w\"")
            .and().insertInto("FEATURE", 4633L)
                .d("NAME", "\"_EM_2658_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4632L)
                .r("IN_CONFIGURATIONS_ID", 4635L)
                .d("ACTIVED_FEATURES_ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_2652_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"xHfrzgTM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"xJu5Ik69hCO\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO/features/bw8BlLNu")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4777L)
                .d("NAME", "\"_EM_2714_XYZ_\"")
            .and().insertInto("FEATURE", 4776L)
                .d("DESCRIPTION", "\"_EM_2715_XYZ_\"")
                .d("NAME", "\"y6Ne5jUKHWEwY3KK\"")
                .r("PRODUCT_ID", 4777L)
            .and().insertInto("PRODUCT", 4779L)
                .d("NAME", "\"_EM_2716_XYZ_\"")
            .and().insertInto("FEATURE", 4778L)
                .d("DESCRIPTION", "\"80PY5v6ayZGT3\"")
                .d("NAME", "\"EuKV\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4784L)
                .d("NAME", "\"5qc5S0Vg0\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4783L)
                .d("NAME", "\"ljA07\"")
            .and().insertInto("FEATURE", 4781L)
                .d("NAME", "\"YE_uxRy4PK5V0apa\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4780L)
                .r("IN_CONFIGURATIONS_ID", 4783L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4789L)
                .d("NAME", "\"0NX\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4788L)
                .d("NAME", "\"gk6PnY3lywkhQSx6\"")
            .and().insertInto("PRODUCT", 4787L)
                .d("NAME", "\"_EM_2717_XYZ_\"")
            .and().insertInto("FEATURE", 4786L)
                .d("NAME", "\"_EM_2718_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4785L)
                .r("IN_CONFIGURATIONS_ID", 4783L)
                .d("ACTIVED_FEATURES_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/78NK2kHnnOy")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/78NK2kHnnOy/configurations/ERGiT%5D"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationResource_42_addConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/UIX9")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UIX9/features/pEZ0upe?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UIX9/features/pEZ0upe?EMextraParam123=42"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4552L)
                .d("NAME", "\"Sin\"")
            .and().insertInto("FEATURE", 4551L)
                .d("DESCRIPTION", "\"GvVlN9\"")
                .d("NAME", "\"W7RlaoKjt4D\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4554L)
                .d("NAME", "\"0HED4R\"")
            .and().insertInto("FEATURE", 4553L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"NiwFo\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4559L)
                .d("NAME", "\"G5FNRB4FS14D7\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4558L)
                .d("NAME", "\"PwddgU2RVpUdbq\"")
            .and().insertInto("PRODUCT", 4557L)
                .d("NAME", "\"MF3kyQoFxdP0FM\"")
            .and().insertInto("FEATURE", 4556L)
                .d("NAME", "\"DbKmkSVc\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4555L)
                .r("IN_CONFIGURATIONS_ID", 4558L)
                .d("ACTIVED_FEATURES_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_UU_UU52_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=FdkwucJvzpfQv")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_UU_UU52_XYZ_/features/n%5BKeT"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_UU_UU52_XYZ_/features/n%5BKeT"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/eZ5RqdwGt46g?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/eZ5RqdwGt46g/features/DbaH3?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP/features/DbaH3?EMextraParam123=42"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP/features/DbaH3"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_22_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 11366L)
                .d("NAME", "\"f\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 11365L)
                .d("ID", "130")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"7MzAJxUQHF\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 11368L)
                .d("NAME", "\"n5tr2wBrW3\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 11367L)
                .d("ID", "982")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"DiT3WMAiK\"")
            .and().insertInto("PRODUCT", 11370L)
                .d("NAME", "\"_6iiRb4ir\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 11369L)
                .d("ID", "1494743782")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Ll6_V8Ov8MSQ\"")
                .d("SOURCE_FEATURE_NAME", "\"tpeoc5Vfa0ECiF\"")
            .and().insertInto("PRODUCT", 11372L)
                .d("NAME", "\"Af\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 11371L)
                .d("ID", "10")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"gA1vnuQO\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 11374L)
                .d("NAME", "\"F\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 11373L)
                .d("ID", "889")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"eOxw9h7Al1hv\"")
            .and().insertInto("PRODUCT", 11376L)
                .d("NAME", "\"118S\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 11375L)
                .d("ID", "177")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"5B3v68bSh0VaYly\"")
                .d("SOURCE_FEATURE_NAME", "\"1dp8tpXz5y3tJmRt\"")
            .and().insertInto("PRODUCT", 11378L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 11377L)
                .d("ID", "-2234250756861586739")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"LJm2duGsds\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 11380L)
                .d("NAME", "\"s86Qz9wkfX\"")
            .and().insertInto("FEATURE", 11379L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"n\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 11382L)
                .d("NAME", "\"LtLh3Hjep828I\"")
            .and().insertInto("FEATURE", 11381L)
                .d("DESCRIPTION", "\"O8MG2Z\"")
                .d("NAME", "\"HMAYMoMiWJSbc0\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 11384L)
                .d("NAME", "\"38ahiFj7njWc\"")
            .and().insertInto("FEATURE", 11383L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"KuO8DkjMf\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 11386L)
                .d("NAME", "\"mU0K9\"")
            .and().insertInto("FEATURE", 11385L)
                .d("DESCRIPTION", "\"BCLoFXNz_Z\"")
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/Fj7Y1d")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Fj7Y1d/configurations/QH_nvezNDHEcPCF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/Fj7Y1d")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Fj7Y1d/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=mi8GNt&requiredFeature=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Fj7Y1d/constraints/requires?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/eKj4W")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/eKj4W/features/gzM"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/eKj4W/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/eKj4W?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/eKj4W/constraints/excludes?EMextraParam123=42"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_110_addExcludesConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_23_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4997L)
                .d("NAME", "\"_EM_2920_XYZ_\"")
            .and().insertInto("FEATURE", 4996L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"FjVdXE_k2\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4999L)
                .d("NAME", "\"7BIn9CrEF_EgRy\"")
            .and().insertInto("FEATURE", 4998L)
                .d("DESCRIPTION", "\"002j8BAYaDTN4\"")
                .d("NAME", "\"krIxru7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5004L)
                .d("NAME", "\"_EM_2921_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5003L)
                .d("NAME", "\"4WeLJaQ\"")
            .and().insertInto("PRODUCT", 5002L)
                .d("NAME", "\"SObYzBn\"")
            .and().insertInto("FEATURE", 5001L)
                .d("NAME", "\"_EM_2922_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5000L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 5009L)
                .d("NAME", "\"t1RatE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5008L)
                .d("NAME", "\"xE\"")
            .and().insertInto("PRODUCT", 5007L)
                .d("NAME", "\"nJ\"")
            .and().insertInto("FEATURE", 5006L)
                .d("NAME", "\"WDmp9\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5005L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .r("ACTIVED_FEATURES_ID", 5006L)
            .and().insertInto("PRODUCT", 5014L)
                .d("NAME", "\"olI4VA5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5013L)
                .d("NAME", "\"2tzCRDCMtSx\"")
            .and().insertInto("FEATURE", 5011L)
                .d("NAME", "\"iN_amSz8uXMb9zs6\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5010L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .d("ACTIVED_FEATURES_ID", "8")
            .and().insertInto("PRODUCT", 5019L)
                .d("NAME", "\"8jqxETkRbbmTSVs1\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5018L)
                .d("NAME", "\"_EM_2923_XYZ_\"")
            .and().insertInto("PRODUCT", 5017L)
                .d("NAME", "\"6qSDXvzJhx5THg\"")
            .and().insertInto("FEATURE", 5016L)
                .d("NAME", "\"Dez\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5015L)
                .r("IN_CONFIGURATIONS_ID", 5013L)
                .d("ACTIVED_FEATURES_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_2919_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=XbgHPKYxL")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2919_XYZ_/features/qiZ%5BanrwntS"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2919_XYZ_/features/qiZ%5BanrwntS"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_2919_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2919_XYZ_/configurations/VtFOmslMVN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EM_2919_XYZ_/features/qiZ%5BanrwntS"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_2919_XYZ_/configurations/VtFOmslMVN/features/qiZ%5BanrwntS"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationFeaturesResource_37_addFeatureToConfiguration
                .assertThat()
                .contentType("text/html");
        
    }


}
