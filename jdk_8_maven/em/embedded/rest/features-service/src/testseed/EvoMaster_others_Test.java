import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T00:14:24.209+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 16 tests
 * <br>
 * Covered targets: 381
 * <br>
 * Used time: 0h 5m 4s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PRODUCT","CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","PRODUCT_CONFIGURATION","HT_feature_constraint"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4811L)
                .d("NAME", "\"TgpcRjaxw\"")
            .and().insertInto("FEATURE", 4810L)
                .d("DESCRIPTION", "\"U5kUUKQEk\"")
                .d("NAME", "\"itKE4L7sw_SS\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4813L)
                .d("NAME", "\"u3b\"")
            .and().insertInto("FEATURE", 4812L)
                .d("DESCRIPTION", "\"_EM_2732_XYZ_\"")
                .d("NAME", "\"Ta\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4815L)
                .d("NAME", "\"_EM_2733_XYZ_\"")
            .and().insertInto("FEATURE", 4814L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"_EM_2734_XYZ_\"")
                .r("PRODUCT_ID", 4813L)
            .and().insertInto("PRODUCT", 4817L)
                .d("NAME", "\"Wk6W\"")
            .and().insertInto("FEATURE", 4816L)
                .d("DESCRIPTION", "\"QoJCHi_8_Xn02F\"")
                .d("NAME", "\"_EM_2735_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4819L)
                .d("NAME", "\"BR2ngMBnXkX\"")
            .and().insertInto("FEATURE", 4818L)
                .d("DESCRIPTION", "\"vDrSYZ6GtR\"")
                .d("NAME", "\"_EM_2736_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4824L)
                .d("NAME", "\"3iiadWGpZZtqgV\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4823L)
                .d("NAME", "\"UE98U\"")
            .and().insertInto("PRODUCT", 4822L)
                .d("NAME", "\"pejjDg4l\"")
            .and().insertInto("FEATURE", 4821L)
                .d("NAME", "\"q9Kbdln7waj\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4820L)
                .r("IN_CONFIGURATIONS_ID", 4823L)
                .d("ACTIVED_FEATURES_ID", "7")
            .and().insertInto("PRODUCT", 4829L)
                .d("NAME", "\"WDt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4828L)
                .d("NAME", "\"u\"")
            .and().insertInto("PRODUCT", 4827L)
                .d("NAME", "\"_EM_2737_XYZ_\"")
            .and().insertInto("FEATURE", 4826L)
                .d("NAME", "\"uiQW\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4825L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .d("ACTIVED_FEATURES_ID", "6")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/%3F4NK2kHnnOy")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%3F4NK2kHnnOy/configurations/_EM_2731_XYZ_"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xg?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("description=8c6xLmIe4")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xg/features/_EM_85_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/xg/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6245L)
                .d("NAME", "\"Lo4ASzUSDU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6244L)
                .d("NAME", "\"1\"")
                .d("VALID", "true")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/Lo4ASzUSDU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Lo4ASzUSDU/features/DZ4Ouoa053dYqyAi"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/Lo4ASzUSDU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Lo4ASzUSDU/configurations/1"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/Lo4ASzUSDU/features/DZ4Ouoa053dYqyAi"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/Lo4ASzUSDU/configurations/1/features/DZ4Ouoa053dYqyAi"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/Lo4ASzUSDU/configurations/1/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4629L)
                .d("NAME", "\"Y5eBQZgY1CJ5Wy\"")
            .and().insertInto("FEATURE", 4628L)
                .d("DESCRIPTION", "\"vS_2wpA3BiGLX9YO\"")
                .d("NAME", "\"1FHD_hPb24mui8pz\"")
                .r("PRODUCT_ID", 4629L)
            .and().insertInto("PRODUCT", 4631L)
                .d("NAME", "\"3GAR|U2\"")
            .and().insertInto("FEATURE", 4630L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_2653_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4636L)
                .d("NAME", "\"_EM_2654_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4635L)
                .d("NAME", "\"xBWVLb9g2w\"")
            .and().insertInto("FEATURE", 4633L)
                .d("NAME", "\"j8jz\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4632L)
                .r("IN_CONFIGURATIONS_ID", 4635L)
                .d("ACTIVED_FEATURES_ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/vBavh45xWch")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/vBavh45xWch/features/gv1GT_SBmt6_WCf?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/vBavh45xWch/features?EMextraParam123=42"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/vBavh45xWch")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/vBavh45xWch/configurations/yuiek4AzobQti3AG"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/vBavh45xWch/features/gv1GT_SBmt6_WCf?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/vBavh45xWch/configurations/yuiek4AzobQti3AG/features/gv1GT_SBmt6_WCf"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/vBavh45xWch/configurations/yuiek4AzobQti3AG/features/gv1GT_SBmt6_WCf?EMextraParam123=42"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4997L)
                .d("NAME", "\"_EM_2920_XYZ_\"")
            .and().insertInto("FEATURE", 4996L)
                .d("DESCRIPTION", "\"3reIXQP\"")
                .d("NAME", "\"_EM_3822_XYZ_\"")
                .r("PRODUCT_ID", 4997L)
            .and().insertInto("PRODUCT", 4999L)
                .d("NAME", "\"7BIn9CrEF_EgRy\"")
            .and().insertInto("FEATURE", 4998L)
                .d("DESCRIPTION", "\"002j8BAYa@TN4\"")
                .d("NAME", "\"krIxru7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5004L)
                .d("NAME", "\"_EM_2921_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5003L)
                .d("NAME", "\"4WeLJaQ\"")
            .and().insertInto("PRODUCT", 5002L)
                .d("NAME", "\"SObYzBn\"")
            .and().insertInto("FEATURE", 5001L)
                .d("NAME", "\"_EM_2922_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5000L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .r("ACTIVED_FEATURES_ID", 4996L)
            .and().insertInto("PRODUCT", 5009L)
                .d("NAME", "\"{1RatE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5008L)
                .d("NAME", "\"vF\"")
            .and().insertInto("PRODUCT", 5007L)
                .d("NAME", "\"nJ\"")
            .and().insertInto("FEATURE", 5006L)
                .d("NAME", "\"_EM_3783_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5005L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .d("ACTIVED_FEATURES_ID", "7")
            .and().insertInto("PRODUCT", 5014L)
                .d("NAME", "\"olI4VA5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5013L)
                .d("NAME", "\"2tzCRDCMtSx\"")
            .and().insertInto("FEATURE", 5011L)
                .d("NAME", "\"_EM_3823_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5010L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .r("ACTIVED_FEATURES_ID", 5011L)
            .and().insertInto("PRODUCT", 5019L)
                .d("NAME", "\"_EM_3824_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5018L)
                .d("NAME", "\"_EM_3784_XYZ_\"")
            .and().insertInto("PRODUCT", 5017L)
                .d("NAME", "\"_EM_3825_XYZ_\"")
            .and().insertInto("FEATURE", 5016L)
                .d("NAME", "\"_EM_3785_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5015L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 4996L)
            .and().insertInto("PRODUCT", 6257L)
                .d("NAME", "\"_EM_3786_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6256L)
                .d("ID", "0")
                .r("FOR_PRODUCT_ID", 6257L)
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"dLo0ttkl\"")
            .and().insertInto("PRODUCT", 6259L)
                .d("NAME", "\"8a\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6258L)
                .d("ID", "847")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Y9\"")
                .d("SOURCE_FEATURE_NAME", "\"t1y\"")
            .and().insertInto("PRODUCT", 6261L)
                .d("NAME", "\"790501\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6260L)
                .d("ID", "367")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Wrl\"")
                .d("SOURCE_FEATURE_NAME", "\"vv73U\"")
            .and().insertInto("PRODUCT", 6263L)
                .d("NAME", "\"NAmhdp5PnC\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6262L)
                .d("ID", "784")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"1uUiMnH1Xpu\"")
                .d("SOURCE_FEATURE_NAME", "\"uUiUOKJtcWMQ\"")
            .and().insertInto("PRODUCT", 6265L)
                .d("NAME", "\"_EM_3826_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6264L)
                .d("ID", "-65079")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"q4BIBa\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 6267L)
                .d("NAME", "\"J\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6266L)
                .d("ID", "442")
                .r("FOR_PRODUCT_ID", 6263L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"6\"")
            .and().insertInto("PRODUCT", 6269L)
                .d("NAME", "\"_EM_3790_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6268L)
                .d("ID", "-130463")
                .r("FOR_PRODUCT_ID", 5014L)
                .d("REQUIRED_FEATURE_NAME", "\"Kpz6Bo_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/olI4VA5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/olI4VA5/constraints/-4777614387788042915"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/olI4VA5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=XbgHPKYxL")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/olI4VA5/features/-15"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/olI4VA5/features/_EM_3780_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/olI4VA5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/olI4VA5/configurations/VvWOmqlEVU"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/olI4VA5/features/_EM_3780_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/olI4VA5/configurations/VvWOmqlEVU/features/_EM_3780_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/olI4VA5/configurations/VvWOmqlEVU/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6656L)
                .d("NAME", "\"2ulHVHxeg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6655L)
                .d("NAME", "\"lF8MTwEOT\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7861L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 7860L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7866L)
                .d("NAME", "\"zg55RYuzdGx\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7865L)
                .d("NAME", "\"Wsmv3Pi\"")
            .and().insertInto("PRODUCT", 7864L)
                .d("NAME", "\"FR1dV\"")
            .and().insertInto("FEATURE", 7863L)
                .d("NAME", "\"I\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7862L)
                .r("IN_CONFIGURATIONS_ID", 6655L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 7871L)
                .d("NAME", "\"sishUM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7870L)
                .d("NAME", "\"LQTLU9eCvZWduHh\"")
            .and().insertInto("FEATURE", 7868L)
                .d("NAME", "\"8ASSje6gd10xea8\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7867L)
                .r("IN_CONFIGURATIONS_ID", 7865L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 7876L)
                .d("NAME", "\"om\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7875L)
                .d("NAME", "\"zPlyBHgzHJd4WD\"")
            .and().insertInto("FEATURE", 7873L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7872L)
                .r("IN_CONFIGURATIONS_ID", 7875L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 7881L)
                .d("NAME", "\"_RXcL8Wsj\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7880L)
                .d("NAME", "\"fqfDdSr3b9qQX\"")
            .and().insertInto("PRODUCT", 7879L)
                .d("NAME", "\"ZOFY\"")
            .and().insertInto("FEATURE", 7878L)
                .d("NAME", "\"M8edx8qb4x4H\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7877L)
                .r("IN_CONFIGURATIONS_ID", 7870L)
                .d("ACTIVED_FEATURES_ID", "4")
            .and().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"_EM_UUUU_UYUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"WJu5Ii82d\\O\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_UUUU_UYUU/configurations/WJu5Ii82d%5CO")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6656L)
                .d("NAME", "\"2ulHVHxeg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6655L)
                .d("NAME", "\"lF8MTwEOT\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"_EM_UUUU_UYUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"WJu5Ii82d\\O\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_UUUU_UYUU/configurations/WJu5Ii82d%5CO")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4997L)
                .d("NAME", "\"RFWUwVmYtE4zo\"")
            .and().insertInto("FEATURE", 4996L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"FjVdXE_k2P\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4999L)
                .d("NAME", "\"7BIn9CrEF_EhRy\"")
            .and().insertInto("FEATURE", 4998L)
                .d("DESCRIPTION", "\"002j8BAYaDTN4\"")
                .d("NAME", "\"krIxru7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5004L)
                .d("NAME", "\"gE_V\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5003L)
                .d("NAME", "\"4WeLJaQ\"")
            .and().insertInto("PRODUCT", 5002L)
                .d("NAME", "\"SObYzBn\"")
            .and().insertInto("FEATURE", 5001L)
                .d("NAME", "\"DJupU7pm\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5000L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 5009L)
                .d("NAME", "\"t1RatE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5008L)
                .d("NAME", "\"_EM_5499_XYZ_\"")
            .and().insertInto("PRODUCT", 5007L)
                .d("NAME", "\"nJ\"")
            .and().insertInto("FEATURE", 5006L)
                .d("NAME", "\"WDmp9\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5005L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .r("ACTIVED_FEATURES_ID", 5006L)
            .and().insertInto("PRODUCT", 5014L)
                .d("NAME", "\"olI4VA5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5013L)
                .d("NAME", "\"2tzCRDCMtSxq\"")
            .and().insertInto("FEATURE", 5011L)
                .d("NAME", "\"iN_amSz8uXMb9zs6\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5010L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .d("ACTIVED_FEATURES_ID", "8")
            .and().insertInto("PRODUCT", 5019L)
                .d("NAME", "\"8jqxETkRbbmTSVs1\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5018L)
                .d("NAME", "\"cs3GsNhFthZJETrY\"")
            .and().insertInto("PRODUCT", 5017L)
                .d("NAME", "\"_EM_5500_XYZ_\"")
            .and().insertInto("FEATURE", 5016L)
                .d("NAME", "\"Dez\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5015L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .d("ACTIVED_FEATURES_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/6b%5CC7tE8VJFM")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4997L)
                .d("NAME", "\"RFWUwVmYtE4zo\"")
            .and().insertInto("FEATURE", 4996L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"FjVdXE_k2P\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4999L)
                .d("NAME", "\"7BIn9CrEF_EhRy\"")
            .and().insertInto("FEATURE", 4998L)
                .d("DESCRIPTION", "\"002j8BAYaDTN4\"")
                .d("NAME", "\"krIxru7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5004L)
                .d("NAME", "\"gE_V\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5003L)
                .d("NAME", "\"4WeLJaQ\"")
            .and().insertInto("PRODUCT", 5002L)
                .d("NAME", "\"SObYzBn\"")
            .and().insertInto("FEATURE", 5001L)
                .d("NAME", "\"DJupU7pm\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5000L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 5009L)
                .d("NAME", "\"t1RatE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5008L)
                .d("NAME", "\"_EM_5499_XYZ_\"")
            .and().insertInto("PRODUCT", 5007L)
                .d("NAME", "\"nJ\"")
            .and().insertInto("FEATURE", 5006L)
                .d("NAME", "\"WDmp9\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5005L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .r("ACTIVED_FEATURES_ID", 5006L)
            .and().insertInto("PRODUCT", 5014L)
                .d("NAME", "\"olI4VA5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5013L)
                .d("NAME", "\"2tzCRDCMtSxq\"")
            .and().insertInto("FEATURE", 5011L)
                .d("NAME", "\"iN_amSz8uXMb9zs6\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5010L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .d("ACTIVED_FEATURES_ID", "8")
            .and().insertInto("PRODUCT", 5019L)
                .d("NAME", "\"8jqxETkRbbmTSVs1\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5018L)
                .d("NAME", "\"cs3GsNhFthZJETrY\"")
            .and().insertInto("PRODUCT", 5017L)
                .d("NAME", "\"_EM_5500_XYZ_\"")
            .and().insertInto("FEATURE", 5016L)
                .d("NAME", "\"Dez\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5015L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .d("ACTIVED_FEATURES_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/6b%5CC7tE8VJFM/features/sWtvrzgyRw")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4629L)
                .d("NAME", "\"Y5eBQZgY1CJ5Wy\"")
            .and().insertInto("FEATURE", 4628L)
                .d("DESCRIPTION", "\"vS_2wpA3BiGLX9YO\"")
                .d("NAME", "\"1FHD_hPb24mui8pz\"")
                .r("PRODUCT_ID", 4629L)
            .and().insertInto("PRODUCT", 4631L)
                .d("NAME", "\"3GAR|U2\"")
            .and().insertInto("FEATURE", 4630L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_2653_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4636L)
                .d("NAME", "\"_EM_2654_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4635L)
                .d("NAME", "\"xBWVLb9g2w\"")
            .and().insertInto("FEATURE", 4633L)
                .d("NAME", "\"j8jz\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4632L)
                .r("IN_CONFIGURATIONS_ID", 4635L)
                .d("ACTIVED_FEATURES_ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_2651_XYZ_/features/N%5ChH9ydZS")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6656L)
                .d("NAME", "\"2ulHVHxeg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6655L)
                .d("NAME", "\"lF8MTwEOT\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"_EM_UUUU_UYUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"WJu5Ii82d\\O\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_UUUU_UYUU/configurations/WJu5Ii82d%5CO/features/_EM_4991_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6656L)
                .d("NAME", "\"2ulHVHxeg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6655L)
                .d("NAME", "\"lF8MTwEOT\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7861L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 7860L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7866L)
                .d("NAME", "\"zg55RYuzdGx\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7865L)
                .d("NAME", "\"Wsmv3Pi\"")
            .and().insertInto("PRODUCT", 7864L)
                .d("NAME", "\"FR1dV\"")
            .and().insertInto("FEATURE", 7863L)
                .d("NAME", "\"I\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7862L)
                .r("IN_CONFIGURATIONS_ID", 6655L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 7871L)
                .d("NAME", "\"sishUM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7870L)
                .d("NAME", "\"LQTLU9eCvZWduHh\"")
            .and().insertInto("FEATURE", 7868L)
                .d("NAME", "\"8ASSje6gd10xea8\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7867L)
                .r("IN_CONFIGURATIONS_ID", 7865L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 7876L)
                .d("NAME", "\"om\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7875L)
                .d("NAME", "\"zPlyBHgzHJd4WD\"")
            .and().insertInto("FEATURE", 7873L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7872L)
                .r("IN_CONFIGURATIONS_ID", 7875L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 7881L)
                .d("NAME", "\"_RXcL8Wsj\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7880L)
                .d("NAME", "\"fqfDdSr3b9qQX\"")
            .and().insertInto("PRODUCT", 7879L)
                .d("NAME", "\"ZOFY\"")
            .and().insertInto("FEATURE", 7878L)
                .d("NAME", "\"M8edx8qb4x4H\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7877L)
                .r("IN_CONFIGURATIONS_ID", 7870L)
                .d("ACTIVED_FEATURES_ID", "4")
            .and().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"_EM_UUUU_UYUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"WJu5Ii82d\\O\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_UUUU_UYUU/configurations/WJu5Ii82d%5CO/features")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 16382L)
                .d("NAME", "\"Vbqp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 16381L)
                .d("NAME", "\"6Hg\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 6475L)
                .d("NAME", "\";Y_lMYy\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6474L)
                .d("NAME", "\"WEhLbxttEkGq0pi\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("FEATURE", 6476L)
                .d("DESCRIPTION", "\"XgJJa6AKkuirfQ_\"")
                .d("NAME", "\";Y_lMYy\"")
                .r("PRODUCT_ID", 6475L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/;Y_lMYy/features/_EM_4208_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 16382L)
                .d("NAME", "\"Vbqp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 16381L)
                .d("NAME", "\"6Hg\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 6475L)
                .d("NAME", "\";Y_lMYy\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6474L)
                .d("NAME", "\"WEhLbxttEkGq0pi\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("FEATURE", 6476L)
                .d("DESCRIPTION", "\"XgJJa6AKkuirfQ_\"")
                .d("NAME", "\";Y_lMYy\"")
                .r("PRODUCT_ID", 6475L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/;Y_lMYy/configurations/WEhLbxttEkGq0pi/features")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 16382L)
                .d("NAME", "\"Vbqp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 16381L)
                .d("NAME", "\"6Hg\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 6475L)
                .d("NAME", "\";Y_lMYy\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6474L)
                .d("NAME", "\"WEhLbxttEkGq0pi\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("FEATURE", 6476L)
                .d("DESCRIPTION", "\"XgJJa6AKkuirfQ_\"")
                .d("NAME", "\";Y_lMYy\"")
                .r("PRODUCT_ID", 6475L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/;Y_lMYy/features")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 16382L)
                .d("NAME", "\"Vbqp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 16381L)
                .d("NAME", "\"6Hg\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 6475L)
                .d("NAME", "\";Y_lMYy\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6474L)
                .d("NAME", "\"WEhLbxttEkGq0pi\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("FEATURE", 6476L)
                .d("DESCRIPTION", "\"XgJJa6AKkuirfQ_\"")
                .d("NAME", "\";Y_lMYy\"")
                .r("PRODUCT_ID", 6475L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/;Y_lMYy")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
    }


}
