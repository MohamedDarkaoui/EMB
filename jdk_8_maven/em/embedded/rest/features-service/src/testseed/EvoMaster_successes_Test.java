import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T00:14:24.182+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 20 tests
 * <br>
 * Covered targets: 627
 * <br>
 * Used time: 0h 5m 4s
 * <br>
 * Needed budget for current results: 95%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PRODUCT","CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","PRODUCT_CONFIGURATION","HT_feature_constraint"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("ELEARNING_SITE"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_269_XYZ_")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/features?EMextraParam123=_EM_268_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("ONLINE_FORUM"))
                .body("[0].'description'", nullValue())
                .body("[1].'name'", containsString("REDEEM_CODES"))
                .body("[1].'description'", nullValue())
                .body("[2].'name'", containsString("VIDEO_LESSONS"))
                .body("[2].'description'", nullValue())
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("ELEARNING_SITE"))
                .body("'features'.size()", equalTo(9))
                .body("'features'[0].'name'", containsString("CREDIT_CARD_PAYMENT"))
                .body("'features'[0].'description'", nullValue())
                .body("'features'[1].'name'", containsString("PAYPAL_PAYMENT"))
                .body("'features'[1].'description'", nullValue())
                .body("'features'[2].'name'", containsString("REDEEM_CODES"))
                .body("'features'[2].'description'", nullValue())
                // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
                .body("'constraints'.size()", equalTo(3))
                .body("'constraints'[0].'sourceFeatureName'", containsString("PAYPAL_PAYMENT"))
                .body("'constraints'[0].'requiredFeatureName'", containsString("COURSE_SELLING"))
                .body("'constraints'[0].'type'", containsString("requires"))
                .body("'constraints'[1].'sourceFeatureName'", containsString("IN_TRIAL_PERIOD"))
                .body("'constraints'[1].'excludedFeatureName'", containsString("COURSE_SELLING"))
                .body("'constraints'[1].'type'", containsString("excludes"))
                .body("'constraints'[2].'sourceFeatureName'", containsString("CREDIT_CARD"))
                .body("'constraints'[2].'requiredFeatureName'", containsString("COURSE_SELLING"))
                .body("'constraints'[2].'type'", containsString("requires"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("UNIVERSITY_X"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(4))
                .body("'activedFeatures'[0].'name'", containsString("VIDEO_LESSONS"))
                .body("'activedFeatures'[0].'description'", nullValue())
                .body("'activedFeatures'[1].'name'", containsString("CHAT"))
                .body("'activedFeatures'[1].'description'", nullValue())
                .body("'activedFeatures'[2].'name'", containsString("IN_TRIAL_PERIOD"))
                .body("'activedFeatures'[2].'description'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 180L)
                .d("NAME", "\"_EM_159_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("UNIVERSITY_X"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("", hasItems("CHAT", "VIDEO_LESSONS", "IN_TRIAL_PERIOD", "ONLINE_FORUM"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/x")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_81_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/x/features/NeVd?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/x/features/NeVd?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("NeVd"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"xHfrzgTM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"xJu5Ik69hCO\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xHfrzgTM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xHfrzgTM/features/bw8BlLNu"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xHfrzgTM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_3373_XYZ_&excludedFeature=_EM_3374_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xHfrzgTM/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xHfrzgTM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xHfrzgTM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/xHfrzgTM/features/bw8BlLNu"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_9.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO/features/bw8BlLNu"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/Product_3?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 6656L)
                .d("NAME", "\"2ulHVHxeg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6655L)
                .d("NAME", "\"lF8MTwEOT\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7861L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 7860L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7866L)
                .d("NAME", "\"zg55RYuzdGx\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7865L)
                .d("NAME", "\"Wsmv3Pi\"")
            .and().insertInto("PRODUCT", 7864L)
                .d("NAME", "\"FR1dV\"")
            .and().insertInto("FEATURE", 7863L)
                .d("NAME", "\"I\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7862L)
                .r("IN_CONFIGURATIONS_ID", 6655L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 7871L)
                .d("NAME", "\"sishUM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7870L)
                .d("NAME", "\"LQTLU9eCvZWduHh\"")
            .and().insertInto("FEATURE", 7868L)
                .d("NAME", "\"8ASSje6gd10xea8\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7867L)
                .r("IN_CONFIGURATIONS_ID", 7865L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 7876L)
                .d("NAME", "\"om\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7875L)
                .d("NAME", "\"zPlyBHgzHJd4WD\"")
            .and().insertInto("FEATURE", 7873L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7872L)
                .r("IN_CONFIGURATIONS_ID", 7875L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 7881L)
                .d("NAME", "\"_RXcL8Wsj\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7880L)
                .d("NAME", "\"fqfDdSr3b9qQX\"")
            .and().insertInto("PRODUCT", 7879L)
                .d("NAME", "\"ZOFY\"")
            .and().insertInto("FEATURE", 7878L)
                .d("NAME", "\"M8edx8qb4x4H\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7877L)
                .r("IN_CONFIGURATIONS_ID", 7870L)
                .d("ACTIVED_FEATURES_ID", "4")
            .and().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"_EM_UUUU_UYUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"WJu5Ii82d\\O\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_3373_XYZ_&excludedFeature=_EM_3374_XYZ_")
                .post(baseUrlOfSut + "/products/_EM_UUUU_UYUU/constraints/excludes")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4997L)
                .d("NAME", "\"_EM_2920_XYZ_\"")
            .and().insertInto("FEATURE", 4996L)
                .d("DESCRIPTION", "\"3reIXQP\"")
                .d("NAME", "\"_EM_3822_XYZ_\"")
                .r("PRODUCT_ID", 4997L)
            .and().insertInto("PRODUCT", 4999L)
                .d("NAME", "\"7BIn9CrEF_EgRy\"")
            .and().insertInto("FEATURE", 4998L)
                .d("DESCRIPTION", "\"002j8BAYa@TN4\"")
                .d("NAME", "\"krIxru7\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5004L)
                .d("NAME", "\"_EM_2921_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5003L)
                .d("NAME", "\"4WeLJaQ\"")
            .and().insertInto("PRODUCT", 5002L)
                .d("NAME", "\"SObYzBn\"")
            .and().insertInto("FEATURE", 5001L)
                .d("NAME", "\"_EM_2922_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5000L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .r("ACTIVED_FEATURES_ID", 4996L)
            .and().insertInto("PRODUCT", 5009L)
                .d("NAME", "\"{1RatE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5008L)
                .d("NAME", "\"vF\"")
            .and().insertInto("PRODUCT", 5007L)
                .d("NAME", "\"nJ\"")
            .and().insertInto("FEATURE", 5006L)
                .d("NAME", "\"_EM_3783_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5005L)
                .r("IN_CONFIGURATIONS_ID", 5003L)
                .d("ACTIVED_FEATURES_ID", "7")
            .and().insertInto("PRODUCT", 5014L)
                .d("NAME", "\"olI4VA5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5013L)
                .d("NAME", "\"2tzCRDCMtSx\"")
            .and().insertInto("FEATURE", 5011L)
                .d("NAME", "\"_EM_3823_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5010L)
                .r("IN_CONFIGURATIONS_ID", 5008L)
                .r("ACTIVED_FEATURES_ID", 5011L)
            .and().insertInto("PRODUCT", 5019L)
                .d("NAME", "\"_EM_3824_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5018L)
                .d("NAME", "\"_EM_3784_XYZ_\"")
            .and().insertInto("PRODUCT", 5017L)
                .d("NAME", "\"_EM_3825_XYZ_\"")
            .and().insertInto("FEATURE", 5016L)
                .d("NAME", "\"_EM_3785_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 5015L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 4996L)
            .and().insertInto("PRODUCT", 6257L)
                .d("NAME", "\"_EM_3786_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6256L)
                .d("ID", "0")
                .r("FOR_PRODUCT_ID", 6257L)
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"dLo0ttkl\"")
            .and().insertInto("PRODUCT", 6259L)
                .d("NAME", "\"8a\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6258L)
                .d("ID", "847")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Y9\"")
                .d("SOURCE_FEATURE_NAME", "\"t1y\"")
            .and().insertInto("PRODUCT", 6261L)
                .d("NAME", "\"790501\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6260L)
                .d("ID", "367")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Wrl\"")
                .d("SOURCE_FEATURE_NAME", "\"vv73U\"")
            .and().insertInto("PRODUCT", 6263L)
                .d("NAME", "\"NAmhdp5PnC\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6262L)
                .d("ID", "784")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"1uUiMnH1Xpu\"")
                .d("SOURCE_FEATURE_NAME", "\"uUiUOKJtcWMQ\"")
            .and().insertInto("PRODUCT", 6265L)
                .d("NAME", "\"_EM_3826_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6264L)
                .d("ID", "-65079")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"q4BIBa\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 6267L)
                .d("NAME", "\"J\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6266L)
                .d("ID", "442")
                .r("FOR_PRODUCT_ID", 6263L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"6\"")
            .and().insertInto("PRODUCT", 6269L)
                .d("NAME", "\"_EM_3790_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6268L)
                .d("ID", "-130463")
                .r("FOR_PRODUCT_ID", 5014L)
                .d("REQUIRED_FEATURE_NAME", "\"Kpz6Bo_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/olI4VA5/configurations/VvWOmqlEVU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/DK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/DK/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4629L)
                .d("NAME", "\"Y5eBQZgY1CJ5Wy\"")
            .and().insertInto("FEATURE", 4628L)
                .d("DESCRIPTION", "\"_EM_2656_XYZ_\"")
                .d("NAME", "\"1FHD_hPb24mui8pz\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4631L)
                .d("NAME", "\"_EM_2657_XYZ_\"")
            .and().insertInto("FEATURE", 4630L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_2653_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4636L)
                .d("NAME", "\"_EM_2654_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4635L)
                .d("NAME", "\"xBWVLb9g2w\"")
            .and().insertInto("FEATURE", 4633L)
                .d("NAME", "\"_EM_2658_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4632L)
                .r("IN_CONFIGURATIONS_ID", 4635L)
                .d("ACTIVED_FEATURES_ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_248_XYZ_")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_2652_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 15929L)
                .d("NAME", "\"Z\"")
            .and().insertInto("PRODUCT", 15931L)
                .d("NAME", "\"fO6PQ45YQQo\"")
            .and().insertInto("FEATURE", 15930L)
                .d("DESCRIPTION", "\"F02NOa\"")
                .d("NAME", "\"r\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 15933L)
                .d("NAME", "\"s1VfLenEqQG9p5Fj\"")
            .and().insertInto("FEATURE", 15932L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"jiNLAm\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 15935L)
                .d("NAME", "\"9vROz57\"")
            .and().insertInto("FEATURE", 15934L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"uoh99WQY__a51aeG\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 15937L)
                .d("NAME", "\"t9qKbsAX9wH\"")
            .and().insertInto("FEATURE", 15936L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"2aDLnwZpJ6DIUfa\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 15942L)
                .d("NAME", "\"Fot\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15941L)
                .d("NAME", "\"PWgD7dnFvI\"")
            .and().insertInto("PRODUCT", 15940L)
                .d("NAME", "\"cAsafZ\"")
            .and().insertInto("FEATURE", 15939L)
                .d("NAME", "\"LKP7hXZKEMuhmOC8\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 15938L)
                .r("IN_CONFIGURATIONS_ID", 15941L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 15947L)
                .d("NAME", "\"tWCs2aVzuY\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15946L)
                .d("NAME", "\"qI\"")
            .and().insertInto("PRODUCT", 15945L)
                .d("NAME", "\"kbovP\"")
            .and().insertInto("FEATURE", 15944L)
                .d("NAME", "\"sEMqk\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 15943L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 15932L)
            .and().insertInto("PRODUCT", 15952L)
                .d("NAME", "\"s\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15951L)
                .d("NAME", "\"GgrbIVb4Xf\"")
            .and().insertInto("FEATURE", 15949L)
                .d("NAME", "\"JlgTz\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 15948L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .d("ACTIVED_FEATURES_ID", "8")
            .and().insertInto("PRODUCT", 15957L)
                .d("NAME", "\"U5fI64xKwkNfB\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15956L)
                .d("NAME", "\"WGN\"")
            .and().insertInto("FEATURE", 15954L)
                .d("NAME", "\"dG3HaAgnHw\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 15953L)
                .r("IN_CONFIGURATIONS_ID", 15956L)
                .d("ACTIVED_FEATURES_ID", "1")
            .and().insertInto("PRODUCT", 15962L)
                .d("NAME", "\"BW5z\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15961L)
                .d("NAME", "\"A3Kfoxx1e80pqKr8\"")
            .and().insertInto("FEATURE", 15959L)
                .d("NAME", "\"9RN8xa33\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 15958L)
                .r("IN_CONFIGURATIONS_ID", 15951L)
                .r("ACTIVED_FEATURES_ID", 15936L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/8KPOG6rFKcVe")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/8KPOG6rFKcVe/configurations/mt%3Fj3Zq0NdpZHx"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/8KPOG6rFKcVe/configurations"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4629L)
                .d("NAME", "\"Y5eBQZgY1CJ5Wy\"")
            .and().insertInto("FEATURE", 4628L)
                .d("DESCRIPTION", "\"_EM_2656_XYZ_\"")
                .d("NAME", "\"1FHD_hPb24mui8pz\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4631L)
                .d("NAME", "\"_EM_2657_XYZ_\"")
            .and().insertInto("FEATURE", 4630L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_2653_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4636L)
                .d("NAME", "\"_EM_2654_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4635L)
                .d("NAME", "\"xBWVLb9g2w\"")
            .and().insertInto("FEATURE", 4633L)
                .d("NAME", "\"_EM_2658_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4632L)
                .r("IN_CONFIGURATIONS_ID", 4635L)
                .d("ACTIVED_FEATURES_ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_248_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_2652_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_2652_XYZ_"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/Product_1/constraints/1?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/Product_1/configurations/Product_1_Configuration_2?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 5733L)
                .d("NAME", "\"xHfrzgTM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5734L)
                .d("NAME", "\"xJu5Ik69hCO\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 5733L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/xHfrzgTM/configurations/xJu5Ik69hCO")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 3580L)
                .d("NAME", "\"qYi\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/qYi")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
