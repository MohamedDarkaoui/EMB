import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T00:22:41.909+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 25 tests
 * <br>
 * Covered targets: 493
 * <br>
 * Used time: 0h 5m 3s
 * <br>
 * Needed budget for current results: 67%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PRODUCT","CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","PRODUCT_CONFIGURATION"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/6fdaIFP4L?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_64_insert
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_27_XYZ_?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_41_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_38_XYZ_")
                .post(baseUrlOfSut + "/products/_EM_37_XYZ_/constraints/requires")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_14_XYZ_/configurations/_EM_15_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_18_XYZ_/features/_EM_19_XYZ_?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/_EM_42_XYZ_/constraints/excludes?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/_EM_0_XYZ_/configurations/_EM_1_XYZ_/features/8j8BzpaWgRBnNFQ")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/8iD/features/_EM_51_XYZ_?EMextraParam123=_EM_53_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_36_XYZ_")
                .post(baseUrlOfSut + "/products/_EM_33_XYZ_/configurations/_EM_34_XYZ_/features/_EM_35_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_67_XYZ_")
                .put(baseUrlOfSut + "/products/_EM_65_XYZ_/features/_EM_66_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_47_XYZ_/configurations/_EM_48_XYZ_?EMextraParam123=_EM_49_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_24_XYZ_/features")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/products/_EM_3_XYZ_/configurations/_EM_4_XYZ_/features?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2317L)
                .d("NAME", "\"m\"")
            .and().insertInto("FEATURE", 2316L)
                .d("DESCRIPTION", "\"EvZIUroRtckjwjw2\"")
                .d("NAME", "\"_EM_1812_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2322L)
                .d("NAME", "\"NDsJQYoHEr3Jp7B\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2321L)
                .d("NAME", "\"_EM_1813_XYZ_\"")
            .and().insertInto("PRODUCT", 2320L)
                .d("NAME", "\"VkNKeL4hTTBoknTi\"")
            .and().insertInto("FEATURE", 2319L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2318L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .d("ACTIVED_FEATURES_ID", "6")
            .and().insertInto("PRODUCT", 2327L)
                .d("NAME", "\"_EM_1814_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2326L)
                .d("NAME", "\"_EM_1815_XYZ_\"")
            .and().insertInto("FEATURE", 2324L)
                .d("NAME", "\"_EM_1816_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2323L)
                .r("IN_CONFIGURATIONS_ID", 2326L)
                .d("ACTIVED_FEATURES_ID", "7")
            .and().insertInto("PRODUCT", 2332L)
                .d("NAME", "\"U_Pkc7fOTcDdW7\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2331L)
                .d("NAME", "\"5rpn\"")
            .and().insertInto("PRODUCT", 2330L)
                .d("NAME", "\"_EM_1817_XYZ_\"")
            .and().insertInto("FEATURE", 2329L)
                .d("NAME", "\"_EM_1818_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2328L)
                .r("IN_CONFIGURATIONS_ID", 2331L)
                .d("ACTIVED_FEATURES_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/ZD%5DHA98tVOOrcC9X?EMextraParam123=42")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .delete(baseUrlOfSut + "/products/_EM_29_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 11112L)
                .d("NAME", "\"yB\"")
            .and().insertInto("FEATURE", 11111L)
                .d("DESCRIPTION", "\"C\"")
                .d("NAME", "\"wh5dDKgvKTEz\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 11114L)
                .d("NAME", "\"0kjZ9\"")
            .and().insertInto("FEATURE", 11113L)
                .d("DESCRIPTION", "\"H8sSW\"")
                .d("NAME", "\"2SZ\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 11116L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 11115L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"ihQzEvhG\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/3vBS2J%3FY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"B\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"nIO1DaTCg\"")
                .d("NAME", "\"_EM_3199_XYZ_\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnyvvh\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"_EM_2930_XYZ_\"")
                .d("NAME", "\"jghxuX0Vk4R_T\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"_EM_3200_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"b5ecq8R0\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"OSAuYiR2CA9dg\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"Ia5\"")
                .d("NAME", "\"KScLPE7e7qEEJJwh\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"_EM_3032_XYZ_\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"n7R\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .r("IN_CONFIGURATIONS_ID", 4090L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"_EM_3201_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjY\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/ELEARNING_SITE/features/MSN")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"B\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"nIO1DaTCg\"")
                .d("NAME", "\"_EM_3199_XYZ_\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnyvvh\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"_EM_2930_XYZ_\"")
                .d("NAME", "\"jghxuX0Vk4R_T\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"_EM_3200_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"b5ecq8R0\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"OSAuYiR2CA9dg\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"Ia5\"")
                .d("NAME", "\"KScLPE7e7qEEJJwh\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"_EM_3032_XYZ_\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"n7R\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .r("IN_CONFIGURATIONS_ID", 4090L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"_EM_3201_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjY\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X/features/MSN")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1736L)
                .d("NAME", "\"T56afMbOnyQo\"")
            .and().insertInto("FEATURE", 1735L)
                .d("DESCRIPTION", "\"_EM_1213_XYZ_\"")
                .d("NAME", "\"RTz\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1741L)
                .d("NAME", "\"_EM_1214_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1740L)
                .d("NAME", "\"g26pNsVpuLpmkO\"")
            .and().insertInto("FEATURE", 1738L)
                .d("NAME", "\"isjR19t2k\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1737L)
                .r("IN_CONFIGURATIONS_ID", 1740L)
                .d("ACTIVED_FEATURES_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/h0FT8Y_cDSaV")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/h0FT8Y_cDSaV/configurations/PPK%5Dhy"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationResource_42_addConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/h0FT8Y_cDSaV/configurations/PPK%5Dhy?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("PPK]hy"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/_EM_2005_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2005_XYZ_/features/pEZ0%7DpeD"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2005_XYZ_/features/pEZ0%7DpeD"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/UIX9")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UIX9/features/pEZ0upe?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UIX9/features/pEZ0upe?EMextraParam123=42"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/eZ5RqdwGt46g?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/eZ5RqdwGt46g/features/DbaH3?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP/features/DbaH3?EMextraParam123=42"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/eZ5RqdwGt46g/configurations/v5hzHN2KLZmVJgNP/features/DbaH3"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_22_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"B\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"_EM_3786_XYZ_\"")
                .d("NAME", "\"_EM_3787_XYZ_\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnynvhu\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_2C031B0D_FFE7_4029_9799_F23F8FE1E964 START WITH 34 BELONGS_TO_TABLE\"")
                .d("NAME", "\"jghxuX0Vk4R_T\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"_EM_3681_XYZ_\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"G\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"_EM_3U8U_XYZ_\"")
                .d("NAME", "\"_EM_3092_XYZ_\"")
                .r("PRODUCT_ID", 4084L)
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"_EM_3788_XYZ_\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"CONSTRAINTS\"")
                .d("NAME", "\"_EM_3789_XYZ_\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"5yvZPsC\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"n7R\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .d("ACTIVED_FEATURES_ID", "8")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"F1WC6MFg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"_EM_3094_XYZ_\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjY\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ZuZK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=pW1vQezZbpX")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ZuZK/features/_EKc3%5E9O_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/ZuZK/features/_EKc3%5E9O_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EKc3^9O_XYZ_"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ZuZK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ZuZK/configurations/SEQUENCE_SCHEMA"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_920_XYZ_")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/ZuZK/features/_EKc3%5E9O_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/ZuZK/configurations/SEQUENCE_SCHEMA/features/_EKc3%5E9O_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationFeaturesResource_37_addFeatureToConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_23_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 5816L)
                .d("NAME", "\"_I\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5815L)
                .d("NAME", "\"gxfH9c\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 5818L)
                .d("NAME", "\"qN1Oe\"")
            .and().insertInto("FEATURE", 5817L)
                .d("DESCRIPTION", "\"w07Ke3P\"")
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_I")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_I/features/J5k1azs5PjTOUUm"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/_I/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_I")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_I/configurations/gxfH9c"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_4243_XYZ_")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_I/features/J5k1azs5PjTOUUm"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_I/configurations/gxfH9c/features/J5k1azs5PjTOUUm"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_I/configurations/gxfH9c/features/J5k1azs5PjTOUUm"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_80_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_24_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_24_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 7141L)
                .d("NAME", "\"E\"")
            .and().insertInto("FEATURE", 7140L)
                .d("DESCRIPTION", "\"wVXDIGV2P_F89r\"")
                .d("NAME", "\"pUVXe\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7143L)
                .d("NAME", "\"_8ToN\"")
            .and().insertInto("FEATURE", 7142L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"xe\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7145L)
                .d("NAME", "\"o3\"")
            .and().insertInto("FEATURE", 7144L)
                .d("DESCRIPTION", "\"Ha\"")
                .d("NAME", "\"4IcSoRMPmr\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7150L)
                .d("NAME", "\"ZTCuFxR6fa\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7149L)
                .d("NAME", "\"n\"")
            .and().insertInto("FEATURE", 7147L)
                .d("NAME", "\"795CwIt0hf\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7146L)
                .r("IN_CONFIGURATIONS_ID", 7149L)
                .d("ACTIVED_FEATURES_ID", "4")
            .and().insertInto("PRODUCT", 7155L)
                .d("NAME", "\"CVqPOMgXw\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7154L)
                .d("NAME", "\"aF\"")
            .and().insertInto("FEATURE", 7152L)
                .d("NAME", "\"JJpBssCZ9Gwr\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7151L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .d("ACTIVED_FEATURES_ID", "7")
            .and().insertInto("PRODUCT", 7160L)
                .d("NAME", "\"lIV\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7159L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT", 7158L)
                .d("NAME", "\"ImkwN3dBBz_c3\"")
            .and().insertInto("FEATURE", 7157L)
                .d("NAME", "\"dz7aZngi\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7156L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 7157L)
            .and().insertInto("PRODUCT", 7165L)
                .d("NAME", "\"E\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7164L)
                .d("NAME", "\"TyFwyZMCii5bDtER\"")
            .and().insertInto("FEATURE", 7162L)
                .d("NAME", "\"AkHef7jlId\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7161L)
                .r("IN_CONFIGURATIONS_ID", 7149L)
                .r("ACTIVED_FEATURES_ID", 7152L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/zwFiw_SVnUEGm?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/features/dZuRkOMVu7N"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=MmjEGkn3lhggsbEh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/features/dZuRkOMVu7N"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/zwFiw_SVnUEGm?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/configurations/v5hzHN2KLZmVJgNP"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/features/dZuRkOMVu7N?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/configurations/v5hzHN2KLZmVJgNP/features/dZuRkOMVu7N?EMextraParam123=42"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/zwFiw_SVnUEGm/configurations/v5hzHN2KLZmVJgNP/features/dZuRkOMVu7N"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
