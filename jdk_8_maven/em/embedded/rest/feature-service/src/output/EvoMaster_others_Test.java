import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-26T00:22:42.059+02:00[Europe/Paris]
 * <br>
 * The generated test suite contains 9 tests
 * <br>
 * Covered targets: 361
 * <br>
 * Used time: 0h 5m 3s
 * <br>
 * Needed budget for current results: 67%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("PRODUCT","CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","PRODUCT_CONFIGURATION"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"B\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"nIO1DaTCg\"")
                .d("NAME", "\"AY20D4t3oYwtd\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnynvh\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_2C031B0D_FFE7_4029_9799_F23F8FE1E964 START WITH 34 BELONGS_TO_TABLE\"")
                .d("NAME", "\"jghxuX0Vk4R_T\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"G\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"_EM_3092_XYZ_\"")
                .r("PRODUCT_ID", 4084L)
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"OSAuYiR2CA9dg\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"_EM_3093_XYZ_\"")
                .d("NAME", "\"KScLPE7e7qEEJJwh\"")
                .r("PRODUCT_ID", 4084L)
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"5yvZPsC\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"n7R\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .r("IN_CONFIGURATIONS_ID", 4090L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"F1WK6MFg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"_EM_3094_XYZ_\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjY\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_3091_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_3091_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_3091_XYZ_"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/_EM_2929_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_920_XYZ_")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/ELEARNING_SITE/features/_EM_3091_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/SEQUENCE_SCHEMA/features/_EM_3091_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"B\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"nIO1DaTCg\"")
                .d("NAME", "\"_EM_3199_XYZ_\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnyvvh\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"_EM_2930_XYZ_\"")
                .d("NAME", "\"jghxuX0Vk4R_T\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"_EM_3200_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"b5ecq8R0\"")
                .d("PRODUCT_ID", "1")
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"OSAuYiR2CA9dg\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"Ia5\"")
                .d("NAME", "\"KScLPE7e7qEEJJwh\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"_EM_3032_XYZ_\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"n7R\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .r("IN_CONFIGURATIONS_ID", 4090L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"_EM_3201_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"ZuR\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjY\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=pW1vQezZbpX")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/MSN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/MSN"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("MSN"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/ZuR/features/MSN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X/features/MSN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/UNIVERSITY_X/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/xg?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_86_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xg/features/_EM_85_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/xg/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1619L)
                .d("NAME", "\"nDvPz\"")
            .and().insertInto("FEATURE", 1618L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"f6z72\"")
                .r("PRODUCT_ID", 1619L)
            .and().insertInto("PRODUCT", 1624L)
                .d("NAME", "\"ofY2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1623L)
                .d("NAME", "\"_EM_1130_XYZ_\"")
            .and().insertInto("FEATURE", 1621L)
                .d("NAME", "\"_EM_1131_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1620L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 1629L)
                .d("NAME", "\"oqETv9QMwb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1628L)
                .d("NAME", "\"A\"")
            .and().insertInto("PRODUCT", 1627L)
                .d("NAME", "\"_EM_1132_XYZ_\"")
            .and().insertInto("FEATURE", 1626L)
                .d("NAME", "\"WuUU9A\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1625L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 1621L)
            .and().insertInto("PRODUCT", 1634L)
                .d("NAME", "\"q_Hf7Y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1633L)
                .d("NAME", "\"QkQzWu7\"")
            .and().insertInto("FEATURE", 1631L)
                .d("NAME", "\"bT0D7wzROkmCG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1630L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 1667L)
                .d("NAME", "\"_EM_1133_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1666L)
                .d("ID", "-1385488851")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"6mwL0ezWShXUE\"")
                .d("SOURCE_FEATURE_NAME", "\"rDYVyYY94a9d\"")
            .and().insertInto("PRODUCT", 1669L)
                .d("NAME", "\"_EM_1134_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1668L)
                .d("ID", "-304250801")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1671L)
                .d("NAME", "\"_EM_1135_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1670L)
                .d("ID", "526")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_1136_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"_EM_1137_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1672L)
                .d("ID", "142")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1138_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"siyTK3v\"")
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"j\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1674L)
                .d("ID", "794")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"t3A4rYAg0\"")
                .d("SOURCE_FEATURE_NAME", "\"ntNXzL3w6vJ\"")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"TS3oWens\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1676L)
                .d("ID", "967")
                .r("FOR_PRODUCT_ID", 1634L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1139_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_1140_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1678L)
                .d("ID", "4")
                .r("FOR_PRODUCT_ID", 1624L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1141_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"9cl0e8E6L4c\"")
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"W0BtI_xYM2qegtA\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1680L)
                .d("ID", "489")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1142_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"SH125aVHSbRlMc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/%5C4S")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1619L)
                .d("NAME", "\"nDvPz\"")
            .and().insertInto("FEATURE", 1618L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"f6z72\"")
                .r("PRODUCT_ID", 1619L)
            .and().insertInto("PRODUCT", 1624L)
                .d("NAME", "\"ofY2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1623L)
                .d("NAME", "\"_EM_1130_XYZ_\"")
            .and().insertInto("FEATURE", 1621L)
                .d("NAME", "\"_EM_1131_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1620L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 1629L)
                .d("NAME", "\"oqETv9QMwb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1628L)
                .d("NAME", "\"A\"")
            .and().insertInto("PRODUCT", 1627L)
                .d("NAME", "\"_EM_1132_XYZ_\"")
            .and().insertInto("FEATURE", 1626L)
                .d("NAME", "\"WuUU9A\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1625L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 1621L)
            .and().insertInto("PRODUCT", 1634L)
                .d("NAME", "\"q_Hf7Y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1633L)
                .d("NAME", "\"QkQzWu7\"")
            .and().insertInto("FEATURE", 1631L)
                .d("NAME", "\"bT0D7wzROkmCG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1630L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 1667L)
                .d("NAME", "\"_EM_1133_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1666L)
                .d("ID", "-1385488851")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"6mwL0ezWShXUE\"")
                .d("SOURCE_FEATURE_NAME", "\"rDYVyYY94a9d\"")
            .and().insertInto("PRODUCT", 1669L)
                .d("NAME", "\"_EM_1134_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1668L)
                .d("ID", "-304250801")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1671L)
                .d("NAME", "\"_EM_1135_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1670L)
                .d("ID", "526")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_1136_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"_EM_1137_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1672L)
                .d("ID", "142")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1138_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"siyTK3v\"")
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"j\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1674L)
                .d("ID", "794")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"t3A4rYAg0\"")
                .d("SOURCE_FEATURE_NAME", "\"ntNXzL3w6vJ\"")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"TS3oWens\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1676L)
                .d("ID", "967")
                .r("FOR_PRODUCT_ID", 1634L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1139_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_1140_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1678L)
                .d("ID", "4")
                .r("FOR_PRODUCT_ID", 1624L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1141_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"9cl0e8E6L4c\"")
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"W0BtI_xYM2qegtA\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1680L)
                .d("ID", "489")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1142_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"SH125aVHSbRlMc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/%5C4S/configurations/_EM_1128_XYZ_/features/_EM_1129_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1619L)
                .d("NAME", "\"nDvPz\"")
            .and().insertInto("FEATURE", 1618L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"f6z72\"")
                .r("PRODUCT_ID", 1619L)
            .and().insertInto("PRODUCT", 1624L)
                .d("NAME", "\"ofY2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1623L)
                .d("NAME", "\"_EM_1130_XYZ_\"")
            .and().insertInto("FEATURE", 1621L)
                .d("NAME", "\"_EM_1131_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1620L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 1629L)
                .d("NAME", "\"oqETv9QMwb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1628L)
                .d("NAME", "\"A\"")
            .and().insertInto("PRODUCT", 1627L)
                .d("NAME", "\"_EM_1132_XYZ_\"")
            .and().insertInto("FEATURE", 1626L)
                .d("NAME", "\"WuUU9A\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1625L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 1621L)
            .and().insertInto("PRODUCT", 1634L)
                .d("NAME", "\"q_Hf7Y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1633L)
                .d("NAME", "\"QkQzWu7\"")
            .and().insertInto("FEATURE", 1631L)
                .d("NAME", "\"bT0D7wzROkmCG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1630L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 1667L)
                .d("NAME", "\"_EM_1133_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1666L)
                .d("ID", "-1385488851")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"6mwL0ezWShXUE\"")
                .d("SOURCE_FEATURE_NAME", "\"rDYVyYY94a9d\"")
            .and().insertInto("PRODUCT", 1669L)
                .d("NAME", "\"_EM_1134_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1668L)
                .d("ID", "-304250801")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1671L)
                .d("NAME", "\"_EM_1135_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1670L)
                .d("ID", "526")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_1136_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"_EM_1137_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1672L)
                .d("ID", "142")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1138_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"siyTK3v\"")
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"j\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1674L)
                .d("ID", "794")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"t3A4rYAg0\"")
                .d("SOURCE_FEATURE_NAME", "\"ntNXzL3w6vJ\"")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"TS3oWens\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1676L)
                .d("ID", "967")
                .r("FOR_PRODUCT_ID", 1634L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1139_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_1140_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1678L)
                .d("ID", "4")
                .r("FOR_PRODUCT_ID", 1624L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1141_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"9cl0e8E6L4c\"")
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"W0BtI_xYM2qegtA\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1680L)
                .d("ID", "489")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1142_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"SH125aVHSbRlMc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/%5C4S/features/_EM_1129_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1619L)
                .d("NAME", "\"nDvPz\"")
            .and().insertInto("FEATURE", 1618L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"f6z72\"")
                .r("PRODUCT_ID", 1619L)
            .and().insertInto("PRODUCT", 1624L)
                .d("NAME", "\"ofY2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1623L)
                .d("NAME", "\"_EM_1130_XYZ_\"")
            .and().insertInto("FEATURE", 1621L)
                .d("NAME", "\"_EM_1131_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1620L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 1629L)
                .d("NAME", "\"oqETv9QMwb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1628L)
                .d("NAME", "\"A\"")
            .and().insertInto("PRODUCT", 1627L)
                .d("NAME", "\"_EM_1132_XYZ_\"")
            .and().insertInto("FEATURE", 1626L)
                .d("NAME", "\"WuUU9A\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1625L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 1621L)
            .and().insertInto("PRODUCT", 1634L)
                .d("NAME", "\"q_Hf7Y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1633L)
                .d("NAME", "\"QkQzWu7\"")
            .and().insertInto("FEATURE", 1631L)
                .d("NAME", "\"bT0D7wzROkmCG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1630L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 1667L)
                .d("NAME", "\"_EM_1133_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1666L)
                .d("ID", "-1385488851")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"6mwL0ezWShXUE\"")
                .d("SOURCE_FEATURE_NAME", "\"rDYVyYY94a9d\"")
            .and().insertInto("PRODUCT", 1669L)
                .d("NAME", "\"_EM_1134_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1668L)
                .d("ID", "-304250801")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1671L)
                .d("NAME", "\"_EM_1135_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1670L)
                .d("ID", "526")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_1136_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"_EM_1137_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1672L)
                .d("ID", "142")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1138_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"siyTK3v\"")
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"j\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1674L)
                .d("ID", "794")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"t3A4rYAg0\"")
                .d("SOURCE_FEATURE_NAME", "\"ntNXzL3w6vJ\"")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"TS3oWens\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1676L)
                .d("ID", "967")
                .r("FOR_PRODUCT_ID", 1634L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1139_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_1140_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1678L)
                .d("ID", "4")
                .r("FOR_PRODUCT_ID", 1624L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1141_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"9cl0e8E6L4c\"")
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"W0BtI_xYM2qegtA\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1680L)
                .d("ID", "489")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1142_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"SH125aVHSbRlMc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/%5C4S/configurations/_EM_1128_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1619L)
                .d("NAME", "\"nDvPz\"")
            .and().insertInto("FEATURE", 1618L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"f6z72\"")
                .r("PRODUCT_ID", 1619L)
            .and().insertInto("PRODUCT", 1624L)
                .d("NAME", "\"ofY2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1623L)
                .d("NAME", "\"_EM_1130_XYZ_\"")
            .and().insertInto("FEATURE", 1621L)
                .d("NAME", "\"_EM_1131_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1620L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "2")
            .and().insertInto("PRODUCT", 1629L)
                .d("NAME", "\"oqETv9QMwb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1628L)
                .d("NAME", "\"A\"")
            .and().insertInto("PRODUCT", 1627L)
                .d("NAME", "\"_EM_1132_XYZ_\"")
            .and().insertInto("FEATURE", 1626L)
                .d("NAME", "\"WuUU9A\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1625L)
                .d("IN_CONFIGURATIONS_ID", "1")
                .r("ACTIVED_FEATURES_ID", 1621L)
            .and().insertInto("PRODUCT", 1634L)
                .d("NAME", "\"q_Hf7Y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1633L)
                .d("NAME", "\"QkQzWu7\"")
            .and().insertInto("FEATURE", 1631L)
                .d("NAME", "\"bT0D7wzROkmCG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1630L)
                .r("IN_CONFIGURATIONS_ID", 1623L)
                .d("ACTIVED_FEATURES_ID", "9")
            .and().insertInto("PRODUCT", 1667L)
                .d("NAME", "\"_EM_1133_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1666L)
                .d("ID", "-1385488851")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"6mwL0ezWShXUE\"")
                .d("SOURCE_FEATURE_NAME", "\"rDYVyYY94a9d\"")
            .and().insertInto("PRODUCT", 1669L)
                .d("NAME", "\"_EM_1134_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1668L)
                .d("ID", "-304250801")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1671L)
                .d("NAME", "\"_EM_1135_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1670L)
                .d("ID", "526")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_1136_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"_EM_1137_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1672L)
                .d("ID", "142")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1138_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"siyTK3v\"")
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"j\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1674L)
                .d("ID", "794")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"t3A4rYAg0\"")
                .d("SOURCE_FEATURE_NAME", "\"ntNXzL3w6vJ\"")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"TS3oWens\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1676L)
                .d("ID", "967")
                .r("FOR_PRODUCT_ID", 1634L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1139_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_1140_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1678L)
                .d("ID", "4")
                .r("FOR_PRODUCT_ID", 1624L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1141_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"9cl0e8E6L4c\"")
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"W0BtI_xYM2qegtA\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1680L)
                .d("ID", "489")
                .r("FOR_PRODUCT_ID", 1619L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_1142_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"SH125aVHSbRlMc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/%5C4S/configurations/_EM_1128_XYZ_/features/_EM_1129_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 4078L)
                .d("NAME", "\"_EM_3243_XYZ_\"")
            .and().insertInto("FEATURE", 4077L)
                .d("DESCRIPTION", "\"nIW1DaTCg\"")
                .d("NAME", "\"AY20D0t3oYwtd\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4080L)
                .d("NAME", "\"gfCtKgnynvh\"")
            .and().insertInto("FEATURE", 4079L)
                .d("DESCRIPTION", "\"CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_2C031B0D_FFE7_4029_9799_F23F8FE1E964 START WITH 34 BELONGS_TO_TABLE\"")
                .d("NAME", "\"_EM_3244_XYZ_\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4082L)
                .d("NAME", "\"1531641\"")
            .and().insertInto("FEATURE", 4081L)
                .d("DESCRIPTION", "\"IFPfEg_q6MI75v\"")
                .d("NAME", "\"_EM_3245_XYZ_\"")
                .r("PRODUCT_ID", 4082L)
            .and().insertInto("PRODUCT", 4084L)
                .d("NAME", "\"19\"")
            .and().insertInto("FEATURE", 4083L)
                .d("DESCRIPTION", "\"_EM_3246_XYZ_\"")
                .d("NAME", "\"_EM_3232_XYZ_\"")
                .r("PRODUCT_ID", 4084L)
            .and().insertInto("PRODUCT", 4086L)
                .d("NAME", "\"_EM_3233_XYZ_\"")
            .and().insertInto("FEATURE", 4085L)
                .d("DESCRIPTION", "\"_EM_3093_XYZ_\"")
                .d("NAME", "\"KScLPE7e7qEEJJwh\"")
                .r("PRODUCT_ID", 4078L)
            .and().insertInto("PRODUCT", 4091L)
                .d("NAME", "\"U5zyEo0cgVdLUUt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4090L)
                .d("NAME", "\"5~vZPsC\"")
            .and().insertInto("PRODUCT", 4089L)
                .d("NAME", "\"_EM_3234_XYZ_\"")
            .and().insertInto("FEATURE", 4088L)
                .d("NAME", "\"cJy\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 4087L)
                .r("IN_CONFIGURATIONS_ID", 4090L)
                .d("ACTIVED_FEATURES_ID", "3")
            .and().insertInto("PRODUCT", 4096L)
                .d("NAME", "\"_EM_3235_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4095L)
                .d("NAME", "\"_EM_3094_XYZ_\"")
            .and().insertInto("PRODUCT", 4094L)
                .d("NAME", "\"OnPjYq\"")
            .and().insertInto("FEATURE", 4093L)
                .d("NAME", "\"1517133\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/B/features/mAILING_%5CE(l%7CL)(i%7CI)(s%7CS)(t%7CT))$%7C%5E((r%7CR)(e%7CE)(d%7CD)(e%7CE)(e%7CE)(m%7CM)%5CQ_%5CE(c%7CC)(o%7CO)(d%7CD)(e%7CE)(s%7CS))$%7C%5E((c%7CC)(r%7CR)(e%7CE)(d%7CD)(i%7CI)(t%7CT)%5CQ_%5CE(c%7CC)(a%7CA)(r%7CR)(d%7CD)%5CQ_%5CE(p%7CP)(a%7CA)(y%7CY)(m%7CM)(e%7CE)(n%7CN)(t%7CT))$%7C%5E((p%7CP)(a%7CA)(y%7CY)(p%7CP)(a%7CA)(l%7CL)%5CQ_%5CE(p%7CP)(a%7CA)(y%7CY)(m%7CM)(e%7CE)(n%7CN)(t%7CT))$%7C%5E((a%7CA)(y%7CY)%5CQ20%5CE(d%7CD)%5CQ4%5CE(t%7CT)%5CQ3%5CE(o%7CO)(y%7CY)(w%7CW)(t%7CT)(d%7CD))$%7C%5E((c%7CC)(h%7CH)(a%7CA)(t%7CT))$%7C%5E((c%7CC)(o%7CO)(u%7CU)(r%7CR)(s%7CS)(e%7CE)%5CQ_%5CE(s%7CS)(e%7CE)(l%7CL)(l%7CL)(i%7CI)(n%7CN)(g%7CG))$%7C%5E((v%7CV)(i%7CI)(d%7CD)(e%7CE)(o%7CO)%5CQ_%5CE(l%7CL)(e%7CE)(s%7CS)(s%7CS)(o%7CO)(n%7CN)(s%7CS))$%7C%5E((o%7CO)(n%7CN)(l%7CL)(i%7CI)(n%7CN)(e%7CE)%5CQ_%5CE(f%7CF)(o%7CO)(r%7CR)(u%7CU)(m%7CM))$%7C%5E((i%7CI)(n%7CN)%5CQ_%5CE(t%7CT)(r%7CR)(i%7CI)(a%7CA)(l%7CL)%5CQ_pERIOD")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
